---
subcategory: "Lambda"
layout: "aws"
page_title: "AWS: aws_lambda_code_signing_config"
description: |-
  Provides details about an AWS Lambda Code Signing Config.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_lambda_code_signing_config

Provides details about an AWS Lambda Code Signing Config. Use this data source to retrieve information about an existing code signing configuration for Lambda functions to ensure code integrity and authenticity.

For information about Lambda code signing configurations and how to use them, see [configuring code signing for Lambda functions](https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html).

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformOutput, Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_lambda_code_signing_config import DataAwsLambdaCodeSigningConfig
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = DataAwsLambdaCodeSigningConfig(self, "example",
            arn="arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-0f6c334abcdea4d8b"
        )
        TerraformOutput(self, "config_details",
            value=[{
                "config_id": example.config_id,
                "description": example.description,
                "policy": Fn.lookup_nested(example.policies, ["0", "untrusted_artifact_on_deployment"
                ])
            }
            ]
        )
```

### Use in Lambda Function

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_lambda_code_signing_config import DataAwsLambdaCodeSigningConfig
from imports.aws.lambda_function import LambdaFunction
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        security_config = DataAwsLambdaCodeSigningConfig(self, "security_config",
            arn=code_signing_config_arn.string_value
        )
        LambdaFunction(self, "example",
            code_signing_config_arn=Token.as_string(security_config.arn),
            filename="function.zip",
            function_name="secure-function",
            handler="index.handler",
            role=lambda_role.arn,
            runtime="nodejs20.x",
            tags={
                "Environment": "production",
                "Security": "code-signed"
            }
        )
```

### Validate Signing Profiles

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, TerraformOutput, conditional, Token, TerraformCount, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_lambda_code_signing_config import DataAwsLambdaCodeSigningConfig
from imports.aws.lambda_function import LambdaFunction
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        required_profile = "arn:aws:signer:us-west-2:123456789012:/signing-profiles/MyProfile"
        example = DataAwsLambdaCodeSigningConfig(self, "example",
            arn=code_signing_config_arn.string_value
        )
        allowed_profiles = Fn.lookup_nested(example.allowed_publishers, ["0", "signing_profile_version_arns"
        ])
        profile_allowed = Fn.contains(allowed_profiles, required_profile)
        TerraformOutput(self, "deployment_status",
            value=[{
                "function_created": profile_allowed,
                "message": conditional(profile_allowed, "Function deployed with valid signing profile", "Deployment blocked - signing profile not allowed"),
                "profile_allowed": profile_allowed
            }
            ]
        )
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        conditional_count = TerraformCount.of(
            Token.as_number(conditional(profile_allowed, 1, 0)))
        LambdaFunction(self, "conditional",
            code_signing_config_arn=Token.as_string(example.arn),
            filename="function.zip",
            function_name="conditional-function",
            handler="index.handler",
            role=lambda_role.arn,
            runtime="python3.12",
            count=conditional_count
        )
```

### Multi-Environment Configuration

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Op, TerraformOutput, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_lambda_code_signing_config import DataAwsLambdaCodeSigningConfig
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        dev = DataAwsLambdaCodeSigningConfig(self, "dev",
            arn="arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-dev-456"
        )
        prod = DataAwsLambdaCodeSigningConfig(self, "prod",
            arn="arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-prod-123"
        )
        dev_policy = Fn.lookup_nested(dev.policies, ["0", "untrusted_artifact_on_deployment"
        ])
        prod_policy = Fn.lookup_nested(prod.policies, ["0", "untrusted_artifact_on_deployment"
        ])
        config_comparison = {
            "dev_enforcement": dev_policy,
            "policies_match": Op.eq(prod_policy, dev_policy),
            "prod_enforcement": prod_policy
        }
        TerraformOutput(self, "environment_comparison",
            value=config_comparison
        )
```

## Argument Reference

The following arguments are required:

* `arn` - (Required) ARN of the code signing configuration.

The following arguments are optional:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `allowed_publishers` - List of allowed publishers as signing profiles for this code signing configuration. [See below](#allowed_publishers-attribute-reference).
* `config_id` - Unique identifier for the code signing configuration.
* `description` - Code signing configuration description.
* `last_modified` - Date and time that the code signing configuration was last modified.
* `policies` - List of code signing policies that control the validation failure action for signature mismatch or expiry. [See below](#policies-attribute-reference).

### allowed_publishers Attribute Reference

* `signing_profile_version_arns` - Set of ARNs for each of the signing profiles. A signing profile defines a trusted user who can sign a code package.

### policies Attribute Reference

* `untrusted_artifact_on_deployment` - Code signing configuration policy for deployment validation failure. Valid values: `Warn`, `Enforce`.

<!-- cache-key: cdktf-0.20.8 input-22639ca8a17fe7ab883345a736f44ade1f893b06c8d132dac7828eb040890d77 -->