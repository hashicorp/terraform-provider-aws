---
subcategory: "Organizations"
layout: "aws"
page_title: "AWS: aws_organizations_policies"
description: |-
  Terraform data source for managing an AWS Organizations Policies.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_organizations_policies

Terraform data source for managing an AWS Organizations Policies.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformIterator, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_organizations_policies import DataAwsOrganizationsPolicies
from imports.aws.data_aws_organizations_policy import DataAwsOrganizationsPolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = DataAwsOrganizationsPolicies(self, "example",
            filter="SERVICE_CONTROL_POLICY"
        )
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        example_for_each_iterator = TerraformIterator.from_list(
            Token.as_any(Fn.toset(example.ids)))
        data_aws_organizations_policy_example = DataAwsOrganizationsPolicy(self, "example_1",
            policy_id=Token.as_string(example_for_each_iterator.value),
            for_each=example_for_each_iterator
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_organizations_policy_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `filter` - (Required) The type of policies to be returned in the response. Valid values are `AISERVICES_OPT_OUT_POLICY | BACKUP_POLICY | RESOURCE_CONTROL_POLICY | SERVICE_CONTROL_POLICY | TAG_POLICY`

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `ids` - List of all the policy ids found.

<!-- cache-key: cdktf-0.20.8 input-3ab4270f54c1c17fbe383d62aa3e9fdfcfc2557743daf88d275029dff3b153c9 -->