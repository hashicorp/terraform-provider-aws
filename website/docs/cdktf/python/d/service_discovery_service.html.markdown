---
subcategory: "Cloud Map"
layout: "aws"
page_title: "AWS: aws_service_discovery_service"
description: |-
  Retrieves information about a Service Discovery Service
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_service_discovery_service

Retrieves information about a Service Discovery Service.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_service_discovery_service import DataAwsServiceDiscoveryService
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DataAwsServiceDiscoveryService(self, "test",
            name="example",
            namespace_id="NAMESPACE_ID_VALUE"
        )
```

## Argument Reference

This data source supports the following arguments:

* `name` - (Required) Name of the service.
* `namespace_id` - (Required) ID of the namespace that the service belongs to.

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `id` - ID of the service.
* `arn` - ARN of the service.
* `description` - Description of the service.
* `dns_config` - Complex type that contains information about the resource record sets that you want Amazon Route 53 to create when you register an instance. See [`dns_config` Block](#dns_config-block) for details.
* `health_check_config` - Complex type that contains settings for an optional health check. Only for Public DNS namespaces. See [`health_check_config` Block](#health_check_config-block) for details.
* `health_check_custom_config` -  A complex type that contains settings for ECS managed health checks. See [`health_check_custom_config` Block](#health_check_custom_config-block) for details.
* `tags` - Map of tags to assign to the service. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `tags_all` - (**Deprecated**) Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

### `dns_config` Block

The `dns_config` configuration block supports the following arguments:

* `namespace_id` - ID of the namespace to use for DNS configuration.
* `dns_records` - An array that contains one DnsRecord object for each resource record set. See [`dns_records` Block](#dns_records-block) for details.
* `routing_policy` - Routing policy that you want to apply to all records that Route 53 creates when you register an instance and specify the service. Valid Values: MULTIVALUE, WEIGHTED

#### `dns_records` Block

The `dns_records` configuration block supports the following arguments:

* `ttl` - Amount of time, in seconds, that you want DNS resolvers to cache the settings for this resource record set.
* `type` - Type of the resource, which indicates the value that Amazon Route 53 returns in response to DNS queries. Valid Values: A, AAAA, SRV, CNAME

### `health_check_config` Block

The `health_check_config` configuration block supports the following arguments:

* `failure_threshold` - Number of consecutive health checks. Maximum value of 10.
* `resource_path` - Path that you want Route 53 to request when performing health checks. Route 53 automatically adds the DNS name for the service. If you don't specify a value, the default value is /.
* `type` -  The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy. Valid Values: HTTP, HTTPS, TCP

### `health_check_custom_config` Block

The `health_check_custom_config` configuration block supports the following arguments:

* `failure_threshold` -  The number of 30-second intervals that you want service discovery to wait before it changes the health status of a service instance.  Maximum value of 10.

<!-- cache-key: cdktf-0.20.1 input-ca4c3a8f65675cfbb78530e61a0b943f6407f2807372bf295786f7f517fe0f6e -->