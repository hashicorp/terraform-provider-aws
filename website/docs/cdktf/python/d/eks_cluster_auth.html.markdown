---
subcategory: "EKS (Elastic Kubernetes)"
layout: "aws"
page_title: "AWS: aws_eks_cluster_auth"
description: |-
  Get an authentication token to communicate with an EKS Cluster
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_eks_cluster_auth

Get an authentication token to communicate with an EKS cluster.

Uses IAM credentials from the AWS provider to generate a temporary token that is compatible with
[AWS IAM Authenticator](https://github.com/kubernetes-sigs/aws-iam-authenticator) authentication.
This can be used to authenticate to an EKS cluster or to a cluster that has the AWS IAM Authenticator
server configured.

~> **NOTE:** Dynamically configuring a Terraform Provider via data sources currently has implications on [resource import support](https://github.com/hashicorp/terraform/issues/13018) on Terraform `<1.3.0`.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_eks_cluster import DataAwsEksCluster
from imports.aws.data_aws_eks_cluster_auth import DataAwsEksClusterAuth
from imports.kubernetes.provider import KubernetesProvider
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: kubernetes.
        #     For a more precise conversion please use the --provider flag in convert.
        example = DataAwsEksCluster(self, "example",
            name="example"
        )
        data_aws_eks_cluster_auth_example = DataAwsEksClusterAuth(self, "example_1",
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_eks_cluster_auth_example.override_logical_id("example")
        KubernetesProvider(self, "kubernetes",
            cluster_ca_certificate=Fn.base64decode(
                Token.as_string(
                    Fn.lookup_nested(example.certificate_authority, ["0", "data"]))),
            host=example.endpoint,
            token=data_aws_eks_cluster_auth_example.token
        )
```

## Argument Reference

* `name` - (Required) Name of the cluster

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `id` - Name of the cluster.
* `token` - Token to use to authenticate with the cluster.

<!-- cache-key: cdktf-0.20.8 input-45d83dddba9412e716f03bde08f7185de087e8a46407d442260f7b0e6e29f02a -->