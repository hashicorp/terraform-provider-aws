---
subcategory: "Lambda"
layout: "aws"
page_title: "AWS: aws_lambda_layer_version"
description: |-
  Provides details about an AWS Lambda Layer Version.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_lambda_layer_version

Provides details about an AWS Lambda Layer Version. Use this data source to retrieve information about a specific layer version or find the latest version compatible with your runtime and architecture requirements.

## Example Usage

### Get Latest Layer Version

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_lambda_layer_version import DataAwsLambdaLayerVersion
from imports.aws.lambda_function import LambdaFunction
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = DataAwsLambdaLayerVersion(self, "example",
            layer_name="my-shared-utilities"
        )
        aws_lambda_function_example = LambdaFunction(self, "example_1",
            filename="function.zip",
            function_name="example_function",
            handler="index.handler",
            layers=[Token.as_string(example.arn)],
            role=lambda_role.arn,
            runtime="nodejs20.x"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_lambda_function_example.override_logical_id("example")
```

### Get Specific Layer Version

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformOutput, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_lambda_layer_version import DataAwsLambdaLayerVersion
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = DataAwsLambdaLayerVersion(self, "example",
            layer_name="production-utilities",
            version=5
        )
        TerraformOutput(self, "layer_info",
            value=[{
                "arn": example.arn,
                "description": example.description,
                "version": example.version
            }
            ]
        )
```

### Get Latest Compatible Layer Version

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_lambda_layer_version import DataAwsLambdaLayerVersion
from imports.aws.lambda_function import LambdaFunction
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        arm_layer = DataAwsLambdaLayerVersion(self, "arm_layer",
            compatible_architecture="arm64",
            layer_name="optimized-libraries"
        )
        python_layer = DataAwsLambdaLayerVersion(self, "python_layer",
            compatible_runtime="python3.12",
            layer_name="python-dependencies"
        )
        LambdaFunction(self, "example",
            architectures=["arm64"],
            filename="function.zip",
            function_name="multi_layer_function",
            handler="app.handler",
            layers=[Token.as_string(python_layer.arn), Token.as_string(arm_layer.arn)],
            role=lambda_role.arn,
            runtime="python3.12"
        )
```

### Compare Layer Versions

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Op, TerraformOutput, conditional, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_lambda_layer_version import DataAwsLambdaLayerVersion
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        latest = DataAwsLambdaLayerVersion(self, "latest",
            layer_name="shared-layer"
        )
        stable = DataAwsLambdaLayerVersion(self, "stable",
            layer_name="shared-layer",
            version=3
        )
        use_latest_layer = Op.gt(latest.version, 5)
        TerraformOutput(self, "selected_layer_version",
            value=conditional(use_latest_layer, latest.version, stable.version)
        )
```

## Argument Reference

The following arguments are required:

* `layer_name` - (Required) Name of the Lambda layer.

The following arguments are optional:

* `compatible_architecture` - (Optional) Specific architecture the layer version must support. Conflicts with `version`. If specified, the latest available layer version supporting the provided architecture will be used.
* `compatible_runtime` - (Optional) Specific runtime the layer version must support. Conflicts with `version`. If specified, the latest available layer version supporting the provided runtime will be used.
* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `version` - (Optional) Specific layer version. Conflicts with `compatible_runtime` and `compatible_architecture`. If omitted, the latest available layer version will be used.

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `arn` - ARN of the Lambda Layer with version.
* `code_sha256` - Base64-encoded representation of raw SHA-256 sum of the zip file.
* `compatible_architectures` - List of [Architectures](https://docs.aws.amazon.com/lambda/latest/dg/API_GetLayerVersion.html#SSS-GetLayerVersion-response-CompatibleArchitectures) the specific Lambda Layer version is compatible with.
* `compatible_runtimes` - List of [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_GetLayerVersion.html#SSS-GetLayerVersion-response-CompatibleRuntimes) the specific Lambda Layer version is compatible with.
* `created_date` - Date this resource was created.
* `description` - Description of the specific Lambda Layer version.
* `layer_arn` - ARN of the Lambda Layer without version.
* `license_info` - License info associated with the specific Lambda Layer version.
* `signing_job_arn` - ARN of a signing job.
* `signing_profile_version_arn` - ARN for a signing profile version.
* `source_code_hash` - (**Deprecated** use `code_sha256` instead) Base64-encoded representation of raw SHA-256 sum of the zip file.
* `source_code_size` - Size in bytes of the function .zip file.
* `version` - Lambda Layer version.

<!-- cache-key: cdktf-0.20.8 input-e07374b20dbbcf1fa3dd31a1a0e974b3636c36b4595dcbf5dca3b69d6a778b95 -->