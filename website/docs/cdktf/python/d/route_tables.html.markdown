---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_route_tables"
description: |-
    Get information on Amazon route tables.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_route_tables

This resource can be useful for getting back a list of route table ids to be referenced elsewhere.

## Example Usage

The following adds a route for a particular cidr block to every (private
kops) route table in a specified vpc to use a particular vpc peering
connection.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformCount, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_route_tables import DataAwsRouteTables
from imports.aws.route import Route
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        rts = DataAwsRouteTables(self, "rts",
            filter=[DataAwsRouteTablesFilter(
                name="tag:kubernetes.io/kops/role",
                values=["private*"]
            )
            ],
            vpc_id=vpc_id.string_value
        )
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        r_count = TerraformCount.of(Token.as_number(Fn.length_of(rts.ids)))
        Route(self, "r",
            destination_cidr_block="10.0.0.0/22",
            route_table_id=Token.as_string(
                Fn.lookup_nested(Fn.tolist(rts.ids), [r_count.index])),
            vpc_peering_connection_id="pcx-0e9a7a9ecd137dc54",
            count=r_count
        )
```

## Argument Reference

* `filter` - (Optional) Custom filter block as described below.

* `vpc_id` - (Optional) VPC ID that you want to filter from.

* `tags` - (Optional) Map of tags, each pair of which must exactly match
  a pair on the desired route tables.

More complex filters can be expressed using one or more `filter` sub-blocks,
which take the following arguments:

* `name` - (Required) Name of the field to filter by, as defined by
  [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeRouteTables.html).

* `values` - (Required) Set of values that are accepted for the given field.
  A Route Table will be selected if any one of the given values matches.

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `id` - AWS Region.
* `ids` - List of all the route table ids found.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `read` - (Default `20m`)

<!-- cache-key: cdktf-0.20.8 input-07bd888bd13dbd8777e5631c5b36ff641fbc5fd5fb51f5784ae46abc60f9a930 -->