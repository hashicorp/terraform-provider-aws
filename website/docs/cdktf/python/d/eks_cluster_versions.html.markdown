---
subcategory: "EKS (Elastic Kubernetes)"
layout: "aws"
page_title: "AWS: aws_eks_cluster_versions"
description: |-
  Terraform data source for managing AWS EKS (Elastic Kubernetes) Cluster Versions.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_eks_cluster_versions

Terraform data source for managing AWS EKS (Elastic Kubernetes) Cluster Versions.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformOutput, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_eks_cluster_versions import DataAwsEksClusterVersions
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = DataAwsEksClusterVersions(self, "example")
        TerraformOutput(self, "eks_cluster_version_filtered",
            value="${[ for version in ${" + example.cluster_versions + "} : version if version.cluster_version == \"1.33\"]}"
        )
        TerraformOutput(self, "eks_cluster_version_list",
            value="${[ for version in ${" + example.cluster_versions + "} : version.cluster_version]}"
        )
        TerraformOutput(self, "eks_cluster_versions",
            value=example.cluster_versions
        )
```

### Filter by Cluster Type

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_eks_cluster_versions import DataAwsEksClusterVersions
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DataAwsEksClusterVersions(self, "example",
            cluster_type="eks"
        )
```

### Filter by Version Status

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_eks_cluster_versions import DataAwsEksClusterVersions
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DataAwsEksClusterVersions(self, "example",
            version_status="STANDARD_SUPPORT"
        )
```

## Argument Reference

The following arguments are optional:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `cluster_type` - (Optional) Type of clusters to filter by.
Currently, the only valid value is `eks`.
* `default_only` - (Optional) Whether to show only the default versions of Kubernetes supported by EKS.
* `include_all` - (Optional) Whether to include all kubernetes versions in the response.
* `version_status` - (Optional) Status of the EKS cluster versions to list.
Valid values are `STANDARD_SUPPORT` or `UNSUPPORTED` or `EXTENDED_SUPPORT`.

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `cluster_versions` - A list of Kubernetes version information.
    * `cluster_type` - Type of cluster that the version belongs to.
    * `cluster_version` - Kubernetes version supported by EKS.
    * `default_platform_version` - Default eks platform version for the cluster version.
    * `default_version` - Default Kubernetes version for the cluster version.
    * `end_of_extended_support_date` - End of extended support date for the cluster version.
    * `end_of_standard_support_date` - End of standard support date for the cluster version.
    * `kubernetes_patch_version` - Kubernetes patch version for the cluster version.
    * `release_date` - Release date of the cluster version.
    * `version_status` - Status of the EKS cluster version.

<!-- cache-key: cdktf-0.20.8 input-f80873e7873c6e0db394774ea46147811a8733f9e784ba0749e57a8a0afe1889 -->