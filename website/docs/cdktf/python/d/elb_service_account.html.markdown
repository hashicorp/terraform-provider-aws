---
subcategory: "ELB Classic"
layout: "aws"
page_title: "AWS: aws_elb_service_account"
description: |-
  Get AWS Elastic Load Balancing Service Account
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_elb_service_account

Use this data source to get the Account ID of the [AWS Elastic Load Balancing Service Account](http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-access-logs.html#attach-bucket-policy)
in a given region for the purpose of permitting in S3 bucket policy.

~> **Note:** For AWS Regions opened since Jakarta (`ap-southeast-3`) in December 2021, AWS [documents that](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-access-logs.html#attach-bucket-policy) a [service principal name](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#principal-services) should be used instead of an AWS account ID in any relevant IAM policy.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_elb_service_account import DataAwsElbServiceAccount
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.elb import Elb
from imports.aws.s3_bucket import S3Bucket
from imports.aws.s3_bucket_acl import S3BucketAcl
from imports.aws.s3_bucket_policy import S3BucketPolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        elb_logs = S3Bucket(self, "elb_logs",
            bucket="my-elb-tf-test-bucket"
        )
        S3BucketAcl(self, "elb_logs_acl",
            acl="private",
            bucket=elb_logs.id
        )
        main = DataAwsElbServiceAccount(self, "main")
        allow_elb_logging = DataAwsIamPolicyDocument(self, "allow_elb_logging",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["s3:PutObject"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=[Token.as_string(main.arn)],
                    type="AWS"
                )
                ],
                resources=["${" + elb_logs.arn + "}/AWSLogs/*"]
            )
            ]
        )
        Elb(self, "bar",
            access_logs=ElbAccessLogs(
                bucket=elb_logs.id,
                interval=5
            ),
            availability_zones=["us-west-2a"],
            listener=[ElbListener(
                instance_port=8000,
                instance_protocol="http",
                lb_port=80,
                lb_protocol="http"
            )
            ],
            name="my-foobar-terraform-elb"
        )
        aws_s3_bucket_policy_allow_elb_logging = S3BucketPolicy(self, "allow_elb_logging_5",
            bucket=elb_logs.id,
            policy=Token.as_string(allow_elb_logging.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_policy_allow_elb_logging.override_logical_id("allow_elb_logging")
```

## Argument Reference

* `region` - (Optional) Name of the region whose AWS ELB account ID is desired.
  Defaults to the region from the AWS provider configuration.

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `id` - ID of the AWS ELB service account in the selected region.
* `arn` - ARN of the AWS ELB service account in the selected region.

<!-- cache-key: cdktf-0.20.8 input-5c1a0a2f00d960e1eac9847050597712fa9715a5b915ce4e9af9ffb2813ec3ab -->