---
subcategory: "CloudTrail"
layout: "aws"
page_title: "AWS: aws_cloudtrail_service_account"
description: |-
  Get AWS CloudTrail Service Account ID for storing trail data in S3.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_cloudtrail_service_account

Use this data source to get the Account ID of the [AWS CloudTrail Service Account](http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-supported-regions.html)
in a given region for the purpose of allowing CloudTrail to store trail data in S3.

~> **Note:** AWS documentation [states that](https://docs.aws.amazon.com/awscloudtrail/latest/userguide/create-s3-bucket-policy-for-cloudtrail.html#troubleshooting-s3-bucket-policy) a [service principal name](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#principal-services) should be used instead of an AWS account ID in any relevant IAM policy.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_cloudtrail_service_account import DataAwsCloudtrailServiceAccount
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.s3_bucket import S3Bucket
from imports.aws.s3_bucket_policy import S3BucketPolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        bucket = S3Bucket(self, "bucket",
            bucket="tf-cloudtrail-logging-test-bucket",
            force_destroy=True
        )
        main = DataAwsCloudtrailServiceAccount(self, "main")
        allow_cloudtrail_logging = DataAwsIamPolicyDocument(self, "allow_cloudtrail_logging",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["s3:PutObject"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=[Token.as_string(main.arn)],
                    type="AWS"
                )
                ],
                resources=["${" + bucket.arn + "}/*"],
                sid="Put bucket policy needed for trails"
            ), DataAwsIamPolicyDocumentStatement(
                actions=["s3:GetBucketAcl"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=[Token.as_string(main.arn)],
                    type="AWS"
                )
                ],
                resources=[bucket.arn],
                sid="Get bucket policy needed for trails"
            )
            ]
        )
        aws_s3_bucket_policy_allow_cloudtrail_logging = S3BucketPolicy(self, "allow_cloudtrail_logging_3",
            bucket=bucket.id,
            policy=Token.as_string(allow_cloudtrail_logging.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_policy_allow_cloudtrail_logging.override_logical_id("allow_cloudtrail_logging")
```

## Argument Reference

* `region` - (Optional) Name of the region whose AWS CloudTrail account ID is desired.
Defaults to the region from the AWS provider configuration.

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `id` - ID of the AWS CloudTrail service account in the selected region.
* `arn` - ARN of the AWS CloudTrail service account in the selected region.

<!-- cache-key: cdktf-0.20.8 input-3998e4f635a042ba272505edd7920f0a7d81b9494779e6ebad66cb92fc74ee17 -->