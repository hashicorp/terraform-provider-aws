---
subcategory: "Lambda"
layout: "aws"
page_title: "AWS: aws_lambda_function"
description: |-
  Provides details about an AWS Lambda Function.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_lambda_function

Provides details about an AWS Lambda Function. Use this data source to obtain information about an existing Lambda function for use in other resources or as a reference for function configurations.

~> **Note:** This data source returns information about the latest version or alias specified by the `qualifier`. If no `qualifier` is provided, it returns information about the most recent published version, or `$LATEST` if no published version exists.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformOutput, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_lambda_function import DataAwsLambdaFunction
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = DataAwsLambdaFunction(self, "example",
            function_name="my-lambda-function"
        )
        TerraformOutput(self, "function_arn",
            value=example.arn
        )
```

### Using Function Alias

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.api_gateway_integration import ApiGatewayIntegration
from imports.aws.data_aws_lambda_function import DataAwsLambdaFunction
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = DataAwsLambdaFunction(self, "example",
            function_name="api-handler",
            qualifier="production"
        )
        aws_api_gateway_integration_example = ApiGatewayIntegration(self, "example_1",
            http_method=Token.as_string(aws_api_gateway_method_example.http_method),
            integration_http_method="POST",
            resource_id=Token.as_string(aws_api_gateway_resource_example.id),
            rest_api_id=Token.as_string(aws_api_gateway_rest_api_example.id),
            type="AWS_PROXY",
            uri=Token.as_string(example.invoke_arn)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_api_gateway_integration_example.override_logical_id("example")
```

### Function Configuration Reference

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_lambda_function import DataAwsLambdaFunction
from imports.aws.lambda_function import LambdaFunction
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        reference = DataAwsLambdaFunction(self, "reference",
            function_name="existing-function"
        )
        LambdaFunction(self, "example",
            architectures=Token.as_list(reference.architectures),
            environment=LambdaFunctionEnvironment(
                variables=Token.as_string_map(
                    Fn.lookup_nested(reference.environment, ["0", "variables"]))
            ),
            filename="new-function.zip",
            function_name="new-function",
            handler=Token.as_string(reference.handler),
            memory_size=Token.as_number(reference.memory_size),
            role=Token.as_string(reference.role),
            runtime=Token.as_string(reference.runtime),
            timeout=Token.as_number(reference.timeout),
            vpc_config=LambdaFunctionVpcConfig(
                security_group_ids=Token.as_list(
                    Fn.lookup_nested(reference.vpc_config, ["0", "security_group_ids"])),
                subnet_ids=Token.as_list(
                    Fn.lookup_nested(reference.vpc_config, ["0", "subnet_ids"]))
            )
        )
```

### Function Version Management

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformOutput, Op, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_lambda_function import DataAwsLambdaFunction
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        latest = DataAwsLambdaFunction(self, "latest",
            function_name="my-function",
            qualifier="$LATEST"
        )
        version = DataAwsLambdaFunction(self, "version",
            function_name="my-function",
            qualifier="3"
        )
        TerraformOutput(self, "version_comparison",
            value=[{
                "code_difference": Op.neq(version.code_sha256, latest.code_sha256),
                "latest_version": latest.version,
                "specific_version": version.version
            }
            ]
        )
```

## Argument Reference

The following arguments are required:

* `function_name` - (Required) Name of the Lambda function.

The following arguments are optional:

* `qualifier` - (Optional) Alias name or version number of the Lambda function. E.g., `$LATEST`, `my-alias`, or `1`. When not included: the data source resolves to the most recent published version; if no published version exists: it resolves to the most recent unpublished version.
* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `architectures` - Instruction set architecture for the Lambda function.
* `arn` - Unqualified (no `:QUALIFIER` or `:VERSION` suffix) ARN identifying your Lambda Function. See also `qualified_arn`.
* `code_sha256` - Base64-encoded representation of raw SHA-256 sum of the zip file.
* `code_signing_config_arn` - ARN for a Code Signing Configuration.
* `dead_letter_config` - Configuration for the function's dead letter queue. [See below](#dead_letter_config-attribute-reference).
* `description` - Description of what your Lambda Function does.
* `environment` - Lambda environment's configuration settings. [See below](#environment-attribute-reference).
* `ephemeral_storage` - Amount of ephemeral storage (`/tmp`) allocated for the Lambda Function. [See below](#ephemeral_storage-attribute-reference).
* `file_system_config` - Connection settings for an Amazon EFS file system. [See below](#file_system_config-attribute-reference).
* `handler` - Function entrypoint in your code.
* `image_uri` - URI of the container image.
* `invoke_arn` - ARN to be used for invoking Lambda Function from API Gateway. **Note:** Starting with `v4.51.0` of the provider, this will not include the qualifier.
* `kms_key_arn` - ARN for the KMS encryption key.
* `last_modified` - Date this resource was last modified.
* `layers` - List of Lambda Layer ARNs attached to your Lambda Function.
* `logging_config` - Advanced logging settings. [See below](#logging_config-attribute-reference).
* `memory_size` - Amount of memory in MB your Lambda Function can use at runtime.
* `qualified_arn` - Qualified (`:QUALIFIER` or `:VERSION` suffix) ARN identifying your Lambda Function. See also `arn`.
* `qualified_invoke_arn` - Qualified (`:QUALIFIER` or `:VERSION` suffix) ARN to be used for invoking Lambda Function from API Gateway. See also `invoke_arn`.
* `reserved_concurrent_executions` - Amount of reserved concurrent executions for this Lambda function or `-1` if unreserved.
* `role` - IAM role attached to the Lambda Function.
* `runtime` - Runtime environment for the Lambda function.
* `signing_job_arn` - ARN of a signing job.
* `signing_profile_version_arn` - ARN for a signing profile version.
* `source_code_hash` - (**Deprecated** use `code_sha256` instead) Base64-encoded representation of raw SHA-256 sum of the zip file.
* `source_code_size` - Size in bytes of the function .zip file.
* `tags` - Map of tags assigned to the Lambda Function.
* `timeout` - Function execution time at which Lambda should terminate the function.
* `tracing_config` - Tracing settings of the function. [See below](#tracing_config-attribute-reference).
* `version` - Version of the Lambda function returned. If `qualifier` is not set, this will resolve to the most recent published version. If no published version of the function exists, `version` will resolve to `$LATEST`.
* `vpc_config` - VPC configuration associated with your Lambda function. [See below](#vpc_config-attribute-reference).

### dead_letter_config

* `target_arn` - ARN of an SNS topic or SQS queue to notify when an invocation fails.

### environment

* `variables` - Map of environment variables that are accessible from the function code during execution.

### ephemeral_storage

* `size` - Size of the Lambda function ephemeral storage (`/tmp`) in MB.

### file_system_config

* `arn` - ARN of the Amazon EFS Access Point that provides access to the file system.
* `local_mount_path` - Path where the function can access the file system, starting with `/mnt/`.

### logging_config

* `application_log_level` - Detail level of the logs your application sends to CloudWatch when using supported logging libraries.
* `log_format` - Format for your function's logs. Valid values: `Text`, `JSON`.
* `log_group` - CloudWatch log group your function sends logs to.
* `system_log_level` - Detail level of the Lambda platform event logs sent to CloudWatch.

### tracing_config

* `mode` - Tracing mode. Valid values: `Active`, `PassThrough`.

### vpc_config

* `security_group_ids` - List of security group IDs associated with the Lambda function.
* `subnet_ids` - List of subnet IDs associated with the Lambda function.
* `vpc_id` - ID of the VPC.

<!-- cache-key: cdktf-0.20.8 input-200be751c3b592b14918f59d2e6b6f393f3287d111c99f16f6143303ff4aca47 -->