---
subcategory: "Lambda"
layout: "aws"
page_title: "AWS: aws_lambda_functions"
description: |-
  Provides a list of AWS Lambda Functions.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_lambda_functions

Provides a list of AWS Lambda Functions in the current region. Use this data source to discover existing Lambda functions for inventory, monitoring, or bulk operations.

## Example Usage

### List All Functions

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformOutput, Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_lambda_functions import DataAwsLambdaFunctions
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        all = DataAwsLambdaFunctions(self, "all")
        TerraformOutput(self, "all_function_names",
            value=all.function_names
        )
        TerraformOutput(self, "function_count",
            value=Fn.length_of(all.function_names)
        )
```

### Use Function List for Bulk Operations

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformCount, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_metric_alarm import CloudwatchMetricAlarm
from imports.aws.data_aws_lambda_functions import DataAwsLambdaFunctions
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        all = DataAwsLambdaFunctions(self, "all")
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        lambda_errors_count = TerraformCount.of(
            Token.as_number(Fn.length_of(all.function_names)))
        CloudwatchMetricAlarm(self, "lambda_errors",
            alarm_description="This metric monitors lambda errors",
            alarm_name=
            Token.as_string(
                Fn.lookup_nested(all.function_names, [lambda_errors_count.index])) + "-errors",
            comparison_operator="GreaterThanThreshold",
            dimensions={
                "FunctionName": Token.as_string(
                    Fn.lookup_nested(all.function_names, [lambda_errors_count.index]))
            },
            evaluation_periods=Token.as_number("2"),
            metric_name="Errors",
            namespace="AWS/Lambda",
            period=Token.as_number("300"),
            statistic="Sum",
            tags={
                "Environment": "monitoring",
                "Purpose": "lambda-error-tracking"
            },
            threshold=Token.as_number("5"),
            count=lambda_errors_count
        )
```

### Filter Functions by Name Pattern

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformOutput, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_lambda_functions import DataAwsLambdaFunctions
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        all = DataAwsLambdaFunctions(self, "all")
        api_functions = "${[ for name in ${" + all.function_names + "} : name if can(regex(\"^api-\", name))]}"
        worker_functions = "${[ for name in ${" + all.function_names + "} : name if can(regex(\"^worker-\", name))]}"
        TerraformOutput(self, "api_functions",
            value=api_functions
        )
        TerraformOutput(self, "worker_functions",
            value=worker_functions
        )
```

### Create Function Inventory

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformOutput, Fn, Token, TerraformCount, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_lambda_function import DataAwsLambdaFunction
from imports.aws.data_aws_lambda_functions import DataAwsLambdaFunctions
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        all = DataAwsLambdaFunctions(self, "all")
        function_inventory = "${[ for i, name in ${" + all.function_names + "} : {\n      name        = name\n      arn         = data.aws_lambda_functions.all.function_arns[i]\n      runtime     = data.aws_lambda_function.details[i].runtime\n      memory_size = data.aws_lambda_function.details[i].memory_size\n      timeout     = data.aws_lambda_function.details[i].timeout\n      handler     = data.aws_lambda_function.details[i].handler\n    }]}"
        TerraformOutput(self, "function_inventory",
            value=function_inventory
        )
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        details_count = TerraformCount.of(
            Token.as_number(Fn.length_of(all.function_names)))
        DataAwsLambdaFunction(self, "details",
            function_name=Token.as_string(
                Fn.lookup_nested(all.function_names, [details_count.index])),
            count=details_count
        )
```

## Argument Reference

The following arguments are optional:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `function_arns` - List of Lambda Function ARNs.
* `function_names` - List of Lambda Function names.

<!-- cache-key: cdktf-0.20.8 input-b31ec9a16cef88c0dedaba7708970877b336b8a7e1553d35424ba70de0cf79f7 -->