---
subcategory: "Redshift"
layout: "aws"
page_title: "AWS: aws_redshift_service_account"
description: |-
  Get AWS Redshift Service Account for storing audit data in S3.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_redshift_service_account

Use this data source to get the Account ID of the [AWS Redshift Service Account](http://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html#db-auditing-enable-logging)
in a given region for the purpose of allowing Redshift to store audit data in S3.

~> **Note:** AWS documentation [states that](https://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html#db-auditing-bucket-permissions) a [service principal name](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#principal-services) should be used instead of an AWS account ID in any relevant IAM policy.
The `aws_redshift_service_account` data source has been deprecated and will be removed in a future version.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.data_aws_redshift_service_account import DataAwsRedshiftServiceAccount
from imports.aws.s3_bucket import S3Bucket
from imports.aws.s3_bucket_policy import S3BucketPolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        bucket = S3Bucket(self, "bucket",
            bucket="tf-redshift-logging-test-bucket",
            force_destroy=True
        )
        main = DataAwsRedshiftServiceAccount(self, "main")
        allow_audit_logging = DataAwsIamPolicyDocument(self, "allow_audit_logging",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["s3:PutObject"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=[Token.as_string(main.arn)],
                    type="AWS"
                )
                ],
                resources=["${" + bucket.arn + "}/*"],
                sid="Put bucket policy needed for audit logging"
            ), DataAwsIamPolicyDocumentStatement(
                actions=["s3:GetBucketAcl"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=[Token.as_string(main.arn)],
                    type="AWS"
                )
                ],
                resources=Token.as_list(data_aws_s3_bucket_bucket.arn),
                sid="Get bucket policy needed for audit logging"
            )
            ]
        )
        aws_s3_bucket_policy_allow_audit_logging = S3BucketPolicy(self, "allow_audit_logging_3",
            bucket=bucket.id,
            policy=Token.as_string(allow_audit_logging.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_policy_allow_audit_logging.override_logical_id("allow_audit_logging")
```

## Argument Reference

* `region` - (Optional) Name of the region whose AWS Redshift account ID is desired.
Defaults to the region from the AWS provider configuration.

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `id` - ID of the AWS Redshift service account in the selected region.
* `arn` - ARN of the AWS Redshift service account in the selected region.

<!-- cache-key: cdktf-0.20.8 input-e94000569ef4938913b2e5c8ffc6e76ff71e3d14063c879ff153df1bb864e656 -->