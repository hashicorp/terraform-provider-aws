---
subcategory: "Lambda"
layout: "aws"
page_title: "AWS: aws_lambda_alias"
description: |-
  Provides details about an AWS Lambda Alias.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_lambda_alias

Provides details about an AWS Lambda Alias. Use this data source to retrieve information about an existing Lambda function alias for traffic management, deployment strategies, or API integrations.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformOutput, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_lambda_alias import DataAwsLambdaAlias
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = DataAwsLambdaAlias(self, "example",
            function_name="my-lambda-function",
            name="production"
        )
        TerraformOutput(self, "alias_arn",
            value=example.arn
        )
```

### API Gateway Integration

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.api_gateway_integration import ApiGatewayIntegration
from imports.aws.data_aws_lambda_alias import DataAwsLambdaAlias
from imports.aws.lambda_permission import LambdaPermission
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        api_handler = DataAwsLambdaAlias(self, "api_handler",
            function_name="api-handler",
            name="live"
        )
        ApiGatewayIntegration(self, "example",
            http_method=Token.as_string(aws_api_gateway_method_example.http_method),
            integration_http_method="POST",
            resource_id=Token.as_string(aws_api_gateway_resource_example.id),
            rest_api_id=Token.as_string(aws_api_gateway_rest_api_example.id),
            type="AWS_PROXY",
            uri=Token.as_string(api_handler.invoke_arn)
        )
        LambdaPermission(self, "api_gateway",
            action="lambda:InvokeFunction",
            function_name=Token.as_string(api_handler.function_name),
            principal="apigateway.amazonaws.com",
            qualifier=Token.as_string(api_handler.name),
            source_arn="${" + aws_api_gateway_rest_api_example.execution_arn + "}/*/*",
            statement_id="AllowExecutionFromAPIGateway"
        )
```

### Deployment Version Tracking

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Op, TerraformOutput, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_lambda_alias import DataAwsLambdaAlias
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        production = DataAwsLambdaAlias(self, "production",
            function_name="payment-processor",
            name="production"
        )
        staging = DataAwsLambdaAlias(self, "staging",
            function_name="payment-processor",
            name="staging"
        )
        version_drift = Op.neq(production.function_version, staging.function_version)
        TerraformOutput(self, "deployment_status",
            value=[{
                "production_version": production.function_version,
                "ready_for_promotion": Op.not(version_drift),
                "staging_version": staging.function_version,
                "version_drift": version_drift
            }
            ]
        )
```

### EventBridge Rule Target

```terraform
data "aws_lambda_alias" "event_processor" {
  function_name = "event-processor"
  name          = "stable"
}

resource "aws_cloudwatch_event_rule" "example" {
  name        = "capture-events"
  description = "Capture events for processing"

  event_pattern = jsonencode({
    source      = ["myapp.orders"]
    detail-type = ["Order Placed"]
  })
}

resource "aws_cloudwatch_event_target" "lambda" {
  rule      = aws_cloudwatch_event_rule.example.name
  target_id = "SendToLambda"
  arn       = data.aws_lambda_alias.event_processor.arn
}

resource "aws_lambda_permission" "allow_eventbridge" {
  statement_id  = "AllowExecutionFromEventBridge"
  action        = "lambda:InvokeFunction"
  function_name = data.aws_lambda_alias.event_processor.function_name
  principal     = "events.amazonaws.com"
  qualifier     = data.aws_lambda_alias.event_processor.name
  source_arn    = aws_cloudwatch_event_rule.example.arn
}
```

## Argument Reference

The following arguments are required:

* `function_name` - (Required) Name of the aliased Lambda function.
* `name` - (Required) Name of the Lambda alias.

The following arguments are optional:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `arn` - ARN identifying the Lambda function alias.
* `description` - Description of the alias.
* `function_version` - Lambda function version which the alias uses.
* `invoke_arn` - ARN to be used for invoking Lambda Function from API Gateway - to be used in [`aws_api_gateway_integration`](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_integration)'s `uri`.

<!-- cache-key: cdktf-0.20.8 input-11b78896156aba40f752576974481d256a662e57f09240815c5ca9f41bd4e576 -->