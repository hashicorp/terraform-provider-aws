---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_vpcs"
description: |-
    Provides a list of VPC Ids in a region
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_vpcs

This resource can be useful for getting back a list of VPC Ids for a region.

The following example retrieves a list of VPC Ids with a custom tag of `service` set to a value of "production".

## Example Usage

The following shows outputting all VPC Ids.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformOutput, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_vpcs import DataAwsVpcs
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        foo = DataAwsVpcs(self, "foo",
            tags={
                "service": "production"
            }
        )
        cdktf_terraform_output_foo = TerraformOutput(self, "foo_1",
            value=foo.ids
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        cdktf_terraform_output_foo.override_logical_id("foo")
```

An example use case would be interpolate the `aws_vpcs` output into `count` of an aws_flow_log resource.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformOutput, Fn, Token, TerraformCount, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_vpc import DataAwsVpc
from imports.aws.data_aws_vpcs import DataAwsVpcs
from imports.aws.flow_log import FlowLog
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        foo = DataAwsVpcs(self, "foo")
        cdktf_terraform_output_foo = TerraformOutput(self, "foo_1",
            value=foo.ids
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        cdktf_terraform_output_foo.override_logical_id("foo")
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        foo_count = TerraformCount.of(Token.as_number(Fn.length_of(foo.ids)))
        data_aws_vpc_foo = DataAwsVpc(self, "foo_2",
            id=Token.as_string(Fn.lookup_nested(Fn.tolist(foo.ids), [foo_count.index])),
            count=foo_count
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_vpc_foo.override_logical_id("foo")
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        test_flow_log_count = TerraformCount.of(
            Token.as_number(Fn.length_of(foo.ids)))
        FlowLog(self, "test_flow_log",
            vpc_id=Token.as_string(
                Fn.lookup_nested(
                    Fn.lookup_nested(data_aws_vpc_foo, [test_flow_log_count.index]), ["id"])),
            count=test_flow_log_count
        )
```

## Argument Reference

* `tags` - (Optional) Map of tags, each pair of which must exactly match
  a pair on the desired vpcs.

* `filter` - (Optional) Custom filter block as described below.

More complex filters can be expressed using one or more `filter` sub-blocks,
which take the following arguments:

* `name` - (Required) Name of the field to filter by, as defined by
  [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpcs.html).

* `values` - (Required) Set of values that are accepted for the given field.
  A VPC will be selected if any one of the given values matches.

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `id` - AWS Region.
* `ids` - List of all the VPC Ids found.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `read` - (Default `20m`)

<!-- cache-key: cdktf-0.20.8 input-be6a21066a3ec54cb0732f1d95589ca403b257a294348dbb989f92e860fb3744 -->