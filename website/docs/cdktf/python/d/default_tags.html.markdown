---
subcategory: "Meta Data Sources"
layout: "aws"
page_title: "AWS: aws_default_tags"
description: |-
  Access the default tags configured on the provider.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_default_tags

Use this data source to get the default tags configured on the provider.

With this data source, you can apply default tags to resources not _directly_ managed by a Terraform resource, such as the instances underneath an Auto Scaling group or the volumes created for an EC2 instance.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_default_tags import DataAwsDefaultTags
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DataAwsDefaultTags(self, "example")
```

### Dynamically Apply Default Tags to Auto Scaling Group

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformIterator, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.autoscaling_group import AutoscalingGroup
from imports.aws.data_aws_default_tags import DataAwsDefaultTags
from imports.aws.provider import AwsProvider
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, maxSize, minSize):
        super().__init__(scope, name)
        AwsProvider(self, "aws",
            default_tags=[AwsProviderDefaultTags(
                tags={
                    "Environment": "Test",
                    "Name": "Provider Tag"
                }
            )
            ]
        )
        example = DataAwsDefaultTags(self, "example")
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        example_dynamic_iterator0 = TerraformIterator.from_list(
            Token.as_any(example.tags))
        aws_autoscaling_group_example = AutoscalingGroup(self, "example_2",
            tag=example_dynamic_iterator0.dynamic({
                "key": example_dynamic_iterator0.key,
                "propagate_at_launch": True,
                "value": example_dynamic_iterator0.value
            }),
            max_size=max_size,
            min_size=min_size
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_autoscaling_group_example.override_logical_id("example")
```

## Argument Reference

This data source has no arguments.

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `tags` - Key-value mapping of provider default tags.

<!-- cache-key: cdktf-0.20.1 input-5379afa329280e66ecb9be70d287e86ad43906ae22d2b8976a3316d39a343709 -->