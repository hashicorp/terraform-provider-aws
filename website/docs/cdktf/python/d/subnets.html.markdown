---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_subnets"
description: |-
    Get information about a set of subnets.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_subnets

This resource can be useful for getting back a set of subnet IDs.

## Example Usage

The following shows outputting all CIDR blocks for every subnet ID in a VPC.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformIterator, TerraformOutput, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_subnet import DataAwsSubnet
from imports.aws.data_aws_subnets import DataAwsSubnets
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = DataAwsSubnets(self, "example",
            filter=[DataAwsSubnetsFilter(
                name="vpc-id",
                values=[vpc_id.string_value]
            )
            ]
        )
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        example_for_each_iterator = TerraformIterator.from_list(
            Token.as_any(Fn.toset(example.ids)))
        data_aws_subnet_example = DataAwsSubnet(self, "example_1",
            id=Token.as_string(example_for_each_iterator.value),
            for_each=example_for_each_iterator
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_subnet_example.override_logical_id("example")
        TerraformOutput(self, "subnet_cidr_blocks",
            value="${[ for s in ${" + data_aws_subnet_example.fqn + "} : s.cidr_block]}"
        )
```

The following example retrieves a set of all subnets in a VPC with a custom
tag of `Tier` set to a value of "Private" so that the `aws_instance` resource
can loop through the subnets, putting instances across availability zones.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformIterator, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_subnets import DataAwsSubnets
from imports.aws.instance import Instance
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        private = DataAwsSubnets(self, "private",
            filter=[DataAwsSubnetsFilter(
                name="vpc-id",
                values=[vpc_id.string_value]
            )
            ],
            tags={
                "Tier": "Private"
            }
        )
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        app_for_each_iterator = TerraformIterator.from_list(
            Token.as_any(Fn.toset(private.ids)))
        Instance(self, "app",
            ami=ami.string_value,
            instance_type="t2.micro",
            subnet_id=Token.as_string(app_for_each_iterator.value),
            for_each=app_for_each_iterator
        )
```

## Argument Reference

* `filter` - (Optional) Custom filter block as described below.
* `tags` - (Optional) Map of tags, each pair of which must exactly match
  a pair on the desired subnets.

More complex filters can be expressed using one or more `filter` sub-blocks,
which take the following arguments:

* `name` - (Required) Name of the field to filter by, as defined by
  [the underlying AWS API](http://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeSubnets.html).
  For example, if matching against tag `Name`, use:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_subnets import DataAwsSubnets
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DataAwsSubnets(self, "selected",
            filter=[DataAwsSubnetsFilter(
                name="tag:Name",
                values=[""]
            )
            ]
        )
```

* `values` - (Required) Set of values that are accepted for the given field.
  Subnet IDs will be selected if any one of the given values match.

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `ids` - List of all the subnet ids found.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `read` - (Default `20m`)

<!-- cache-key: cdktf-0.20.8 input-fe8a040cf37c7960c6358cab9956de0b13b8749d8ba19ed8500e227449c1329e -->