---
subcategory: "Mainframe Modernization"
layout: "aws"
page_title: "AWS: aws_m2_application"
description: |-
  Terraform resource for managing an AWS Mainframe Modernization Application.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_m2_application

Terraform resource for managing an [AWS Mainframe Modernization Application](https://docs.aws.amazon.com/m2/latest/userguide/applications-m2.html).

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.m2_application import M2Application
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        M2Application(self, "example",
            definition=[M2ApplicationDefinition(
                content="{\n  \"definition\": {\n    \"listeners\": [\n      {\n        \"port\": 8196,\n        \"type\": \"http\"\n      }\n    ],\n    \"ba-application\": {\n      \"app-location\": \"${" + s3_source + "}/PlanetsDemo-v1.zip\"\n    }\n  },\n  \"source-locations\": [\n    {\n      \"source-id\": \"s3-source\",\n      \"source-type\": \"s3\",\n      \"properties\": {\n        \"s3-bucket\": \"example-bucket\",\n        \"s3-key-prefix\": \"v1\"\n      }\n    }\n  ],\n  \"template-version\": \"2.0\"\n}\n\n\n"
            )
            ],
            engine_type="bluage",
            name="Example"
        )
```

## Argument Reference

The following arguments are required:

* `description` - (Required) Description of the application.
* `engine_type` - (Required) Engine type must be `microfocus | bluage`.
* `name` - (Required) Unique identifier of the application.

The following arguments are optional:

* `definition` - (Optional) The application definition for this application. You can specify either inline JSON or an S3 bucket location.
* `kms_key_id` - (Optional) KMS Key to use for the Application.
* `role_arn` - (Optional) ARN of role for application to use to access AWS resources.
* `tags` - (Optional) Map of tags assigned to the resource. If configured with a provider [`default_tags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## definition

This argument is processed in [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).

The following arguments are optional:

* `content` - (Optional) JSON application definition. Either this or `s3_location` must be specified.
* `s3_location` - (Optional) Location of the application definition in S3. Either this or `content` must be specified.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `application_id` - Id of the Application.
* `arn` - ARN of the Application.
* `current_version` - Current version of the application deployed.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `update` - (Default `30m`)
* `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Mainframe Modernization Application using the `01234567890abcdef012345678`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.m2_application import M2Application
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        M2Application.generate_config_for_import(self, "example", "01234567890abcdef012345678")
```

Using `terraform import`, import Mainframe Modernization Application using the `01234567890abcdef012345678`. For example:

```console
% terraform import aws_m2_application.example 01234567890abcdef012345678
```

<!-- cache-key: cdktf-0.20.1 input-1706b0a183cd55604590fb832f062a4c5da676f562687f5867e9bce6b20ed624 -->