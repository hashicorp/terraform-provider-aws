---
subcategory: "WorkSpaces Web"
layout: "aws"
page_title: "AWS: aws_workspacesweb_network_settings"
description: |-
  Terraform resource for managing an AWS WorkSpaces Web Network Settings.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_workspacesweb_network_settings

Terraform resource for managing an AWS WorkSpaces Web Network Settings resource. Once associated with a web portal, network settings define how streaming instances will connect with your specified VPC.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformCount, Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.security_group import SecurityGroup
from imports.aws.subnet import Subnet
from imports.aws.vpc import Vpc
from imports.aws.workspacesweb_network_settings import WorkspaceswebNetworkSettings
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = Vpc(self, "example",
            cidr_block="10.0.0.0/16"
        )
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        example1_count = TerraformCount.of(Token.as_number("2"))
        SecurityGroup(self, "example1",
            name="example-sg-${" + example1_count.index + "}$",
            vpc_id=example.id,
            count=example1_count
        )
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        example_count = TerraformCount.of(Token.as_number("2"))
        aws_subnet_example = Subnet(self, "example_2",
            availability_zone=Token.as_string(
                Fn.lookup_nested(available.names, [example_count.index])),
            cidr_block=Token.as_string(
                Fn.cidrsubnet(example.cidr_block, 8, Token.as_number(example_count.index))),
            vpc_id=example.id,
            count=example_count
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_subnet_example.override_logical_id("example")
        aws_workspacesweb_network_settings_example =
        WorkspaceswebNetworkSettings(self, "example_3",
            security_group_ids=[
                Token.as_string(Fn.lookup_nested(aws_security_group_example, ["0", "id"])),
                Token.as_string(Fn.lookup_nested(aws_security_group_example, ["1", "id"]))
            ],
            subnet_ids=[
                Token.as_string(Fn.lookup_nested(aws_subnet_example, ["0", "id"])),
                Token.as_string(Fn.lookup_nested(aws_subnet_example, ["1", "id"]))
            ],
            vpc_id=example.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_workspacesweb_network_settings_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `security_group_ids` - (Required) One or more security groups used to control access from streaming instances to your VPC.
* `subnet_ids` - (Required) The subnets in which network interfaces are created to connect streaming instances to your VPC. At least two subnet ids must be specified.
* `vpc_id` - (Required) The VPC that streaming instances will connect to.

The following arguments are optional:

* `tags` - (Optional) Map of tags assigned to the resource. If configured with a provider [`default_tags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `associated_portal_arns` - List of web portal ARNs associated with the network settings.
* `network_settings_arn` - ARN of the network settings resource.
* `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import WorkSpaces Web Network Settings using the `network_settings_arn`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.workspacesweb_network_settings import WorkspaceswebNetworkSettings
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        WorkspaceswebNetworkSettings.generate_config_for_import(self, "example", "arn:aws:workspaces-web:us-west-2:123456789012:networksettings/abcdef12345")
```

Using `terraform import`, import WorkSpaces Web Network Settings using the `network_settings_arn`. For example:

```console
% terraform import aws_workspacesweb_network_settings.example arn:aws:workspacesweb:us-west-2:123456789012:networksettings/abcdef12345
```

<!-- cache-key: cdktf-0.20.8 input-f34201254f015c64f35b468f7a12a2731bb17a8feadf5d88d3387c8c834396a2 -->