---
subcategory: "S3 Control"
layout: "aws"
page_title: "AWS: aws_s3control_access_grant"
description: |-
  Provides a resource to manage an S3 Access Grant.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_s3control_access_grant

Provides a resource to manage an S3 Access Grant.
Each access grant has its own ID and gives an IAM user or role or a directory user, or group (the grantee) access to a registered location. You determine the level of access, such as `READ` or `READWRITE`.
Before you can create a grant, you must have an S3 Access Grants instance in the same Region as the S3 data.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.s3_control_access_grant import S3ControlAccessGrant
from imports.aws.s3_control_access_grants_instance import S3ControlAccessGrantsInstance
from imports.aws.s3_control_access_grants_location import S3ControlAccessGrantsLocation
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = S3ControlAccessGrantsInstance(self, "example")
        aws_s3_control_access_grants_location_example =
        S3ControlAccessGrantsLocation(self, "example_1",
            depends_on=[example],
            iam_role_arn=Token.as_string(aws_iam_role_example.arn),
            location_scope="s3://${" + aws_s3_bucket_example.bucket + "}/prefixA*"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_control_access_grants_location_example.override_logical_id("example")
        aws_s3_control_access_grant_example = S3ControlAccessGrant(self, "example_2",
            access_grants_location_configuration=[{
                "s3_sub_prefix": "prefixB*"
            }
            ],
            access_grants_location_id=Token.as_string(aws_s3_control_access_grants_location_example.access_grants_location_id),
            grantee=[{
                "grantee_identifier": Token.as_string(aws_iam_user_example.arn),
                "grantee_type": "IAM"
            }
            ],
            permission="READ"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_control_access_grant_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `access_grants_location_configuration` - (Optional) See [Location Configuration](#location-configuration) below for more details.
* `access_grants_location_id` - (Required) The ID of the S3 Access Grants location to with the access grant is giving access.
* `account_id` - (Optional) The AWS account ID for the S3 Access Grants location. Defaults to automatically determined account ID of the Terraform AWS provider.
* `grantee` - (Optional) See [Grantee](#grantee) below for more details.
* `permission` - (Required) The access grant's level of access. Valid values: `READ`, `WRITE`, `READWRITE`.
* `s3_prefix_type` - (Optional) If you are creating an access grant that grants access to only one object, set this to `Object`. Valid values: `Object`.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### Location Configuration

The `access_grants_location_configuration` block supports the following:

* `s3_sub_prefix` - (Optional) Sub-prefix.

### Grantee

The `grantee` block supports the following:

* `grantee_identifier` - (Required) Grantee identifier.
* `grantee_type` - (Required) Grantee types. Valid values: `DIRECTORY_USER`, `DIRECTORY_GROUP`, `IAM`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `access_grant_arn` - Amazon Resource Name (ARN) of the S3 Access Grant.
* `access_grant_id` - Unique ID of the S3 Access Grant.
* `grant_scope` - The access grant's scope.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import S3 Access Grants using the `account_id` and `access_grant_id`, separated by a comma (`,`). For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.s3_control_access_grant import S3ControlAccessGrant
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        S3ControlAccessGrant.generate_config_for_import(self, "example", "123456789012,04549c5e-2f3c-4a07-824d-2cafe720aa22")
```

Using `terraform import`, import S3 Access Grants using the `account_id` and `access_grant_id`, separated by a comma (`,`). For example:

```console
% terraform import aws_s3control_access_grants_location.example 123456789012,04549c5e-2f3c-4a07-824d-2cafe720aa22
```

<!-- cache-key: cdktf-0.20.8 input-ba077d51c7dba37a68624d79364f35f88e05b454b81330138764837bb59399e5 -->