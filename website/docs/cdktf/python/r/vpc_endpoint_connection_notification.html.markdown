---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_vpc_endpoint_connection_notification"
description: |-
  Provides a VPC Endpoint connection notification resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_vpc_endpoint_connection_notification

Provides a VPC Endpoint connection notification resource.
Connection notifications notify subscribers of VPC Endpoint events.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.sns_topic import SnsTopic
from imports.aws.vpc_endpoint_connection_notification import VpcEndpointConnectionNotification
from imports.aws.vpc_endpoint_service import VpcEndpointService
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        foo = VpcEndpointService(self, "foo",
            acceptance_required=False,
            network_load_balancer_arns=[test.arn]
        )
        topic = DataAwsIamPolicyDocument(self, "topic",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["SNS:Publish"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["vpce.amazonaws.com"],
                    type="Service"
                )
                ],
                resources=["arn:aws:sns:*:*:vpce-notification-topic"]
            )
            ]
        )
        aws_sns_topic_topic = SnsTopic(self, "topic_2",
            name="vpce-notification-topic",
            policy=Token.as_string(topic.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_sns_topic_topic.override_logical_id("topic")
        aws_vpc_endpoint_connection_notification_foo =
        VpcEndpointConnectionNotification(self, "foo_3",
            connection_events=["Accept", "Reject"],
            connection_notification_arn=Token.as_string(aws_sns_topic_topic.arn),
            vpc_endpoint_service_id=foo.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_endpoint_connection_notification_foo.override_logical_id("foo")
```

## Argument Reference

This resource supports the following arguments:

* `vpc_endpoint_service_id` - (Optional) The ID of the VPC Endpoint Service to receive notifications for.
* `vpc_endpoint_id` - (Optional) The ID of the VPC Endpoint to receive notifications for.
* `connection_notification_arn` - (Required) The ARN of the SNS topic for the notifications.
* `connection_events` - (Required) One or more endpoint [events](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateVpcEndpointConnectionNotification.html#API_CreateVpcEndpointConnectionNotification_RequestParameters) for which to receive notifications.

~> **NOTE:** One of `vpc_endpoint_service_id` or `vpc_endpoint_id` must be specified.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the VPC connection notification.
* `state` - The state of the notification.
* `notification_type` - The type of notification.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import VPC Endpoint connection notifications using the VPC endpoint connection notification `id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.vpc_endpoint_connection_notification import VpcEndpointConnectionNotification
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        VpcEndpointConnectionNotification.generate_config_for_import(self, "foo", "vpce-nfn-09e6ed3b4efba2263")
```

Using `terraform import`, import VPC Endpoint connection notifications using the VPC endpoint connection notification `id`. For example:

```console
% terraform import aws_vpc_endpoint_connection_notification.foo vpce-nfn-09e6ed3b4efba2263
```

<!-- cache-key: cdktf-0.20.8 input-0a73ca44fb468e8731df240f6476acb6d3f8563d6140121d0844ddbde55b7aff -->