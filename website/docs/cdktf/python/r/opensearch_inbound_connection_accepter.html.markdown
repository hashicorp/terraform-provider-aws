---
subcategory: "OpenSearch"
layout: "aws"
page_title: "AWS: aws_opensearch_inbound_connection_accepter"
description: |-
  Terraform resource for managing an AWS OpenSearch Inbound Connection Accepter.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_opensearch_inbound_connection_accepter

Manages an [AWS Opensearch Inbound Connection Accepter](https://docs.aws.amazon.com/opensearch-service/latest/APIReference/API_AcceptInboundConnection.html). If connecting domains from different AWS accounts, ensure that the accepter is configured to use the AWS account where the _remote_ opensearch domain exists.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_caller_identity import DataAwsCallerIdentity
from imports.aws.data_aws_region import DataAwsRegion
from imports.aws.opensearch_inbound_connection_accepter import OpensearchInboundConnectionAccepter
from imports.aws.opensearch_outbound_connection import OpensearchOutboundConnection
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        current = DataAwsCallerIdentity(self, "current")
        data_aws_region_current = DataAwsRegion(self, "current_1")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_region_current.override_logical_id("current")
        foo = OpensearchOutboundConnection(self, "foo",
            connection_alias="outbound_connection",
            local_domain_info=OpensearchOutboundConnectionLocalDomainInfo(
                domain_name=local_domain.domain_name,
                owner_id=Token.as_string(current.account_id),
                region=Token.as_string(data_aws_region_current.name)
            ),
            remote_domain_info=OpensearchOutboundConnectionRemoteDomainInfo(
                domain_name=remote_domain.domain_name,
                owner_id=Token.as_string(current.account_id),
                region=Token.as_string(data_aws_region_current.name)
            )
        )
        aws_opensearch_inbound_connection_accepter_foo =
        OpensearchInboundConnectionAccepter(self, "foo_3",
            connection_id=foo.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_opensearch_inbound_connection_accepter_foo.override_logical_id("foo")
```

## Argument Reference

This resource supports the following arguments:

* `connection_id` - (Required, Forces new resource) Specifies the ID of the connection to accept.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The Id of the connection to accept.
* `connection_status` - Status of the connection request.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `5m`)
* `delete` - (Default `5m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import AWS Opensearch Inbound Connection Accepters using the Inbound Connection ID. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.opensearch_inbound_connection_accepter import OpensearchInboundConnectionAccepter
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        OpensearchInboundConnectionAccepter.generate_config_for_import(self, "foo", "connection-id")
```

Using `terraform import`, import AWS Opensearch Inbound Connection Accepters using the Inbound Connection ID. For example:

```console
% terraform import aws_opensearch_inbound_connection_accepter.foo connection-id
```

<!-- cache-key: cdktf-0.20.8 input-55e95b97c434786498b87477ae28b40538814eb9c17d405e3c6f2aa8f4d59ff6 -->