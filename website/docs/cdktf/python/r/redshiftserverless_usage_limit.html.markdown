---
subcategory: "Redshift Serverless"
layout: "aws"
page_title: "AWS: aws_redshiftserverless_usage_limit"
description: |-
  Provides a Redshift Serverless Usage Limit resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_redshiftserverless_usage_limit

Creates a new Amazon Redshift Serverless Usage Limit.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.redshiftserverless_usage_limit import RedshiftserverlessUsageLimit
from imports.aws.redshiftserverless_workgroup import RedshiftserverlessWorkgroup
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = RedshiftserverlessWorkgroup(self, "example",
            namespace_name=Token.as_string(aws_redshiftserverless_namespace_example.namespace_name),
            workgroup_name="example"
        )
        aws_redshiftserverless_usage_limit_example =
        RedshiftserverlessUsageLimit(self, "example_1",
            amount=60,
            resource_arn=example.arn,
            usage_type="serverless-compute"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_redshiftserverless_usage_limit_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `amount` - (Required) The limit amount. If time-based, this amount is in Redshift Processing Units (RPU) consumed per hour. If data-based, this amount is in terabytes (TB) of data transferred between Regions in cross-account sharing. The value must be a positive number.
* `breach_action` - (Optional) The action that Amazon Redshift Serverless takes when the limit is reached. Valid values are `log`, `emit-metric`, and `deactivate`. The default is `log`.
* `period` - (Optional) The time period that the amount applies to. A weekly period begins on Sunday. Valid values are `daily`, `weekly`, and `monthly`. The default is `monthly`.
* `resource_arn` - (Required) The Amazon Resource Name (ARN) of the Amazon Redshift Serverless resource to create the usage limit for.
* `usage_type` - (Required) The type of Amazon Redshift Serverless usage to create a usage limit for. Valid values are `serverless-compute` or `cross-region-datasharing`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of the Redshift Serverless Usage Limit.
* `id` - The Redshift Usage Limit id.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Redshift Serverless Usage Limits using the `id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.redshiftserverless_usage_limit import RedshiftserverlessUsageLimit
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        RedshiftserverlessUsageLimit.generate_config_for_import(self, "example", "example-id")
```

Using `terraform import`, import Redshift Serverless Usage Limits using the `id`. For example:

```console
% terraform import aws_redshiftserverless_usage_limit.example example-id
```

<!-- cache-key: cdktf-0.20.8 input-84a424322614113d9d70f498bff96348f7b00d895883170bcacbcdfd508f8a95 -->