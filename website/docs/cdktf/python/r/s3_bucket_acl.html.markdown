---
subcategory: "S3 (Simple Storage)"
layout: "aws"
page_title: "AWS: aws_s3_bucket_acl"
description: |-
  Provides an S3 bucket ACL resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_s3_bucket_acl

Provides an S3 bucket ACL resource.

~> **Note:** `terraform destroy` does not delete the S3 Bucket ACL but does remove the resource from Terraform state.

-> This resource cannot be used with S3 directory buckets.

## Example Usage

### With `private` ACL

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.s3_bucket import S3Bucket
from imports.aws.s3_bucket_acl import S3BucketAcl
from imports.aws.s3_bucket_ownership_controls import S3BucketOwnershipControls
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = S3Bucket(self, "example",
            bucket="my-tf-example-bucket"
        )
        aws_s3_bucket_ownership_controls_example = S3BucketOwnershipControls(self, "example_1",
            bucket=example.id,
            rule=S3BucketOwnershipControlsRule(
                object_ownership="BucketOwnerPreferred"
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_ownership_controls_example.override_logical_id("example")
        aws_s3_bucket_acl_example = S3BucketAcl(self, "example_2",
            acl="private",
            bucket=example.id,
            depends_on=[aws_s3_bucket_ownership_controls_example]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_acl_example.override_logical_id("example")
```

### With `public-read` ACL

-> This example explicitly disables the default S3 bucket security settings. This
should be done with caution, as all bucket objects become publicly exposed.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.s3_bucket import S3Bucket
from imports.aws.s3_bucket_acl import S3BucketAcl
from imports.aws.s3_bucket_ownership_controls import S3BucketOwnershipControls
from imports.aws.s3_bucket_public_access_block import S3BucketPublicAccessBlock
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = S3Bucket(self, "example",
            bucket="my-tf-example-bucket"
        )
        aws_s3_bucket_ownership_controls_example = S3BucketOwnershipControls(self, "example_1",
            bucket=example.id,
            rule=S3BucketOwnershipControlsRule(
                object_ownership="BucketOwnerPreferred"
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_ownership_controls_example.override_logical_id("example")
        aws_s3_bucket_public_access_block_example = S3BucketPublicAccessBlock(self, "example_2",
            block_public_acls=False,
            block_public_policy=False,
            bucket=example.id,
            ignore_public_acls=False,
            restrict_public_buckets=False
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_public_access_block_example.override_logical_id("example")
        aws_s3_bucket_acl_example = S3BucketAcl(self, "example_3",
            acl="public-read",
            bucket=example.id,
            depends_on=[aws_s3_bucket_ownership_controls_example, aws_s3_bucket_public_access_block_example
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_acl_example.override_logical_id("example")
```

### With Grants

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_canonical_user_id import DataAwsCanonicalUserId
from imports.aws.s3_bucket import S3Bucket
from imports.aws.s3_bucket_acl import S3BucketAcl
from imports.aws.s3_bucket_ownership_controls import S3BucketOwnershipControls
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = S3Bucket(self, "example",
            bucket="my-tf-example-bucket"
        )
        aws_s3_bucket_ownership_controls_example = S3BucketOwnershipControls(self, "example_1",
            bucket=example.id,
            rule=S3BucketOwnershipControlsRule(
                object_ownership="BucketOwnerPreferred"
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_ownership_controls_example.override_logical_id("example")
        current = DataAwsCanonicalUserId(self, "current")
        aws_s3_bucket_acl_example = S3BucketAcl(self, "example_3",
            access_control_policy=S3BucketAclAccessControlPolicy(
                grant=[S3BucketAclAccessControlPolicyGrant(
                    grantee=S3BucketAclAccessControlPolicyGrantGrantee(
                        id=Token.as_string(current.id),
                        type="CanonicalUser"
                    ),
                    permission="READ"
                ), S3BucketAclAccessControlPolicyGrant(
                    grantee=S3BucketAclAccessControlPolicyGrantGrantee(
                        type="Group",
                        uri="http://acs.amazonaws.com/groups/s3/LogDelivery"
                    ),
                    permission="READ_ACP"
                )
                ],
                owner=S3BucketAclAccessControlPolicyOwner(
                    id=Token.as_string(current.id)
                )
            ),
            bucket=example.id,
            depends_on=[aws_s3_bucket_ownership_controls_example]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_acl_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `acl` - (Optional, either `access_control_policy` or `acl` is required) Specifies the Canned ACL to apply to the bucket. Valid values: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`, `log-delivery-write`. Full details are available on the [AWS documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl).
* `access_control_policy` - (Optional, either `access_control_policy` or `acl` is required) Configuration block that sets the ACL permissions for an object per grantee. [See below](#access_control_policy).
* `bucket` - (Required, Forces new resource) Bucket to which to apply the ACL.
* `expected_bucket_owner` - (Optional, Forces new resource) Account ID of the expected bucket owner.

### access_control_policy

The `access_control_policy` configuration block supports the following arguments:

* `grant` - (Required) Set of `grant` configuration blocks. [See below](#grant).
* `owner` - (Required) Configuration block for the bucket owner's display name and ID. [See below](#owner).

### grant

The `grant` configuration block supports the following arguments:

* `grantee` - (Required) Configuration block for the person being granted permissions. [See below](#grantee).
* `permission` - (Required) Logging permissions assigned to the grantee for the bucket. Valid values: `FULL_CONTROL`, `WRITE`, `WRITE_ACP`, `READ`, `READ_ACP`. See [What permissions can I grant?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#permissions) for more details about what each permission means in the context of buckets.

### owner

The `owner` configuration block supports the following arguments:

* `id` - (Required) ID of the owner.
* `display_name` - (Optional) Display name of the owner.

### grantee

The `grantee` configuration block supports the following arguments:

* `email_address` - (Optional) Email address of the grantee. See [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) for supported AWS regions where this argument can be specified.
* `id` - (Optional) Canonical user ID of the grantee.
* `type` - (Required) Type of grantee. Valid values: `CanonicalUser`, `AmazonCustomerByEmail`, `Group`.
* `uri` - (Optional) URI of the grantee group.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The `bucket`, `expected_bucket_owner` (if configured), and `acl` (if configured) separated by commas (`,`).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import S3 bucket ACL using `bucket`, `expected_bucket_owner`, and/or `acl`, depending on your situation. For example:

If the owner (account ID) of the source bucket is the _same_ account used to configure the Terraform AWS Provider, and the source bucket is **not configured** with a
[canned ACL][1] (i.e. predefined grant), import using the `bucket`:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.s3_bucket_acl import S3BucketAcl
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        S3BucketAcl.generate_config_for_import(self, "example", "bucket-name")
```

If the owner (account ID) of the source bucket is the _same_ account used to configure the Terraform AWS Provider, and the source bucket is **configured** with a
[canned ACL][1] (i.e. predefined grant), import using the `bucket` and `acl` separated by a comma (`,`):

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.s3_bucket_acl import S3BucketAcl
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        S3BucketAcl.generate_config_for_import(self, "example", "bucket-name,private")
```

If the owner (account ID) of the source bucket _differs_ from the account used to configure the Terraform AWS Provider, and the source bucket is **not configured** with a [canned ACL][1] (i.e. predefined grant), imported using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.s3_bucket_acl import S3BucketAcl
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        S3BucketAcl.generate_config_for_import(self, "example", "bucket-name,123456789012")
```

If the owner (account ID) of the source bucket _differs_ from the account used to configure the Terraform AWS Provider, and the source bucket is **configured** with a
[canned ACL][1] (i.e. predefined grant), imported using the `bucket`, `expected_bucket_owner`, and `acl` separated by commas (`,`):

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.s3_bucket_acl import S3BucketAcl
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        S3BucketAcl.generate_config_for_import(self, "example", "bucket-name,123456789012,private")
```

**Using `terraform import` to import** using `bucket`, `expected_bucket_owner`, and/or `acl`, depending on your situation. For example:

If the owner (account ID) of the source bucket is the _same_ account used to configure the Terraform AWS Provider, and the source bucket is **not configured** with a
[canned ACL][1] (i.e. predefined grant), import using the `bucket`:

```console
% terraform import aws_s3_bucket_acl.example bucket-name
```

If the owner (account ID) of the source bucket is the _same_ account used to configure the Terraform AWS Provider, and the source bucket is **configured** with a [canned ACL][1] (i.e. predefined grant), import using the `bucket` and `acl` separated by a comma (`,`):

```console
% terraform import aws_s3_bucket_acl.example bucket-name,private
```

If the owner (account ID) of the source bucket _differs_ from the account used to configure the Terraform AWS Provider, and the source bucket is **not configured** with a [canned ACL][1] (i.e. predefined grant), imported using the `bucket` and `expected_bucket_owner` separated by a comma (`,`):

```console
% terraform import aws_s3_bucket_acl.example bucket-name,123456789012
```

If the owner (account ID) of the source bucket _differs_ from the account used to configure the Terraform AWS Provider, and the source bucket is **configured** with a [canned ACL][1] (i.e. predefined grant), imported using the `bucket`, `expected_bucket_owner`, and `acl` separated by commas (`,`):

```console
% terraform import aws_s3_bucket_acl.example bucket-name,123456789012,private
```

[1]: https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl

<!-- cache-key: cdktf-0.20.8 input-f7eaa2b766c3b5417b859c0c0fbb4bf31664e8d5dac63afac62a9262559a8893 -->