---
subcategory: "Security Hub"
layout: "aws"
page_title: "AWS: aws_securityhub_standards_control_association"
description: |-
  Terraform resource for managing an AWS Security Hub Standards Control Association.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_securityhub_standards_control_association

Terraform resource for managing an AWS Security Hub Standards Control Association.

Disable/enable Security Hub security control in the standard.

The `aws_securityhub_standards_control_association`, similarly to `aws_securityhub_standards_control`,
behaves differently from normal resources, in that Terraform does not _create_ this resource, but instead "adopts" it
into management. When you _delete_ this resource configuration, Terraform "abandons" resource as is and just removes it from the state.

## Example Usage

### Basic usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.securityhub_account import SecurityhubAccount
from imports.aws.securityhub_standards_control_association import SecurityhubStandardsControlAssociation
from imports.aws.securityhub_standards_subscription import SecurityhubStandardsSubscription
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = SecurityhubAccount(self, "example")
        cis_aws_foundations_benchmark = SecurityhubStandardsSubscription(self, "cis_aws_foundations_benchmark",
            depends_on=[example],
            standards_arn="arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0"
        )
        SecurityhubStandardsControlAssociation(self, "cis_aws_foundations_benchmark_disable_iam_1",
            association_status="DISABLED",
            security_control_id="IAM.1",
            standards_arn=cis_aws_foundations_benchmark.standards_arn,
            updated_reason="Not needed"
        )
```

## Disabling security control in all standards

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformIterator, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_securityhub_standards_control_associations import DataAwsSecurityhubStandardsControlAssociations
from imports.aws.securityhub_account import SecurityhubAccount
from imports.aws.securityhub_standards_control_association import SecurityhubStandardsControlAssociation
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = SecurityhubAccount(self, "example")
        iam1 = DataAwsSecurityhubStandardsControlAssociations(self, "iam_1",
            depends_on=[example],
            security_control_id="IAM.1"
        )
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        iam1_for_each_iterator = TerraformIterator.from_list(
            Token.as_any(
                Fn.toset(
                    Fn.lookup_nested(iam1.standards_control_associations, ["*", "standards_arn"
                    ]))))
        aws_securityhub_standards_control_association_iam1 =
        SecurityhubStandardsControlAssociation(self, "iam_1_2",
            association_status="DISABLED",
            security_control_id=Token.as_string(iam1.security_control_id),
            standards_arn=Token.as_string(iam1_for_each_iterator.key),
            updated_reason="Not needed",
            for_each=iam1_for_each_iterator
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_securityhub_standards_control_association_iam1.override_logical_id("iam_1")
```

## Argument Reference

The following arguments are required:

* `association_status` - (Required) The desired enablement status of the control in the standard. Valid values: `ENABLED`, `DISABLED`.
* `security_control_id` - (Required) The unique identifier for the security control whose enablement status you want to update.
* `standards_arn` - (Required) The Amazon Resource Name (ARN) of the standard in which you want to update the control's enablement status.

The following arguments are optional:

* `updated_reason` - (Optional) The reason for updating the control's enablement status in the standard. Required when `association_status` is `DISABLED`.

## Attribute Reference

This resource exports no additional attributes.

<!-- cache-key: cdktf-0.20.8 input-36d0ae6f04d142748524c969c4ff5e6aa2ba4705300bb023aff57327dc810254 -->