---
subcategory: "Backup"
layout: "aws"
page_title: "AWS: aws_backup_vault_policy"
description: |-
  Provides an AWS Backup vault policy resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_backup_vault_policy

Provides an AWS Backup vault policy resource.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.backup_vault import BackupVault
from imports.aws.backup_vault_policy import BackupVaultPolicy
from imports.aws.data_aws_caller_identity import DataAwsCallerIdentity
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = BackupVault(self, "example",
            name="example"
        )
        current = DataAwsCallerIdentity(self, "current")
        data_aws_iam_policy_document_example = DataAwsIamPolicyDocument(self, "example_2",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["backup:DescribeBackupVault", "backup:DeleteBackupVault", "backup:PutBackupVaultAccessPolicy", "backup:DeleteBackupVaultAccessPolicy", "backup:GetBackupVaultAccessPolicy", "backup:StartBackupJob", "backup:GetBackupVaultNotifications", "backup:PutBackupVaultNotifications"
                ],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=[Token.as_string(current.account_id)],
                    type="AWS"
                )
                ],
                resources=[example.arn]
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_iam_policy_document_example.override_logical_id("example")
        aws_backup_vault_policy_example = BackupVaultPolicy(self, "example_3",
            backup_vault_name=example.name,
            policy=Token.as_string(data_aws_iam_policy_document_example.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_backup_vault_policy_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `backup_vault_name` - (Required) Name of the backup vault to add policy for.
* `policy` - (Required) The backup vault access policy document in JSON format.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The name of the vault.
* `backup_vault_arn` - The ARN of the vault.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Backup vault policy using the `name`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.backup_vault_policy import BackupVaultPolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        BackupVaultPolicy.generate_config_for_import(self, "test", "TestVault")
```

Using `terraform import`, import Backup vault policy using the `name`. For example:

```console
% terraform import aws_backup_vault_policy.test TestVault
```

<!-- cache-key: cdktf-0.20.8 input-e6e2a9ecb59fce2e79c5991a441f8cb419a72c12b4391f7cf9f887f36613afd4 -->