---
subcategory: "DataZone"
layout: "aws"
page_title: "AWS: aws_datazone_environment_profile"
description: |-
  Terraform resource for managing an AWS DataZone Environment Profile.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_datazone_environment_profile

Terraform resource for managing an AWS DataZone Environment Profile.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_caller_identity import DataAwsCallerIdentity
from imports.aws.data_aws_datazone_environment_blueprint import DataAwsDatazoneEnvironmentBlueprint
from imports.aws.data_aws_region import DataAwsRegion
from imports.aws.datazone_domain import DatazoneDomain
from imports.aws.datazone_environment_blueprint_configuration import DatazoneEnvironmentBlueprintConfiguration
from imports.aws.datazone_environment_profile import DatazoneEnvironmentProfile
from imports.aws.datazone_project import DatazoneProject
from imports.aws.iam_role import IamRole
from imports.aws.security_group import SecurityGroup
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        domain_execution_role = IamRole(self, "domain_execution_role",
            assume_role_policy=Token.as_string(
                Fn.jsonencode({
                    "Statement": [{
                        "Action": ["sts:AssumeRole", "sts:TagSession"],
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "datazone.amazonaws.com"
                        }
                    }, {
                        "Action": ["sts:AssumeRole", "sts:TagSession"],
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "cloudformation.amazonaws.com"
                        }
                    }
                    ],
                    "Version": "2012-10-17"
                })),
            inline_policy=[IamRoleInlinePolicy(
                name="example-name",
                policy=Token.as_string(
                    Fn.jsonencode({
                        "Statement": [{
                            "Action": ["datazone:*", "ram:*", "sso:*", "kms:*"],
                            "Effect": "Allow",
                            "Resource": "*"
                        }
                        ],
                        "Version": "2012-10-17"
                    }))
            )
            ],
            name="example-name"
        )
        SecurityGroup(self, "test",
            name="example-name"
        )
        data_aws_caller_identity_test = DataAwsCallerIdentity(self, "test_2")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_caller_identity_test.override_logical_id("test")
        data_aws_region_test = DataAwsRegion(self, "test_3")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_region_test.override_logical_id("test")
        aws_datazone_domain_test = DatazoneDomain(self, "test_4",
            domain_execution_role=domain_execution_role.arn,
            name="example-name"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_datazone_domain_test.override_logical_id("test")
        aws_datazone_project_test = DatazoneProject(self, "test_5",
            description="desc",
            domain_identifier=Token.as_string(aws_datazone_domain_test.id),
            glossary_terms=["2N8w6XJCwZf"],
            name="example-name",
            skip_deletion_check=True
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_datazone_project_test.override_logical_id("test")
        data_aws_datazone_environment_blueprint_test =
        DataAwsDatazoneEnvironmentBlueprint(self, "test_6",
            domain_id=Token.as_string(aws_datazone_domain_test.id),
            managed=True,
            name="DefaultDataLake"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_datazone_environment_blueprint_test.override_logical_id("test")
        aws_datazone_environment_blueprint_configuration_test =
        DatazoneEnvironmentBlueprintConfiguration(self, "test_7",
            domain_id=Token.as_string(aws_datazone_domain_test.id),
            enabled_regions=[Token.as_string(data_aws_region_test.name)],
            environment_blueprint_id=Token.as_string(data_aws_datazone_environment_blueprint_test.id),
            provisioning_role_arn=domain_execution_role.arn
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_datazone_environment_blueprint_configuration_test.override_logical_id("test")
        aws_datazone_environment_profile_test = DatazoneEnvironmentProfile(self, "test_8",
            aws_account_id=Token.as_string(data_aws_caller_identity_test.account_id),
            aws_account_region=Token.as_string(data_aws_region_test.name),
            description="description",
            domain_identifier=Token.as_string(aws_datazone_domain_test.id),
            environment_blueprint_identifier=Token.as_string(data_aws_datazone_environment_blueprint_test.id),
            name="example-name",
            project_identifier=Token.as_string(aws_datazone_project_test.id),
            user_parameters=[DatazoneEnvironmentProfileUserParameters(
                name="consumerGlueDbName",
                value="value"
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_datazone_environment_profile_test.override_logical_id("test")
```

## Argument Reference

The following arguments are required:

* `aws_account_id` - (Required) -  Id of the AWS account being used.
* `aws_account_region` - (Required) -  Desired region for environment profile.
* `domain_identifier` - (Required) -  Domain Identifier for environment profile.
* `name` - (Required) -  Name of the environment profile.
* `environment_blueprint_identifier` - (Required) -  ID of the blueprint which the environment will be created with.
* `project_identifier` - (Required) -  Project identifier for environment profile.

The following arguments are optional:

* `description` - (Optional) Description of environment profile.
* `user_parameters` - (Optional) -  Array of user parameters of the environment profile with the following attributes:
    * `name` - (Required) -  Name of the environment profile parameter.
    * `value` - (Required) -  Value of the environment profile parameter.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `created_at` - Creation time of environment profile.
* `created_by` - Creator of environment profile.
* `id` - ID of environment profile.
* `updated_at` - Time of last update to environment profile.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import DataZone Environment Profile using a comma-delimited string combining `id` and `domain_identifier`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.datazone_environment_profile import DatazoneEnvironmentProfile
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DatazoneEnvironmentProfile.generate_config_for_import(self, "example", "environment_profile-id-12345678,domain-id-12345678")
```

Using `terraform import`, import DataZone Environment Profile using a comma-delimited string combining `id` and `domain_identifier`. For example:

```console
% terraform import aws_datazone_environment_profile.example environment_profile-id-12345678,domain-id-12345678
```

<!-- cache-key: cdktf-0.20.1 input-b22b2c3dc82f15715181d2eb58f14799fba60665db5e68a9fc727b242fc3031f -->