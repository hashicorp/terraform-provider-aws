---
subcategory: "S3 Glacier"
layout: "aws"
page_title: "AWS: aws_glacier_vault"
description: |-
  Provides a Glacier Vault.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_glacier_vault

Provides a Glacier Vault Resource. You can refer to the [Glacier Developer Guide](https://docs.aws.amazon.com/amazonglacier/latest/dev/working-with-vaults.html) for a full explanation of the Glacier Vault functionality

~> **NOTE:** When removing a Glacier Vault, the Vault must be empty.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.glacier_vault import GlacierVault
from imports.aws.sns_topic import SnsTopic
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        aws_sns_topic = SnsTopic(self, "aws_sns_topic",
            name="glacier-sns-topic"
        )
        my_archive = DataAwsIamPolicyDocument(self, "my_archive",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["glacier:InitiateJob", "glacier:GetJobOutput"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["*"],
                    type="*"
                )
                ],
                resources=["arn:aws:glacier:eu-west-1:432981146916:vaults/MyArchive"
                ],
                sid="add-read-only-perm"
            )
            ]
        )
        aws_glacier_vault_my_archive = GlacierVault(self, "my_archive_2",
            access_policy=Token.as_string(my_archive.json),
            name="MyArchive",
            notification=GlacierVaultNotification(
                events=["ArchiveRetrievalCompleted", "InventoryRetrievalCompleted"],
                sns_topic=aws_sns_topic.arn
            ),
            tags={
                "Test": "MyArchive"
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_glacier_vault_my_archive.override_logical_id("my_archive")
```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The name of the Vault. Names can be between 1 and 255 characters long and the valid characters are a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen), and '.' (period).
* `access_policy` - (Optional) The policy document. This is a JSON formatted string.
  The heredoc syntax or `file` function is helpful here. Use the [Glacier Developer Guide](https://docs.aws.amazon.com/amazonglacier/latest/dev/vault-access-policy.html) for more information on Glacier Vault Policy
* `notification` - (Optional) The notifications for the Vault. Fields documented below.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

**notification** supports the following:

* `events` - (Required) You can configure a vault to publish a notification for `ArchiveRetrievalCompleted` and `InventoryRetrievalCompleted` events.
* `sns_topic` - (Required) The SNS Topic ARN.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `location` - The URI of the vault that was created.
* `arn` - The ARN of the vault.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Glacier Vaults using the `name`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.glacier_vault import GlacierVault
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        GlacierVault.generate_config_for_import(self, "archive", "my_archive")
```

Using `terraform import`, import Glacier Vaults using the `name`. For example:

```console
% terraform import aws_glacier_vault.archive my_archive
```

<!-- cache-key: cdktf-0.20.8 input-1bfb612252a42581f297e83a2d1f1c7c609160aeeb4a7bd67bccea5a3aa3cff5 -->