---
subcategory: "AppConfig"
layout: "aws"
page_title: "AWS: aws_appconfig_extension_association"
description: |-
  Associates an AppConfig Extension with a Resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_appconfig_extension_association

Associates an AppConfig Extension with a Resource.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.appconfig_application import AppconfigApplication
from imports.aws.appconfig_extension import AppconfigExtension
from imports.aws.appconfig_extension_association import AppconfigExtensionAssociation
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.iam_role import IamRole
from imports.aws.sns_topic import SnsTopic
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test = AppconfigApplication(self, "test",
            name="test"
        )
        aws_sns_topic_test = SnsTopic(self, "test_1",
            name="test"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_sns_topic_test.override_logical_id("test")
        data_aws_iam_policy_document_test = DataAwsIamPolicyDocument(self, "test_2",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["appconfig.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_iam_policy_document_test.override_logical_id("test")
        aws_iam_role_test = IamRole(self, "test_3",
            assume_role_policy=Token.as_string(data_aws_iam_policy_document_test.json),
            name="test"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_test.override_logical_id("test")
        aws_appconfig_extension_test = AppconfigExtension(self, "test_4",
            action_point=[AppconfigExtensionActionPoint(
                action=[AppconfigExtensionActionPointAction(
                    name="test",
                    role_arn=Token.as_string(aws_iam_role_test.arn),
                    uri=Token.as_string(aws_sns_topic_test.arn)
                )
                ],
                point="ON_DEPLOYMENT_COMPLETE"
            )
            ],
            description="test description",
            name="test",
            tags={
                "Type": "AppConfig Extension"
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_appconfig_extension_test.override_logical_id("test")
        aws_appconfig_extension_association_test =
        AppconfigExtensionAssociation(self, "test_5",
            extension_arn=Token.as_string(aws_appconfig_extension_test.arn),
            resource_arn=test.arn
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_appconfig_extension_association_test.override_logical_id("test")
```

## Argument Reference

This resource supports the following arguments:

* `extension_arn` - (Required) The ARN of the extension defined in the association.
* `resource_arn` - (Optional) The ARN of the application, configuration profile, or environment to associate with the extension.
* `parameters` - (Optional) The parameter names and values defined for the association.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the AppConfig Extension Association.
* `id` - AppConfig Extension Association ID.
* `extension_version` - The version number for the extension defined in the association.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import AppConfig Extension Associations using their extension association ID. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.appconfig_extension_association import AppconfigExtensionAssociation
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        AppconfigExtensionAssociation.generate_config_for_import(self, "example", "71rxuzt")
```

Using `terraform import`, import AppConfig Extension Associations using their extension association ID. For example:

```console
% terraform import aws_appconfig_extension_association.example 71rxuzt
```

<!-- cache-key: cdktf-0.20.8 input-17365f1464d46d38d1dcf2819aa51132f201f9fd4618e6d0e60185e1fad561f2 -->