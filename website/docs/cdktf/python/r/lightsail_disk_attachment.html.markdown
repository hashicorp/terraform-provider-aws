---
subcategory: "Lightsail"
layout: "aws"
page_title: "AWS: aws_lightsail_disk_attachment"
description: |-
  Attaches a Lightsail disk to a Lightsail Instance
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_lightsail_disk_attachment

Attaches a Lightsail disk to a Lightsail Instance

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_availability_zones import DataAwsAvailabilityZones
from imports.aws.lightsail_disk import LightsailDisk
from imports.aws.lightsail_disk_attachment import LightsailDiskAttachment
from imports.aws.lightsail_instance import LightsailInstance
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        available = DataAwsAvailabilityZones(self, "available",
            filter=[DataAwsAvailabilityZonesFilter(
                name="opt-in-status",
                values=["opt-in-not-required"]
            )
            ],
            state="available"
        )
        test = LightsailDisk(self, "test",
            availability_zone=Token.as_string(Fn.lookup_nested(available.names, ["0"])),
            name="test-disk",
            size_in_gb=8
        )
        aws_lightsail_instance_test = LightsailInstance(self, "test_2",
            availability_zone=Token.as_string(Fn.lookup_nested(available.names, ["0"])),
            blueprint_id="amazon_linux_2",
            bundle_id="nano_3_0",
            name="test-instance"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_lightsail_instance_test.override_logical_id("test")
        aws_lightsail_disk_attachment_test = LightsailDiskAttachment(self, "test_3",
            disk_name=test.name,
            disk_path="/dev/xvdf",
            instance_name=Token.as_string(aws_lightsail_instance_test.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_lightsail_disk_attachment_test.override_logical_id("test")
```

## Argument Reference

This resource supports the following arguments:

* `disk_name` - (Required) The name of the Lightsail Disk.
* `instance_name` - (Required) The name of the Lightsail Instance to attach to.
* `disk_path` - (Required) The disk path to expose to the instance.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - A combination of attributes to create a unique id: `disk_name`,`instance_name`

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_lightsail_disk` using the id attribute. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.lightsail_disk_attachment import LightsailDiskAttachment
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        LightsailDiskAttachment.generate_config_for_import(self, "test", "test-disk,test-instance")
```

Using `terraform import`, import `aws_lightsail_disk` using the id attribute. For example:

```console
% terraform import aws_lightsail_disk_attachment.test test-disk,test-instance
```

<!-- cache-key: cdktf-0.20.1 input-f4c8690ac6e9a344cc00a64f8a07fe7e738075a90746cd306adc53390ff7b39c -->