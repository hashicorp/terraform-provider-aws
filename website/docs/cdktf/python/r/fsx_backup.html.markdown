---
subcategory: "FSx"
layout: "aws"
page_title: "AWS: aws_fsx_backup"
description: |-
  Manages a FSx Backup.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_fsx_backup

Provides a FSx Backup resource.

## Example Usage

## Lustre Example

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.fsx_backup import FsxBackup
from imports.aws.fsx_lustre_file_system import FsxLustreFileSystem
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = FsxLustreFileSystem(self, "example",
            deployment_type="PERSISTENT_1",
            per_unit_storage_throughput=50,
            storage_capacity=1200,
            subnet_ids=[Token.as_string(aws_subnet_example.id)]
        )
        aws_fsx_backup_example = FsxBackup(self, "example_1",
            file_system_id=example.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_fsx_backup_example.override_logical_id("example")
```

## Windows Example

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.fsx_backup import FsxBackup
from imports.aws.fsx_windows_file_system import FsxWindowsFileSystem
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = FsxWindowsFileSystem(self, "example",
            active_directory_id=eample.id,
            skip_final_backup=True,
            storage_capacity=32,
            subnet_ids=[example1.id],
            throughput_capacity=8
        )
        aws_fsx_backup_example = FsxBackup(self, "example_1",
            file_system_id=example.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_fsx_backup_example.override_logical_id("example")
```

## ONTAP Example

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.fsx_backup import FsxBackup
from imports.aws.fsx_ontap_volume import FsxOntapVolume
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = FsxOntapVolume(self, "example",
            junction_path="/example",
            name="example",
            size_in_megabytes=1024,
            storage_efficiency_enabled=True,
            storage_virtual_machine_id=test.id
        )
        aws_fsx_backup_example = FsxBackup(self, "example_1",
            volume_id=example.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_fsx_backup_example.override_logical_id("example")
```

## OpenZFS Example

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.fsx_backup import FsxBackup
from imports.aws.fsx_openzfs_file_system import FsxOpenzfsFileSystem
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = FsxOpenzfsFileSystem(self, "example",
            deployment_type="SINGLE_AZ_1",
            storage_capacity=64,
            subnet_ids=[Token.as_string(aws_subnet_example.id)],
            throughput_capacity=64
        )
        aws_fsx_backup_example = FsxBackup(self, "example_1",
            file_system_id=example.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_fsx_backup_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

Note - Only file_system_id or volume_id can be specified. file_system_id is used for Lustre and Windows, volume_id is used for ONTAP.

* `file_system_id` - (Optional) The ID of the file system to back up. Required if backing up Lustre or Windows file systems.
* `tags` - (Optional) A map of tags to assign to the file system. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copy_tags_to_backups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
* `volume_id` - (Optional) The ID of the volume to back up. Required if backing up a ONTAP Volume.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name of the backup.
* `id` - Identifier of the backup, e.g., `fs-12345678`
* `kms_key_id` -  The ID of the AWS Key Management Service (AWS KMS) key used to encrypt the backup of the Amazon FSx file system's data at rest.
* `owner_id` - AWS account identifier that created the file system.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).
* `type` - The type of the file system backup.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `10m`)
* `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import FSx Backups using the `id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.fsx_backup import FsxBackup
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        FsxBackup.generate_config_for_import(self, "example", "fs-543ab12b1ca672f33")
```

Using `terraform import`, import FSx Backups using the `id`. For example:

```console
% terraform import aws_fsx_backup.example fs-543ab12b1ca672f33
```

<!-- cache-key: cdktf-0.20.8 input-0ec17c1115f996a3a9d6f257bcf0f3b19a4abf6354a302a0d56b57c97b46ab01 -->