---
subcategory: "SSO Admin"
layout: "aws"
page_title: "AWS: aws_ssoadmin_permissions_boundary_attachment"
description: |-
  Attaches a permissions boundary policy to a Single Sign-On (SSO) Permission Set resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ssoadmin_permissions_boundary_attachment

Attaches a permissions boundary policy to a Single Sign-On (SSO) Permission Set resource.

~> **NOTE:** A permission set can have at most one permissions boundary attached; using more than one `aws_ssoadmin_permissions_boundary_attachment` references the same permission set will show a permanent difference.

## Example Usage

### Attaching a customer-managed policy

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_ssoadmin_instances import DataAwsSsoadminInstances
from imports.aws.iam_policy import IamPolicy
from imports.aws.ssoadmin_permission_set import SsoadminPermissionSet
from imports.aws.ssoadmin_permissions_boundary_attachment import SsoadminPermissionsBoundaryAttachment
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = IamPolicy(self, "example",
            description="My test policy",
            name="TestPolicy",
            policy=Token.as_string(
                Fn.jsonencode({
                    "Statement": [{
                        "Action": ["ec2:Describe*"],
                        "Effect": "Allow",
                        "Resource": "*"
                    }
                    ],
                    "Version": "2012-10-17"
                }))
        )
        data_aws_ssoadmin_instances_example = DataAwsSsoadminInstances(self, "example_1")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_ssoadmin_instances_example.override_logical_id("example")
        aws_ssoadmin_permission_set_example = SsoadminPermissionSet(self, "example_2",
            instance_arn=Token.as_string(
                Fn.lookup_nested(Fn.tolist(data_aws_ssoadmin_instances_example.arns), ["0"
                ])),
            name="Example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_ssoadmin_permission_set_example.override_logical_id("example")
        aws_ssoadmin_permissions_boundary_attachment_example =
        SsoadminPermissionsBoundaryAttachment(self, "example_3",
            instance_arn=Token.as_string(aws_ssoadmin_permission_set_example.instance_arn),
            permission_set_arn=Token.as_string(aws_ssoadmin_permission_set_example.arn),
            permissions_boundary=SsoadminPermissionsBoundaryAttachmentPermissionsBoundary(
                customer_managed_policy_reference=SsoadminPermissionsBoundaryAttachmentPermissionsBoundaryCustomerManagedPolicyReference(
                    name=example.name,
                    path="/"
                )
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_ssoadmin_permissions_boundary_attachment_example.override_logical_id("example")
```

### Attaching an AWS-managed policy

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.ssoadmin_permissions_boundary_attachment import SsoadminPermissionsBoundaryAttachment
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        SsoadminPermissionsBoundaryAttachment(self, "example",
            instance_arn=Token.as_string(aws_ssoadmin_permission_set_example.instance_arn),
            permission_set_arn=Token.as_string(aws_ssoadmin_permission_set_example.arn),
            permissions_boundary=SsoadminPermissionsBoundaryAttachmentPermissionsBoundary(
                managed_policy_arn="arn:aws:iam::aws:policy/ReadOnlyAccess"
            )
        )
```

## Argument Reference

The following arguments are required:

* `instance_arn` - (Required, Forces new resource) The Amazon Resource Name (ARN) of the SSO Instance under which the operation will be executed.
* `permission_set_arn` - (Required, Forces new resource) The Amazon Resource Name (ARN) of the Permission Set.
* `permissions_boundary` - (Required, Forces new resource) The permissions boundary policy. See below.

### Permissions Boundary

The `permissions_boundary` config block describes the permissions boundary policy to attach. You can reference either an AWS-managed policy, or a customer managed policy, but only one may be set.

* `managed_policy_arn` - (Optional) AWS-managed IAM policy ARN to use as the permissions boundary.
* `customer_managed_policy_reference` - (Optional) Specifies the name and path of a customer managed policy. See below.

### Customer Managed Policy Reference

The `customer_managed_policy_reference` config block describes a customer managed IAM policy. You must have an IAM policy that matches the name and path in each AWS account where you want to deploy your specified permission set.

* `name` - (Required, Forces new resource) Name of the customer managed IAM Policy to be attached.
* `path` - (Optional, Forces new resource) The path to the IAM policy to be attached. The default is `/`. See [IAM Identifiers](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names) for more information.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Permission Set Amazon Resource Name (ARN) and SSO Instance ARN, separated by a comma (`,`).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `10m`)
- `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import SSO Admin Permissions Boundary Attachments using the `permission_set_arn` and `instance_arn`, separated by a comma (`,`). For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.ssoadmin_permissions_boundary_attachment import SsoadminPermissionsBoundaryAttachment
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        SsoadminPermissionsBoundaryAttachment.generate_config_for_import(self, "example", "arn:aws:sso:::permissionSet/ssoins-2938j0x8920sbj72/ps-80383020jr9302rk,arn:aws:sso:::instance/ssoins-2938j0x8920sbj72")
```

Using `terraform import`, import SSO Admin Permissions Boundary Attachments using the `permission_set_arn` and `instance_arn`, separated by a comma (`,`). For example:

```console
% terraform import aws_ssoadmin_permissions_boundary_attachment.example arn:aws:sso:::permissionSet/ssoins-2938j0x8920sbj72/ps-80383020jr9302rk,arn:aws:sso:::instance/ssoins-2938j0x8920sbj72
```

<!-- cache-key: cdktf-0.20.8 input-b18b40e74ac6a4c483e12a6c4261d755ba4289cd16e5a156898b6ed4b6af7691 -->