---
subcategory: "WorkSpaces Web"
layout: "aws"
page_title: "AWS: aws_workspacesweb_session_logger"
description: |-
  Terraform resource for managing an AWS WorkSpaces Web Session Logger.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_workspacesweb_session_logger

Terraform resource for managing an AWS WorkSpaces Web Session Logger.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.s3_bucket import S3Bucket
from imports.aws.s3_bucket_policy import S3BucketPolicy
from imports.aws.workspacesweb_session_logger import WorkspaceswebSessionLogger
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = S3Bucket(self, "example",
            bucket="example-session-logs"
        )
        data_aws_iam_policy_document_example = DataAwsIamPolicyDocument(self, "example_1",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["s3:PutObject"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["workspaces-web.amazonaws.com"],
                    type="Service"
                )
                ],
                resources=["${" + example.arn + "}/*"]
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_iam_policy_document_example.override_logical_id("example")
        aws_s3_bucket_policy_example = S3BucketPolicy(self, "example_2",
            bucket=example.id,
            policy=Token.as_string(data_aws_iam_policy_document_example.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_policy_example.override_logical_id("example")
        aws_workspacesweb_session_logger_example = WorkspaceswebSessionLogger(self, "example_3",
            depends_on=[aws_s3_bucket_policy_example],
            display_name="example-session-logger",
            event_filter=[WorkspaceswebSessionLoggerEventFilter(
                all=[WorkspaceswebSessionLoggerEventFilterAll()]
            )
            ],
            log_configuration=[WorkspaceswebSessionLoggerLogConfiguration(
                s3=[WorkspaceswebSessionLoggerLogConfigurationS3(
                    bucket=example.id,
                    folder_structure="Flat",
                    log_file_format="Json"
                )
                ]
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_workspacesweb_session_logger_example.override_logical_id("example")
```

### Complete Configuration with KMS Encryption

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_caller_identity import DataAwsCallerIdentity
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.data_aws_partition import DataAwsPartition
from imports.aws.kms_key import KmsKey
from imports.aws.s3_bucket import S3Bucket
from imports.aws.s3_bucket_policy import S3BucketPolicy
from imports.aws.workspacesweb_session_logger import WorkspaceswebSessionLogger
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = S3Bucket(self, "example",
            bucket="example-session-logs",
            force_destroy=True
        )
        current = DataAwsCallerIdentity(self, "current")
        data_aws_iam_policy_document_example = DataAwsIamPolicyDocument(self, "example_2",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["s3:PutObject"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["workspaces-web.amazonaws.com"],
                    type="Service"
                )
                ],
                resources=[example.arn, "${" + example.arn + "}/*"]
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_iam_policy_document_example.override_logical_id("example")
        data_aws_partition_current = DataAwsPartition(self, "current_3")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_partition_current.override_logical_id("current")
        aws_s3_bucket_policy_example = S3BucketPolicy(self, "example_4",
            bucket=example.id,
            policy=Token.as_string(data_aws_iam_policy_document_example.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_policy_example.override_logical_id("example")
        kms_key_policy = DataAwsIamPolicyDocument(self, "kms_key_policy",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["kms:*"],
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["arn:${" + data_aws_partition_current.partition + "}:iam::${" + current.account_id + "}:root"
                    ],
                    type="AWS"
                )
                ],
                resources=["*"]
            ), DataAwsIamPolicyDocumentStatement(
                actions=["kms:Encrypt", "kms:GenerateDataKey*", "kms:ReEncrypt*", "kms:Decrypt"
                ],
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["workspaces-web.amazonaws.com"],
                    type="Service"
                )
                ],
                resources=["*"]
            )
            ]
        )
        aws_kms_key_example = KmsKey(self, "example_6",
            description="KMS key for WorkSpaces Web Session Logger",
            policy=Token.as_string(kms_key_policy.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_kms_key_example.override_logical_id("example")
        aws_workspacesweb_session_logger_example = WorkspaceswebSessionLogger(self, "example_7",
            additional_encryption_context={
                "Application": "WorkSpacesWeb",
                "Environment": "Production"
            },
            customer_managed_key=Token.as_string(aws_kms_key_example.arn),
            depends_on=[aws_s3_bucket_policy_example, aws_kms_key_example],
            display_name="example-session-logger",
            event_filter=[WorkspaceswebSessionLoggerEventFilter(
                include=["SessionStart", "SessionEnd"]
            )
            ],
            log_configuration=[WorkspaceswebSessionLoggerLogConfiguration(
                s3=[WorkspaceswebSessionLoggerLogConfigurationS3(
                    bucket=example.id,
                    bucket_owner=Token.as_string(current.account_id),
                    folder_structure="NestedByDate",
                    key_prefix="workspaces-web-logs/",
                    log_file_format="JsonLines"
                )
                ]
            )
            ],
            tags={
                "Environment": "Production",
                "Name": "example-session-logger"
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_workspacesweb_session_logger_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `event_filter` - (Required) Event filter that determines which events are logged. See [Event Filter](#event-filter) below.
* `log_configuration` - (Required) Configuration block for specifying where logs are delivered. See [Log Configuration](#log-configuration) below.

The following arguments are optional:

* `additional_encryption_context` - (Optional) Map of additional encryption context key-value pairs.
* `customer_managed_key` - (Optional) ARN of the customer managed KMS key used to encrypt sensitive information.
* `display_name` - (Optional) Human-readable display name for the session logger resource. Forces replacement if changed.
* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `tags` - (Optional) Map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### Log Configuration

* `s3` - (Required) Configuration block for S3 log delivery. See [S3 Configuration](#s3-configuration) below.

### Event Filter

Exactly one of the following must be specified:

* `all` - (Optional) Block that specifies to monitor all events. Set to `{}` to monitor all events.
* `include` - (Optional) List of specific events to monitor. Valid values include session events like `SessionStart`, `SessionEnd`, etc.

### S3 Configuration

* `bucket` - (Required) S3 bucket name where logs are delivered.
* `folder_structure` - (Required) Folder structure that defines the organizational structure for log files in S3. Valid values: `FlatStructure`, `DateBasedStructure`.
* `log_file_format` - (Required) Format of the log file written to S3. Valid values: `Json`, `Parquet`.
* `bucket_owner` - (Optional) Expected bucket owner of the target S3 bucket.
* `key_prefix` - (Optional) S3 path prefix that determines where log files are stored.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `associated_portal_arns` - List of ARNs of the web portals associated with the session logger.
* `session_logger_arn` - ARN of the session logger.
* `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

~> **Note:** The `additional_encryption_context` and `customer_managed_key` attributes are computed when not specified and will be populated with values from the AWS API response.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import WorkSpaces Web Session Logger using the `session_logger_arn`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.workspacesweb_session_logger import WorkspaceswebSessionLogger
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        WorkspaceswebSessionLogger.generate_config_for_import(self, "example", "arn:aws:workspaces-web:us-west-2:123456789012:sessionLogger/session_logger-id-12345678")
```

Using `terraform import`, import WorkSpaces Web Session Logger using the `session_logger_arn`. For example:

```console
% terraform import aws_workspacesweb_session_logger.example arn:aws:workspaces-web:us-west-2:123456789012:sessionLogger/session_logger-id-12345678
```

<!-- cache-key: cdktf-0.20.8 input-a65eb0132502814d75911849ab31ab9c213ee79769f2aef71353962be3bcc194 -->