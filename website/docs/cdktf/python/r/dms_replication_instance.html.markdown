---
subcategory: "DMS (Database Migration)"
layout: "aws"
page_title: "AWS: aws_dms_replication_instance"
description: |-
  Provides a DMS (Data Migration Service) replication instance resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_dms_replication_instance

Provides a DMS (Data Migration Service) replication instance resource. DMS replication instances can be created, updated, deleted, and imported.

## Example Usage

Create required roles and then create a DMS instance, setting the depends_on to the required role policy attachments.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.dms_replication_instance import DmsReplicationInstance
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy_attachment import IamRolePolicyAttachment
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        dms_assume_role = DataAwsIamPolicyDocument(self, "dms_assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["dms.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        dms_access_for_endpoint = IamRole(self, "dms-access-for-endpoint",
            assume_role_policy=Token.as_string(dms_assume_role.json),
            name="dms-access-for-endpoint"
        )
        dms_cloudwatch_logs_role = IamRole(self, "dms-cloudwatch-logs-role",
            assume_role_policy=Token.as_string(dms_assume_role.json),
            name="dms-cloudwatch-logs-role"
        )
        dms_vpc_role = IamRole(self, "dms-vpc-role",
            assume_role_policy=Token.as_string(dms_assume_role.json),
            name="dms-vpc-role"
        )
        dms_access_for_endpoint_amazon_dms_redshift_s3_role =
        IamRolePolicyAttachment(self, "dms-access-for-endpoint-AmazonDMSRedshiftS3Role",
            policy_arn="arn:aws:iam::aws:policy/service-role/AmazonDMSRedshiftS3Role",
            role=dms_access_for_endpoint.name
        )
        dms_cloudwatch_logs_role_amazon_dms_cloud_watch_logs_role =
        IamRolePolicyAttachment(self, "dms-cloudwatch-logs-role-AmazonDMSCloudWatchLogsRole",
            policy_arn="arn:aws:iam::aws:policy/service-role/AmazonDMSCloudWatchLogsRole",
            role=dms_cloudwatch_logs_role.name
        )
        dms_vpc_role_amazon_dmsvpc_management_role = IamRolePolicyAttachment(self, "dms-vpc-role-AmazonDMSVPCManagementRole",
            policy_arn="arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole",
            role=dms_vpc_role.name
        )
        DmsReplicationInstance(self, "test",
            allocated_storage=20,
            apply_immediately=True,
            auto_minor_version_upgrade=True,
            availability_zone="us-west-2c",
            depends_on=[dms_access_for_endpoint_amazon_dms_redshift_s3_role, dms_cloudwatch_logs_role_amazon_dms_cloud_watch_logs_role, dms_vpc_role_amazon_dmsvpc_management_role
            ],
            engine_version="3.1.4",
            kms_key_arn="arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012",
            multi_az=False,
            preferred_maintenance_window="sun:10:30-sun:14:30",
            publicly_accessible=True,
            replication_instance_class="dms.t2.micro",
            replication_instance_id="test-dms-replication-instance-tf",
            replication_subnet_group_id=test_dms_replication_subnet_group_tf.id,
            tags={
                "Name": "test"
            },
            vpc_security_group_ids=["sg-12345678"]
        )
```

## Argument Reference

This resource supports the following arguments:

* `allocated_storage` - (Optional, Default: 50, Min: 5, Max: 6144) The amount of storage (in gigabytes) to be initially allocated for the replication instance.
* `allow_major_version_upgrade` - (Optional, Default: false) Indicates that major version upgrades are allowed.
* `apply_immediately` - (Optional, Default: false) Indicates whether the changes should be applied immediately or during the next maintenance window. Only used when updating an existing resource.
* `auto_minor_version_upgrade` - (Optional, Default: false) Indicates that minor engine upgrades will be applied automatically to the replication instance during the maintenance window.
* `availability_zone` - (Optional) The EC2 Availability Zone that the replication instance will be created in.
* `engine_version` - (Optional) The engine version number of the replication instance.
* `kms_key_arn` - (Optional) The Amazon Resource Name (ARN) for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kms_key_arn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
* `multi_az` - (Optional) Specifies if the replication instance is a multi-az deployment. You cannot set the `availability_zone` parameter if the `multi_az` parameter is set to `true`.
* `network_type` - (Optional) The type of IP address protocol used by a replication instance. Valid values: `IPV4`, `DUAL`.
* `preferred_maintenance_window` - (Optional) The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).

    - Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week.
    - Format: `ddd:hh24:mi-ddd:hh24:mi`
    - Valid Days: `mon, tue, wed, thu, fri, sat, sun`
    - Constraints: Minimum 30-minute window.

* `publicly_accessible` - (Optional, Default: false) Specifies the accessibility options for the replication instance. A value of true represents an instance with a public IP address. A value of false represents an instance with a private IP address.
* `replication_instance_class` - (Required) The compute and memory capacity of the replication instance as specified by the replication instance class. See [AWS DMS User Guide](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.Types.html) for available instance sizes and advice on which one to choose.
* `replication_instance_id` - (Required) The replication instance identifier. This parameter is stored as a lowercase string.

    - Must contain from 1 to 63 alphanumeric characters or hyphens.
    - First character must be a letter.
    - Cannot end with a hyphen
    - Cannot contain two consecutive hyphens.

* `replication_subnet_group_id` - (Optional) A subnet group to associate with the replication instance.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `vpc_security_group_ids` - (Optional) A list of VPC security group IDs to be used with the replication instance. The VPC security groups must work with the VPC containing the replication instance.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `replication_instance_arn` - The Amazon Resource Name (ARN) of the replication instance.
* `replication_instance_private_ips` -  A list of the private IP addresses of the replication instance.
* `replication_instance_public_ips` - A list of the public IP addresses of the replication instance.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `40m`)
- `update` - (Default `30m`)
- `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import replication instances using the `replication_instance_id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.dms_replication_instance import DmsReplicationInstance
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DmsReplicationInstance.generate_config_for_import(self, "test", "test-dms-replication-instance-tf")
```

Using `terraform import`, import replication instances using the `replication_instance_id`. For example:

```console
% terraform import aws_dms_replication_instance.test test-dms-replication-instance-tf
```

<!-- cache-key: cdktf-0.20.8 input-2a8ab503ceaef9d74fa0c9b95408ac59f3a841f451a3553fdde42db11c32ef45 -->