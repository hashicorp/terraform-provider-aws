---
subcategory: "ECR (Elastic Container Registry)"
layout: "aws"
page_title: "AWS: aws_ecr_replication_configuration"
description: |-
  Provides an Elastic Container Registry Replication Configuration.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ecr_replication_configuration

Provides an Elastic Container Registry Replication Configuration.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_caller_identity import DataAwsCallerIdentity
from imports.aws.data_aws_regions import DataAwsRegions
from imports.aws.ecr_replication_configuration import EcrReplicationConfiguration
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        current = DataAwsCallerIdentity(self, "current")
        example = DataAwsRegions(self, "example")
        aws_ecr_replication_configuration_example =
        EcrReplicationConfiguration(self, "example_2",
            replication_configuration=EcrReplicationConfigurationReplicationConfiguration(
                rule=[EcrReplicationConfigurationReplicationConfigurationRule(
                    destination=[EcrReplicationConfigurationReplicationConfigurationRuleDestination(
                        region=Token.as_string(Fn.lookup_nested(example.names, ["0"])),
                        registry_id=Token.as_string(current.account_id)
                    )
                    ]
                )
                ]
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_ecr_replication_configuration_example.override_logical_id("example")
```

## Multiple Region Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_caller_identity import DataAwsCallerIdentity
from imports.aws.data_aws_regions import DataAwsRegions
from imports.aws.ecr_replication_configuration import EcrReplicationConfiguration
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        current = DataAwsCallerIdentity(self, "current")
        example = DataAwsRegions(self, "example")
        aws_ecr_replication_configuration_example =
        EcrReplicationConfiguration(self, "example_2",
            replication_configuration=EcrReplicationConfigurationReplicationConfiguration(
                rule=[EcrReplicationConfigurationReplicationConfigurationRule(
                    destination=[EcrReplicationConfigurationReplicationConfigurationRuleDestination(
                        region=Token.as_string(Fn.lookup_nested(example.names, ["0"])),
                        registry_id=Token.as_string(current.account_id)
                    ), EcrReplicationConfigurationReplicationConfigurationRuleDestination(
                        region=Token.as_string(Fn.lookup_nested(example.names, ["1"])),
                        registry_id=Token.as_string(current.account_id)
                    )
                    ]
                )
                ]
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_ecr_replication_configuration_example.override_logical_id("example")
```

## Repository Filter Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_caller_identity import DataAwsCallerIdentity
from imports.aws.data_aws_regions import DataAwsRegions
from imports.aws.ecr_replication_configuration import EcrReplicationConfiguration
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        current = DataAwsCallerIdentity(self, "current")
        example = DataAwsRegions(self, "example")
        aws_ecr_replication_configuration_example =
        EcrReplicationConfiguration(self, "example_2",
            replication_configuration=EcrReplicationConfigurationReplicationConfiguration(
                rule=[EcrReplicationConfigurationReplicationConfigurationRule(
                    destination=[EcrReplicationConfigurationReplicationConfigurationRuleDestination(
                        region=Token.as_string(Fn.lookup_nested(example.names, ["0"])),
                        registry_id=Token.as_string(current.account_id)
                    )
                    ],
                    repository_filter=[EcrReplicationConfigurationReplicationConfigurationRuleRepositoryFilter(
                        filter="prod-microservice",
                        filter_type="PREFIX_MATCH"
                    )
                    ]
                )
                ]
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_ecr_replication_configuration_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `replication_configuration` - (Required) Replication configuration for a registry. See [Replication Configuration](#replication-configuration).

### Replication Configuration

* `rule` - (Required) The replication rules for a replication configuration. A maximum of 10 are allowed per `replication_configuration`. See [Rule](#rule)

### Rule

* `destination` - (Required) the details of a replication destination. A maximum of 25 are allowed per `rule`. See [Destination](#destination).
* `repository_filter` - (Optional) filters for a replication rule. See [Repository Filter](#repository-filter).

### Destination

* `region` - (Required) A Region to replicate to.
* `registry_id` - (Required) The account ID of the destination registry to replicate to.

### Repository Filter

* `filter` - (Required) The repository filter details.
* `filter_type` - (Required) The repository filter type. The only supported value is `PREFIX_MATCH`, which is a repository name prefix specified with the filter parameter.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `registry_id` - The registry ID where the replication configuration was created.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ECR Replication Configuration using the `registry_id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.ecr_replication_configuration import EcrReplicationConfiguration
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        EcrReplicationConfiguration.generate_config_for_import(self, "service", "012345678912")
```

Using `terraform import`, import ECR Replication Configuration using the `registry_id`. For example:

```console
% terraform import aws_ecr_replication_configuration.service 012345678912
```

<!-- cache-key: cdktf-0.20.8 input-1e720b09bffb1410913da15b1daa4aaef042cc175055603ba3335ca4406730fc -->