---
subcategory: "ELB Classic"
layout: "aws"
page_title: "AWS: aws_app_cookie_stickiness_policy"
description: |-
  Provides an application cookie stickiness policy, which allows an ELB to wed its stickiness cookie to a cookie generated by your application.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_app_cookie_stickiness_policy

Provides an application cookie stickiness policy, which allows an ELB to wed its sticky cookie's expiration to a cookie generated by your application.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.app_cookie_stickiness_policy import AppCookieStickinessPolicy
from imports.aws.elb import Elb
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        lb = Elb(self, "lb",
            availability_zones=["us-east-1a"],
            listener=[ElbListener(
                instance_port=8000,
                instance_protocol="http",
                lb_port=80,
                lb_protocol="http"
            )
            ],
            name="test-lb"
        )
        AppCookieStickinessPolicy(self, "foo",
            cookie_name="MyAppCookie",
            lb_port=80,
            load_balancer=lb.name,
            name="foo_policy"
        )
```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) Name of the stickiness policy.
* `load_balancer` - (Required) Name of load balancer to which the policy
  should be attached.
* `lb_port` - (Required) Load balancer port to which the policy
  should be applied. This must be an active listener on the load
balancer.
* `cookie_name` - (Required) Application cookie whose lifetime the ELB's cookie should follow.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - ID of the policy.
* `name` - Name of the stickiness policy.
* `load_balancer` - Name of load balancer to which the policy is attached.
* `lb_port` - Load balancer port to which the policy is applied.
* `cookie_name` - Application cookie whose lifetime the ELB's cookie should follow.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import application cookie stickiness policies using the ELB name, port, and policy name separated by colons (`:`). For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.app_cookie_stickiness_policy import AppCookieStickinessPolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        AppCookieStickinessPolicy.generate_config_for_import(self, "example", "my-elb:80:my-policy")
```

Using `terraform import`, import application cookie stickiness policies using the ELB name, port, and policy name separated by colons (`:`). For example:

```console
% terraform import aws_app_cookie_stickiness_policy.example my-elb:80:my-policy
```

<!-- cache-key: cdktf-0.20.8 input-88293d9f7b9b0c56a30ec158ef04e7ebaf1d4abe22c80ea32220c4d2176785a6 -->