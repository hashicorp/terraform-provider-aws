---
subcategory: "CE (Cost Explorer)"
layout: "aws"
page_title: "AWS: aws_ce_anomaly_subscription"
description: |-
  Provides a CE Cost Anomaly Subscription
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ce_anomaly_subscription

Provides a CE Anomaly Subscription.

## Example Usage

### Basic Example

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.ce_anomaly_monitor import CeAnomalyMonitor
from imports.aws.ce_anomaly_subscription import CeAnomalySubscription
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test = CeAnomalyMonitor(self, "test",
            monitor_dimension="SERVICE",
            monitor_type="DIMENSIONAL",
            name="AWSServiceMonitor"
        )
        aws_ce_anomaly_subscription_test = CeAnomalySubscription(self, "test_1",
            frequency="DAILY",
            monitor_arn_list=[test.arn],
            name="DAILYSUBSCRIPTION",
            subscriber=[CeAnomalySubscriptionSubscriber(
                address="abc@example.com",
                type="EMAIL"
            )
            ],
            threshold_expression=CeAnomalySubscriptionThresholdExpression(
                dimension=CeAnomalySubscriptionThresholdExpressionDimension(
                    key="ANOMALY_TOTAL_IMPACT_ABSOLUTE",
                    match_options=["GREATER_THAN_OR_EQUAL"],
                    values=["100"]
                )
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_ce_anomaly_subscription_test.override_logical_id("test")
```

### Threshold Expression Example

#### Using a Percentage Threshold

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.ce_anomaly_subscription import CeAnomalySubscription
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        CeAnomalySubscription(self, "test",
            frequency="DAILY",
            monitor_arn_list=[Token.as_string(aws_ce_anomaly_monitor_test.arn)],
            name="AWSServiceMonitor",
            subscriber=[CeAnomalySubscriptionSubscriber(
                address="abc@example.com",
                type="EMAIL"
            )
            ],
            threshold_expression=CeAnomalySubscriptionThresholdExpression(
                dimension=CeAnomalySubscriptionThresholdExpressionDimension(
                    key="ANOMALY_TOTAL_IMPACT_PERCENTAGE",
                    match_options=["GREATER_THAN_OR_EQUAL"],
                    values=["100"]
                )
            )
        )
```

#### Using an `and` Expression

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.ce_anomaly_subscription import CeAnomalySubscription
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        CeAnomalySubscription(self, "test",
            frequency="DAILY",
            monitor_arn_list=[Token.as_string(aws_ce_anomaly_monitor_test.arn)],
            name="AWSServiceMonitor",
            subscriber=[CeAnomalySubscriptionSubscriber(
                address="abc@example.com",
                type="EMAIL"
            )
            ],
            threshold_expression=CeAnomalySubscriptionThresholdExpression(
                and=[CeAnomalySubscriptionThresholdExpressionAnd(
                    dimension=CeAnomalySubscriptionThresholdExpressionAndDimension(
                        key="ANOMALY_TOTAL_IMPACT_ABSOLUTE",
                        match_options=["GREATER_THAN_OR_EQUAL"],
                        values=["100"]
                    )
                ), CeAnomalySubscriptionThresholdExpressionAnd(
                    dimension=CeAnomalySubscriptionThresholdExpressionAndDimension(
                        key="ANOMALY_TOTAL_IMPACT_PERCENTAGE",
                        match_options=["GREATER_THAN_OR_EQUAL"],
                        values=["50"]
                    )
                )
                ]
            )
        )
```

### SNS Example

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.ce_anomaly_monitor import CeAnomalyMonitor
from imports.aws.ce_anomaly_subscription import CeAnomalySubscription
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.sns_topic import SnsTopic
from imports.aws.sns_topic_policy import SnsTopicPolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        anomaly_monitor = CeAnomalyMonitor(self, "anomaly_monitor",
            monitor_dimension="SERVICE",
            monitor_type="DIMENSIONAL",
            name="AWSServiceMonitor"
        )
        cost_anomaly_updates = SnsTopic(self, "cost_anomaly_updates",
            name="CostAnomalyUpdates"
        )
        sns_topic_policy = DataAwsIamPolicyDocument(self, "sns_topic_policy",
            policy_id="__default_policy_ID",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["SNS:Publish"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["costalerts.amazonaws.com"],
                    type="Service"
                )
                ],
                resources=[cost_anomaly_updates.arn],
                sid="AWSAnomalyDetectionSNSPublishingPermissions"
            ), DataAwsIamPolicyDocumentStatement(
                actions=["SNS:Subscribe", "SNS:SetTopicAttributes", "SNS:RemovePermission", "SNS:Receive", "SNS:Publish", "SNS:ListSubscriptionsByTopic", "SNS:GetTopicAttributes", "SNS:DeleteTopic", "SNS:AddPermission"
                ],
                condition=[DataAwsIamPolicyDocumentStatementCondition(
                    test="StringEquals",
                    values=[account_id.string_value],
                    variable="AWS:SourceOwner"
                )
                ],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["*"],
                    type="AWS"
                )
                ],
                resources=[cost_anomaly_updates.arn],
                sid="__default_statement_ID"
            )
            ]
        )
        default_var = SnsTopicPolicy(self, "default",
            arn=cost_anomaly_updates.arn,
            policy=Token.as_string(sns_topic_policy.json)
        )
        CeAnomalySubscription(self, "realtime_subscription",
            depends_on=[default_var],
            frequency="IMMEDIATE",
            monitor_arn_list=[anomaly_monitor.arn],
            name="RealtimeAnomalySubscription",
            subscriber=[CeAnomalySubscriptionSubscriber(
                address=cost_anomaly_updates.arn,
                type="SNS"
            )
            ]
        )
```

## Argument Reference

The following arguments are required:

* `account_id` - (Optional) The unique identifier for the AWS account in which the anomaly subscription ought to be created.
* `frequency` - (Required) The frequency that anomaly reports are sent. Valid Values: `DAILY` | `IMMEDIATE` | `WEEKLY`.
* `monitor_arn_list` - (Required) A list of cost anomaly monitors.
* `name` - (Required) The name for the subscription.
* `subscriber` - (Required) A subscriber configuration. Multiple subscribers can be defined.
    * `type` - (Required) The type of subscription. Valid Values: `SNS` | `EMAIL`.
    * `address` - (Required) The address of the subscriber. If type is `SNS`, this will be the arn of the sns topic. If type is `EMAIL`, this will be the destination email address.
* `threshold_expression` - (Optional) An Expression object used to specify the anomalies that you want to generate alerts for. See [Threshold Expression](#threshold-expression).
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### Threshold Expression

* `and` - (Optional) Return results that match both [Dimension](#dimension) objects.
* `cost_category` - (Optional) Configuration block for the filter that's based on  values. See [Cost Category](#cost-category) below.
* `dimension` - (Optional) Configuration block for the specific [Dimension](#dimension) to use for.
* `not` - (Optional) Return results that match both [Dimension](#dimension) object.
* `or` - (Optional) Return results that match both [Dimension](#dimension) object.
* `tags` - (Optional) Configuration block for the specific Tag to use for. See [Tags](#tags) below.

### Cost Category

* `key` - (Optional) Unique name of the Cost Category.
* `match_options` - (Optional) Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
* `values` - (Optional) Specific value of the Cost Category.

### Dimension

* `key` - (Optional) Unique name of the Cost Category.
* `match_options` - (Optional) Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
* `values` - (Optional) Specific value of the Cost Category.

### Tags

* `key` - (Optional) Key for the tag.
* `match_options` - (Optional) Match options that you can use to filter your results. MatchOptions is only applicable for actions related to cost category. The default values for MatchOptions is `EQUALS` and `CASE_SENSITIVE`. Valid values are: `EQUALS`,  `ABSENT`, `STARTS_WITH`, `ENDS_WITH`, `CONTAINS`, `CASE_SENSITIVE`, `CASE_INSENSITIVE`.
* `values` - (Optional) Specific value of the Cost Category.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the anomaly subscription.
* `id` - Unique ID of the anomaly subscription. Same as `arn`.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_ce_anomaly_subscription` using the `id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.ce_anomaly_subscription import CeAnomalySubscription
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        CeAnomalySubscription.generate_config_for_import(self, "example", "AnomalySubscriptionARN")
```

Using `terraform import`, import `aws_ce_anomaly_subscription` using the `id`. For example:

```console
% terraform import aws_ce_anomaly_subscription.example AnomalySubscriptionARN
```

<!-- cache-key: cdktf-0.20.1 input-2104ba4f8073cdd07506ce63a6f6f442efb8b20273edbd90f98ba5dd9cbef5cf -->