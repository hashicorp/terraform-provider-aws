---
subcategory: "Security Hub"
layout: "aws"
page_title: "AWS: aws_securityhub_standards_control"
description: |-
  Enable/disable Security Hub standards controls.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_securityhub_standards_control

Disable/enable Security Hub standards control in the current region.

The `aws_securityhub_standards_control` behaves differently from normal resources, in that
Terraform does not _create_ this resource, but instead "adopts" it
into management. When you _delete_ this resource configuration, Terraform "abandons" resource as is and just removes it from the state.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.securityhub_account import SecurityhubAccount
from imports.aws.securityhub_standards_control import SecurityhubStandardsControl
from imports.aws.securityhub_standards_subscription import SecurityhubStandardsSubscription
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = SecurityhubAccount(self, "example")
        cis_aws_foundations_benchmark = SecurityhubStandardsSubscription(self, "cis_aws_foundations_benchmark",
            depends_on=[example],
            standards_arn="arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0"
        )
        SecurityhubStandardsControl(self, "ensure_iam_password_policy_prevents_password_reuse",
            control_status="DISABLED",
            depends_on=[cis_aws_foundations_benchmark],
            disabled_reason="We handle password policies within Okta",
            standards_control_arn="arn:aws:securityhub:us-east-1:111111111111:control/cis-aws-foundations-benchmark/v/1.2.0/1.10"
        )
```

## Argument Reference

This resource supports the following arguments:

* `standards_control_arn` - (Required) The standards control ARN. See the AWS documentation for how to list existing controls using [`get-enabled-standards`](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/securityhub/get-enabled-standards.html) and [`describe-standards-controls`](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/securityhub/describe-standards-controls.html).
* `control_status` – (Required) The control status could be `ENABLED` or `DISABLED`. You have to specify `disabled_reason` argument for `DISABLED` control status.
* `disabled_reason` – (Optional) A description of the reason why you are disabling a security standard control. If you specify this attribute, `control_status` will be set to `DISABLED` automatically.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The standard control ARN.
* `control_id` – The identifier of the security standard control.
* `control_status_updated_at` – The date and time that the status of the security standard control was most recently updated.
* `description` – The standard control longer description. Provides information about what the control is checking for.
* `related_requirements` – The list of requirements that are related to this control.
* `remediation_url` – A link to remediation information for the control in the Security Hub user documentation.
* `severity_rating` – The severity of findings generated from this security standard control.
* `title` – The standard control title.

<!-- cache-key: cdktf-0.20.8 input-4f2686dbc145e094fc564010e6dbf6ac103f5be38f045e92ccb633c43bb96b39 -->