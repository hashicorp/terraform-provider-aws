---
subcategory: "EC2 (Elastic Compute Cloud)"
layout: "aws"
page_title: "AWS: aws_ec2_tag"
description: |-
  Manages an individual EC2 resource tag
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ec2_tag

Manages an individual EC2 resource tag. This resource should only be used in cases where EC2 resources are created outside Terraform (e.g., AMIs), being shared via Resource Access Manager (RAM), or implicitly created by other means (e.g., Transit Gateway VPN Attachments).

~> **NOTE:** This tagging resource should not be combined with the Terraform resource for managing the parent resource. For example, using `aws_vpc` and `aws_ec2_tag` to manage tags of the same VPC will cause a perpetual difference where the `aws_vpc` resource will try to remove the tag being added by the `aws_ec2_tag` resource.

~> **NOTE:** This tagging resource does not use the [provider `ignore_tags` configuration](/docs/providers/aws/index.html#ignore_tags).

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.customer_gateway import CustomerGateway
from imports.aws.ec2_tag import Ec2Tag
from imports.aws.ec2_transit_gateway import Ec2TransitGateway
from imports.aws.vpn_connection import VpnConnection
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = CustomerGateway(self, "example",
            bgp_asn=Token.as_string(65000),
            ip_address="172.0.0.1",
            type="ipsec.1"
        )
        aws_ec2_transit_gateway_example = Ec2TransitGateway(self, "example_1")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_ec2_transit_gateway_example.override_logical_id("example")
        aws_vpn_connection_example = VpnConnection(self, "example_2",
            customer_gateway_id=example.id,
            transit_gateway_id=Token.as_string(aws_ec2_transit_gateway_example.id),
            type=example.type
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpn_connection_example.override_logical_id("example")
        aws_ec2_tag_example = Ec2Tag(self, "example_3",
            key="Name",
            resource_id=Token.as_string(aws_vpn_connection_example.transit_gateway_attachment_id),
            value="Hello World"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_ec2_tag_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `resource_id` - (Required) The ID of the EC2 resource to manage the tag for.
* `key` - (Required) The tag name.
* `value` - (Required) The value of the tag.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - EC2 resource identifier and key, separated by a comma (`,`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_ec2_tag` using the EC2 resource identifier and key, separated by a comma (`,`). For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.ec2_tag import Ec2Tag
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        Ec2Tag.generate_config_for_import(self, "example", "tgw-attach-1234567890abcdef,Name")
```

Using `terraform import`, import `aws_ec2_tag` using the EC2 resource identifier and key, separated by a comma (`,`). For example:

```console
% terraform import aws_ec2_tag.example tgw-attach-1234567890abcdef,Name
```

<!-- cache-key: cdktf-0.20.8 input-426f65492ad1473d61135571b53f491b7c40004b57450d752d563e20252feea5 -->