---
subcategory: "Redshift Data"
layout: "aws"
page_title: "AWS: aws_redshiftdata_statement"
description: |-
  Provides a Redshift Data Statement execution resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_redshiftdata_statement

Executes a Redshift Data Statement.

## Example Usage

### cluster_identifier

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.redshiftdata_statement import RedshiftdataStatement
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        RedshiftdataStatement(self, "example",
            cluster_identifier=Token.as_string(aws_redshift_cluster_example.cluster_identifier),
            database=Token.as_string(aws_redshift_cluster_example.database_name),
            db_user=Token.as_string(aws_redshift_cluster_example.master_username),
            sql="CREATE GROUP group_name;"
        )
```

### workgroup_name

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.redshiftdata_statement import RedshiftdataStatement
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        RedshiftdataStatement(self, "example",
            database="dev",
            sql="CREATE GROUP group_name;",
            workgroup_name=Token.as_string(aws_redshiftserverless_workgroup_example.workgroup_name)
        )
```

## Argument Reference

The following arguments are required:

* `database` - (Required) The name of the database.
* `sql` - (Required) The SQL statement text to run.

The following arguments are optional:

* `cluster_identifier` - (Optional) The cluster identifier. This parameter is required when connecting to a cluster and authenticating using either Secrets Manager or temporary credentials.
* `db_user` - (Optional) The database user name.
* `secret_arn` - (Optional) The name or ARN of the secret that enables access to the database.
* `statement_name` - (Optional) The name of the SQL statement. You can name the SQL statement when you create it to identify the query.
* `with_event` - (Optional) A value that indicates whether to send an event to the Amazon EventBridge event bus after the SQL statement runs.
* `workgroup_name` - (Optional) The serverless workgroup name. This parameter is required when connecting to a serverless workgroup and authenticating using either Secrets Manager or temporary credentials.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The Redshift Data Statement ID.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Redshift Data Statements using the `id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.redshiftdata_statement import RedshiftdataStatement
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        RedshiftdataStatement.generate_config_for_import(self, "example", "example")
```

Using `terraform import`, import Redshift Data Statements using the `id`. For example:

```console
% terraform import aws_redshiftdata_statement.example example
```

<!-- cache-key: cdktf-0.20.8 input-890483d136320a7936958ee447618d785135e348982c003fa40f68a3e28cefbc -->