---
subcategory: "Pinpoint"
layout: "aws"
page_title: "AWS: aws_pinpoint_event_stream"
description: |-
  Provides a Pinpoint Event Stream resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_pinpoint_event_stream

Provides a Pinpoint Event Stream resource.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy import IamRolePolicy
from imports.aws.kinesis_stream import KinesisStream
from imports.aws.pinpoint_app import PinpointApp
from imports.aws.pinpoint_event_stream import PinpointEventStream
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test_stream = KinesisStream(self, "test_stream",
            name="pinpoint-kinesis-test",
            shard_count=1
        )
        app = PinpointApp(self, "app")
        assume_role = DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["pinpoint.us-east-1.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        test_role_policy = DataAwsIamPolicyDocument(self, "test_role_policy",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["kinesis:PutRecords", "kinesis:DescribeStream"],
                effect="Allow",
                resources=["arn:aws:kinesis:us-east-1:*:*/*"]
            )
            ]
        )
        test_role = IamRole(self, "test_role",
            assume_role_policy=Token.as_string(assume_role.json)
        )
        aws_iam_role_policy_test_role_policy = IamRolePolicy(self, "test_role_policy_5",
            name="test_policy",
            policy=Token.as_string(test_role_policy.json),
            role=test_role.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_test_role_policy.override_logical_id("test_role_policy")
        PinpointEventStream(self, "stream",
            application_id=app.application_id,
            destination_stream_arn=test_stream.arn,
            role_arn=test_role.arn
        )
```

## Argument Reference

This resource supports the following arguments:

* `application_id` - (Required) The application ID.
* `destination_stream_arn` - (Required) The Amazon Resource Name (ARN) of the Amazon Kinesis stream or Firehose delivery stream to which you want to publish events.
* `role_arn` - (Required) The IAM role that authorizes Amazon Pinpoint to publish events to the stream in your account.

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Pinpoint Event Stream using the `application-id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.pinpoint_event_stream import PinpointEventStream
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        PinpointEventStream.generate_config_for_import(self, "stream", "application-id")
```

Using `terraform import`, import Pinpoint Event Stream using the `application-id`. For example:

```console
% terraform import aws_pinpoint_event_stream.stream application-id
```

<!-- cache-key: cdktf-0.20.8 input-781c351d9404f1abba2f962888a231281d00739d19baa3253947f07c74cba124 -->