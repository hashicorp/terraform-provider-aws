---
subcategory: "EventBridge"
layout: "aws"
page_title: "AWS: aws_cloudwatch_event_archive"
description: |-
  Provides an EventBridge event archive resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cloudwatch_event_archive

Provides an EventBridge event archive resource.

~> **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_event_archive import CloudwatchEventArchive
from imports.aws.cloudwatch_event_bus import CloudwatchEventBus
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        order = CloudwatchEventBus(self, "order",
            name="orders"
        )
        aws_cloudwatch_event_archive_order = CloudwatchEventArchive(self, "order_1",
            event_source_arn=order.arn,
            name="order-archive"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cloudwatch_event_archive_order.override_logical_id("order")
```

## Example Usage Optional Arguments

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_event_archive import CloudwatchEventArchive
from imports.aws.cloudwatch_event_bus import CloudwatchEventBus
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        order = CloudwatchEventBus(self, "order",
            name="orders"
        )
        aws_cloudwatch_event_archive_order = CloudwatchEventArchive(self, "order_1",
            description="Archived events from order service",
            event_pattern=Token.as_string(
                Fn.jsonencode({
                    "source": ["company.team.order"]
                })),
            event_source_arn=order.arn,
            name="order-archive",
            retention_days=7
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cloudwatch_event_archive_order.override_logical_id("order")
```

## Example Usage CMK Encryption

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_event_archive import CloudwatchEventArchive
from imports.aws.cloudwatch_event_bus import CloudwatchEventBus
from imports.aws.data_aws_caller_identity import DataAwsCallerIdentity
from imports.aws.data_aws_partition import DataAwsPartition
from imports.aws.kms_key import KmsKey
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = CloudwatchEventBus(self, "example",
            name="example"
        )
        current = DataAwsCallerIdentity(self, "current")
        data_aws_partition_current = DataAwsPartition(self, "current_2")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_partition_current.override_logical_id("current")
        aws_kms_key_example = KmsKey(self, "example_3",
            deletion_window_in_days=7,
            policy=Token.as_string(
                Fn.jsonencode({
                    "Id": "key-policy-example",
                    "Statement": [{
                        "Action": "kms:*",
                        "Effect": "Allow",
                        "Principal": {
                            "AWS": "arn:${" + data_aws_partition_current.partition + "}:iam::${" + current.account_id + "}:root"
                        },
                        "Resource": "*",
                        "Sid": "Enable IAM User Permissions"
                    }, {
                        "Action": ["kms:DescribeKey"],
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "events.amazonaws.com"
                        },
                        "Resource": "*",
                        "Sid": "Allow describing of the key"
                    }, {
                        "Action": ["kms:GenerateDataKey", "kms:Decrypt", "kms:ReEncrypt*"],
                        "Condition": {
                            "StringEquals": {
                                "kms:_encryption_context:aws:events:event-bus:arn": example.arn
                            }
                        },
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "events.amazonaws.com"
                        },
                        "Resource": "*",
                        "Sid": "Allow use of the key"
                    }
                    ],
                    "Version": "2012-10-17"
                })),
            tags={
                "EventBridgeApiDestinations": "true"
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_kms_key_example.override_logical_id("example")
        aws_cloudwatch_event_archive_example = CloudwatchEventArchive(self, "example_4",
            event_source_arn=example.arn,
            kms_key_identifier=Token.as_string(aws_kms_key_example.id),
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cloudwatch_event_archive_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `name` - (Required) Name of the archive. The archive name cannot exceed 48 characters.
* `event_source_arn` - (Required) ARN of the event bus associated with the archive. Only events from this event bus are sent to the archive.
* `description` - (Optional) Description for the archive.
* `event_pattern` - (Optional) Event pattern to use to filter events sent to the archive. By default, it attempts to archive every event received in the `event_source_arn`.
* `kms_key_identifier` - (Optional) Identifier of the AWS KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt this archive. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN.
* `retention_days` - (Optional) The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the archive.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import an EventBridge archive using the `name`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_event_archive import CloudwatchEventArchive
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        CloudwatchEventArchive.generate_config_for_import(self, "importedEventArchive", "order-archive")
```

Using `terraform import`, import an EventBridge archive using the `name`. For example:

```console
% terraform import aws_cloudwatch_event_archive.imported_event_archive order-archive
```

<!-- cache-key: cdktf-0.20.8 input-685ee4807930fb6002c60880adb1a4918452c6805561c2b994e8ce44f85a6a77 -->