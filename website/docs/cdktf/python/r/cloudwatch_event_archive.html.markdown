---
subcategory: "EventBridge"
layout: "aws"
page_title: "AWS: aws_cloudwatch_event_archive"
description: |-
  Provides an EventBridge event archive resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cloudwatch_event_archive

Provides an EventBridge event archive resource.

~> **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_event_archive import CloudwatchEventArchive
from imports.aws.cloudwatch_event_bus import CloudwatchEventBus
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        order = CloudwatchEventBus(self, "order",
            name="orders"
        )
        aws_cloudwatch_event_archive_order = CloudwatchEventArchive(self, "order_1",
            event_source_arn=order.arn,
            name="order-archive"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cloudwatch_event_archive_order.override_logical_id("order")
```

## Example all optional arguments

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_event_archive import CloudwatchEventArchive
from imports.aws.cloudwatch_event_bus import CloudwatchEventBus
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        order = CloudwatchEventBus(self, "order",
            name="orders"
        )
        aws_cloudwatch_event_archive_order = CloudwatchEventArchive(self, "order_1",
            description="Archived events from order service",
            event_pattern=Token.as_string(
                Fn.jsonencode({
                    "source": ["company.team.order"]
                })),
            event_source_arn=order.arn,
            name="order-archive",
            retention_days=7
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cloudwatch_event_archive_order.override_logical_id("order")
```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The name of the new event archive. The archive name cannot exceed 48 characters.
* `event_source_arn` - (Required) Event bus source ARN from where these events should be archived.
* `description` - (Optional) The description of the new event archive.
* `event_pattern` - (Optional) Instructs the new event archive to only capture events matched by this pattern. By default, it attempts to archive every event received in the `event_source_arn`.
* `retention_days` - (Optional) The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The Amazon Resource Name (ARN) of the event archive.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import an EventBridge archive using the `name`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_event_archive import CloudwatchEventArchive
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        CloudwatchEventArchive.generate_config_for_import(self, "importedEventArchive", "order-archive")
```

Using `terraform import`, import an EventBridge archive using the `name`. For example:

```console
% terraform import aws_cloudwatch_event_archive.imported_event_archive order-archive
```

<!-- cache-key: cdktf-0.20.8 input-230aef7101e3a99451d3a96541a344389622f8e93208093246611e6e08ee12b5 -->