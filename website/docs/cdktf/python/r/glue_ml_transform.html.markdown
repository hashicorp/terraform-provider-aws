---
subcategory: "Glue"
layout: "aws"
page_title: "AWS: aws_glue_ml_transform"
description: |-
  Provides a Glue ML Transform resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_glue_ml_transform

Provides a Glue ML Transform resource.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.glue_catalog_database import GlueCatalogDatabase
from imports.aws.glue_catalog_table import GlueCatalogTable
from imports.aws.glue_ml_transform import GlueMlTransform
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test = GlueCatalogDatabase(self, "test",
            name="example"
        )
        aws_glue_catalog_table_test = GlueCatalogTable(self, "test_1",
            database_name=test.name,
            name="example",
            owner="my_owner",
            parameters={
                "param1": "param1_val"
            },
            partition_keys=[GlueCatalogTablePartitionKeys(
                comment="my_column_1_comment",
                name="my_column_1",
                type="int"
            ), GlueCatalogTablePartitionKeys(
                comment="my_column_2_comment",
                name="my_column_2",
                type="string"
            )
            ],
            retention=1,
            storage_descriptor=GlueCatalogTableStorageDescriptor(
                bucket_columns=["bucket_column_1"],
                columns=[GlueCatalogTableStorageDescriptorColumns(
                    comment="my_column1_comment",
                    name="my_column_1",
                    type="int"
                ), GlueCatalogTableStorageDescriptorColumns(
                    comment="my_column2_comment",
                    name="my_column_2",
                    type="string"
                )
                ],
                compressed=False,
                input_format="SequenceFileInputFormat",
                location="my_location",
                number_of_buckets=1,
                output_format="SequenceFileInputFormat",
                parameters={
                    "param1": "param1_val"
                },
                ser_de_info=GlueCatalogTableStorageDescriptorSerDeInfo(
                    name="ser_de_name",
                    parameters={
                        "param1": "param_val_1"
                    },
                    serialization_library="org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe"
                ),
                skewed_info=GlueCatalogTableStorageDescriptorSkewedInfo(
                    skewed_column_names=["my_column_1"],
                    skewed_column_value_location_maps={
                        "my_column_1": "my_column_1_val_loc_map"
                    },
                    skewed_column_values=["skewed_val_1"]
                ),
                sort_columns=[GlueCatalogTableStorageDescriptorSortColumns(
                    column="my_column_1",
                    sort_order=1
                )
                ],
                stored_as_sub_directories=False
            ),
            table_type="VIRTUAL_VIEW",
            view_expanded_text="view_expanded_text_1",
            view_original_text="view_original_text_1"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_glue_catalog_table_test.override_logical_id("test")
        aws_glue_ml_transform_test = GlueMlTransform(self, "test_2",
            depends_on=[aws_iam_role_policy_attachment_test],
            input_record_tables=[GlueMlTransformInputRecordTables(
                database_name=Token.as_string(aws_glue_catalog_table_test.database_name),
                table_name=Token.as_string(aws_glue_catalog_table_test.name)
            )
            ],
            name="example",
            parameters=GlueMlTransformParameters(
                find_matches_parameters=GlueMlTransformParametersFindMatchesParameters(
                    primary_key_column_name="my_column_1"
                ),
                transform_type="FIND_MATCHES"
            ),
            role_arn=Token.as_string(aws_iam_role_test.arn)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_glue_ml_transform_test.override_logical_id("test")
```

## Argument Reference

This resource supports the following arguments:

* `name` – (Required) The name you assign to this ML Transform. It must be unique in your account.
* `input_record_tables` - (Required)  A list of AWS Glue table definitions used by the transform. see [Input Record Tables](#input_record_tables).
* `parameters` - (Required) The algorithmic parameters that are specific to the transform type used. Conditionally dependent on the transform type. see [Parameters](#parameters).
* `role_arn` – (Required) The ARN of the IAM role associated with this ML Transform.
* `description` – (Optional) Description of the ML Transform.
* `glue_version` - (Optional) The version of glue to use, for example "1.0". For information about available versions, see the [AWS Glue Release Notes](https://docs.aws.amazon.com/glue/latest/dg/release-notes.html).
* `max_capacity` – (Optional) The number of AWS Glue data processing units (DPUs) that are allocated to task runs for this transform. You can allocate from `2` to `100` DPUs; the default is `10`. `max_capacity` is a mutually exclusive option with `number_of_workers` and `worker_type`.
* `max_retries` – (Optional) The maximum number of times to retry this ML Transform if it fails.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `timeout` – (Optional) The ML Transform timeout in minutes. The default is 2880 minutes (48 hours).
* `worker_type` - (Optional) The type of predefined worker that is allocated when an ML Transform runs. Accepts a value of `Standard`, `G.1X`, or `G.2X`. Required with `number_of_workers`.
* `number_of_workers` - (Optional) The number of workers of a defined `worker_type` that are allocated when an ML Transform runs. Required with `worker_type`.

### input_record_tables

* `database_name` - (Required) A database name in the AWS Glue Data Catalog.
* `table_name` - (Required) A table name in the AWS Glue Data Catalog.
* `catalog_id` - (Optional) A unique identifier for the AWS Glue Data Catalog.
* `connection_name`- (Optional) The name of the connection to the AWS Glue Data Catalog.

### parameters

* `transform_type` - (Required) The type of machine learning transform. For information about the types of machine learning transforms, see [Creating Machine Learning Transforms](http://docs.aws.amazon.com/glue/latest/dg/add-job-machine-learning-transform.html).
* `find_matches_parameters` - (Required) The parameters for the find matches algorithm. see [Find Matches Parameters](#find_matches_parameters).

#### find_matches_parameters

* `accuracy_cost_trade_off` - (Optional) The value that is selected when tuning your transform for a balance between accuracy and cost.
* `enforce_provided_labels` - (Optional) The value to switch on or off to force the output to match the provided labels from users.
* `precision_recall_trade_off` - (Optional) The value selected when tuning your transform for a balance between precision and recall.
* `primary_key_column_name` - (Optional) The name of a column that uniquely identifies rows in the source table.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of Glue ML Transform.
* `id` - Glue ML Transform ID.
* `label_count` - The number of labels available for this transform.
* `schema` - The object that represents the schema that this transform accepts. see [Schema](#schema).
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

### schema

* `name` - The name of the column.
* `data_type` - The type of data in the column.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Glue ML Transforms using `id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.glue_ml_transform import GlueMlTransform
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        GlueMlTransform.generate_config_for_import(self, "example", "tfm-c2cafbe83b1c575f49eaca9939220e2fcd58e2d5")
```

Using `terraform import`, import Glue ML Transforms using `id`. For example:

```console
% terraform import aws_glue_ml_transform.example tfm-c2cafbe83b1c575f49eaca9939220e2fcd58e2d5
```

<!-- cache-key: cdktf-0.20.8 input-295ef64caa0ed9cd96476b3d72c04967e7f94dc142182bf5b2175f9cde26f649 -->