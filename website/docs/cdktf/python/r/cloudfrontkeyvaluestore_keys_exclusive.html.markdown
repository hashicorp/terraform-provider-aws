---
subcategory: "CloudFront KeyValueStore"
layout: "aws"
page_title: "AWS: aws_cloudfrontkeyvaluestore_keys_exclusive"
description: |-
  Terraform resource for maintaining exclusive management of resource key value pairs defined in an AWS CloudFront KeyValueStore.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cloudfrontkeyvaluestore_keys_exclusive

Terraform resource for maintaining exclusive management of resource key value pairs defined in an AWS CloudFront KeyValueStore.

!> This resource takes exclusive ownership over key value pairs defined in a KeyValueStore. This includes removal of key value pairs which are not explicitly configured. To prevent persistent drift, ensure any [`aws_cloudfrontkeyvaluestore_key`](./cloudfrontkeyvaluestore_key.html.markdown) resources managed alongside this resource have an equivalent `resource_key_value_pair` argument.

~> Destruction of this resource means Terraform will no longer manage reconciliation of the configured key value pairs. It __will not__ delete the configured key value pairs from the KeyValueStore.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudfront_key_value_store import CloudfrontKeyValueStore
from imports.aws.cloudfrontkeyvaluestore_keys_exclusive import CloudfrontkeyvaluestoreKeysExclusive
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = CloudfrontKeyValueStore(self, "example",
            comment="This is an example key value store",
            name="ExampleKeyValueStore"
        )
        aws_cloudfrontkeyvaluestore_keys_exclusive_example =
        CloudfrontkeyvaluestoreKeysExclusive(self, "example_1",
            key_value_store_arn=example.arn,
            resource_key_value_pair=[CloudfrontkeyvaluestoreKeysExclusiveResourceKeyValuePair(
                key="Test Key",
                value="Test Value"
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cloudfrontkeyvaluestore_keys_exclusive_example.override_logical_id("example")
```

### Disallow Key Value Pairs

To automatically remove any configured key value pairs, omit a `resource_key_value_pair` block.

~> This will not __prevent__ key value pairs from being defined in a KeyValueStore via Terraform (or any other interface). This resource enables bringing key value pairs into a configured state, however, this reconciliation happens only when `apply` is proactively run.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudfrontkeyvaluestore_keys_exclusive import CloudfrontkeyvaluestoreKeysExclusive
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        CloudfrontkeyvaluestoreKeysExclusive(self, "example",
            key_value_store_arn=Token.as_string(aws_cloudfront_key_value_store_example.arn)
        )
```

## Argument Reference

The following arguments are required:

* `key_value_store_arn` - (Required) Amazon Resource Name (ARN) of the Key Value Store.

The following arguments are optional:

* `max_batch_size` - (Optional) Maximum resource key values pairs that will update in a single API request. AWS has a default quota of 50 keys or a 3 MB payload, whichever is reached first. Defaults to `50`.
* `resource_key_value_pair` - (Optional) A list of all resource key value pairs associated with the KeyValueStore.
See [`resource_key_value_pair`](#resource_key_value_pair) below.

### `resource_key_value_pair`

The following arguments are required:

* `key` - (Required) Key to put.
* `value` - (Required) Value to put.

## Attribute Reference

This resource exports no additional attributes.

* `total_size_in_bytes` - Total size of the Key Value Store in bytes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import AWS CloudFront KeyValueStore Key Value Pairs using the `key_value_store_arn`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudfrontkeyvaluestore_keys_exclusive import CloudfrontkeyvaluestoreKeysExclusive
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        CloudfrontkeyvaluestoreKeysExclusive.generate_config_for_import(self, "example", "arn:aws:cloudfront::111111111111:key-value-store/8562g61f-caba-2845-9d99-b97diwae5d3c")
```

Using `terraform import`, import AWS CloudFront KeyValueStore Key Value Pairs using the `key_value_store_arn`. For example:

```console
% terraform import aws_cloudfrontkeyvaluestore_keys_exclusive.example arn:aws:cloudfront::111111111111:key-value-store/8562g61f-caba-2845-9d99-b97diwae5d3c
```

<!-- cache-key: cdktf-0.20.8 input-9d4206c2fb5eedbe5aa895264a1ce630fae8caccc816a4b22d49765414ee73dd -->