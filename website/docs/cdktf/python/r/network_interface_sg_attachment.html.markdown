---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_network_interface_sg_attachment"
description: |-
  Associates a security group with a network interface.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_network_interface_sg_attachment

This resource attaches a security group to an Elastic Network Interface (ENI).
It can be used to attach a security group to any existing ENI, be it a
secondary ENI or one attached as the primary interface on an instance.

~> **NOTE on instances, interfaces, and security groups:** Terraform currently
provides the capability to assign security groups via the [`aws_instance`][1]
and the [`aws_network_interface`][2] resources. Using this resource in
conjunction with security groups provided in-line in those resources will cause
conflicts, and will lead to spurious diffs and undefined behavior - please use
one or the other.

[1]: /docs/providers/aws/d/instance.html
[2]: /docs/providers/aws/r/network_interface.html

## Example Usage

The following provides a very basic example of setting up an instance (provided
by `instance`) in the default security group, creating a security group
(provided by `sg`) and then attaching the security group to the instance's
primary network interface via the `aws_network_interface_sg_attachment` resource,
named `sg_attachment`:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_ami import DataAwsAmi
from imports.aws.instance import Instance
from imports.aws.network_interface_sg_attachment import NetworkInterfaceSgAttachment
from imports.aws.security_group import SecurityGroup
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        sg = SecurityGroup(self, "sg",
            tags={
                "type": "terraform-test-security-group"
            }
        )
        ami = DataAwsAmi(self, "ami",
            filter=[DataAwsAmiFilter(
                name="name",
                values=["amzn-ami-hvm-*"]
            )
            ],
            most_recent=True,
            owners=["amazon"]
        )
        instance = Instance(self, "instance",
            ami=Token.as_string(ami.id),
            instance_type="t2.micro",
            tags={
                "type": "terraform-test-instance"
            }
        )
        NetworkInterfaceSgAttachment(self, "sg_attachment",
            network_interface_id=instance.primary_network_interface_id,
            security_group_id=sg.id
        )
```

In this example, `instance` is provided by the `aws_instance` data source,
fetching an external instance, possibly not managed by Terraform.
`sg_attachment` then attaches to the output instance's `network_interface_id`:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_instance import DataAwsInstance
from imports.aws.network_interface_sg_attachment import NetworkInterfaceSgAttachment
from imports.aws.security_group import SecurityGroup
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        sg = SecurityGroup(self, "sg",
            tags={
                "type": "terraform-test-security-group"
            }
        )
        instance = DataAwsInstance(self, "instance",
            instance_id="i-1234567890abcdef0"
        )
        NetworkInterfaceSgAttachment(self, "sg_attachment",
            network_interface_id=Token.as_string(instance.network_interface_id),
            security_group_id=sg.id
        )
```

## Argument Reference

* `security_group_id` - (Required) The ID of the security group.
* `network_interface_id` - (Required) The ID of the network interface to attach to.

## Attribute Reference

This resource exports no additional attributes.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `3m`)
- `read` - (Default `3m`)
- `delete` - (Default `3m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Network Interface Security Group attachments using the associated network interface ID and security group ID, separated by an underscore (`_`). For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.network_interface_sg_attachment import NetworkInterfaceSgAttachment
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        NetworkInterfaceSgAttachment.generate_config_for_import(self, "sgAttachment", "eni-1234567890abcdef0_sg-1234567890abcdef0")
```

Using `terraform import`, import Network Interface Security Group attachments using the associated network interface ID and security group ID, separated by an underscore (`_`). For example:

```console
% terraform import aws_network_interface_sg_attachment.sg_attachment eni-1234567890abcdef0_sg-1234567890abcdef0
```

<!-- cache-key: cdktf-0.20.8 input-0320c62534ccc3510c781ee7478886cd1645618e9047560ebb40061c84f69576 -->