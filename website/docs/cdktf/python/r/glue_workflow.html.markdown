---
subcategory: "Glue"
layout: "aws"
page_title: "AWS: aws_glue_workflow"
description: |-
  Provides a Glue Workflow resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_glue_workflow

Provides a Glue Workflow resource.
The workflow graph (DAG) can be build using the `aws_glue_trigger` resource.
See the example below for creating a graph with four nodes (two triggers and two jobs).

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.glue_trigger import GlueTrigger
from imports.aws.glue_workflow import GlueWorkflow
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = GlueWorkflow(self, "example",
            name="example"
        )
        GlueTrigger(self, "example-inner",
            actions=[GlueTriggerActions(
                job_name="another-example-job"
            )
            ],
            name="trigger-inner",
            predicate=GlueTriggerPredicate(
                conditions=[GlueTriggerPredicateConditions(
                    job_name="example-job",
                    state="SUCCEEDED"
                )
                ]
            ),
            type="CONDITIONAL",
            workflow_name=example.name
        )
        GlueTrigger(self, "example-start",
            actions=[GlueTriggerActions(
                job_name="example-job"
            )
            ],
            name="trigger-start",
            type="ON_DEMAND",
            workflow_name=example.name
        )
```

## Argument Reference

This resource supports the following arguments:

* `name` – (Required) The name you assign to this workflow.
* `default_run_properties` – (Optional) A map of default run properties for this workflow. These properties are passed to all jobs associated to the workflow.
* `description` – (Optional) Description of the workflow.
* `max_concurrent_runs` - (Optional) Prevents exceeding the maximum number of concurrent runs of any of the component jobs. If you leave this parameter blank, there is no limit to the number of concurrent workflow runs.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of Glue Workflow
* `id` - Workflow name
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Glue Workflows using `name`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.glue_workflow import GlueWorkflow
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        GlueWorkflow.generate_config_for_import(self, "myWorkflow", "MyWorkflow")
```

Using `terraform import`, import Glue Workflows using `name`. For example:

```console
% terraform import aws_glue_workflow.MyWorkflow MyWorkflow
```

<!-- cache-key: cdktf-0.20.8 input-7df9adc6f57f0dd25966f803f616a0d5ba6f246209f657e6b2508d999ef81f32 -->