---
subcategory: "Redshift"
layout: "aws"
page_title: "AWS: aws_redshift_scheduled_action"
description: |-
  Provides a Redshift Scheduled Action resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_redshift_scheduled_action

## Example Usage

### Pause Cluster Action

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.iam_policy import IamPolicy
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy_attachment import IamRolePolicyAttachment
from imports.aws.redshift_scheduled_action import RedshiftScheduledAction
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        assume_role = DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["scheduler.redshift.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        example = DataAwsIamPolicyDocument(self, "example",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["redshift:PauseCluster", "redshift:ResumeCluster", "redshift:ResizeCluster"
                ],
                effect="Allow",
                resources=["*"]
            )
            ]
        )
        aws_iam_policy_example = IamPolicy(self, "example_2",
            name="redshift_scheduled_action",
            policy=Token.as_string(example.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_policy_example.override_logical_id("example")
        aws_iam_role_example = IamRole(self, "example_3",
            assume_role_policy=Token.as_string(assume_role.json),
            name="redshift_scheduled_action"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_example.override_logical_id("example")
        aws_iam_role_policy_attachment_example = IamRolePolicyAttachment(self, "example_4",
            policy_arn=Token.as_string(aws_iam_policy_example.arn),
            role=Token.as_string(aws_iam_role_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_attachment_example.override_logical_id("example")
        aws_redshift_scheduled_action_example = RedshiftScheduledAction(self, "example_5",
            iam_role=Token.as_string(aws_iam_role_example.arn),
            name="tf-redshift-scheduled-action",
            schedule="cron(00 23 * * ? *)",
            target_action=RedshiftScheduledActionTargetAction(
                pause_cluster=RedshiftScheduledActionTargetActionPauseCluster(
                    cluster_identifier="tf-redshift001"
                )
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_redshift_scheduled_action_example.override_logical_id("example")
```

### Resize Cluster Action

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.redshift_scheduled_action import RedshiftScheduledAction
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        RedshiftScheduledAction(self, "example",
            iam_role=Token.as_string(aws_iam_role_example.arn),
            name="tf-redshift-scheduled-action",
            schedule="cron(00 23 * * ? *)",
            target_action=RedshiftScheduledActionTargetAction(
                resize_cluster=RedshiftScheduledActionTargetActionResizeCluster(
                    cluster_identifier="tf-redshift001",
                    cluster_type="multi-node",
                    node_type="dc1.large",
                    number_of_nodes=2
                )
            )
        )
```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The scheduled action name.
* `description` - (Optional) The description of the scheduled action.
* `enable` - (Optional) Whether to enable the scheduled action. Default is `true` .
* `start_time` - (Optional) The start time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
* `end_time` - (Optional) The end time in UTC when the schedule is active, in UTC RFC3339 format(for example, YYYY-MM-DDTHH:MM:SSZ).
* `schedule` - (Required) The schedule of action. The schedule is defined format of "at expression" or "cron expression", for example `at(2016-03-04T17:27:00)` or `cron(0 10 ? * MON *)`. See [Scheduled Action](https://docs.aws.amazon.com/redshift/latest/APIReference/API_ScheduledAction.html) for more information.
* `iam_role` - (Required) The IAM role to assume to run the scheduled action.
* `target_action` - (Required) Target action. Documented below.

### Nested Blocks

#### `target_action`

* `pause_cluster` - (Optional) An action that runs a `PauseCluster` API operation. Documented below.
* `resize_cluster` - (Optional) An action that runs a `ResizeCluster` API operation. Documented below.
* `resume_cluster` - (Optional) An action that runs a `ResumeCluster` API operation. Documented below.

### `pause_cluster`

* `cluster_identifier` - (Required) The identifier of the cluster to be paused.

### `resize_cluster`

* `cluster_identifier` - (Required) The unique identifier for the cluster to resize.
* `classic` - (Optional) A boolean value indicating whether the resize operation is using the classic resize process. Default: `false`.
* `cluster_type` - (Optional)ã€€The new cluster type for the specified cluster.
* `node_type` - (Optional) The new node type for the nodes you are adding.
* `number_of_nodes` - (Optional) The new number of nodes for the cluster.

### `resume_cluster`

* `cluster_identifier` - (Required) The identifier of the cluster to be resumed.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The Redshift Scheduled Action name.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Redshift Scheduled Action using the `name`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.redshift_scheduled_action import RedshiftScheduledAction
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        RedshiftScheduledAction.generate_config_for_import(self, "example", "tf-redshift-scheduled-action")
```

Using `terraform import`, import Redshift Scheduled Action using the `name`. For example:

```console
% terraform import aws_redshift_scheduled_action.example tf-redshift-scheduled-action
```

<!-- cache-key: cdktf-0.20.8 input-bb46dc91c30f3bd0e92ef6f30fbb8c2c42b66b25bd27c78c262e5e212679b4d1 -->