---
subcategory: "Route 53"
layout: "aws"
page_title: "AWS: aws_route53_zone_association"
description: |-
  Manages a Route53 Hosted Zone VPC association
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_route53_zone_association

Manages a Route53 Hosted Zone VPC association. VPC associations can only be made on private zones. See the [`aws_route53_vpc_association_authorization` resource](route53_vpc_association_authorization.html) for setting up cross-account associations.

~> **NOTE:** Unless explicit association ordering is required (e.g., a separate cross-account association authorization), usage of this resource is not recommended. Use the `vpc` configuration blocks available within the [`aws_route53_zone` resource](/docs/providers/aws/r/route53_zone.html) instead.

~> **NOTE:** Terraform provides both this standalone Zone VPC Association resource and exclusive VPC associations defined in-line in the [`aws_route53_zone` resource](/docs/providers/aws/r/route53_zone.html) via `vpc` configuration blocks. At this time, you cannot use those in-line VPC associations in conjunction with this resource and the same zone ID otherwise it will cause a perpetual difference in plan output. You can optionally use the generic Terraform resource [lifecycle configuration block](https://www.terraform.io/docs/configuration/meta-arguments/lifecycle.html) with `ignore_changes` in the `aws_route53_zone` resource to manage additional associations via this resource.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from cdktf import TerraformResourceLifecycle
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.route53_zone import Route53Zone
from imports.aws.route53_zone_association import Route53ZoneAssociation
from imports.aws.vpc import Vpc
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        primary = Vpc(self, "primary",
            cidr_block="10.6.0.0/16",
            enable_dns_hostnames=True,
            enable_dns_support=True
        )
        secondary = Vpc(self, "secondary",
            cidr_block="10.7.0.0/16",
            enable_dns_hostnames=True,
            enable_dns_support=True
        )
        example = Route53Zone(self, "example",
            lifecycle=TerraformResourceLifecycle(
                ignore_changes=[vpc]
            ),
            name="example.com",
            vpc=[Route53ZoneVpc(
                vpc_id=primary.id
            )
            ]
        )
        aws_route53_zone_association_secondary = Route53ZoneAssociation(self, "secondary_3",
            vpc_id=secondary.id,
            zone_id=example.zone_id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_route53_zone_association_secondary.override_logical_id("secondary")
```

## Argument Reference

This resource supports the following arguments:

* `zone_id` - (Required) The private hosted zone to associate.
* `vpc_id` - (Required) The VPC to associate with the private hosted zone.
* `vpc_region` - (Optional) The VPC's region. Defaults to the region of the AWS provider.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The calculated unique identifier for the association.
* `owning_account` - The account ID of the account that created the hosted zone.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Route 53 Hosted Zone Associations using the Hosted Zone ID and VPC ID, separated by a colon (`:`). For example:

The VPC is in the same region where you have configured the Terraform AWS Provider:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.route53_zone_association import Route53ZoneAssociation
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        Route53ZoneAssociation.generate_config_for_import(self, "example", "Z123456ABCDEFG:vpc-12345678")
```

The VPC is _not_ in the same region where you have configured the Terraform AWS Provider:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.route53_zone_association import Route53ZoneAssociation
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        Route53ZoneAssociation.generate_config_for_import(self, "example", "Z123456ABCDEFG:vpc-12345678:us-east-2")
```

**Using `terraform import` to import** Route 53 Hosted Zone Associations using the Hosted Zone ID and VPC ID, separated by a colon (`:`). For example:

The VPC is in the same region where you have configured the Terraform AWS Provider:

```console
% terraform import aws_route53_zone_association.example Z123456ABCDEFG:vpc-12345678
```

The VPC is _not_ in the same region where you have configured the Terraform AWS Provider:

```console
% terraform import aws_route53_zone_association.example Z123456ABCDEFG:vpc-12345678:us-east-2
```

<!-- cache-key: cdktf-0.20.8 input-062f0d7494a763d26f38527047af28c7a1a99d322901f96a55935e7336484f49 -->