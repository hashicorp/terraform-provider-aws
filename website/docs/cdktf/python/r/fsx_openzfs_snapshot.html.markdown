---
subcategory: "FSx"
layout: "aws"
page_title: "AWS: aws_fsx_openzfs_snapshot"
description: |-
  Manages an Amazon FSx for OpenZFS snapshot.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_fsx_openzfs_snapshot

Manages an Amazon FSx for OpenZFS volume.
See the [FSx OpenZFS User Guide](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/what-is-fsx.html) for more information.

## Example Usage

### Root volume Example

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.fsx_openzfs_file_system import FsxOpenzfsFileSystem
from imports.aws.fsx_openzfs_snapshot import FsxOpenzfsSnapshot
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = FsxOpenzfsFileSystem(self, "example",
            deployment_type="SINGLE_AZ_1",
            storage_capacity=64,
            subnet_ids=[Token.as_string(aws_subnet_example.id)],
            throughput_capacity=64
        )
        aws_fsx_openzfs_snapshot_example = FsxOpenzfsSnapshot(self, "example_1",
            name="example",
            volume_id=example.root_volume_id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_fsx_openzfs_snapshot_example.override_logical_id("example")
```

### Child volume Example

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.fsx_openzfs_file_system import FsxOpenzfsFileSystem
from imports.aws.fsx_openzfs_snapshot import FsxOpenzfsSnapshot
from imports.aws.fsx_openzfs_volume import FsxOpenzfsVolume
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = FsxOpenzfsFileSystem(self, "example",
            deployment_type="SINGLE_AZ_1",
            storage_capacity=64,
            subnet_ids=[Token.as_string(aws_subnet_example.id)],
            throughput_capacity=64
        )
        aws_fsx_openzfs_volume_example = FsxOpenzfsVolume(self, "example_1",
            name="example",
            parent_volume_id=example.root_volume_id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_fsx_openzfs_volume_example.override_logical_id("example")
        aws_fsx_openzfs_snapshot_example = FsxOpenzfsSnapshot(self, "example_2",
            name="example",
            volume_id=Token.as_string(aws_fsx_openzfs_volume_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_fsx_openzfs_snapshot_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The name of the Snapshot. You can use a maximum of 203 alphanumeric characters plus either _ or -  or : or . for the name.
* `tags` - (Optional) A map of tags to assign to the file system. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copy_tags_to_backups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
* `volume_id` - (Optional) The ID of the volume to snapshot. This can be the root volume or a child volume.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name of the snapshot.
* `id` - Identifier of the snapshot, e.g., `fsvolsnap-12345678`
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `delete` - (Default `30m`)
* `update` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import FSx OpenZFS snapshot using the `id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.fsx_openzfs_snapshot import FsxOpenzfsSnapshot
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        FsxOpenzfsSnapshot.generate_config_for_import(self, "example", "fs-543ab12b1ca672f33")
```

Using `terraform import`, import FSx OpenZFS snapshot using the `id`. For example:

```console
% terraform import aws_fsx_openzfs_snapshot.example fs-543ab12b1ca672f33
```

<!-- cache-key: cdktf-0.20.8 input-f33ba26e8f39726647995a0b6dacb8d0a5084b4411c18471d481f35f094019e6 -->