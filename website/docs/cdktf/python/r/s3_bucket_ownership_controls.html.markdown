---
subcategory: "S3 (Simple Storage)"
layout: "aws"
page_title: "AWS: aws_s3_bucket_ownership_controls"
description: |-
  Manages S3 Bucket Ownership Controls.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_s3_bucket_ownership_controls

Provides a resource to manage S3 Bucket Ownership Controls. For more information, see the [S3 Developer Guide](https://docs.aws.amazon.com/AmazonS3/latest/dev/about-object-ownership.html).

-> This resource cannot be used with S3 directory buckets.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.s3_bucket import S3Bucket
from imports.aws.s3_bucket_ownership_controls import S3BucketOwnershipControls
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = S3Bucket(self, "example",
            bucket="example"
        )
        aws_s3_bucket_ownership_controls_example = S3BucketOwnershipControls(self, "example_1",
            bucket=example.id,
            rule=S3BucketOwnershipControlsRule(
                object_ownership="BucketOwnerPreferred"
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_ownership_controls_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `bucket` - (Required) Name of the bucket that you want to associate this access point with.
* `rule` - (Required) Configuration block(s) with Ownership Controls rules. Detailed below.

### rule Configuration Block

The following arguments are required:

* `object_ownership` - (Required) Object ownership. Valid values: `BucketOwnerPreferred`, `ObjectWriter` or `BucketOwnerEnforced`
    * `BucketOwnerPreferred` - Objects uploaded to the bucket change ownership to the bucket owner if the objects are uploaded with the `bucket-owner-full-control` canned ACL.
    * `ObjectWriter` - Uploading account will own the object if the object is uploaded with the `bucket-owner-full-control` canned ACL.
    * `BucketOwnerEnforced` - Bucket owner automatically owns and has full control over every object in the bucket. ACLs no longer affect permissions to data in the S3 bucket.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - S3 Bucket name.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import S3 Bucket Ownership Controls using S3 Bucket name. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.s3_bucket_ownership_controls import S3BucketOwnershipControls
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        S3BucketOwnershipControls.generate_config_for_import(self, "example", "my-bucket")
```

Using `terraform import`, import S3 Bucket Ownership Controls using S3 Bucket name. For example:

```console
% terraform import aws_s3_bucket_ownership_controls.example my-bucket
```

<!-- cache-key: cdktf-0.20.8 input-1815e6949e67a720f4b115be9bf7db12d26eaec6cd93db780cd1bd71fccb4ed2 -->