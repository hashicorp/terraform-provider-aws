---
subcategory: "Glue"
layout: "aws"
page_title: "AWS: aws_glue_connection"
description: |-
  Provides an Glue Connection resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_glue_connection

Provides a Glue Connection resource.

## Example Usage

### Non-VPC Connection

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.glue_connection import GlueConnection
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        GlueConnection(self, "example",
            connection_properties={
                "JDBC_CONNECTION_URL": "jdbc:mysql://example.com/exampledatabase",
                "PASSWORD": "examplepassword",
                "USERNAME": "exampleusername"
            },
            name="example"
        )
```

### Non-VPC Connection with secret manager reference

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_secretsmanager_secret import DataAwsSecretsmanagerSecret
from imports.aws.glue_connection import GlueConnection
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = DataAwsSecretsmanagerSecret(self, "example",
            name="example-secret"
        )
        aws_glue_connection_example = GlueConnection(self, "example_1",
            connection_properties={
                "JDBC_CONNECTION_URL": "jdbc:mysql://example.com/exampledatabase",
                "SECRET_ID": Token.as_string(example.name)
            },
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_glue_connection_example.override_logical_id("example")
```

### VPC Connection

For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/populate-add-connection.html#connection-JDBC-VPC).

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.glue_connection import GlueConnection
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        GlueConnection(self, "example",
            connection_properties={
                "JDBC_CONNECTION_URL": "jdbc:mysql://${" + aws_rds_cluster_example.endpoint + "}/exampledatabase",
                "PASSWORD": "examplepassword",
                "USERNAME": "exampleusername"
            },
            name="example",
            physical_connection_requirements=GlueConnectionPhysicalConnectionRequirements(
                availability_zone=Token.as_string(aws_subnet_example.availability_zone),
                security_group_id_list=[Token.as_string(aws_security_group_example.id)],
                subnet_id=Token.as_string(aws_subnet_example.id)
            )
        )
```

### Connection using a custom connector

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_secretsmanager_secret import DataAwsSecretsmanagerSecret
from imports.aws.glue_connection import GlueConnection
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example1 = GlueConnection(self, "example1",
            connection_properties={
                "CONNECTION_TYPE": "Jdbc",
                "CONNECTOR_CLASS_NAME": "net.snowflake.client.jdbc.SnowflakeDriver",
                "CONNECTOR_URL": "s3://example/snowflake-jdbc.jar",
                "JDBC_CONNECTION_URL": "[[\\\"default=jdbc:snowflake://example.com/?user=$${user}&password=$${password}\\\"],\\\",\\\"]"
            },
            connection_type="CUSTOM",
            match_criteria=["template-connection"],
            name="example1"
        )
        example = DataAwsSecretsmanagerSecret(self, "example",
            name="example-secret"
        )
        GlueConnection(self, "example2",
            connection_properties={
                "CONNECTION_TYPE": "Jdbc",
                "CONNECTOR_CLASS_NAME": "net.snowflake.client.jdbc.SnowflakeDriver",
                "CONNECTOR_URL": "s3://example/snowflake-jdbc.jar",
                "JDBC_CONNECTION_URL": "jdbc:snowflake://example.com/?user=$${user}&password=$${password}",
                "SECRET_ID": Token.as_string(example.name)
            },
            connection_type="CUSTOM",
            match_criteria=["Connection", example1.name],
            name="example2"
        )
```

### Azure Cosmos Connection

For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html#connection-properties-azurecosmos).

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.glue_connection import GlueConnection
from imports.aws.secretsmanager_secret import SecretsmanagerSecret
from imports.aws.secretsmanager_secret_version import SecretsmanagerSecretVersion
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = SecretsmanagerSecret(self, "example",
            name="example-secret"
        )
        aws_secretsmanager_secret_version_example =
        SecretsmanagerSecretVersion(self, "example_1",
            secret_id=example.id,
            secret_string=Token.as_string(
                Fn.jsonencode({
                    "password": "examplepassword",
                    "username": "exampleusername"
                }))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_secretsmanager_secret_version_example.override_logical_id("example")
        aws_glue_connection_example = GlueConnection(self, "example_2",
            connection_properties={
                "SparkProperties": Token.as_string(
                    Fn.jsonencode({
                        "spark.cosmos.accountEndpoint": "https://exampledbaccount.documents.azure.com:443/",
                        "secret_id": example.name
                    }))
            },
            connection_type="AZURECOSMOS",
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_glue_connection_example.override_logical_id("example")
```

### Azure SQL Connection

For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html#connection-properties-azuresql).

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.glue_connection import GlueConnection
from imports.aws.secretsmanager_secret import SecretsmanagerSecret
from imports.aws.secretsmanager_secret_version import SecretsmanagerSecretVersion
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = SecretsmanagerSecret(self, "example",
            name="example-secret"
        )
        aws_secretsmanager_secret_version_example =
        SecretsmanagerSecretVersion(self, "example_1",
            secret_id=example.id,
            secret_string=Token.as_string(
                Fn.jsonencode({
                    "password": "examplepassword",
                    "username": "exampleusername"
                }))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_secretsmanager_secret_version_example.override_logical_id("example")
        aws_glue_connection_example = GlueConnection(self, "example_2",
            connection_properties={
                "SparkProperties": Token.as_string(
                    Fn.jsonencode({
                        "secret_id": example.name,
                        "url": "jdbc:sqlserver:exampledbserver.database.windows.net:1433;database=exampledatabase"
                    }))
            },
            connection_type="AZURECOSMOS",
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_glue_connection_example.override_logical_id("example")
```

### Google BigQuery Connection

For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html#connection-properties-bigquery).

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.glue_connection import GlueConnection
from imports.aws.secretsmanager_secret import SecretsmanagerSecret
from imports.aws.secretsmanager_secret_version import SecretsmanagerSecretVersion
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = SecretsmanagerSecret(self, "example",
            name="example-secret"
        )
        aws_secretsmanager_secret_version_example =
        SecretsmanagerSecretVersion(self, "example_1",
            secret_id=example.id,
            secret_string=Token.as_string(
                Fn.jsonencode({
                    "credentials": Fn.base64encode("{\n        \"type\": \"service_account\",\n        \"project_id\": \"example-project\",\n        \"private_key_id\": \"example-key\",\n        \"private_key\": \"-----BEGIN RSA PRIVATE KEY-----\\nREDACTED\\n-----END RSA PRIVATE KEY-----\",\n        \"client_email\": \"example-project@appspot.gserviceaccount.com\",\n        \"client_id\": example-client\",\n        \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n        \"token_uri\": \"https://oauth2.googleapis.com/token\",\n        \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n        \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/example-project%%40appspot.gserviceaccount.com\",\n        \"universe_domain\": \"googleapis.com\"\n      }\n")
                }))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_secretsmanager_secret_version_example.override_logical_id("example")
        aws_glue_connection_example = GlueConnection(self, "example_2",
            connection_properties={
                "SparkProperties": Token.as_string(
                    Fn.jsonencode({
                        "secret_id": example.name
                    }))
            },
            connection_type="BIGQUERY",
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_glue_connection_example.override_logical_id("example")
```

### OpenSearch Service Connection

For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html#connection-properties-opensearch).

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.glue_connection import GlueConnection
from imports.aws.secretsmanager_secret import SecretsmanagerSecret
from imports.aws.secretsmanager_secret_version import SecretsmanagerSecretVersion
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = SecretsmanagerSecret(self, "example",
            name="example-secret"
        )
        aws_secretsmanager_secret_version_example =
        SecretsmanagerSecretVersion(self, "example_1",
            secret_id=example.id,
            secret_string=Token.as_string(
                Fn.jsonencode({
                    "opensearch.net.http.auth.pass": "examplepassword",
                    "opensearch.net.http.auth.user": "exampleusername"
                }))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_secretsmanager_secret_version_example.override_logical_id("example")
        aws_glue_connection_example = GlueConnection(self, "example_2",
            connection_properties={
                "SparkProperties": Token.as_string(
                    Fn.jsonencode({
                        "opensearch.aws.sigv4.enabled": "true",
                        "opensearch.aws.sigv4.region": "us-east-1",
                        "opensearch.nodes": "https://search-exampledomain-ixlmh4jieahrau3bfebcgp8cnm.us-east-1.es.amazonaws.com",
                        "opensearch.nodes.wan.only": "true",
                        "opensearch.port": "443",
                        "secret_id": example.name
                    }))
            },
            connection_type="OPENSEARCH",
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_glue_connection_example.override_logical_id("example")
```

### Snowflake Connection

For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html#connection-properties-snowflake).

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.glue_connection import GlueConnection
from imports.aws.secretsmanager_secret import SecretsmanagerSecret
from imports.aws.secretsmanager_secret_version import SecretsmanagerSecretVersion
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = SecretsmanagerSecret(self, "example",
            name="example-secret"
        )
        aws_secretsmanager_secret_version_example =
        SecretsmanagerSecretVersion(self, "example_1",
            secret_id=example.id,
            secret_string=Token.as_string(
                Fn.jsonencode({
                    "sf_password": "examplepassword",
                    "sf_user": "exampleusername"
                }))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_secretsmanager_secret_version_example.override_logical_id("example")
        aws_glue_connection_example = GlueConnection(self, "example_2",
            connection_properties={
                "SparkProperties": Token.as_string(
                    Fn.jsonencode({
                        "secret_id": example.name,
                        "sf_role": "EXAMPLEETLROLE",
                        "sf_url": "exampleorg-exampleconnection.snowflakecomputing.com"
                    }))
            },
            connection_type="SNOWFLAKE",
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_glue_connection_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `name` – (Required) Name of the connection.

The following arguments are optional:

* `catalog_id` – (Optional) ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
* `connection_properties` – (Optional) Map of key-value pairs used as parameters for this connection. For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html).

  **Note:** Some connection types require the `SparkProperties` property with a JSON document that contains the actual connection properties. For specific examples, refer to [Example Usage](#example-usage).
* `connection_type` – (Optional) Type of the connection. Valid values: `AZURECOSMOS`, `AZURESQL`, `BIGQUERY`, `CUSTOM`, `JDBC`, `KAFKA`, `MARKETPLACE`, `MONGODB`, `NETWORK`, `OPENSEARCH`, `SNOWFLAKE`. Defaults to `JDBC`.
* `description` – (Optional) Description of the connection.
* `match_criteria` – (Optional) List of criteria that can be used in selecting this connection.
* `physical_connection_requirements` - (Optional) Map of physical connection requirements, such as VPC and SecurityGroup. See [`physical_connection_requirements` Block](#physical_connection_requirements-block) for details.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### `physical_connection_requirements` Block

The `physical_connection_requirements` configuration block supports the following arguments:

* `availability_zone` - (Optional) The availability zone of the connection. This field is redundant and implied by `subnet_id`, but is currently an api requirement.
* `security_group_id_list` - (Optional) The security group ID list used by the connection.
* `subnet_id` - (Optional) The subnet ID used by the connection.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the Glue Connection.
* `id` - Catalog ID and name of the connection.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Glue Connections using the `CATALOG-ID` (AWS account ID if not custom) and `NAME`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.glue_connection import GlueConnection
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        GlueConnection.generate_config_for_import(self, "myConnection", "123456789012:MyConnection")
```

Using `terraform import`, import Glue Connections using the `CATALOG-ID` (AWS account ID if not custom) and `NAME`. For example:

```console
% terraform import aws_glue_connection.MyConnection 123456789012:MyConnection
```

<!-- cache-key: cdktf-0.20.1 input-826e64708cf66167c1205fd9ae58e8643711303814714f361928aeaba83190c2 -->