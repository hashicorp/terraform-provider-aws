---
subcategory: "API Gateway"
layout: "aws"
page_title: "AWS: aws_api_gateway_authorizer"
description: |-
  Provides an API Gateway Authorizer.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_api_gateway_authorizer

Provides an API Gateway Authorizer.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.api_gateway_authorizer import ApiGatewayAuthorizer
from imports.aws.api_gateway_rest_api import ApiGatewayRestApi
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy import IamRolePolicy
from imports.aws.lambda_function import LambdaFunction
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        demo = ApiGatewayRestApi(self, "demo",
            name="auth-demo"
        )
        invocation_assume_role = DataAwsIamPolicyDocument(self, "invocation_assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["apigateway.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        lambda_assume_role = DataAwsIamPolicyDocument(self, "lambda_assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["lambda.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        invocation_role = IamRole(self, "invocation_role",
            assume_role_policy=Token.as_string(invocation_assume_role.json),
            name="api_gateway_auth_invocation",
            path="/"
        )
        lambda_ = IamRole(self, "lambda",
            assume_role_policy=Token.as_string(lambda_assume_role.json),
            name="demo-lambda"
        )
        authorizer = LambdaFunction(self, "authorizer",
            filename="lambda-function.zip",
            function_name="api_gateway_authorizer",
            handler="exports.example",
            role=lambda_.arn,
            source_code_hash=Token.as_string(
                Fn.filebase64sha256("lambda-function.zip"))
        )
        invocation_policy = DataAwsIamPolicyDocument(self, "invocation_policy",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["lambda:InvokeFunction"],
                effect="Allow",
                resources=[authorizer.arn]
            )
            ]
        )
        aws_api_gateway_authorizer_demo = ApiGatewayAuthorizer(self, "demo_7",
            authorizer_credentials=invocation_role.arn,
            authorizer_uri=authorizer.invoke_arn,
            name="demo",
            rest_api_id=demo.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_api_gateway_authorizer_demo.override_logical_id("demo")
        aws_iam_role_policy_invocation_policy = IamRolePolicy(self, "invocation_policy_8",
            name="default",
            policy=Token.as_string(invocation_policy.json),
            role=invocation_role.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_invocation_policy.override_logical_id("invocation_policy")
```

## Argument Reference

This resource supports the following arguments:

* `authorizer_uri` - (Optional, required for type `TOKEN`/`REQUEST`) Authorizer's Uniform Resource Identifier (URI). This must be a well-formed Lambda function URI in the form of `arn:aws:apigateway:{region}:lambda:path/{service_api}`,
 e.g., `arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:012345678912:function:my-function/invocations`
* `name` - (Required) Name of the authorizer
* `rest_api_id` - (Required) ID of the associated REST API
* `identity_source` - (Optional) Source of the identity in an incoming request. Defaults to `method.request.header.Authorization`. For `REQUEST` type, this may be a comma-separated list of values, including headers, query string parameters and stage variables - e.g., `"method.request.header.SomeHeaderName,method.request.querystring.SomeQueryStringName,stageVariables.SomeStageVariableName"`
* `type` - (Optional) Type of the authorizer. Possible values are `TOKEN` for a Lambda function using a single authorization token submitted in a custom header, `REQUEST` for a Lambda function using incoming request parameters, or `COGNITO_USER_POOLS` for using an Amazon Cognito user pool. Defaults to `TOKEN`.
* `authorizer_credentials` - (Optional) Credentials required for the authorizer. To specify an IAM Role for API Gateway to assume, use the IAM Role ARN.
* `authorizer_result_ttl_in_seconds` - (Optional) TTL of cached authorizer results in seconds. Defaults to `300`.
* `identity_validation_expression` - (Optional) Validation expression for the incoming identity. For `TOKEN` type, this value should be a regular expression. The incoming token from the client is matched against this expression, and will proceed if the token matches. If the token doesn't match, the client receives a 401 Unauthorized response.
* `provider_arns` - (Optional, required for type `COGNITO_USER_POOLS`) List of the Amazon Cognito user pool ARNs. Each element is of this format: `arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the API Gateway Authorizer
* `id` - Authorizer identifier.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import AWS API Gateway Authorizer using the `REST-API-ID/AUTHORIZER-ID`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.api_gateway_authorizer import ApiGatewayAuthorizer
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        ApiGatewayAuthorizer.generate_config_for_import(self, "authorizer", "12345abcde/example")
```

Using `terraform import`, import AWS API Gateway Authorizer using the `REST-API-ID/AUTHORIZER-ID`. For example:

```console
% terraform import aws_api_gateway_authorizer.authorizer 12345abcde/example
```

<!-- cache-key: cdktf-0.20.8 input-2079e78abb2de34b252c2d1829bd6d6c7b5e8eea6a54c81a845e12111109c59f -->