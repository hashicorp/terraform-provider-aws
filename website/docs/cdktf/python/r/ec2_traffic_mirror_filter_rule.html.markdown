---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_ec2_traffic_mirror_filter_rule"
description: |-
  Provides an Traffic mirror filter rule
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ec2_traffic_mirror_filter_rule

Provides an Traffic mirror filter rule.  
Read [limits and considerations](https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-considerations.html) for traffic mirroring

## Example Usage

To create a basic traffic mirror session

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.ec2_traffic_mirror_filter import Ec2TrafficMirrorFilter
from imports.aws.ec2_traffic_mirror_filter_rule import Ec2TrafficMirrorFilterRule
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        filter = Ec2TrafficMirrorFilter(self, "filter",
            description="traffic mirror filter - terraform example",
            network_services=["amazon-dns"]
        )
        Ec2TrafficMirrorFilterRule(self, "rulein",
            description="test rule",
            destination_cidr_block="10.0.0.0/8",
            destination_port_range=Ec2TrafficMirrorFilterRuleDestinationPortRange(
                from_port=22,
                to_port=53
            ),
            protocol=6,
            rule_action="accept",
            rule_number=1,
            source_cidr_block="10.0.0.0/8",
            source_port_range=Ec2TrafficMirrorFilterRuleSourcePortRange(
                from_port=0,
                to_port=10
            ),
            traffic_direction="ingress",
            traffic_mirror_filter_id=filter.id
        )
        Ec2TrafficMirrorFilterRule(self, "ruleout",
            description="test rule",
            destination_cidr_block="10.0.0.0/8",
            rule_action="accept",
            rule_number=1,
            source_cidr_block="10.0.0.0/8",
            traffic_direction="egress",
            traffic_mirror_filter_id=filter.id
        )
```

## Argument Reference

This resource supports the following arguments:

* `description` - (Optional) Description of the traffic mirror filter rule.
* `traffic_mirror_filter_id`  - (Required) ID of the traffic mirror filter to which this rule should be added
* `destination_cidr_block` - (Required) Destination CIDR block to assign to the Traffic Mirror rule.
* `destination_port_range` - (Optional) Destination port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
* `protocol` - (Optional) Protocol number, for example 17 (UDP), to assign to the Traffic Mirror rule. For information about the protocol value, see [Protocol Numbers](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml) on the Internet Assigned Numbers Authority (IANA) website.
* `rule_action` - (Required) Action to take (accept | reject) on the filtered traffic. Valid values are `accept` and `reject`
* `rule_number` - (Required) Number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
* `source_cidr_block` - (Required) Source CIDR block to assign to the Traffic Mirror rule.
* `source_port_range` - (Optional) Source port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
* `traffic_direction` - (Required) Direction of traffic to be captured. Valid values are `ingress` and `egress`

Traffic mirror port range support following attributes:

* `from_port` - (Optional) Starting port of the range
* `to_port` - (Optional) Ending port of the range

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the traffic mirror filter rule.
* `id` - Name of the traffic mirror filter rule.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import traffic mirror rules using the `traffic_mirror_filter_id` and `id` separated by `:`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.ec2_traffic_mirror_filter_rule import Ec2TrafficMirrorFilterRule
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        Ec2TrafficMirrorFilterRule.generate_config_for_import(self, "rule", "tmf-0fbb93ddf38198f64:tmfr-05a458f06445d0aee")
```

Using `terraform import`, import traffic mirror rules using the `traffic_mirror_filter_id` and `id` separated by `:`. For example:

```console
% terraform import aws_ec2_traffic_mirror_filter_rule.rule tmf-0fbb93ddf38198f64:tmfr-05a458f06445d0aee
```

<!-- cache-key: cdktf-0.20.8 input-ee8ae70ab3b42d0c264494b7dc21ff8f9e48c2c41596a2bf47513cd2380b21c6 -->