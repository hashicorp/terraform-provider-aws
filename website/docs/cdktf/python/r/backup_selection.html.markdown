---
subcategory: "Backup"
layout: "aws"
page_title: "AWS: aws_backup_selection"
description: |-
  Manages selection conditions for AWS Backup plan resources.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_backup_selection

Manages selection conditions for AWS Backup plan resources.

## Example Usage

### IAM Role

-> For more information about creating and managing IAM Roles for backups and restores, see the [AWS Backup Developer Guide](https://docs.aws.amazon.com/aws-backup/latest/devguide/iam-service-roles.html).

The below example creates an IAM role with the default managed IAM Policy for allowing AWS Backup to create backups.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.backup_selection import BackupSelection
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy_attachment import IamRolePolicyAttachment
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, name, planId):
        super().__init__(scope, name)
        assume_role = DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["backup.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        example = IamRole(self, "example",
            assume_role_policy=Token.as_string(assume_role.json),
            name="example"
        )
        aws_iam_role_policy_attachment_example = IamRolePolicyAttachment(self, "example_2",
            policy_arn="arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup",
            role=example.name
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_attachment_example.override_logical_id("example")
        aws_backup_selection_example = BackupSelection(self, "example_3",
            iam_role_arn=example.arn,
            name=name,
            plan_id=plan_id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_backup_selection_example.override_logical_id("example")
```

### Selecting Backups By Tag

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.backup_selection import BackupSelection
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        BackupSelection(self, "example",
            iam_role_arn=Token.as_string(aws_iam_role_example.arn),
            name="tf_example_backup_selection",
            plan_id=Token.as_string(aws_backup_plan_example.id),
            selection_tag=[BackupSelectionSelectionTag(
                key="foo",
                type="STRINGEQUALS",
                value="bar"
            )
            ]
        )
```

### Selecting Backups By Conditions

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.backup_selection import BackupSelection
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        BackupSelection(self, "example",
            condition=[BackupSelectionCondition(
                string_equals=[BackupSelectionConditionStringEquals(
                    key="aws:ResourceTag/Component",
                    value="rds"
                )
                ],
                string_like=[BackupSelectionConditionStringLike(
                    key="aws:ResourceTag/Application",
                    value="app*"
                )
                ],
                string_not_equals=[BackupSelectionConditionStringNotEquals(
                    key="aws:ResourceTag/Backup",
                    value="false"
                )
                ],
                string_not_like=[BackupSelectionConditionStringNotLike(
                    key="aws:ResourceTag/Environment",
                    value="test*"
                )
                ]
            )
            ],
            iam_role_arn=Token.as_string(aws_iam_role_example.arn),
            name="tf_example_backup_selection",
            plan_id=Token.as_string(aws_backup_plan_example.id),
            resources=["*"]
        )
```

### Selecting Backups By Resource

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.backup_selection import BackupSelection
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        BackupSelection(self, "example",
            iam_role_arn=Token.as_string(aws_iam_role_example.arn),
            name="tf_example_backup_selection",
            plan_id=Token.as_string(aws_backup_plan_example.id),
            resources=[
                Token.as_string(aws_db_instance_example.arn),
                Token.as_string(aws_ebs_volume_example.arn),
                Token.as_string(aws_efs_file_system_example.arn)
            ]
        )
```

### Selecting Backups By Not Resource

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.backup_selection import BackupSelection
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        BackupSelection(self, "example",
            iam_role_arn=Token.as_string(aws_iam_role_example.arn),
            name="tf_example_backup_selection",
            not_resources=[
                Token.as_string(aws_db_instance_example.arn),
                Token.as_string(aws_ebs_volume_example.arn),
                Token.as_string(aws_efs_file_system_example.arn)
            ],
            plan_id=Token.as_string(aws_backup_plan_example.id)
        )
```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The display name of a resource selection document.
* `plan_id` - (Required) The backup plan ID to be associated with the selection of resources.
* `iam_role_arn` - (Required) The ARN of the IAM role that AWS Backup uses to authenticate when restoring and backing up the target resource. See the [AWS Backup Developer Guide](https://docs.aws.amazon.com/aws-backup/latest/devguide/access-control.html#managed-policies) for additional information about using AWS managed policies or creating custom policies attached to the IAM role.
* `selection_tag` - (Optional) Tag-based conditions used to specify a set of resources to assign to a backup plan.
* `condition` - (Optional) A list of conditions that you define to assign resources to your backup plans using tags.
* `resources` - (Optional) An array of strings that either contain Amazon Resource Names (ARNs) or match patterns of resources to assign to a backup plan.
* `not_resources` - (Optional) An array of strings that either contain Amazon Resource Names (ARNs) or match patterns of resources to exclude from a backup plan.

Tag conditions (`selection_tag`) support the following:

* `type` - (Required) An operation, such as `StringEquals`, that is applied to a key-value pair used to filter resources in a selection.
* `key` - (Required) The key in a key-value pair.
* `value` - (Required) The value in a key-value pair.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Backup Selection identifier

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Backup selection using the role plan_id and id separated by `|`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.backup_selection import BackupSelection
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        BackupSelection.generate_config_for_import(self, "example", "plan-id|selection-id")
```

Using `terraform import`, import Backup selection using the role plan_id and id separated by `|`. For example:

```console
% terraform import aws_backup_selection.example plan-id|selection-id
```

<!-- cache-key: cdktf-0.20.8 input-611a33d70e2d7ee876d82838e90e00edfd3ded77693e25a475537a3e728818a3 -->