---
subcategory: "DynamoDB"
layout: "aws"
page_title: "AWS: aws_dynamodb_tag"
description: |-
  Manages an individual DynamoDB resource tag
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_dynamodb_tag

Manages an individual DynamoDB resource tag. This resource should only be used in cases where DynamoDB resources are created outside Terraform (e.g., Table replicas in other regions).

~> **NOTE:** This tagging resource should not be combined with the Terraform resource for managing the parent resource. For example, using `aws_dynamodb_table` and `aws_dynamodb_tag` to manage tags of the same DynamoDB Table in the same region will cause a perpetual difference where the `aws_dynamodb_cluster` resource will try to remove the tag being added by the `aws_dynamodb_tag` resource.

~> **NOTE:** This tagging resource does not use the [provider `ignore_tags` configuration](/docs/providers/aws/index.html#ignore_tags).

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_region import DataAwsRegion
from imports.aws.dynamodb_table import DynamodbTable
from imports.aws.dynamodb_tag import DynamodbTag
from imports.aws.provider import AwsProvider
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, name):
        super().__init__(scope, name)
        AwsProvider(self, "aws",
            region="us-west-2"
        )
        replica = AwsProvider(self, "aws_1",
            alias="replica",
            region="us-east-1"
        )
        current = DataAwsRegion(self, "current")
        data_aws_region_replica = DataAwsRegion(self, "replica",
            provider=replica
        )
        example = DynamodbTable(self, "example",
            replica=[DynamodbTableReplica(
                region_name=Token.as_string(data_aws_region_replica.name)
            )
            ],
            name=name
        )
        DynamodbTag(self, "test",
            key="testkey",
            provider=replica,
            resource_arn=Token.as_string(
                Fn.replace(example.arn,
                    Token.as_string(current.name),
                    Token.as_string(data_aws_region_replica.name))),
            value="testvalue"
        )
```

## Argument Reference

This resource supports the following arguments:

* `resource_arn` - (Required) Amazon Resource Name (ARN) of the DynamoDB resource to tag.
* `key` - (Required) Tag name.
* `value` - (Required) Tag value.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - DynamoDB resource identifier and key, separated by a comma (`,`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_dynamodb_tag` using the DynamoDB resource identifier and key, separated by a comma (`,`). For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.dynamodb_tag import DynamodbTag
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DynamodbTag.generate_config_for_import(self, "example", "arn:aws:dynamodb:us-east-1:123456789012:table/example,Name")
```

Using `terraform import`, import `aws_dynamodb_tag` using the DynamoDB resource identifier and key, separated by a comma (`,`). For example:

```console
% terraform import aws_dynamodb_tag.example arn:aws:dynamodb:us-east-1:123456789012:table/example,Name
```

<!-- cache-key: cdktf-0.20.8 input-75e8bd469b3a6122cab5fe6f134e77c1f13bdbca2f2645fd979c4c90c7684f40 -->