---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_route_table_association"
description: |-
  Provides a resource to create an association between a route table and a subnet or a route table and an internet gateway or virtual private gateway.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_route_table_association

Provides a resource to create an association between a route table and a subnet or a route table and an
internet gateway or virtual private gateway.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.route_table_association import RouteTableAssociation
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        RouteTableAssociation(self, "a",
            route_table_id=bar.id,
            subnet_id=foo.id
        )
```

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.route_table_association import RouteTableAssociation
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        RouteTableAssociation(self, "b",
            gateway_id=foo.id,
            route_table_id=bar.id
        )
```

## Argument Reference

~> **NOTE:** Please note that one of either `subnet_id` or `gateway_id` is required.

This resource supports the following arguments:

* `subnet_id` - (Optional) The subnet ID to create an association. Conflicts with `gateway_id`.
* `gateway_id` - (Optional) The gateway ID to create an association. Conflicts with `subnet_id`.
* `route_table_id` - (Required) The ID of the routing table to associate with.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the association

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `5m`)
- `update` - (Default `2m`)
- `delete` - (Default `5m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import EC2 Route Table Associations using the associated resource ID and Route Table ID separated by a forward slash (`/`). For example:

~> **NOTE:** Attempting to associate a route table with a subnet or gateway, where either is already associated, will result in an error (e.g., `Resource.AlreadyAssociated: the specified association for route table rtb-4176657279 conflicts with an existing association`) unless you first import the original association.

With EC2 Subnets:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.route_table_association import RouteTableAssociation
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        RouteTableAssociation.generate_config_for_import(self, "assoc", "subnet-6777656e646f6c796e/rtb-656c65616e6f72")
```

With EC2 Internet Gateways:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.route_table_association import RouteTableAssociation
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        RouteTableAssociation.generate_config_for_import(self, "assoc", "igw-01b3a60780f8d034a/rtb-656c65616e6f72")
```

**Using `terraform import` to import** EC2 Route Table Associations using the associated resource ID and Route Table ID separated by a forward slash (`/`). For example:

With EC2 Subnets:

```console
% terraform import aws_route_table_association.assoc subnet-6777656e646f6c796e/rtb-656c65616e6f72
```

With EC2 Internet Gateways:

```console
% terraform import aws_route_table_association.assoc igw-01b3a60780f8d034a/rtb-656c65616e6f72
```

<!-- cache-key: cdktf-0.20.1 input-d833e942943c29498d69033568b4fe023077f6cef2c48bcf891e7dba9a8ab544 -->