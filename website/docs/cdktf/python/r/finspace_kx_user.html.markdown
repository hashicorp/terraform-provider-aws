---
subcategory: "FinSpace"
layout: "aws"
page_title: "AWS: aws_finspace_kx_user"
description: |-
  Terraform resource for managing an AWS FinSpace Kx User.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_finspace_kx_user

Terraform resource for managing an AWS FinSpace Kx User.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.finspace_kx_environment import FinspaceKxEnvironment
from imports.aws.finspace_kx_user import FinspaceKxUser
from imports.aws.iam_role import IamRole
from imports.aws.kms_key import KmsKey
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = IamRole(self, "example",
            assume_role_policy=Token.as_string(
                Fn.jsonencode({
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ec2.amazonaws.com"
                        },
                        "Sid": ""
                    }
                    ],
                    "Version": "2012-10-17"
                })),
            name="example-role"
        )
        aws_kms_key_example = KmsKey(self, "example_1",
            deletion_window_in_days=7,
            description="Example KMS Key"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_kms_key_example.override_logical_id("example")
        aws_finspace_kx_environment_example = FinspaceKxEnvironment(self, "example_2",
            kms_key_id=Token.as_string(aws_kms_key_example.arn),
            name="my-tf-kx-environment"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_finspace_kx_environment_example.override_logical_id("example")
        aws_finspace_kx_user_example = FinspaceKxUser(self, "example_3",
            environment_id=Token.as_string(aws_finspace_kx_environment_example.id),
            iam_role=example.arn,
            name="my-tf-kx-user"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_finspace_kx_user_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `name` - (Required) A unique identifier for the user.
* `environment_id` - (Required) Unique identifier for the KX environment.
* `iam_role` - (Required) IAM role ARN to be associated with the user.

The following arguments are optional:

* `tags` - (Optional) Key-value mapping of resource tags. If configured with a provider [`default_tags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) identifier of the KX user.
* `id` - A comma-delimited string joining environment ID and user name.
* `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `update` - (Default `30m`)
* `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import an AWS FinSpace Kx User using the `id` (environment ID and user name, comma-delimited). For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.finspace_kx_user import FinspaceKxUser
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        FinspaceKxUser.generate_config_for_import(self, "example", "n3ceo7wqxoxcti5tujqwzs,my-tf-kx-user")
```

Using `terraform import`, import an AWS FinSpace Kx User using the `id` (environment ID and user name, comma-delimited). For example:

```console
% terraform import aws_finspace_kx_user.example n3ceo7wqxoxcti5tujqwzs,my-tf-kx-user
```

<!-- cache-key: cdktf-0.20.8 input-ca0c383fee51cd83230b9fbdc20cbdd865bb1f5eb6633d7d2d1fa7bea216bcb4 -->