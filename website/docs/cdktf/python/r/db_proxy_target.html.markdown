---
subcategory: "RDS (Relational Database)"
layout: "aws"
page_title: "AWS: aws_db_proxy_target"
description: |-
  Provides an RDS DB proxy target resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_db_proxy_target

Provides an RDS DB proxy target resource.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.db_proxy import DbProxy
from imports.aws.db_proxy_default_target_group import DbProxyDefaultTargetGroup
from imports.aws.db_proxy_target import DbProxyTarget
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = DbProxy(self, "example",
            auth=[DbProxyAuth(
                auth_scheme="SECRETS",
                description="example",
                iam_auth="DISABLED",
                secret_arn=Token.as_string(aws_secretsmanager_secret_example.arn)
            )
            ],
            debug_logging=False,
            engine_family="MYSQL",
            idle_client_timeout=1800,
            name="example",
            require_tls=True,
            role_arn=Token.as_string(aws_iam_role_example.arn),
            tags={
                "Key": "value",
                "Name": "example"
            },
            vpc_security_group_ids=[Token.as_string(aws_security_group_example.id)],
            vpc_subnet_ids=[Token.as_string(aws_subnet_example.id)]
        )
        aws_db_proxy_default_target_group_example = DbProxyDefaultTargetGroup(self, "example_1",
            connection_pool_config=DbProxyDefaultTargetGroupConnectionPoolConfig(
                connection_borrow_timeout=120,
                init_query="SET x=1, y=2",
                max_connections_percent=100,
                max_idle_connections_percent=50,
                session_pinning_filters=["EXCLUDE_VARIABLE_SETS"]
            ),
            db_proxy_name=example.name
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_db_proxy_default_target_group_example.override_logical_id("example")
        aws_db_proxy_target_example = DbProxyTarget(self, "example_2",
            db_instance_identifier=Token.as_string(aws_db_instance_example.identifier),
            db_proxy_name=example.name,
            target_group_name=Token.as_string(aws_db_proxy_default_target_group_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_db_proxy_target_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `db_proxy_name` - (Required, Forces new resource) The name of the DB proxy.
* `target_group_name` - (Required, Forces new resource) The name of the target group.
* `db_instance_identifier` - (Optional, Forces new resource) DB instance identifier.
* `db_cluster_identifier` - (Optional, Forces new resource) DB cluster identifier.

**NOTE:** Either `db_instance_identifier` or `db_cluster_identifier` should be specified and both should not be specified together

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `endpoint` - Hostname for the target RDS DB Instance. Only returned for `RDS_INSTANCE` type.
* `id` - Identifier of  `db_proxy_name`, `target_group_name`, target type (e.g., `RDS_INSTANCE` or `TRACKED_CLUSTER`), and resource identifier separated by forward slashes (`/`).
* `port` - Port for the target RDS DB Instance or Aurora DB Cluster.
* `rds_resource_id` - Identifier representing the DB Instance or DB Cluster target.
* `target_arn` - Amazon Resource Name (ARN) for the DB instance or DB cluster. Currently not returned by the RDS API.
* `tracked_cluster_id` - DB Cluster identifier for the DB Instance target. Not returned unless manually importing an `RDS_INSTANCE` target that is part of a DB Cluster.
* `type` - Type of targetE.g., `RDS_INSTANCE` or `TRACKED_CLUSTER`

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import RDS DB Proxy Targets using the `db_proxy_name`, `target_group_name`, target type (such as `RDS_INSTANCE` or `TRACKED_CLUSTER`), and resource identifier separated by forward slashes (`/`). For example:

Instances:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.db_proxy_target import DbProxyTarget
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DbProxyTarget.generate_config_for_import(self, "example", "example-proxy/default/RDS_INSTANCE/example-instance")
```

Provisioned Clusters:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.db_proxy_target import DbProxyTarget
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DbProxyTarget.generate_config_for_import(self, "example", "example-proxy/default/TRACKED_CLUSTER/example-cluster")
```

**Using `terraform import` to import** RDS DB Proxy Targets using the `db_proxy_name`, `target_group_name`, target type (such as `RDS_INSTANCE` or `TRACKED_CLUSTER`), and resource identifier separated by forward slashes (`/`). For example:

Instances:

```console
% terraform import aws_db_proxy_target.example example-proxy/default/RDS_INSTANCE/example-instance
```

Provisioned Clusters:

```console
% terraform import aws_db_proxy_target.example example-proxy/default/TRACKED_CLUSTER/example-cluster
```

<!-- cache-key: cdktf-0.20.8 input-7434cf3969d924cf4dd540c487f947d3059ac1146283da81333dc7dd742fe6ae -->