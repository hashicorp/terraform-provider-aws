---
subcategory: "Resource Groups"
layout: "aws"
page_title: "AWS: aws_resourcegroups_resource"
description: |-
  Terraform resource for managing an AWS Resource Groups Resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_resourcegroups_resource

Terraform resource for managing an AWS Resource Groups Resource.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.ec2_host import Ec2Host
from imports.aws.resourcegroups_group import ResourcegroupsGroup
from imports.aws.resourcegroups_resource import ResourcegroupsResource
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = Ec2Host(self, "example",
            auto_placement="on",
            availability_zone="us-east-1a",
            host_recovery="off",
            instance_family="t3"
        )
        aws_resourcegroups_group_example = ResourcegroupsGroup(self, "example_1",
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_resourcegroups_group_example.override_logical_id("example")
        aws_resourcegroups_resource_example = ResourcegroupsResource(self, "example_2",
            group_arn=Token.as_string(aws_resourcegroups_group_example.arn),
            resource_arn=example.arn
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_resourcegroups_resource_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `group_arn` - (Required) Name or ARN of the resource group to add resources to.
* `resource_arn` - (Required) ARN of the resource to be added to the group.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - A comma-delimited string combining `group_arn` and `resource_arn`.
* `resource_type` - The resource type of a resource, such as `AWS::EC2::Instance`.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `5m`)
* `delete` - (Default `5m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import an AWS Resource Groups Resource using `group_arn` and `resource_arn`, separated by a comma (`,`). For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.resourcegroups_resource import ResourcegroupsResource
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        ResourcegroupsResource.generate_config_for_import(self, "example", "arn:aws:resource-groups:us-west-2:012345678901:group/example,arn:aws:lambda:us-west-2:012345678901:function:example")
```

Using `terraform import`, import an AWS Resource Groups Resource using `group_arn` and `resource_arn`, separated by a comma (`,`). For example:

```console
% terraform import aws_resourcegroups_resource.example arn:aws:resource-groups:us-west-2:012345678901:group/example,arn:aws:lambda:us-west-2:012345678901:function:example
```

<!-- cache-key: cdktf-0.20.8 input-2bf07b21b51607b2097c2f017d5888e7424cafdc56578b34ef3be16f0fd4fc77 -->