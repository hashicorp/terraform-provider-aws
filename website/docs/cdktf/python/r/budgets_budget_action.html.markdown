---
subcategory: "Web Services Budgets"
layout: "aws"
page_title: "AWS: aws_budgets_budget_action"
description: |-
  Provides a budget action resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_budgets_budget_action

Provides a budget action resource. Budget actions are cost savings controls that run either automatically on your behalf or by using a workflow approval process.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.budgets_budget import BudgetsBudget
from imports.aws.budgets_budget_action import BudgetsBudgetAction
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.data_aws_partition import DataAwsPartition
from imports.aws.iam_policy import IamPolicy
from imports.aws.iam_role import IamRole
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = BudgetsBudget(self, "example",
            budget_type="USAGE",
            limit_amount="10.0",
            limit_unit="dollars",
            name="example",
            time_period_start="2006-01-02_15:04",
            time_unit="MONTHLY"
        )
        data_aws_iam_policy_document_example = DataAwsIamPolicyDocument(self, "example_1",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["ec2:Describe*"],
                effect="Allow",
                resources=["*"]
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_iam_policy_document_example.override_logical_id("example")
        current = DataAwsPartition(self, "current")
        aws_iam_policy_example = IamPolicy(self, "example_3",
            description="My example policy",
            name="example",
            policy=Token.as_string(data_aws_iam_policy_document_example.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_policy_example.override_logical_id("example")
        assume_role = DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["budgets.${" + current.dns_suffix + "}"],
                    type="Service"
                )
                ]
            )
            ]
        )
        aws_iam_role_example = IamRole(self, "example_5",
            assume_role_policy=Token.as_string(assume_role.json),
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_example.override_logical_id("example")
        aws_budgets_budget_action_example = BudgetsBudgetAction(self, "example_6",
            action_threshold=BudgetsBudgetActionActionThreshold(
                action_threshold_type="ABSOLUTE_VALUE",
                action_threshold_value=100
            ),
            action_type="APPLY_IAM_POLICY",
            approval_model="AUTOMATIC",
            budget_name=example.name,
            definition=BudgetsBudgetActionDefinition(
                iam_action_definition=BudgetsBudgetActionDefinitionIamActionDefinition(
                    policy_arn=Token.as_string(aws_iam_policy_example.arn),
                    roles=[Token.as_string(aws_iam_role_example.name)]
                )
            ),
            execution_role_arn=Token.as_string(aws_iam_role_example.arn),
            notification_type="ACTUAL",
            subscriber=[BudgetsBudgetActionSubscriber(
                address="example@example.example",
                subscription_type="EMAIL"
            )
            ],
            tags={
                "Tag1": "Value1",
                "Tag2": "Value2"
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_budgets_budget_action_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `account_id` - (Optional) The ID of the target account for budget. Will use current user's account_id by default if omitted.
* `budget_name` - (Required) The name of a budget.
* `action_threshold` - (Required) The trigger threshold of the action. See [Action Threshold](#action-threshold).
* `action_type` - (Required) The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. Valid values are `APPLY_IAM_POLICY`, `APPLY_SCP_POLICY`, and `RUN_SSM_DOCUMENTS`.
* `approval_model` - (Required) This specifies if the action needs manual or automatic approval. Valid values are `AUTOMATIC` and `MANUAL`.
* `definition` - (Required) Specifies all of the type-specific parameters. See [Definition](#definition).
* `execution_role_arn` - (Required) The role passed for action execution and reversion. Roles and actions must be in the same account.
* `notification_type` - (Required) The type of a notification. Valid values are `ACTUAL` or `FORECASTED`.
* `subscriber` - (Required) A list of subscribers. See [Subscriber](#subscriber).
* `tags` - (Optional) Map of tags assigned to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### Action Threshold

* `action_threshold_type` - (Required) The type of threshold for a notification. Valid values are `PERCENTAGE` or `ABSOLUTE_VALUE`.
* `action_threshold_value` - (Required) The threshold of a notification.

### Subscriber

* `address` - (Required) The address that AWS sends budget notifications to, either an SNS topic or an email.
* `subscription_type` - (Required) The type of notification that AWS sends to a subscriber. Valid values are `SNS` or `EMAIL`.

### Definition

* `iam_action_definition` - (Optional) The AWS Identity and Access Management (IAM) action definition details. See [IAM Action Definition](#iam-action-definition).
* `ssm_action_definition` - (Optional) The AWS Systems Manager (SSM) action definition details. See [SSM Action Definition](#ssm-action-definition).
* `scp_action_definition` - (Optional) The service control policies (SCPs) action definition details. See [SCP Action Definition](#scp-action-definition).

#### IAM Action Definition

* `policy_arn` - (Required) The Amazon Resource Name (ARN) of the policy to be attached.
* `groups` - (Optional) A list of groups to be attached. There must be at least one group.
* `roles` - (Optional) A list of roles to be attached. There must be at least one role.
* `users` - (Optional) A list of users to be attached. There must be at least one user.

#### SCP Action Definition

* `policy_id` - (Required) The policy ID attached.
* `target_ids` - (Optional) A list of target IDs.

#### SSM Action Definition

* `action_sub_type` - (Required) The action subType. Valid values are `STOP_EC2_INSTANCES` or `STOP_RDS_INSTANCES`.
* `instance_ids` - (Required) The EC2 and RDS instance IDs.
* `region` - (Required) The Region to run the SSM document.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `action_id` - The id of the budget action.
* `id` - ID of resource.
* `arn` - The ARN of the budget action.
* `status` - The status of the budget action.
* `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `5m`)
* `update` - (Default `5m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import budget actions using `AccountID:ActionID:BudgetName`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.budgets_budget_action import BudgetsBudgetAction
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        BudgetsBudgetAction.generate_config_for_import(self, "myBudget", "123456789012:some-id:myBudget")
```

Using `terraform import`, import budget actions using `AccountID:ActionID:BudgetName`. For example:

```console
% terraform import aws_budgets_budget_action.myBudget 123456789012:some-id:myBudget
```

<!-- cache-key: cdktf-0.20.1 input-c9d3539dce458a1f85471112fa94f680d4969a1d7317d9898a66654455ae6407 -->