---
subcategory: "Amplify"
layout: "aws"
page_title: "AWS: aws_amplify_branch"
description: |-
  Provides an Amplify Branch resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_amplify_branch

Provides an Amplify Branch resource.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.amplify_app import AmplifyApp
from imports.aws.amplify_branch import AmplifyBranch
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = AmplifyApp(self, "example",
            name="app"
        )
        AmplifyBranch(self, "master",
            app_id=example.id,
            branch_name="master",
            environment_variables={
                "REACT_APP_API_SERVER": "https://api.example.com"
            },
            framework="React",
            stage="PRODUCTION"
        )
```

### Basic Authentication

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.amplify_app import AmplifyApp
from imports.aws.amplify_branch import AmplifyBranch
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = AmplifyApp(self, "example",
            name="app"
        )
        AmplifyBranch(self, "master",
            app_id=example.id,
            basic_auth_credentials=Token.as_string(
                Fn.base64encode("username:password")),
            branch_name="master",
            enable_basic_auth=True
        )
```

### Notifications

Amplify Console uses EventBridge (formerly known as CloudWatch Events) and SNS for email notifications.  To implement the same functionality, you need to set `enable_notification` in a `aws_amplify_branch` resource, as well as creating an EventBridge Rule, an SNS topic, and SNS subscriptions.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.amplify_app import AmplifyApp
from imports.aws.amplify_branch import AmplifyBranch
from imports.aws.cloudwatch_event_rule import CloudwatchEventRule
from imports.aws.cloudwatch_event_target import CloudwatchEventTarget
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.sns_topic import SnsTopic
from imports.aws.sns_topic_policy import SnsTopicPolicy
from imports.aws.sns_topic_subscription import SnsTopicSubscription
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = AmplifyApp(self, "example",
            name="app"
        )
        master = AmplifyBranch(self, "master",
            app_id=example.id,
            branch_name="master",
            enable_notification=True
        )
        amplify_app_master = CloudwatchEventRule(self, "amplify_app_master",
            description="AWS Amplify build notifications for :  App: ${" + app.id + "} Branch: ${" + master.branch_name + "}",
            event_pattern=Token.as_string(
                Fn.jsonencode({
                    "detail": {
                        "app_id": [example.id],
                        "branch_name": [master.branch_name],
                        "job_status": ["SUCCEED", "FAILED", "STARTED"]
                    },
                    "detail-type": ["Amplify Deployment Status Change"],
                    "source": ["aws.amplify"]
                })),
            name="amplify-${" + app.id + "}-${" + master.branch_name + "}-branch-notification"
        )
        aws_sns_topic_amplify_app_master = SnsTopic(self, "amplify_app_master_3",
            name="amplify-${" + app.id + "}_${" + master.branch_name + "}"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_sns_topic_amplify_app_master.override_logical_id("amplify_app_master")
        SnsTopicSubscription(self, "this",
            endpoint="user@acme.com",
            protocol="email",
            topic_arn=Token.as_string(aws_sns_topic_amplify_app_master.arn)
        )
        data_aws_iam_policy_document_amplify_app_master =
        DataAwsIamPolicyDocument(self, "amplify_app_master_5",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["SNS:Publish"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["events.amazonaws.com"],
                    type="Service"
                )
                ],
                resources=[Token.as_string(aws_sns_topic_amplify_app_master.arn)],
                sid="Allow_Publish_Events ${" + master.arn + "}"
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_iam_policy_document_amplify_app_master.override_logical_id("amplify_app_master")
        aws_cloudwatch_event_target_amplify_app_master = CloudwatchEventTarget(self, "amplify_app_master_6",
            arn=Token.as_string(aws_sns_topic_amplify_app_master.arn),
            input_transformer=CloudwatchEventTargetInputTransformer(
                input_paths={
                    "app_id": "$.detail.appId",
                    "branch": "$.detail.branchName",
                    "job_id": "$.detail.jobId",
                    "region": "$.region",
                    "status": "$.detail.jobStatus"
                },
                input_template="\\\"Build notification from the AWS Amplify Console for app: https://<branch>.<appId>.amplifyapp.com/. Your build status is <status>. Go to https://console.aws.amazon.com/amplify/home?region=<region>#<appId>/<branch>/<jobId> to view details on your build. \\\""
            ),
            rule=amplify_app_master.name,
            target_id=master.branch_name
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cloudwatch_event_target_amplify_app_master.override_logical_id("amplify_app_master")
        aws_sns_topic_policy_amplify_app_master = SnsTopicPolicy(self, "amplify_app_master_7",
            arn=Token.as_string(aws_sns_topic_amplify_app_master.arn),
            policy=Token.as_string(data_aws_iam_policy_document_amplify_app_master.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_sns_topic_policy_amplify_app_master.override_logical_id("amplify_app_master")
```

## Argument Reference

This resource supports the following arguments:

* `app_id` - (Required) Unique ID for an Amplify app.
* `branch_name` - (Required) Name for the branch.
* `backend_environment_arn` - (Optional) ARN for a backend environment that is part of an Amplify app.
* `basic_auth_credentials` - (Optional) Basic authorization credentials for the branch.
* `description` - (Optional) Description for the branch.
* `display_name` - (Optional) Display name for a branch. This is used as the default domain prefix.
* `enable_auto_build` - (Optional) Enables auto building for the branch.
* `enable_basic_auth` - (Optional) Enables basic authorization for the branch.
* `enable_notification` - (Optional) Enables notifications for the branch.
* `enable_performance_mode` - (Optional) Enables performance mode for the branch.
* `enable_pull_request_preview` - (Optional) Enables pull request previews for this branch.
* `environment_variables` - (Optional) Environment variables for the branch.
* `framework` - (Optional) Framework for the branch.
* `pull_request_environment_name` - (Optional) Amplify environment name for the pull request.
* `stage` - (Optional) Describes the current stage for the branch. Valid values: `PRODUCTION`, `BETA`, `DEVELOPMENT`, `EXPERIMENTAL`, `PULL_REQUEST`.
* `tags` - (Optional) Key-value mapping of resource tags. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `ttl` - (Optional) Content Time To Live (TTL) for the website in seconds.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN for the branch.
* `associated_resources` - A list of custom resources that are linked to this branch.
* `custom_domains` - Custom domains for the branch.
* `destination_branch` - Destination branch if the branch is a pull request branch.
* `source_branch` - Source branch if the branch is a pull request branch.
* `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Amplify branch using `app_id` and `branch_name`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.amplify_branch import AmplifyBranch
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        AmplifyBranch.generate_config_for_import(self, "master", "d2ypk4k47z8u6/master")
```

Using `terraform import`, import Amplify branch using `app_id` and `branch_name`. For example:

```console
% terraform import aws_amplify_branch.master d2ypk4k47z8u6/master
```

<!-- cache-key: cdktf-0.20.8 input-18bb34f7ab2ddc6f2adc5f5bfbff608bb9af62203731b97b751ed9bb930f797a -->