---
subcategory: "CloudFront"
layout: "aws"
page_title: "AWS: aws_cloudfront_function"
description: |-
  Provides a CloudFront Function resource. With CloudFront Functions in Amazon CloudFront, you can write lightweight functions in JavaScript for high-scale, latency-sensitive CDN customizations.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cloudfront_function

Provides a CloudFront Function resource. With CloudFront Functions in Amazon CloudFront, you can write lightweight functions in JavaScript for high-scale, latency-sensitive CDN customizations.

See [CloudFront Functions](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-functions.html)

~> **NOTE:** You cannot delete a function if itâ€™s associated with a cache behavior. First, update your distributions to remove the function association from all cache behaviors, then delete the function.

## Example Usage

### Basic Example

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudfront_function import CloudfrontFunction
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        CloudfrontFunction(self, "test",
            code=Token.as_string(Fn.file("${path.module}/function.js")),
            comment="my function",
            name="test",
            publish=True,
            runtime="cloudfront-js-2.0"
        )
```

## Argument Reference

The following arguments are required:

* `name` - (Required) Unique name for your CloudFront Function.
* `code` - (Required) Source code of the function
* `runtime` - (Required) Identifier of the function's runtime. Valid values are `cloudfront-js-1.0` and `cloudfront-js-2.0`.

The following arguments are optional:

* `comment` - (Optional) Comment.
* `publish` - (Optional) Whether to publish creation/change as Live CloudFront Function Version. Defaults to `true`.
* `key_value_store_associations` - (Optional) List of `aws_cloudfront_key_value_store` ARNs to be associated to the function. AWS limits associations to on key value store per function.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) identifying your CloudFront Function.
* `etag` - ETag hash of the function. This is the value for the `DEVELOPMENT` stage of the function.
* `live_stage_etag` - ETag hash of any `LIVE` stage of the function.
* `status` - Status of the function. Can be `UNPUBLISHED`, `UNASSOCIATED` or `ASSOCIATED`.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import CloudFront Functions using the `name`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudfront_function import CloudfrontFunction
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        CloudfrontFunction.generate_config_for_import(self, "test", "my_test_function")
```

Using `terraform import`, import CloudFront Functions using the `name`. For example:

```console
% terraform import aws_cloudfront_function.test my_test_function
```

<!-- cache-key: cdktf-0.20.1 input-029a5b94b613491d69afe8aee2a1541a7ee13f20986fd6e03fac3c2989773581 -->