---
subcategory: "API Gateway"
layout: "aws"
page_title: "AWS: aws_api_gateway_method"
description: |-
  Provides a HTTP Method for an API Gateway Resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_api_gateway_method

Provides a HTTP Method for an API Gateway Resource.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.api_gateway_method import ApiGatewayMethod
from imports.aws.api_gateway_resource import ApiGatewayResource
from imports.aws.api_gateway_rest_api import ApiGatewayRestApi
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        my_demo_api = ApiGatewayRestApi(self, "MyDemoAPI",
            description="This is my API for demonstration purposes",
            name="MyDemoAPI"
        )
        my_demo_resource = ApiGatewayResource(self, "MyDemoResource",
            parent_id=my_demo_api.root_resource_id,
            path_part="mydemoresource",
            rest_api_id=my_demo_api.id
        )
        ApiGatewayMethod(self, "MyDemoMethod",
            authorization="NONE",
            http_method="GET",
            resource_id=my_demo_resource.id,
            rest_api_id=my_demo_api.id
        )
```

## Usage with Cognito User Pool Authorizer

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformVariable, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.api_gateway_authorizer import ApiGatewayAuthorizer
from imports.aws.api_gateway_method import ApiGatewayMethod
from imports.aws.api_gateway_resource import ApiGatewayResource
from imports.aws.api_gateway_rest_api import ApiGatewayRestApi
from imports.aws.data_aws_cognito_user_pools import DataAwsCognitoUserPools
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
        #     You can read more about this at https://cdk.tf/variables
        cognito_user_pool_name = TerraformVariable(self, "cognito_user_pool_name")
        this_var = ApiGatewayRestApi(self, "this",
            name="with-authorizer"
        )
        data_aws_cognito_user_pools_this = DataAwsCognitoUserPools(self, "this_2",
            name=cognito_user_pool_name.string_value
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_cognito_user_pools_this.override_logical_id("this")
        aws_api_gateway_authorizer_this = ApiGatewayAuthorizer(self, "this_3",
            name="CognitoUserPoolAuthorizer",
            provider_arns=Token.as_list(data_aws_cognito_user_pools_this.arns),
            rest_api_id=this_var.id,
            type="COGNITO_USER_POOLS"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_api_gateway_authorizer_this.override_logical_id("this")
        aws_api_gateway_resource_this = ApiGatewayResource(self, "this_4",
            parent_id=this_var.root_resource_id,
            path_part="{proxy+}",
            rest_api_id=this_var.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_api_gateway_resource_this.override_logical_id("this")
        ApiGatewayMethod(self, "any",
            authorization="COGNITO_USER_POOLS",
            authorizer_id=Token.as_string(aws_api_gateway_authorizer_this.id),
            http_method="ANY",
            request_parameters={
                "method.request.path.proxy": True
            },
            resource_id=Token.as_string(aws_api_gateway_resource_this.id),
            rest_api_id=this_var.id
        )
```

## Argument Reference

This resource supports the following arguments:

* `rest_api_id` - (Required) ID of the associated REST API
* `resource_id` - (Required) API resource ID
* `http_method` - (Required) HTTP Method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `ANY`)
* `authorization` - (Required) Type of authorization used for the method (`NONE`, `CUSTOM`, `AWS_IAM`, `COGNITO_USER_POOLS`)
* `authorizer_id` - (Optional) Authorizer id to be used when the authorization is `CUSTOM` or `COGNITO_USER_POOLS`
* `authorization_scopes` - (Optional) Authorization scopes used when the authorization is `COGNITO_USER_POOLS`
* `api_key_required` - (Optional) Specify if the method requires an API key
* `operation_name` - (Optional) Function name that will be given to the method when generating an SDK through API Gateway. If omitted, API Gateway will generate a function name based on the resource path and HTTP verb.
* `request_models` - (Optional) Map of the API models used for the request's content type
  where key is the content type (e.g., `application/json`)
  and value is either `Error`, `Empty` (built-in models) or `aws_api_gateway_model`'s `name`.
* `request_validator_id` - (Optional) ID of a `aws_api_gateway_request_validator`
* `request_parameters` - (Optional) Map of request parameters (from the path, query string and headers) that should be passed to the integration. The boolean value indicates whether the parameter is required (`true`) or optional (`false`).
  For example: `request_parameters = {"method.request.header.X-Some-Header" = true "method.request.querystring.some-query-param" = true}` would define that the header `X-Some-Header` and the query string `some-query-param` must be provided in the request.

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_api_gateway_method` using `REST-API-ID/RESOURCE-ID/HTTP-METHOD`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.api_gateway_method import ApiGatewayMethod
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        ApiGatewayMethod.generate_config_for_import(self, "example", "12345abcde/67890fghij/GET")
```

Using `terraform import`, import `aws_api_gateway_method` using `REST-API-ID/RESOURCE-ID/HTTP-METHOD`. For example:

```console
% terraform import aws_api_gateway_method.example 12345abcde/67890fghij/GET
```

<!-- cache-key: cdktf-0.20.8 input-d5fc57c36d3feff79723b5c6ed0551e4895d96864eaac47e1cfecf484fd84f98 -->