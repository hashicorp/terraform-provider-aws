---
subcategory: "Pinpoint"
layout: "aws"
page_title: "AWS: aws_pinpoint_email_channel"
description: |-
  Provides a Pinpoint Email Channel resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_pinpoint_email_channel

Provides a Pinpoint Email Channel resource.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy import IamRolePolicy
from imports.aws.pinpoint_app import PinpointApp
from imports.aws.pinpoint_email_channel import PinpointEmailChannel
from imports.aws.ses_domain_identity import SesDomainIdentity
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, identity):
        super().__init__(scope, name)
        app = PinpointApp(self, "app")
        SesDomainIdentity(self, "identity",
            domain="example.com"
        )
        assume_role = DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["pinpoint.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        role_policy = DataAwsIamPolicyDocument(self, "role_policy",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["mobileanalytics:PutEvents", "mobileanalytics:PutItems"],
                effect="Allow",
                resources=["*"]
            )
            ]
        )
        role = IamRole(self, "role",
            assume_role_policy=Token.as_string(assume_role.json)
        )
        aws_iam_role_policy_role_policy = IamRolePolicy(self, "role_policy_5",
            name="role_policy",
            policy=Token.as_string(role_policy.json),
            role=role.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_role_policy.override_logical_id("role_policy")
        PinpointEmailChannel(self, "email",
            application_id=app.application_id,
            from_address="user@example.com",
            role_arn=role.arn,
            identity=identity
        )
```

## Argument Reference

This resource supports the following arguments:

* `application_id` - (Required) The application ID.
* `enabled` - (Optional) Whether the channel is enabled or disabled. Defaults to `true`.
* `configuration_set` - (Optional) The ARN of the Amazon SES configuration set that you want to apply to messages that you send through the channel.
* `from_address` - (Required) The email address used to send emails from. You can use email only (`user@example.com`) or friendly address (`User <user@example.com>`). This field comply with [RFC 5322](https://www.ietf.org/rfc/rfc5322.txt).
* `identity` - (Required) The ARN of an identity verified with SES.
* `role_arn` - (Optional) *Deprecated* The ARN of an IAM Role used to submit events to Mobile Analytics' event ingestion service.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `messages_per_second` - Messages per second that can be sent.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Pinpoint Email Channel using the `application-id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.pinpoint_email_channel import PinpointEmailChannel
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        PinpointEmailChannel.generate_config_for_import(self, "email", "application-id")
```

Using `terraform import`, import Pinpoint Email Channel using the `application-id`. For example:

```console
% terraform import aws_pinpoint_email_channel.email application-id
```

<!-- cache-key: cdktf-0.20.8 input-6378f9b4a01e95270fdc0e626fd068fb87d9b632a57e241b972a8df73443edf7 -->