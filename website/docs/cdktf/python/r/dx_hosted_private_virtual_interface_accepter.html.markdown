---
subcategory: "Direct Connect"
layout: "aws"
page_title: "AWS: aws_dx_hosted_private_virtual_interface_accepter"
description: |-
  Provides a resource to manage the accepter's side of a Direct Connect hosted private virtual interface.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_dx_hosted_private_virtual_interface_accepter

Provides a resource to manage the accepter's side of a Direct Connect hosted private virtual interface.
This resource accepts ownership of a private virtual interface created by another AWS account.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_caller_identity import DataAwsCallerIdentity
from imports.aws.dx_hosted_private_virtual_interface import DxHostedPrivateVirtualInterface
from imports.aws.dx_hosted_private_virtual_interface_accepter import DxHostedPrivateVirtualInterfaceAccepter
from imports.aws.provider import AwsProvider
from imports.aws.vpn_gateway import VpnGateway
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        AwsProvider(self, "aws")
        accepter = AwsProvider(self, "aws_1",
            alias="accepter"
        )
        vpn_gw = VpnGateway(self, "vpn_gw",
            provider=accepter
        )
        data_aws_caller_identity_accepter = DataAwsCallerIdentity(self, "accepter",
            provider=accepter
        )
        creator = DxHostedPrivateVirtualInterface(self, "creator",
            address_family="ipv4",
            bgp_asn=65352,
            connection_id="dxcon-zzzzzzzz",
            depends_on=[vpn_gw],
            name="vif-foo",
            owner_account_id=Token.as_string(data_aws_caller_identity_accepter.account_id),
            vlan=4094
        )
        aws_dx_hosted_private_virtual_interface_accepter_accepter =
        DxHostedPrivateVirtualInterfaceAccepter(self, "accepter_5",
            provider=accepter,
            tags={
                "Side": "Accepter"
            },
            virtual_interface_id=creator.id,
            vpn_gateway_id=vpn_gw.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_dx_hosted_private_virtual_interface_accepter_accepter.override_logical_id("accepter")
```

## Argument Reference

This resource supports the following arguments:

* `virtual_interface_id` - (Required) The ID of the Direct Connect virtual interface to accept.
* `dx_gateway_id` - (Optional) The ID of the Direct Connect gateway to which to connect the virtual interface.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `vpn_gateway_id` - (Optional) The ID of the [virtual private gateway](vpn_gateway.html) to which to connect the virtual interface.

### Removing `aws_dx_hosted_private_virtual_interface_accepter` from your configuration

AWS allows a Direct Connect hosted private virtual interface to be deleted from either the allocator's or accepter's side.
However, Terraform only allows the Direct Connect hosted private virtual interface to be deleted from the allocator's side
by removing the corresponding `aws_dx_hosted_private_virtual_interface` resource from your configuration.
Removing a `aws_dx_hosted_private_virtual_interface_accepter` resource from your configuration will remove it
from your statefile and management, **but will not delete the Direct Connect virtual interface.**

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the virtual interface.
* `arn` - The ARN of the virtual interface.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `10m`)
- `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Direct Connect hosted private virtual interfaces using the VIF `id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.dx_hosted_private_virtual_interface_accepter import DxHostedPrivateVirtualInterfaceAccepter
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DxHostedPrivateVirtualInterfaceAccepter.generate_config_for_import(self, "test", "dxvif-33cc44dd")
```

Using `terraform import`, import Direct Connect hosted private virtual interfaces using the VIF `id`. For example:

```console
% terraform import aws_dx_hosted_private_virtual_interface_accepter.test dxvif-33cc44dd
```

<!-- cache-key: cdktf-0.20.8 input-82aee1d3fc70745175c9dad52c1bbb0ad47469969a29d92069bf48c33d5539a9 -->