---
subcategory: "Config"
layout: "aws"
page_title: "AWS: aws_config_configuration_recorder_status"
description: |-
  Manages status of an AWS Config Configuration Recorder.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_config_configuration_recorder_status

Manages status (recording / stopped) of an AWS Config Configuration Recorder.

~> **Note:** Starting Configuration Recorder requires a [Delivery Channel](/docs/providers/aws/r/config_delivery_channel.html) to be present. Use of `depends_on` (as shown below) is recommended to avoid race conditions.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.config_configuration_recorder import ConfigConfigurationRecorder
from imports.aws.config_configuration_recorder_status import ConfigConfigurationRecorderStatus
from imports.aws.config_delivery_channel import ConfigDeliveryChannel
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy import IamRolePolicy
from imports.aws.iam_role_policy_attachment import IamRolePolicyAttachment
from imports.aws.s3_bucket import S3Bucket
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        b = S3Bucket(self, "b",
            bucket="awsconfig-example"
        )
        assume_role = DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["config.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        p = DataAwsIamPolicyDocument(self, "p",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["s3:*"],
                effect="Allow",
                resources=[b.arn, "${" + b.arn + "}/*"]
            )
            ]
        )
        foo = ConfigDeliveryChannel(self, "foo",
            name="example",
            s3_bucket_name=b.bucket
        )
        r = IamRole(self, "r",
            assume_role_policy=Token.as_string(assume_role.json),
            name="example-awsconfig"
        )
        aws_iam_role_policy_p = IamRolePolicy(self, "p_5",
            name="awsconfig-example",
            policy=Token.as_string(p.json),
            role=r.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_p.override_logical_id("p")
        IamRolePolicyAttachment(self, "a",
            policy_arn="arn:aws:iam::aws:policy/service-role/AWS_ConfigRole",
            role=r.name
        )
        aws_config_configuration_recorder_foo = ConfigConfigurationRecorder(self, "foo_7",
            name="example",
            role_arn=r.arn
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_config_configuration_recorder_foo.override_logical_id("foo")
        aws_config_configuration_recorder_status_foo =
        ConfigConfigurationRecorderStatus(self, "foo_8",
            depends_on=[foo],
            is_enabled=True,
            name=Token.as_string(aws_config_configuration_recorder_foo.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_config_configuration_recorder_status_foo.override_logical_id("foo")
```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The name of the recorder
* `is_enabled` - (Required) Whether the configuration recorder should be enabled or disabled.

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Configuration Recorder Status using the name of the Configuration Recorder. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.config_configuration_recorder_status import ConfigConfigurationRecorderStatus
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        ConfigConfigurationRecorderStatus.generate_config_for_import(self, "foo", "example")
```

Using `terraform import`, import Configuration Recorder Status using the name of the Configuration Recorder. For example:

```console
% terraform import aws_config_configuration_recorder_status.foo example
```

<!-- cache-key: cdktf-0.20.8 input-eff5be1ca06224bd56323b786df4a302b3a7bde4963a5efe48e7bee409360bcf -->