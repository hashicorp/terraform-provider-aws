---
subcategory: "EventBridge"
layout: "aws"
page_title: "AWS: aws_cloudwatch_event_bus_policy"
description: |-
  Provides a resource to create an EventBridge policy to support cross-account events.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cloudwatch_event_bus_policy

Provides a resource to create an EventBridge resource policy to support cross-account events.

~> **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.

~> **Note:** The EventBridge bus policy resource  (`aws_cloudwatch_event_bus_policy`) is incompatible with the EventBridge permission resource (`aws_cloudwatch_event_permission`) and will overwrite permissions.

## Example Usage

### Account Access

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_event_bus_policy import CloudwatchEventBusPolicy
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test = DataAwsIamPolicyDocument(self, "test",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["events:PutEvents"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["123456789012"],
                    type="AWS"
                )
                ],
                resources=["arn:aws:events:eu-west-1:123456789012:event-bus/default"
                ],
                sid="DevAccountAccess"
            )
            ]
        )
        aws_cloudwatch_event_bus_policy_test = CloudwatchEventBusPolicy(self, "test_1",
            event_bus_name=Token.as_string(aws_cloudwatch_event_bus_test.name),
            policy=Token.as_string(test.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cloudwatch_event_bus_policy_test.override_logical_id("test")
```

### Organization Access

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_event_bus_policy import CloudwatchEventBusPolicy
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test = DataAwsIamPolicyDocument(self, "test",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["events:DescribeRule", "events:ListRules", "events:ListTargetsByRule", "events:ListTagsForResource"
                ],
                condition=[DataAwsIamPolicyDocumentStatementCondition(
                    test="StringEquals",
                    values=[example.id],
                    variable="aws:PrincipalOrgID"
                )
                ],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["*"],
                    type="AWS"
                )
                ],
                resources=["arn:aws:events:eu-west-1:123456789012:rule/*", "arn:aws:events:eu-west-1:123456789012:event-bus/default"
                ],
                sid="OrganizationAccess"
            )
            ]
        )
        aws_cloudwatch_event_bus_policy_test = CloudwatchEventBusPolicy(self, "test_1",
            event_bus_name=Token.as_string(aws_cloudwatch_event_bus_test.name),
            policy=Token.as_string(test.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cloudwatch_event_bus_policy_test.override_logical_id("test")
```

### Multiple Statements

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_event_bus_policy import CloudwatchEventBusPolicy
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test = DataAwsIamPolicyDocument(self, "test",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["events:PutEvents"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["123456789012"],
                    type="AWS"
                )
                ],
                resources=["arn:aws:events:eu-west-1:123456789012:event-bus/default"
                ],
                sid="DevAccountAccess"
            ), DataAwsIamPolicyDocumentStatement(
                actions=["events:DescribeRule", "events:ListRules", "events:ListTargetsByRule", "events:ListTagsForResource"
                ],
                condition=[DataAwsIamPolicyDocumentStatementCondition(
                    test="StringEquals",
                    values=[example.id],
                    variable="aws:PrincipalOrgID"
                )
                ],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["*"],
                    type="AWS"
                )
                ],
                resources=["arn:aws:events:eu-west-1:123456789012:rule/*", "arn:aws:events:eu-west-1:123456789012:event-bus/default"
                ],
                sid="OrganizationAccess"
            )
            ]
        )
        aws_cloudwatch_event_bus_policy_test = CloudwatchEventBusPolicy(self, "test_1",
            event_bus_name=Token.as_string(aws_cloudwatch_event_bus_test.name),
            policy=Token.as_string(test.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cloudwatch_event_bus_policy_test.override_logical_id("test")
```

## Argument Reference

This resource supports the following arguments:

* `policy` - (Required) The text of the policy. For more information about building AWS IAM policy documents with Terraform, see the [AWS IAM Policy Document Guide](https://learn.hashicorp.com/terraform/aws/iam-policy).
* `event_bus_name` - (Optional) The name of the event bus to set the permissions on.
  If you omit this, the permissions are set on the `default` event bus.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The name of the EventBridge event bus.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import an EventBridge policy using the `event_bus_name`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_event_bus_policy import CloudwatchEventBusPolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        CloudwatchEventBusPolicy.generate_config_for_import(self, "devAccountAccess", "example-event-bus")
```

Using `terraform import`, import an EventBridge policy using the `event_bus_name`. For example:

```console
% terraform import aws_cloudwatch_event_bus_policy.DevAccountAccess example-event-bus
```

<!-- cache-key: cdktf-0.20.8 input-169b2e45e0cb69c0e508149ef8eef91ea77e8a9d2a0a5c4ea7af58d28ac95866 -->