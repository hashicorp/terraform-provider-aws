---
subcategory: "VPC IPAM (IP Address Manager)"
layout: "aws"
page_title: "AWS: aws_vpc_ipam_pool_cidr"
description: |-
  Provisions a CIDR from an IPAM address pool.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_vpc_ipam_pool_cidr

Provisions a CIDR from an IPAM address pool.

~> **NOTE:** Provisioning Public IPv4 or Public IPv6 require [steps outside the scope of this resource](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html#prepare-for-byoip). The resource accepts `message` and `signature` as part of the `cidr_authorization_context` attribute but those must be generated ahead of time. Public IPv6 CIDRs that are provisioned into a Pool with `publicly_advertisable = true` and all public IPv4 CIDRs also require creating a Route Origin Authorization (ROA) object in your Regional Internet Registry (RIR).

~> **NOTE:** In order to deprovision CIDRs all Allocations must be released. Allocations created by a VPC take up to 30 minutes to be released. However, for IPAM to properly manage the removal of allocation records created by VPCs and other resources, you must [grant it permissions](https://docs.aws.amazon.com/vpc/latest/ipam/choose-single-user-or-orgs-ipam.html) in
either a single account or organizationally. If you are unable to deprovision a cidr after waiting over 30 minutes, you may be missing the Service Linked Role.

## Example Usage

Basic usage:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_region import DataAwsRegion
from imports.aws.vpc_ipam import VpcIpam
from imports.aws.vpc_ipam_pool import VpcIpamPool
from imports.aws.vpc_ipam_pool_cidr import VpcIpamPoolCidr
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        current = DataAwsRegion(self, "current")
        example = VpcIpam(self, "example",
            operating_regions=[VpcIpamOperatingRegions(
                region_name=Token.as_string(current.name)
            )
            ]
        )
        aws_vpc_ipam_pool_example = VpcIpamPool(self, "example_2",
            address_family="ipv4",
            ipam_scope_id=example.private_default_scope_id,
            locale=Token.as_string(current.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_ipam_pool_example.override_logical_id("example")
        aws_vpc_ipam_pool_cidr_example = VpcIpamPoolCidr(self, "example_3",
            cidr="172.20.0.0/16",
            ipam_pool_id=Token.as_string(aws_vpc_ipam_pool_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_ipam_pool_cidr_example.override_logical_id("example")
```

Provision Public IPv6 Pool CIDRs:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_region import DataAwsRegion
from imports.aws.vpc_ipam import VpcIpam
from imports.aws.vpc_ipam_pool import VpcIpamPool
from imports.aws.vpc_ipam_pool_cidr import VpcIpamPoolCidr
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        current = DataAwsRegion(self, "current")
        example = VpcIpam(self, "example",
            operating_regions=[VpcIpamOperatingRegions(
                region_name=Token.as_string(current.name)
            )
            ]
        )
        ipv6_test_public = VpcIpamPool(self, "ipv6_test_public",
            address_family="ipv6",
            aws_service="ec2",
            description="public ipv6",
            ipam_scope_id=example.public_default_scope_id,
            locale="us-east-1",
            public_ip_source="amazon",
            publicly_advertisable=False
        )
        aws_vpc_ipam_pool_cidr_ipv6_test_public = VpcIpamPoolCidr(self, "ipv6_test_public_3",
            ipam_pool_id=ipv6_test_public.id,
            netmask_length=52
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_ipam_pool_cidr_ipv6_test_public.override_logical_id("ipv6_test_public")
```

## Argument Reference

This resource supports the following arguments:

* `cidr` - (Optional) The CIDR you want to assign to the pool. Conflicts with `netmask_length`.
* `cidr_authorization_context` - (Optional) A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP. This is not stored in the state file. See [cidr_authorization_context](#cidr_authorization_context) for more information.
* `ipam_pool_id` - (Required) The ID of the pool to which you want to assign a CIDR.
* `netmask_length` - (Optional) If provided, the cidr provisioned into the specified pool will be the next available cidr given this declared netmask length. Conflicts with `cidr`.

### cidr_authorization_context

* `message` - (Optional) The plain-text authorization message for the prefix and account.
* `signature` - (Optional) The signed authorization message for the prefix and account.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the IPAM Pool Cidr concatenated with the IPAM Pool ID.
* `ipam_pool_cidr_id` - The unique ID generated by AWS for the pool cidr. Typically this is the resource `id` but this attribute was added to the API calls after the fact and is therefore not used as the terraform resource id.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import IPAMs using the `<cidr>_<ipam-pool-id>`. For example:

**NOTE:** Do not use the IPAM Pool Cidr ID as this was introduced after the resource already existed.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.vpc_ipam_pool_cidr import VpcIpamPoolCidr
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        VpcIpamPoolCidr.generate_config_for_import(self, "example", "172.20.0.0/24_ipam-pool-0e634f5a1517cccdc")
```

Using `terraform import`, import IPAMs using the `<cidr>_<ipam-pool-id>`. For example:

**NOTE:** Do not use the IPAM Pool Cidr ID as this was introduced after the resource already existed.

```console
% terraform import aws_vpc_ipam_pool_cidr.example 172.20.0.0/24_ipam-pool-0e634f5a1517cccdc
```

<!-- cache-key: cdktf-0.20.8 input-9510d76ea7d66c26049583f9c5d435912df190bc1c3c78f5fda73a13a93912cc -->