---
subcategory: "Lambda"
layout: "aws"
page_title: "AWS: aws_lambda_permission"
description: |-
  Manages an AWS Lambda permission.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_lambda_permission

Manages an AWS Lambda permission. Use this resource to grant external sources (e.g., EventBridge Rules, SNS, or S3) permission to invoke Lambda functions.

## Example Usage

### Basic Usage with EventBridge

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.iam_role import IamRole
from imports.aws.lambda_alias import LambdaAlias
from imports.aws.lambda_function import LambdaFunction
from imports.aws.lambda_permission import LambdaPermission
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        iam_for_lambda = IamRole(self, "iam_for_lambda",
            assume_role_policy=Token.as_string(
                Fn.jsonencode({
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "lambda.amazonaws.com"
                        },
                        "Sid": ""
                    }
                    ],
                    "Version": "2012-10-17"
                })),
            name="iam_for_lambda"
        )
        test_lambda = LambdaFunction(self, "test_lambda",
            filename="lambdatest.zip",
            function_name="lambda_function_name",
            handler="exports.handler",
            role=iam_for_lambda.arn,
            runtime="nodejs20.x"
        )
        test_alias = LambdaAlias(self, "test_alias",
            description="a sample description",
            function_name=test_lambda.function_name,
            function_version="$LATEST",
            name="testalias"
        )
        LambdaPermission(self, "allow_cloudwatch",
            action="lambda:InvokeFunction",
            function_name=test_lambda.function_name,
            principal="events.amazonaws.com",
            qualifier=test_alias.name,
            source_arn="arn:aws:events:eu-west-1:111122223333:rule/RunDaily",
            statement_id="AllowExecutionFromCloudWatch"
        )
```

### SNS Integration

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.iam_role import IamRole
from imports.aws.lambda_function import LambdaFunction
from imports.aws.lambda_permission import LambdaPermission
from imports.aws.sns_topic import SnsTopic
from imports.aws.sns_topic_subscription import SnsTopicSubscription
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        default_var = IamRole(self, "default",
            assume_role_policy=Token.as_string(
                Fn.jsonencode({
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "lambda.amazonaws.com"
                        },
                        "Sid": ""
                    }
                    ],
                    "Version": "2012-10-17"
                })),
            name="iam_for_lambda_with_sns"
        )
        func = LambdaFunction(self, "func",
            filename="lambdatest.zip",
            function_name="lambda_called_from_sns",
            handler="exports.handler",
            role=default_var.arn,
            runtime="python3.12"
        )
        aws_sns_topic_default = SnsTopic(self, "default_2",
            name="call-lambda-maybe"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_sns_topic_default.override_logical_id("default")
        SnsTopicSubscription(self, "lambda",
            endpoint=func.arn,
            protocol="lambda",
            topic_arn=Token.as_string(aws_sns_topic_default.arn)
        )
        LambdaPermission(self, "with_sns",
            action="lambda:InvokeFunction",
            function_name=func.function_name,
            principal="sns.amazonaws.com",
            source_arn=Token.as_string(aws_sns_topic_default.arn),
            statement_id="AllowExecutionFromSNS"
        )
```

### API Gateway REST API Integration

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.api_gateway_rest_api import ApiGatewayRestApi
from imports.aws.lambda_permission import LambdaPermission
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        my_demo_api = ApiGatewayRestApi(self, "MyDemoAPI",
            description="This is my API for demonstration purposes",
            name="MyDemoAPI"
        )
        LambdaPermission(self, "lambda_permission",
            action="lambda:InvokeFunction",
            function_name="MyDemoFunction",
            principal="apigateway.amazonaws.com",
            source_arn="${" + my_demo_api.execution_arn + "}/*",
            statement_id="AllowMyDemoAPIInvoke"
        )
```

### CloudWatch Log Group Integration

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_log_group import CloudwatchLogGroup
from imports.aws.cloudwatch_log_subscription_filter import CloudwatchLogSubscriptionFilter
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.iam_role import IamRole
from imports.aws.lambda_function import LambdaFunction
from imports.aws.lambda_permission import LambdaPermission
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        default_var = CloudwatchLogGroup(self, "default",
            name="/default"
        )
        assume_role = DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["lambda.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        aws_iam_role_default = IamRole(self, "default_2",
            assume_role_policy=Token.as_string(assume_role.json),
            name="iam_for_lambda_called_from_cloudwatch_logs"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_default.override_logical_id("default")
        logging = LambdaFunction(self, "logging",
            filename="lamba_logging.zip",
            function_name="lambda_called_from_cloudwatch_logs",
            handler="exports.handler",
            role=Token.as_string(aws_iam_role_default.arn),
            runtime="python3.12"
        )
        aws_lambda_permission_logging = LambdaPermission(self, "logging_4",
            action="lambda:InvokeFunction",
            function_name=logging.function_name,
            principal="logs.eu-west-1.amazonaws.com",
            source_arn="${" + default_var.arn + "}:*"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_lambda_permission_logging.override_logical_id("logging")
        aws_cloudwatch_log_subscription_filter_logging =
        CloudwatchLogSubscriptionFilter(self, "logging_5",
            depends_on=[aws_lambda_permission_logging],
            destination_arn=logging.arn,
            filter_pattern="",
            log_group_name=default_var.name,
            name="logging_default"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cloudwatch_log_subscription_filter_logging.override_logical_id("logging")
```

### Cross-Account Function URL Access

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.lambda_function_url import LambdaFunctionUrl
from imports.aws.lambda_permission import LambdaPermission
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        LambdaFunctionUrl(self, "url",
            authorization_type="AWS_IAM",
            function_name=example.function_name
        )
        aws_lambda_permission_url = LambdaPermission(self, "url_1",
            action="lambda:InvokeFunctionUrl",
            function_name=example.function_name,
            function_url_auth_type="AWS_IAM",
            principal="arn:aws:iam::444455556666:role/example",
            source_account="444455556666"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_lambda_permission_url.override_logical_id("url")
```

### Automatic Permission Updates with Function Changes

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from cdktf import TerraformResourceLifecycle
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.lambda_permission import LambdaPermission
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        LambdaPermission(self, "logging",
            action="lambda:InvokeFunction",
            function_name=example.function_name,
            lifecycle=TerraformResourceLifecycle(
                replace_triggered_by=[example]
            ),
            principal="events.amazonaws.com",
            source_arn="arn:aws:events:eu-west-1:111122223333:rule/RunDaily"
        )
```

## Argument Reference

The following arguments are required:

* `action` - (Required) Lambda action to allow in this statement (e.g., `lambda:InvokeFunction`)
* `function_name` - (Required) Name or ARN of the Lambda function
* `principal` - (Required) AWS service or account that invokes the function (e.g., `s3.amazonaws.com`, `sns.amazonaws.com`, AWS account ID, or AWS IAM principal)

The following arguments are optional:

* `event_source_token` - (Optional) Event Source Token for Alexa Skills
* `function_url_auth_type` - (Optional) Lambda Function URL authentication type. Valid values: `AWS_IAM` or `NONE`. Only valid with `lambda:InvokeFunctionUrl` action
* `principal_org_id` - (Optional) AWS Organizations ID to grant permission to all accounts under this organization
* `qualifier` - (Optional) Lambda function version or alias name
* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference)
* `source_account` - (Optional) AWS account ID of the source owner for cross-account access, S3, or SES
* `source_arn` - (Optional) ARN of the source resource granting permission to invoke the Lambda function
* `statement_id` - (Optional) Statement identifier. Generated by Terraform if not provided
* `statement_id_prefix` - (Optional) Statement identifier prefix. Conflicts with `statement_id`

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Lambda permission statements using function_name/statement_id with an optional qualifier. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.lambda_permission import LambdaPermission
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        LambdaPermission.generate_config_for_import(self, "testLambdaPermission", "my_test_lambda_function/AllowExecutionFromCloudWatch")
```

Using `qualifier`:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.lambda_permission import LambdaPermission
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        LambdaPermission.generate_config_for_import(self, "testLambdaPermission", "my_test_lambda_function:qualifier_name/AllowExecutionFromCloudWatch")
```

For backwards compatibility, the following legacy `terraform import` commands are also supported:

```console
% terraform import aws_lambda_permission.example my_test_lambda_function/AllowExecutionFromCloudWatch
% terraform import aws_lambda_permission.test_lambda_permission my_test_lambda_function:qualifier_name/AllowExecutionFromCloudWatch
```

<!-- cache-key: cdktf-0.20.8 input-9e6dfb44d75ae3db05e77504e7e74d74631a3263cb7151673a23aff18efb82c2 -->