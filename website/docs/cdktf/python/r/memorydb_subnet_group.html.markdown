---
subcategory: "MemoryDB"
layout: "aws"
page_title: "AWS: aws_memorydb_subnet_group"
description: |-
  Provides a MemoryDB Subnet Group.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_memorydb_subnet_group

Provides a MemoryDB Subnet Group.

More information about subnet groups can be found in the [MemoryDB User Guide](https://docs.aws.amazon.com/memorydb/latest/devguide/subnetgroups.html).

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.memorydb_subnet_group import MemorydbSubnetGroup
from imports.aws.subnet import Subnet
from imports.aws.vpc import Vpc
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = Vpc(self, "example",
            cidr_block="10.0.0.0/16"
        )
        aws_subnet_example = Subnet(self, "example_1",
            availability_zone="us-west-2a",
            cidr_block="10.0.0.0/24",
            vpc_id=example.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_subnet_example.override_logical_id("example")
        aws_memorydb_subnet_group_example = MemorydbSubnetGroup(self, "example_2",
            name="my-subnet-group",
            subnet_ids=[Token.as_string(aws_subnet_example.id)]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_memorydb_subnet_group_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `subnet_ids` - (Required) Set of VPC Subnet ID-s for the subnet group. At least one subnet must be provided.

The following arguments are optional:

* `name` - (Optional, Forces new resource) Name of the subnet group. If omitted, Terraform will assign a random, unique name. Conflicts with `name_prefix`.
* `name_prefix` - (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with `name`.
* `description` - (Optional) Description for the subnet group. Defaults to `"Managed by Terraform"`.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The name of the subnet group.
* `arn` - The ARN of the subnet group.
* `vpc_id` - The VPC in which the subnet group exists.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import a subnet group using its `name`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.memorydb_subnet_group import MemorydbSubnetGroup
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        MemorydbSubnetGroup.generate_config_for_import(self, "example", "my-subnet-group")
```

Using `terraform import`, import a subnet group using its `name`. For example:

```console
% terraform import aws_memorydb_subnet_group.example my-subnet-group
```

<!-- cache-key: cdktf-0.20.8 input-e811f3e22c552003c2bcc699f959ec66adf8ada63b2e23dd00112891e0d2734c -->