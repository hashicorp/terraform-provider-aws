---
subcategory: "Route 53"
layout: "aws"
page_title: "AWS: aws_route53_vpc_association_authorization"
description: |-
  Authorizes a VPC in a different account to be associated with a local Route53 Hosted Zone
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_route53_vpc_association_authorization

Authorizes a VPC in a different account to be associated with a local Route53 Hosted Zone.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from cdktf import TerraformResourceLifecycle
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.provider import AwsProvider
from imports.aws.route53_vpc_association_authorization import Route53VpcAssociationAuthorization
from imports.aws.route53_zone import Route53Zone
from imports.aws.route53_zone_association import Route53ZoneAssociation
from imports.aws.vpc import Vpc
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        AwsProvider(self, "aws")
        alternate = AwsProvider(self, "aws_1",
            alias="alternate"
        )
        aws_vpc_alternate = Vpc(self, "alternate",
            cidr_block="10.7.0.0/16",
            enable_dns_hostnames=True,
            enable_dns_support=True,
            provider=alternate
        )
        example = Vpc(self, "example",
            cidr_block="10.6.0.0/16",
            enable_dns_hostnames=True,
            enable_dns_support=True
        )
        aws_route53_zone_example = Route53Zone(self, "example_4",
            lifecycle=TerraformResourceLifecycle(
                ignore_changes=[vpc]
            ),
            name="example.com",
            vpc=[Route53ZoneVpc(
                vpc_id=example.id
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_route53_zone_example.override_logical_id("example")
        aws_route53_vpc_association_authorization_example =
        Route53VpcAssociationAuthorization(self, "example_5",
            vpc_id=Token.as_string(aws_vpc_alternate.id),
            zone_id=Token.as_string(aws_route53_zone_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_route53_vpc_association_authorization_example.override_logical_id("example")
        aws_route53_zone_association_example = Route53ZoneAssociation(self, "example_6",
            provider=alternate,
            vpc_id=Token.as_string(aws_route53_vpc_association_authorization_example.vpc_id),
            zone_id=Token.as_string(aws_route53_vpc_association_authorization_example.zone_id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_route53_zone_association_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `zone_id` - (Required) The ID of the private hosted zone that you want to authorize associating a VPC with.
* `vpc_id` - (Required) The VPC to authorize for association with the private hosted zone.
* `vpc_region` - (Optional) The VPC's region. Defaults to the region of the AWS provider.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The calculated unique identifier for the association.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Route 53 VPC Association Authorizations using the Hosted Zone ID and VPC ID, separated by a colon (`:`). For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.route53_vpc_association_authorization import Route53VpcAssociationAuthorization
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        Route53VpcAssociationAuthorization.generate_config_for_import(self, "example", "Z123456ABCDEFG:vpc-12345678")
```

Using `terraform import`, import Route 53 VPC Association Authorizations using the Hosted Zone ID and VPC ID, separated by a colon (`:`). For example:

```console
% terraform import aws_route53_vpc_association_authorization.example Z123456ABCDEFG:vpc-12345678
```

<!-- cache-key: cdktf-0.20.8 input-5538910c15da1bdf9d215131a092f3a81fc71383f121c9a24ab62a7757345a40 -->