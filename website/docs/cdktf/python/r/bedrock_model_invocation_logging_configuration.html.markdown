---
subcategory: "Bedrock"
layout: "aws"
page_title: "AWS: aws_bedrock_model_invocation_logging_configuration"
description: |-
  Manages Bedrock model invocation logging configuration.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_bedrock_model_invocation_logging_configuration

Manages Bedrock model invocation logging configuration.

~> Model invocation logging is configured per AWS region. To avoid overwriting settings, this resource should not be defined in multiple configurations.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from cdktf import TerraformResourceLifecycle
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.bedrock_model_invocation_logging_configuration import BedrockModelInvocationLoggingConfiguration
from imports.aws.data_aws_caller_identity import DataAwsCallerIdentity
from imports.aws.s3_bucket import S3Bucket
from imports.aws.s3_bucket_policy import S3BucketPolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = S3Bucket(self, "example",
            bucket="example",
            force_destroy=True,
            lifecycle=TerraformResourceLifecycle(
                ignore_changes=["creatorId", "creatorName"]
            )
        )
        current = DataAwsCallerIdentity(self, "current")
        aws_s3_bucket_policy_example = S3BucketPolicy(self, "example_2",
            bucket=example.bucket,
            policy="{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"bedrock.amazonaws.com\"\n      },\n      \"Action\": [\n        \"s3:*\"\n      ],\n      \"Resource\": [\n        \"${" + example.arn + "}/*\"\n      ],\n      \"Condition\": {\n        \"StringEquals\": {\n          \"aws:SourceAccount\": \"${" + current.account_id + "}\"\n        },\n        \"ArnLike\": {\n          \"aws:SourceArn\": \"arn:aws:bedrock:us-east-1:${" + current.account_id + "}:*\"\n        }\n      }\n    }\n  ]\n}\n\n"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_policy_example.override_logical_id("example")
        aws_bedrock_model_invocation_logging_configuration_example =
        BedrockModelInvocationLoggingConfiguration(self, "example_3",
            depends_on=[aws_s3_bucket_policy_example],
            logging_config=[{
                "embedding_data_delivery_enabled": True,
                "image_data_delivery_enabled": True,
                "s3_config": [{
                    "bucket_name": example.id,
                    "key_prefix": "bedrock"
                }
                ],
                "text_data_delivery_enabled": True,
                "video_data_delivery_enabled": True
            }
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_bedrock_model_invocation_logging_configuration_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `logging_config` - (Required) The logging configuration values to set. See [`logging_config` Block](#logging_config-block) for details.

### `logging_config` Block

The `logging_config` configuration block supports the following arguments:

* `cloudwatch_config` – (Optional) CloudWatch logging configuration. See [`cloudwatch_config` Block](#cloudwatch_config-block) for details.
* `embedding_data_delivery_enabled` – (Optional) Set to include embeddings data in the log delivery. Defaults to `true`.
* `image_data_delivery_enabled` – (Optional) Set to include image data in the log delivery. Defaults to `true`.
* `s3_config` – (Optional) S3 configuration for storing log data. See [`s3_config` Block](#s3_config-block) for details.
* `text_data_delivery_enabled` – (Optional) Set to include text data in the log delivery. Defaults to `true`.
* `video_data_delivery_enabled` – (Optional) Set to include text data in the log delivery. Defaults to `true`.

### `cloudwatch_config` Block

The `cloudwatch_config` configuration block supports the following arguments:

* `large_data_delivery_s3_config` – (Optional) S3 configuration for delivering a large amount of data. See [`large_data_delivery_s3_config` Block](#large_data_delivery_s3_config-block) for details.
* `log_group_name` – (Required) Log group name.
* `role_arn` – (Optional) The role ARN.

### `large_data_delivery_s3_config` Block

The `large_data_delivery_s3_config` configuration block supports the following arguments:

* `bucket_name` – (Required) S3 bucket name.
* `key_prefix` – (Optional) S3 prefix.

### `s3_config` Block

The `s3_config` configuration block supports the following arguments:

* `bucket_name` – (Required) S3 bucket name.
* `key_prefix` – (Optional) S3 prefix.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - AWS Region in which logging is configured.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Bedrock Invocation Logging Configuration using the `id` set to the AWS Region. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.bedrock_model_invocation_logging_configuration import BedrockModelInvocationLoggingConfiguration
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        BedrockModelInvocationLoggingConfiguration.generate_config_for_import(self, "myConfig", "us-east-1")
```

Using `terraform import`, import Bedrock custom model using the `id` set to the AWS Region. For example:

```console
% terraform import aws_bedrock_model_invocation_logging_configuration.my_config us-east-1
```

<!-- cache-key: cdktf-0.20.8 input-e86e416c0781b81f15982991e543323b3a5fbf5051f17b00f11609420d27bcfb -->