---
subcategory: "EC2 Image Builder"
layout: "aws"
page_title: "AWS: aws_imagebuilder_workflow"
description: |-
  Terraform resource for managing an AWS EC2 Image Builder Workflow.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_imagebuilder_workflow

Terraform resource for managing an AWS EC2 Image Builder Workflow.

-> Image Builder manages the workflows for the distribution stage. Therefore, using the DISTRIBUTION workflow type results in an error.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.imagebuilder_workflow import ImagebuilderWorkflow
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        ImagebuilderWorkflow(self, "example",
            data="name: example\ndescription: Workflow to test an image\nschemaVersion: 1.0\n\nparameters:\n  - name: waitForActionAtEnd\n    type: boolean\n\nsteps:\n  - name: LaunchTestInstance\n    action: LaunchInstance\n    onFailure: Abort\n    inputs:\n      waitFor: \"ssmAgent\"\n\n  - name: TerminateTestInstance\n    action: TerminateInstance\n    onFailure: Continue\n    inputs:\n      instanceId.$: \"$.stepOutputs.LaunchTestInstance.instanceId\"\n\n  - name: WaitForActionAtEnd\n    action: WaitForAction\n    if:\n      booleanEquals: true\n      value: \"$.parameters.waitForActionAtEnd\"\n\n",
            name="example",
            type="TEST",
            version="1.0.0"
        )
```

## Argument Reference

The following arguments are required:

* `name` - (Required) Name of the workflow.
* `type` - (Required) Type of the workflow. Valid values: `BUILD`, `TEST`.
* `version` - (Required) Version of the workflow.

The following arguments are optional:

* `change_description` - (Optional) Change description of the workflow.
* `data` - (Optional) Inline YAML string with data of the workflow. Exactly one of `data` and `uri` can be specified.
* `description` - (Optional) Description of the workflow.
* `kms_key_id` - (Optional) Amazon Resource Name (ARN) of the Key Management Service (KMS) Key used to encrypt the workflow.
* `tags` - (Optional) Key-value map of resource tags for the workflow. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `uri` - (Optional) S3 URI with data of the workflow. Exactly one of `data` and `uri` can be specified.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of the workflow.
* `date_created` - Date the workflow was created.
* `owner` - Owner of the workflow.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import EC2 Image Builder Workflow using the `example_id_arg`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.imagebuilder_workflow import ImagebuilderWorkflow
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        ImagebuilderWorkflow.generate_config_for_import(self, "example", "workflow-id-12345678")
```

Using `terraform import`, import EC2 Image Builder Workflow using the `example_id_arg`. For example:

```console
% terraform import aws_imagebuilder_workflow.example arn:aws:imagebuilder:us-east-1:aws:workflow/test/example/1.0.1/1
```

Certain resource arguments, such as `uri`, cannot be read via the API and imported into Terraform. Terraform will display a difference for these arguments the first run after import if declared in the Terraform configuration for an imported resource.

<!-- cache-key: cdktf-0.20.8 input-175b9ce33cd4b9bc0e8e753b4c79c33c079653b357cae7ce42826018f4ea958a -->