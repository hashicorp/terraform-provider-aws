---
subcategory: "Transfer Family"
layout: "aws"
page_title: "AWS: aws_transfer_ssh_key"
description: |-
  Provides a AWS Transfer SSH Public Key resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_transfer_ssh_key

Provides a AWS Transfer User SSH Key resource.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy import IamRolePolicy
from imports.aws.transfer_server import TransferServer
from imports.aws.transfer_ssh_key import TransferSshKey
from imports.aws.transfer_user import TransferUser
from imports.tls.private_key import PrivateKey
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: tls.
        #     For a more precise conversion please use the --provider flag in convert.
        example = TransferServer(self, "example",
            identity_provider_type="SERVICE_MANAGED",
            tags={
                "NAME": "tf-acc-test-transfer-server"
            }
        )
        tls_private_key_example = PrivateKey(self, "example_1",
            algorithm="RSA",
            rsa_bits=4096
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tls_private_key_example.override_logical_id("example")
        assume_role = DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["transfer.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        data_aws_iam_policy_document_example = DataAwsIamPolicyDocument(self, "example_3",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["s3:*"],
                effect="Allow",
                resources=["*"],
                sid="AllowFullAccesstoS3"
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_iam_policy_document_example.override_logical_id("example")
        aws_iam_role_example = IamRole(self, "example_4",
            assume_role_policy=Token.as_string(assume_role.json),
            name="tf-test-transfer-user-iam-role"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_example.override_logical_id("example")
        aws_iam_role_policy_example = IamRolePolicy(self, "example_5",
            name="tf-test-transfer-user-iam-policy",
            policy=Token.as_string(data_aws_iam_policy_document_example.json),
            role=Token.as_string(aws_iam_role_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_example.override_logical_id("example")
        aws_transfer_user_example = TransferUser(self, "example_6",
            role=Token.as_string(aws_iam_role_example.arn),
            server_id=example.id,
            tags={
                "NAME": "tftestuser"
            },
            user_name="tftestuser"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_transfer_user_example.override_logical_id("example")
        aws_transfer_ssh_key_example = TransferSshKey(self, "example_7",
            body=Token.as_string(
                Fn.trimspace(Token.as_string(tls_private_key_example.public_key_openssh))),
            server_id=example.id,
            user_name=Token.as_string(aws_transfer_user_example.user_name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_transfer_ssh_key_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `server_id` - (Requirement) The Server ID of the Transfer Server (e.g., `s-12345678`)
* `user_name` - (Requirement) The name of the user account that is assigned to one or more servers.
* `body` - (Requirement) The public key portion of an SSH key pair.

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Transfer SSH Public Key using the `server_id` and `user_name` and `ssh_public_key_id` separated by `/`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.transfer_ssh_key import TransferSshKey
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        TransferSshKey.generate_config_for_import(self, "bar", "s-12345678/test-username/key-12345")
```

Using `terraform import`, import Transfer SSH Public Key using the `server_id` and `user_name` and `ssh_public_key_id` separated by `/`. For example:

```console
% terraform import aws_transfer_ssh_key.bar s-12345678/test-username/key-12345
```

<!-- cache-key: cdktf-0.20.1 input-b1d6cb5d993474a7ca2476432fffe3755b8615b3fd1b2007ce93984646f2bdbc -->