---
subcategory: "DataZone"
layout: "aws"
page_title: "AWS: aws_datazone_domain"
description: |-
  Terraform resource for managing an AWS DataZone Domain.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_datazone_domain

Terraform resource for managing an AWS DataZone Domain.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.datazone_domain import DatazoneDomain
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy import IamRolePolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        domain_execution_role = IamRole(self, "domain_execution_role",
            assume_role_policy=Token.as_string(
                Fn.jsonencode({
                    "Statement": [{
                        "Action": ["sts:AssumeRole", "sts:TagSession"],
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "datazone.amazonaws.com"
                        }
                    }, {
                        "Action": ["sts:AssumeRole", "sts:TagSession"],
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "cloudformation.amazonaws.com"
                        }
                    }
                    ],
                    "Version": "2012-10-17"
                })),
            name="my_domain_execution_role"
        )
        aws_iam_role_policy_domain_execution_role = IamRolePolicy(self, "domain_execution_role_1",
            policy=Token.as_string(
                Fn.jsonencode({
                    "Statement": [{
                        "Action": ["datazone:*", "ram:*", "sso:*", "kms:*"],
                        "Effect": "Allow",
                        "Resource": "*"
                    }
                    ],
                    "Version": "2012-10-17"
                })),
            role=domain_execution_role.name
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_domain_execution_role.override_logical_id("domain_execution_role")
        DatazoneDomain(self, "example",
            domain_execution_role=domain_execution_role.arn,
            name="example"
        )
```

### V2 Domain

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_caller_identity import DataAwsCallerIdentity
from imports.aws.data_aws_iam_policy import DataAwsIamPolicy
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.datazone_domain import DatazoneDomain
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy_attachment import IamRolePolicyAttachment
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        current = DataAwsCallerIdentity(self, "current")
        domain_execution_role = DataAwsIamPolicy(self, "domain_execution_role",
            name="SageMakerStudioDomainExecutionRolePolicy"
        )
        domain_service_role = DataAwsIamPolicy(self, "domain_service_role",
            name="SageMakerStudioDomainServiceRolePolicy"
        )
        assume_role_domain_execution = DataAwsIamPolicyDocument(self, "assume_role_domain_execution",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole", "sts:TagSession", "sts:SetContext"],
                condition=[DataAwsIamPolicyDocumentStatementCondition(
                    test="StringEquals",
                    values=[Token.as_string(current.account_id)],
                    variable="aws:SourceAccount"
                ), DataAwsIamPolicyDocumentStatementCondition(
                    test="ForAllValues:StringLike",
                    values=["datazone*"],
                    variable="aws:TagKeys"
                )
                ],
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["datazone.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        assume_role_domain_service = DataAwsIamPolicyDocument(self, "assume_role_domain_service",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                condition=[DataAwsIamPolicyDocumentStatementCondition(
                    test="StringEquals",
                    values=[Token.as_string(current.account_id)],
                    variable="aws:SourceAccount"
                )
                ],
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["datazone.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        domain_execution = IamRole(self, "domain_execution",
            assume_role_policy=Token.as_string(assume_role_domain_execution.json),
            name="example-domain-execution-role"
        )
        domain_service = IamRole(self, "domain_service",
            assume_role_policy=Token.as_string(assume_role_domain_service.json),
            name="example-domain-service-role"
        )
        aws_iam_role_policy_attachment_domain_execution =
        IamRolePolicyAttachment(self, "domain_execution_7",
            policy_arn=Token.as_string(domain_execution_role.arn),
            role=domain_execution.name
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_attachment_domain_execution.override_logical_id("domain_execution")
        aws_iam_role_policy_attachment_domain_service = IamRolePolicyAttachment(self, "domain_service_8",
            policy_arn=Token.as_string(domain_service_role.arn),
            role=domain_service.name
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_attachment_domain_service.override_logical_id("domain_service")
        DatazoneDomain(self, "example",
            domain_execution_role=domain_execution.arn,
            domain_version="V2",
            name="example-domain",
            service_role=domain_service.arn
        )
```

## Argument Reference

The following arguments are required:

* `name` - (Required) Name of the Domain.
* `domain_execution_role` - (Required) ARN of the role used by DataZone to configure the Domain.

The following arguments are optional:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `description` - (Optional) Description of the Domain.
* `domain_version` - (Optional) Version of the Domain. Valid values are `V1` and `V2`. Defaults to `V1`.
* `kms_key_identifier` - (Optional) ARN of the KMS key used to encrypt the Amazon DataZone domain, metadata and reporting data.
* `service_role` - (Optional) ARN of the service role used by DataZone. Required when `domain_version` is set to `V2`.
* `single_sign_on` - (Optional) Single sign on options, used to [enable AWS IAM Identity Center](https://docs.aws.amazon.com/datazone/latest/userguide/enable-IAM-identity-center-for-datazone.html) for DataZone.
* `skip_deletion_check` - (Optional) Whether to skip the deletion check for the Domain.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the Domain.
* `id` - ID of the Domain.
* `portal_url` - URL of the data portal for the Domain.
* `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `10m`)
* `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import DataZone Domain using the `domain_id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.datazone_domain import DatazoneDomain
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DatazoneDomain.generate_config_for_import(self, "example", "domain-id-12345678")
```

Using `terraform import`, import DataZone Domain using the `domain_id`. For example:

```console
% terraform import aws_datazone_domain.example domain-id-12345678
```

<!-- cache-key: cdktf-0.20.8 input-374106300826848c5ca762f24f8b1cb84d7e822c81f34bbfce1b23a68a1225d0 -->