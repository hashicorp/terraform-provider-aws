---
subcategory: "Security Hub"
layout: "aws"
page_title: "AWS: aws_securityhub_finding_aggregator"
description: |-
  Manages a Security Hub finding aggregator
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_securityhub_finding_aggregator

Manages a Security Hub finding aggregator. Security Hub needs to be enabled in a region in order for the aggregator to pull through findings.

## Example Usage

### All Regions Usage

The following example will enable the aggregator for every region.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.securityhub_account import SecurityhubAccount
from imports.aws.securityhub_finding_aggregator import SecurityhubFindingAggregator
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = SecurityhubAccount(self, "example")
        aws_securityhub_finding_aggregator_example =
        SecurityhubFindingAggregator(self, "example_1",
            depends_on=[example],
            linking_mode="ALL_REGIONS"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_securityhub_finding_aggregator_example.override_logical_id("example")
```

### All Regions Except Specified Regions Usage

The following example will enable the aggregator for every region except those specified in `specified_regions`.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.securityhub_account import SecurityhubAccount
from imports.aws.securityhub_finding_aggregator import SecurityhubFindingAggregator
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = SecurityhubAccount(self, "example")
        aws_securityhub_finding_aggregator_example =
        SecurityhubFindingAggregator(self, "example_1",
            depends_on=[example],
            linking_mode="ALL_REGIONS_EXCEPT_SPECIFIED",
            specified_regions=["eu-west-1", "eu-west-2"]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_securityhub_finding_aggregator_example.override_logical_id("example")
```

### Specified Regions Usage

The following example will enable the aggregator for every region specified in `specified_regions`.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.securityhub_account import SecurityhubAccount
from imports.aws.securityhub_finding_aggregator import SecurityhubFindingAggregator
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = SecurityhubAccount(self, "example")
        aws_securityhub_finding_aggregator_example =
        SecurityhubFindingAggregator(self, "example_1",
            depends_on=[example],
            linking_mode="SPECIFIED_REGIONS",
            specified_regions=["eu-west-1", "eu-west-2"]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_securityhub_finding_aggregator_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

- `linking_mode` - (Required) Indicates whether to aggregate findings from all of the available Regions or from a specified list. The options are `ALL_REGIONS`, `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`. When `ALL_REGIONS` or `ALL_REGIONS_EXCEPT_SPECIFIED` are used, Security Hub will automatically aggregate findings from new Regions as Security Hub supports them and you opt into them.
- `specified_regions` - (Optional) List of regions to include or exclude (required if `linking_mode` is set to `ALL_REGIONS_EXCEPT_SPECIFIED` or `SPECIFIED_REGIONS`)

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

- `arn` - Amazon Resource Name (ARN) of the Security Hub finding aggregator.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import an existing Security Hub finding aggregator using the `arn`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.securityhub_finding_aggregator import SecurityhubFindingAggregator
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        SecurityhubFindingAggregator.generate_config_for_import(self, "example", "arn:aws:securityhub:eu-west-1:123456789098:finding-aggregator/abcd1234-abcd-1234-1234-abcdef123456")
```

Using `terraform import`, import an existing Security Hub finding aggregator using the `arn`. For example:

```console
% terraform import aws_securityhub_finding_aggregator.example arn:aws:securityhub:eu-west-1:123456789098:finding-aggregator/abcd1234-abcd-1234-1234-abcdef123456
```

<!-- cache-key: cdktf-0.20.8 input-b0a0cef9ae9a2e4ba102b890bdf1e0083eb9b71a497b601f823d3d520dd935aa -->