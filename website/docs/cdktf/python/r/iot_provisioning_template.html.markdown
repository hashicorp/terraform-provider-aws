---
subcategory: "IoT Core"
layout: "aws"
page_title: "AWS: aws_iot_provisioning_template"
description: |-
    Manages an IoT fleet provisioning template.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_iot_provisioning_template

Manages an IoT fleet provisioning template. For more info, see the AWS documentation on [fleet provisioning](https://docs.aws.amazon.com/iot/latest/developerguide/provision-wo-cert.html).

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy_attachment import IamRolePolicyAttachment
from imports.aws.iot_policy import IotPolicy
from imports.aws.iot_provisioning_template import IotProvisioningTemplate
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        device_policy = DataAwsIamPolicyDocument(self, "device_policy",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["iot:Subscribe"],
                resources=["*"]
            )
            ]
        )
        iot_assume_role_policy = DataAwsIamPolicyDocument(self, "iot_assume_role_policy",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["iot.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        iot_fleet_provisioning = IamRole(self, "iot_fleet_provisioning",
            assume_role_policy=Token.as_string(iot_assume_role_policy.json),
            name="IoTProvisioningServiceRole",
            path="/service-role/"
        )
        IamRolePolicyAttachment(self, "iot_fleet_provisioning_registration",
            policy_arn="arn:aws:iam::aws:policy/service-role/AWSIoTThingsRegistration",
            role=iot_fleet_provisioning.name
        )
        aws_iot_policy_device_policy = IotPolicy(self, "device_policy_4",
            name="DevicePolicy",
            policy=Token.as_string(device_policy.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iot_policy_device_policy.override_logical_id("device_policy")
        IotProvisioningTemplate(self, "fleet",
            description="My provisioning template",
            enabled=True,
            name="FleetTemplate",
            provisioning_role_arn=iot_fleet_provisioning.arn,
            template_body=Token.as_string(
                Fn.jsonencode({
                    "Parameters": {
                        "SerialNumber": {
                            "Type": "String"
                        }
                    },
                    "Resources": {
                        "certificate": {
                            "Properties": {
                                "CertificateId": {
                                    "Ref": "AWS::IoT::Certificate::Id"
                                },
                                "Status": "Active"
                            },
                            "Type": "AWS::IoT::Certificate"
                        },
                        "policy": {
                            "Properties": {
                                "PolicyName": aws_iot_policy_device_policy.name
                            },
                            "Type": "AWS::IoT::Policy"
                        }
                    }
                }))
        )
```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The name of the fleet provisioning template.
* `description` - (Optional) The description of the fleet provisioning template.
* `enabled` - (Optional) True to enable the fleet provisioning template, otherwise false.
* `pre_provisioning_hook` - (Optional) Creates a pre-provisioning hook template. Details below.
* `provisioning_role_arn` - (Required) The role ARN for the role associated with the fleet provisioning template. This IoT role grants permission to provision a device.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `template_body` - (Required) The JSON formatted contents of the fleet provisioning template.
* `type` - (Optional) The type you define in a provisioning template.

### pre_provisioning_hook

The `pre_provisioning_hook` configuration block supports the following:

* `payload_version` - (Optional) The version of the payload that was sent to the target function. The only valid (and the default) payload version is `"2020-04-01"`.
* `target_arn` - (Optional) The ARN of the target function.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The ARN that identifies the provisioning template.
* `default_version_id` - The default version of the fleet provisioning template.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import IoT fleet provisioning templates using the `name`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.iot_provisioning_template import IotProvisioningTemplate
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        IotProvisioningTemplate.generate_config_for_import(self, "fleet", "FleetProvisioningTemplate")
```

Using `terraform import`, import IoT fleet provisioning templates using the `name`. For example:

```console
% terraform import aws_iot_provisioning_template.fleet FleetProvisioningTemplate
```

<!-- cache-key: cdktf-0.20.8 input-0caa47853f782deb3ce1c0adf39db30dd119e9251e987dbe84f960ceed581db6 -->