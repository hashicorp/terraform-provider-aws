---
subcategory: "GuardDuty"
layout: "aws"
page_title: "AWS: aws_guardduty_organization_configuration"
description: |-
  Manages the GuardDuty Organization Configuration
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_guardduty_organization_configuration

Manages the GuardDuty Organization Configuration in the current AWS Region. The AWS account utilizing this resource must have been assigned as a delegated Organization administrator account, e.g., via the [`aws_guardduty_organization_admin_account` resource](/docs/providers/aws/r/guardduty_organization_admin_account.html). More information about Organizations support in GuardDuty can be found in the [GuardDuty User Guide](https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_organizations.html).

~> **NOTE:** This is an advanced Terraform resource. Terraform will automatically assume management of the GuardDuty Organization Configuration without import and perform no actions on removal from the Terraform configuration.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.guardduty_detector import GuarddutyDetector
from imports.aws.guardduty_organization_configuration import GuarddutyOrganizationConfiguration
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = GuarddutyDetector(self, "example",
            enable=True
        )
        aws_guardduty_organization_configuration_example =
        GuarddutyOrganizationConfiguration(self, "example_1",
            auto_enable_organization_members="ALL",
            datasources=GuarddutyOrganizationConfigurationDatasources(
                kubernetes=GuarddutyOrganizationConfigurationDatasourcesKubernetes(
                    audit_logs=GuarddutyOrganizationConfigurationDatasourcesKubernetesAuditLogs(
                        enable=True
                    )
                ),
                malware_protection=GuarddutyOrganizationConfigurationDatasourcesMalwareProtection(
                    scan_ec2_instance_with_findings=GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindings(
                        ebs_volumes=GuarddutyOrganizationConfigurationDatasourcesMalwareProtectionScanEc2InstanceWithFindingsEbsVolumes(
                            auto_enable=True
                        )
                    )
                ),
                s3_logs=GuarddutyOrganizationConfigurationDatasourcesS3Logs(
                    auto_enable=True
                )
            ),
            detector_id=example.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_guardduty_organization_configuration_example.override_logical_id("example")
```

## Argument Reference

~> **NOTE:** One of `auto_enable` or `auto_enable_organization_members` must be specified.

This resource supports the following arguments:

* `auto_enable` - (Optional) *Deprecated:* Use `auto_enable_organization_members` instead. When this setting is enabled, all new accounts that are created in, or added to, the organization are added as a member accounts of the organizationâ€™s GuardDuty delegated administrator and GuardDuty is enabled in that AWS Region.
* `auto_enable_organization_members` - (Optional) Indicates the auto-enablement configuration of GuardDuty for the member accounts in the organization. Valid values are `ALL`, `NEW`, `NONE`.
* `detector_id` - (Required) The detector ID of the GuardDuty account.
* `datasources` - (Optional) Configuration for the collected datasources.

`datasources` supports the following:

* `s3_logs` - (Optional) Enable S3 Protection automatically for new member accounts.
* `kubernetes` - (Optional) Enable Kubernetes Audit Logs Monitoring automatically for new member accounts.
* `malware_protection` - (Optional) Enable Malware Protection automatically for new member accounts.

### S3 Logs

`s3_logs` block supports the following:

* `auto_enable` - (Optional) Set to `true` if you want S3 data event logs to be automatically enabled for new members of the organization. Default: `false`

### Kubernetes

`kubernetes` block supports the following:

* `audit_logs` - (Required) Enable Kubernetes Audit Logs Monitoring automatically for new member accounts. [Kubernetes protection](https://docs.aws.amazon.com/guardduty/latest/ug/kubernetes-protection.html).
  See [Kubernetes Audit Logs](#kubernetes-audit-logs) below for more details.

#### Kubernetes Audit Logs

The `audit_logs` block supports the following:

* `enable` - (Required) If true, enables Kubernetes audit logs as a data source for [Kubernetes protection](https://docs.aws.amazon.com/guardduty/latest/ug/kubernetes-protection.html).
  Defaults to `true`.

### Malware Protection

`malware_protection` block supports the following:

* `scan_ec2_instance_with_findings` - (Required) Configure whether [Malware Protection](https://docs.aws.amazon.com/guardduty/latest/ug/malware-protection.html) for EC2 instances with findings should be auto-enabled for new members joining the organization.
   See [Scan EC2 instance with findings](#scan-ec2-instance-with-findings) below for more details.

#### Scan EC2 instance with findings

The `scan_ec2_instance_with_findings` block supports the following:

* `ebs_volumes` - (Required) Configure whether scanning EBS volumes should be auto-enabled for new members joining the organization
  See [EBS volumes](#ebs-volumes) below for more details.

#### EBS volumes

The `ebs_volumes` block supports the following:

* `auto_enable` - (Required) If true, enables [Malware Protection](https://docs.aws.amazon.com/guardduty/latest/ug/malware-protection.html) for all new accounts joining the organization.
  Defaults to `true`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Identifier of the GuardDuty Detector.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import GuardDuty Organization Configurations using the GuardDuty Detector ID. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.guardduty_organization_configuration import GuarddutyOrganizationConfiguration
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        GuarddutyOrganizationConfiguration.generate_config_for_import(self, "example", "00b00fd5aecc0ab60a708659477e9617")
```

Using `terraform import`, import GuardDuty Organization Configurations using the GuardDuty Detector ID. For example:

```console
% terraform import aws_guardduty_organization_configuration.example 00b00fd5aecc0ab60a708659477e9617
```

<!-- cache-key: cdktf-0.20.1 input-0204debd69a542a4ab875fac471e6f3104005ffcf7df6f2813bc3941f9df1990 -->