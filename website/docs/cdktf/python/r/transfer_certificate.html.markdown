---
subcategory: "Transfer Family"
layout: "aws"
page_title: "AWS: aws_transfer_certificate"
description: |-
  Provides a AWS Transfer AS2 Certificate Resource
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_transfer_certificate

Provides a AWS Transfer AS2 Certificate resource.

## Example Usage

### Basic

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.transfer_certificate import TransferCertificate
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        TransferCertificate(self, "example",
            certificate=Token.as_string(
                Fn.file("${path.module}/example.com/example.crt")),
            certificate_chain=Token.as_string(
                Fn.file("${path.module}/example.com/ca.crt")),
            description="example",
            private_key=Token.as_string(
                Fn.file("${path.module}/example.com/example.key")),
            usage="SIGNING"
        )
```

## Argument Reference

This resource supports the following arguments:

* `certificate` - (Required) The valid certificate file required for the transfer.
* `certificate_chain` - (Optional) The optional list of certificate that make up the chain for the certificate that is being imported.
* `description` - (Optional) A short description that helps identify the certificate.
* `private_key` - (Optional) The private key associated with the certificate being imported.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `usage` - (Required) Specifies if a certificate is being used for signing or encryption. The valid values are SIGNING and ENCRYPTION.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The ARN of the certificate
* `certificate_id` - The unique identifier for the AS2 certificate
* `active_date` - An date when the certificate becomes active
* `inactive_date` - An date when the certificate becomes inactive

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Transfer AS2 Certificate using the `certificate_id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.transfer_certificate import TransferCertificate
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        TransferCertificate.generate_config_for_import(self, "example", "c-4221a88afd5f4362a")
```

Using `terraform import`, import Transfer AS2 Certificate using the `certificate_id`. For example:

```console
% terraform import aws_transfer_certificate.example c-4221a88afd5f4362a
```

<!-- cache-key: cdktf-0.20.8 input-9e7f080d0a6c4946e22084c4f2ae3c03144eb7cd8a58f89d9fd2f1afa2ea612e -->