---
subcategory: "S3 Control"
layout: "aws"
page_title: "AWS: aws_s3control_access_point_policy"
description: |-
  Provides a resource to manage an S3 Access Point resource policy.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_s3control_access_point_policy

Provides a resource to manage an S3 Access Point resource policy.

~> **NOTE on Access Points and Access Point Policies:** Terraform provides both a standalone Access Point Policy resource and an [Access Point](s3_access_point.html) resource with a resource policy defined in-line. You cannot use an Access Point with in-line resource policy in conjunction with an Access Point Policy resource. Doing so will cause a conflict of policies and will overwrite the access point's resource policy.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from cdktf import TerraformResourceLifecycle
from constructs import Construct
from cdktf import Token, Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.s3_access_point import S3AccessPoint
from imports.aws.s3_bucket import S3Bucket
from imports.aws.s3_control_access_point_policy import S3ControlAccessPointPolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = S3Bucket(self, "example",
            bucket="example"
        )
        aws_s3_access_point_example = S3AccessPoint(self, "example_1",
            bucket=example.id,
            lifecycle=TerraformResourceLifecycle(
                ignore_changes=[policy]
            ),
            name="example",
            public_access_block_configuration=S3AccessPointPublicAccessBlockConfiguration(
                block_public_acls=True,
                block_public_policy=False,
                ignore_public_acls=True,
                restrict_public_buckets=False
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_access_point_example.override_logical_id("example")
        aws_s3_control_access_point_policy_example = S3ControlAccessPointPolicy(self, "example_2",
            access_point_arn=Token.as_string(aws_s3_access_point_example.arn),
            policy=Token.as_string(
                Fn.jsonencode({
                    "Statement": [{
                        "Action": "s3:GetObjectTagging",
                        "Effect": "Allow",
                        "Principal": {
                            "AWS": "*"
                        },
                        "Resource": "${" + aws_s3_access_point_example.arn + "}/object/*"
                    }
                    ],
                    "Version": "2008-10-17"
                }))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_control_access_point_policy_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `access_point_arn` - (Required) The ARN of the access point that you want to associate with the specified policy.
* `policy` - (Required) The policy that you want to apply to the specified access point.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `has_public_access_policy` - Indicates whether this access point currently has a policy that allows public access.
* `id` - The AWS account ID and access point name separated by a colon (`:`).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Access Point policies using the `access_point_arn`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.s3_control_access_point_policy import S3ControlAccessPointPolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        S3ControlAccessPointPolicy.generate_config_for_import(self, "example", "arn:aws:s3:us-west-2:123456789012:accesspoint/example")
```

Using `terraform import`, import Access Point policies using the `access_point_arn`. For example:

```console
% terraform import aws_s3control_access_point_policy.example arn:aws:s3:us-west-2:123456789012:accesspoint/example
```

<!-- cache-key: cdktf-0.20.8 input-e5c457db50c72d6b30534efccf23fc63cd4d7f721d03d7a1b36a6e8875fa8261 -->