---
subcategory: "ELB (Elastic Load Balancing)"
layout: "aws"
page_title: "AWS: aws_lb_target_group_attachment"
description: |-
  Provides the ability to register instances and containers with a LB
  target group
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_lb_target_group_attachment

Provides the ability to register instances and containers with an Application Load Balancer (ALB) or Network Load Balancer (NLB) target group. For attaching resources with Elastic Load Balancer (ELB), see the [`aws_elb_attachment` resource](/docs/providers/aws/r/elb_attachment.html).

~> **Note:** `aws_alb_target_group_attachment` is known as `aws_lb_target_group_attachment`. The functionality is identical.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.instance import Instance
from imports.aws.lb_target_group import LbTargetGroup
from imports.aws.lb_target_group_attachment import LbTargetGroupAttachment
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test = Instance(self, "test")
        aws_lb_target_group_test = LbTargetGroup(self, "test_1")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_lb_target_group_test.override_logical_id("test")
        aws_lb_target_group_attachment_test = LbTargetGroupAttachment(self, "test_2",
            port=80,
            target_group_arn=Token.as_string(aws_lb_target_group_test.arn),
            target_id=test.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_lb_target_group_attachment_test.override_logical_id("test")
```

### Lambda Target

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.lambda_function import LambdaFunction
from imports.aws.lambda_permission import LambdaPermission
from imports.aws.lb_target_group import LbTargetGroup
from imports.aws.lb_target_group_attachment import LbTargetGroupAttachment
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, functionName, role):
        super().__init__(scope, name)
        test = LambdaFunction(self, "test",
            function_name=function_name,
            role=role
        )
        aws_lb_target_group_test = LbTargetGroup(self, "test_1",
            name="test",
            target_type="lambda"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_lb_target_group_test.override_logical_id("test")
        with_lb = LambdaPermission(self, "with_lb",
            action="lambda:InvokeFunction",
            function_name=test.function_name,
            principal="elasticloadbalancing.amazonaws.com",
            source_arn=Token.as_string(aws_lb_target_group_test.arn),
            statement_id="AllowExecutionFromlb"
        )
        aws_lb_target_group_attachment_test = LbTargetGroupAttachment(self, "test_3",
            depends_on=[with_lb],
            target_group_arn=Token.as_string(aws_lb_target_group_test.arn),
            target_id=test.arn
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_lb_target_group_attachment_test.override_logical_id("test")
```

### Registering Multiple Targets

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformCount, TerraformIterator, Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.instance import Instance
from imports.aws.lb_target_group import LbTargetGroup
from imports.aws.lb_target_group_attachment import LbTargetGroupAttachment
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        example_count = TerraformCount.of(Token.as_number("3"))
        example = Instance(self, "example",
            count=example_count
        )
        aws_lb_target_group_example = LbTargetGroup(self, "example_1")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_lb_target_group_example.override_logical_id("example")
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        example_for_each_iterator = TerraformIterator.from_list(
            Token.as_any("${{ for k, v in ${" + example.fqn + "} : k => v}}"))
        aws_lb_target_group_attachment_example = LbTargetGroupAttachment(self, "example_2",
            port=80,
            target_group_arn=Token.as_string(aws_lb_target_group_example.arn),
            target_id=Token.as_string(
                Fn.lookup_nested(example_for_each_iterator.value, ["id"])),
            for_each=example_for_each_iterator
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_lb_target_group_attachment_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `target_group_arn` - (Required) The ARN of the target group with which to register targets.
* `target_id` (Required) The ID of the target. This is the Instance ID for an instance, or the container ID for an ECS container. If the target type is `ip`, specify an IP address. If the target type is `lambda`, specify the Lambda function ARN. If the target type is `alb`, specify the ALB ARN.

The following arguments are optional:

* `availability_zone` - (Optional) The Availability Zone where the IP address of the target is to be registered. If the private IP address is outside of the VPC scope, this value must be set to `all`.
* `port` - (Optional) The port on which targets receive traffic.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - A unique identifier for the attachment.

## Import

You cannot import Target Group Attachments.

<!-- cache-key: cdktf-0.20.1 input-ab9658101e55ff2b7e9dcb8c1729d7e87f2de8dff7d0559549746cf241510328 -->