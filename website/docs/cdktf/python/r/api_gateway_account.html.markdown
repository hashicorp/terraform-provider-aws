---
subcategory: "API Gateway"
layout: "aws"
page_title: "AWS: aws_api_gateway_account"
description: |-
  Provides a settings of an API Gateway Account.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_api_gateway_account

Provides a settings of an API Gateway Account. Settings is applied region-wide per `provider` block.

-> **Note:** As there is no API method for deleting account settings or resetting it to defaults, destroying this resource will keep your account settings intact

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.api_gateway_account import ApiGatewayAccount
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy import IamRolePolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        assume_role = DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["apigateway.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        cloudwatch = DataAwsIamPolicyDocument(self, "cloudwatch",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["logs:CreateLogGroup", "logs:CreateLogStream", "logs:DescribeLogGroups", "logs:DescribeLogStreams", "logs:PutLogEvents", "logs:GetLogEvents", "logs:FilterLogEvents"
                ],
                effect="Allow",
                resources=["*"]
            )
            ]
        )
        aws_iam_role_cloudwatch = IamRole(self, "cloudwatch_2",
            assume_role_policy=Token.as_string(assume_role.json),
            name="api_gateway_cloudwatch_global"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_cloudwatch.override_logical_id("cloudwatch")
        aws_iam_role_policy_cloudwatch = IamRolePolicy(self, "cloudwatch_3",
            name="default",
            policy=Token.as_string(cloudwatch.json),
            role=Token.as_string(aws_iam_role_cloudwatch.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_cloudwatch.override_logical_id("cloudwatch")
        ApiGatewayAccount(self, "demo",
            cloudwatch_role_arn=Token.as_string(aws_iam_role_cloudwatch.arn)
        )
```

## Argument Reference

This resource supports the following arguments:

* `cloudwatch_role_arn` - (Optional) ARN of an IAM role for CloudWatch (to allow logging & monitoring). See more [in AWS Docs](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-stage-settings.html#how-to-stage-settings-console). Logging & monitoring can be enabled/disabled and otherwise tuned on the API Gateway Stage level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `api_key_version` - The version of the API keys used for the account.
* `throttle_settings` - Account-Level throttle settings. See exported fields below.
* `features` - A list of features supported for the account.

`throttle_settings` block exports the following:

* `burst_limit` - Absolute maximum number of times API Gateway allows the API to be called per second (RPS).
* `rate_limit` - Number of times API Gateway allows the API to be called per second on average (RPS).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import API Gateway Accounts using the word `api-gateway-account`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.api_gateway_account import ApiGatewayAccount
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        ApiGatewayAccount.generate_config_for_import(self, "demo", "api-gateway-account")
```

Using `terraform import`, import API Gateway Accounts using the word `api-gateway-account`. For example:

```console
% terraform import aws_api_gateway_account.demo api-gateway-account
```

<!-- cache-key: cdktf-0.20.8 input-2c3031685ea1cacb5723c6c52399155d732bc5bb2d7fcfa71a3cc55a2bf24db5 -->