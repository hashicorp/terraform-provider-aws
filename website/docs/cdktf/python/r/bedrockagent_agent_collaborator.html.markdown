---
subcategory: "Bedrock Agents"
layout: "aws"
page_title: "AWS: aws_bedrockagent_agent_collaborator"
description: |-
  Terraform resource for managing an AWS Bedrock Agents Agent Collaborator.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_bedrockagent_agent_collaborator

Terraform resource for managing an AWS Bedrock Agents Agent Collaborator.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.bedrockagent_agent import BedrockagentAgent
from imports.aws.bedrockagent_agent_alias import BedrockagentAgentAlias
from imports.aws.bedrockagent_agent_collaborator import BedrockagentAgentCollaborator
from imports.aws.data_aws_caller_identity import DataAwsCallerIdentity
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.data_aws_partition import DataAwsPartition
from imports.aws.data_aws_region import DataAwsRegion
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy import IamRolePolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        current = DataAwsCallerIdentity(self, "current")
        data_aws_partition_current = DataAwsPartition(self, "current_1")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_partition_current.override_logical_id("current")
        data_aws_region_current = DataAwsRegion(self, "current_2")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_region_current.override_logical_id("current")
        example_agent_permissions = DataAwsIamPolicyDocument(self, "example_agent_permissions",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["bedrock:InvokeModel"],
                resources=["arn:${" + data_aws_partition_current.partition + "}:bedrock:${" + data_aws_region_current.name + "}::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0"
                ]
            ), DataAwsIamPolicyDocumentStatement(
                actions=["bedrock:GetAgentAlias", "bedrock:InvokeAgent"],
                resources=["arn:${" + current_agent.partition + "}:bedrock:${" + data_aws_region_current.name + "}:${" + current.account_id + "}:agent/*", "arn:${" + current_agent.partition + "}:bedrock:${" + data_aws_region_current.name + "}:${" + current.account_id + "}:agent-alias/*"
                ]
            )
            ]
        )
        example_agent_trust = DataAwsIamPolicyDocument(self, "example_agent_trust",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                condition=[DataAwsIamPolicyDocumentStatementCondition(
                    test="StringEquals",
                    values=[Token.as_string(current.account_id)],
                    variable="aws:SourceAccount"
                ), DataAwsIamPolicyDocumentStatementCondition(
                    test="ArnLike",
                    values=["arn:${" + data_aws_partition_current.partition + "}:bedrock:${" + data_aws_region_current.name + "}:${" + current.account_id + "}:agent/*"
                    ],
                    variable="AWS:SourceArn"
                )
                ],
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["bedrock.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        example = IamRole(self, "example",
            assume_role_policy=Token.as_string(example_agent_trust.json),
            name_prefix="AmazonBedrockExecutionRoleForAgents_"
        )
        aws_iam_role_policy_example = IamRolePolicy(self, "example_6",
            policy=Token.as_string(example_agent_permissions.json),
            role=example.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_example.override_logical_id("example")
        example_collaborator = BedrockagentAgent(self, "example_collaborator",
            agent_name="my-agent-collaborator",
            agent_resource_role_arn=example.arn,
            foundation_model="anthropic.claude-3-5-sonnet-20241022-v2:0",
            idle_session_ttl_in_seconds=500,
            instruction="do what the supervisor tells you to do"
        )
        example_supervisor = BedrockagentAgent(self, "example_supervisor",
            agent_collaboration="SUPERVISOR",
            agent_name="my-agent-supervisor",
            agent_resource_role_arn=example.arn,
            foundation_model="anthropic.claude-3-5-sonnet-20241022-v2:0",
            idle_session_ttl_in_seconds=500,
            instruction="tell the sub agent what to do",
            prepare_agent=False
        )
        aws_bedrockagent_agent_alias_example = BedrockagentAgentAlias(self, "example_9",
            agent_alias_name="my-agent-alias",
            agent_id=example_collaborator.agent_id,
            description="Test Alias"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_bedrockagent_agent_alias_example.override_logical_id("example")
        aws_bedrockagent_agent_collaborator_example =
        BedrockagentAgentCollaborator(self, "example_10",
            agent_descriptor=[BedrockagentAgentCollaboratorAgentDescriptor(
                alias_arn=Token.as_string(aws_bedrockagent_agent_alias_example.agent_alias_arn)
            )
            ],
            agent_id=example_supervisor.agent_id,
            collaboration_instruction="tell the other agent what to do",
            collaborator_name="my-collab-example",
            relay_conversation_history="TO_COLLABORATOR"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_bedrockagent_agent_collaborator_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `agent_id` - (Required) ID if the agent to associate the collaborator.
* `collaboration_instruction` - (Required) Instruction to give the collaborator.
* `collbaorator_name` - (Required) Name of this collaborator.

The following arguments are optional:

* `prepare_agent` (Optional) Whether to prepare the agent after creation or modification. Defaults to `true`.
* `relay_conversation_history` - (Optional) Configure relaying the history to the collaborator.

### `agent_descriptor` Block

The `agent_descriptor` configuration block supports the following arguments:

* `alias_arn` - (Required) ARN of the Alias of an Agent to use as the collaborator.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `collaborator_id` - ID of the Agent Collaborator.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `5m`)
* `update` - (Default `5m`)
* `delete` - (Default `5m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Bedrock Agents Agent Collaborator using a comma-delimited string combining `agent_id`, `agent_version`, and `collaborator_id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.bedrockagent_agent_collaborator import BedrockagentAgentCollaborator
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        BedrockagentAgentCollaborator.generate_config_for_import(self, "example", "9LSJO0BFI8,DRAFT,AG3TN4RQIY")
```

Using `terraform import`, import Bedrock Agents Agent Collaborator using a comma-delimited string combining `agent_id`, `agent_version`, and `collaborator_id`. For example:

```console
% terraform import aws_bedrockagent_agent_collaborator.example 9LSJO0BFI8,DRAFT,AG3TN4RQIY
```

<!-- cache-key: cdktf-0.20.8 input-57b5c6c247e36a0f4260a7906aa72d93e72a760ebb81f8f6f75a7cd3ed0e6c52 -->