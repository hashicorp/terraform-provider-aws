---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_ec2_managed_prefix_list_entry"
description: |-
  Use the `aws_ec2_managed_prefix_list_entry` resource to manage a managed prefix list entry.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ec2_managed_prefix_list_entry

Use the `aws_prefix_list_entry` resource to manage a managed prefix list entry.

~> **NOTE:** Terraform currently provides two resources for managing Managed Prefix Lists and Managed Prefix List Entries. The standalone resource, [Managed Prefix List Entry](ec2_managed_prefix_list_entry.html), is used to manage a single entry. The [Managed Prefix List resource](ec2_managed_prefix_list.html) is used to manage multiple entries defined in-line. It is important to note that you cannot use a Managed Prefix List with in-line rules in conjunction with any Managed Prefix List Entry resources. This will result in a conflict of entries and will cause the entries to be overwritten.

~> **NOTE:** To improve execution times on larger updates, it is recommended to use the inline `entry` block as part of the Managed Prefix List resource when creating a prefix list with more than 100 entries. You can find more information about the resource [here](ec2_managed_prefix_list.html).

## Example Usage

Basic usage.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.ec2_managed_prefix_list import Ec2ManagedPrefixList
from imports.aws.ec2_managed_prefix_list_entry import Ec2ManagedPrefixListEntryA
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = Ec2ManagedPrefixList(self, "example",
            address_family="IPv4",
            max_entries=5,
            name="All VPC CIDR-s",
            tags={
                "Env": "live"
            }
        )
        Ec2ManagedPrefixListEntryA(self, "entry_1",
            cidr=Token.as_string(aws_vpc_example.cidr_block),
            description="Primary",
            prefix_list_id=example.id
        )
```

## Argument Reference

This resource supports the following arguments:

* `cidr` - (Required) CIDR block of this entry.
* `description` - (Optional) Description of this entry. Please note that due to API limitations, updating only the description of an entry will require recreating the entry.
* `prefix_list_id` - (Required) The ID of the prefix list.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - ID of the managed prefix list entry.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import prefix list entries using `prefix_list_id` and `cidr` separated by a comma (`,`). For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.ec2_managed_prefix_list_entry import Ec2ManagedPrefixListEntryA
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        Ec2ManagedPrefixListEntryA.generate_config_for_import(self, "default", "pl-0570a1d2d725c16be,10.0.3.0/24")
```

Using `terraform import`, import prefix list entries using `prefix_list_id` and `cidr` separated by a comma (`,`). For example:

```console
% terraform import aws_ec2_managed_prefix_list_entry.default pl-0570a1d2d725c16be,10.0.3.0/24
```

<!-- cache-key: cdktf-0.20.8 input-3d44a4444122a301a9ec7b354d4857edd3200d8c413f7cb4c55f5979d3c06693 -->