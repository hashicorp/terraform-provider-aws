---
subcategory: "ElastiCache"
layout: "aws"
page_title: "AWS: aws_elasticache_user_group"
description: |-
  Provides an ElastiCache user group.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_elasticache_user_group

Provides an ElastiCache user group resource.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.elasticache_user import ElasticacheUser
from imports.aws.elasticache_user_group import ElasticacheUserGroup
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test = ElasticacheUser(self, "test",
            access_string="on ~app::* -@all +@read +@hash +@bitmap +@geo -setbit -bitfield -hset -hsetnx -hmset -hincrby -hincrbyfloat -hdel -bitop -geoadd -georadius -georadiusbymember",
            engine="REDIS",
            passwords=["password123456789"],
            user_id="testUserId",
            user_name="default"
        )
        aws_elasticache_user_group_test = ElasticacheUserGroup(self, "test_1",
            engine="REDIS",
            user_group_id="userGroupId",
            user_ids=[test.user_id]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_elasticache_user_group_test.override_logical_id("test")
```

## Argument Reference

The following arguments are required:

* `engine` - (Required) The current supported value are `REDIS`, `VALKEY`.
* `user_group_id` - (Required) The ID of the user group.

The following arguments are optional:

* `user_ids` - (Optional) The list of user IDs that belong to the user group.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The user group identifier.
* `arn` - The ARN that identifies the user group.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ElastiCache user groups using the `user_group_id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.elasticache_user_group import ElasticacheUserGroup
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        ElasticacheUserGroup.generate_config_for_import(self, "myUserGroup", "userGoupId1")
```

Using `terraform import`, import ElastiCache user groups using the `user_group_id`. For example:

```console
% terraform import aws_elasticache_user_group.my_user_group userGoupId1
```

<!-- cache-key: cdktf-0.20.8 input-5d472f4a97f4cb6d500729bf944ccf66216f5257161de9e5de0cde3b98205f12 -->