---
subcategory: "Lightsail"
layout: "aws"
page_title: "AWS: aws_lightsail_instance_public_ports"
description: |-
  Manages public ports for a Lightsail instance.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_lightsail_instance_public_ports

Manages public ports for a Lightsail instance. Use this resource to open ports for a specific Amazon Lightsail instance and specify the IP addresses allowed to connect to the instance through the ports and the protocol.

-> See [What is Amazon Lightsail?](https://lightsail.aws.amazon.com/ls/docs/getting-started/article/what-is-amazon-lightsail) for more information.

~> **Note:** Lightsail is currently only supported in a limited number of AWS Regions, please see ["Regions and Availability Zones in Amazon Lightsail"](https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail) for more details.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_availability_zones import DataAwsAvailabilityZones
from imports.aws.lightsail_instance import LightsailInstance
from imports.aws.lightsail_instance_public_ports import LightsailInstancePublicPorts
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        available = DataAwsAvailabilityZones(self, "available",
            filter=[DataAwsAvailabilityZonesFilter(
                name="opt-in-status",
                values=["opt-in-not-required"]
            )
            ],
            state="available"
        )
        example = LightsailInstance(self, "example",
            availability_zone=Token.as_string(Fn.lookup_nested(available.names, ["0"])),
            blueprint_id="amazon_linux_2",
            bundle_id="nano_3_0",
            name="example-instance"
        )
        aws_lightsail_instance_public_ports_example =
        LightsailInstancePublicPorts(self, "example_2",
            instance_name=example.name,
            port_info=[LightsailInstancePublicPortsPortInfo(
                from_port=80,
                protocol="tcp",
                to_port=80
            ), LightsailInstancePublicPortsPortInfo(
                cidrs=["192.168.1.0/24"],
                from_port=443,
                protocol="tcp",
                to_port=443
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_lightsail_instance_public_ports_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `instance_name` - (Required) Name of the Lightsail Instance.
* `port_info` - (Required) Configuration block with port information. AWS closes all currently open ports that are not included in the `port_info`. [See below](#port_info).

### port_info

The following arguments are required:

* `from_port` - (Required) First port in a range of open ports on an instance.
* `protocol` - (Required) IP protocol name. Valid values: `tcp`, `all`, `udp`, `icmp`.
* `to_port` - (Required) Last port in a range of open ports on an instance.

The following arguments are optional:

* `cidr_list_aliases` - (Optional) Set of CIDR aliases that define access for a preconfigured range of IP addresses.
* `cidrs` - (Optional) Set of CIDR blocks.
* `ipv6_cidrs` - (Optional) Set of IPv6 CIDR blocks.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - ID of the resource.

<!-- cache-key: cdktf-0.20.8 input-cfba9f94b8b18b34a6f7230f088b39dded3a14fe765be72aa8fcf6a77a82dc91 -->