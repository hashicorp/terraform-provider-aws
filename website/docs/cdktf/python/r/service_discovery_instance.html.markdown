---
subcategory: "Cloud Map"
layout: "aws"
page_title: "AWS: aws_service_discovery_instance"
description: |-
  Provides a Service Discovery Instance resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_service_discovery_instance

Provides a Service Discovery Instance resource.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.service_discovery_instance import ServiceDiscoveryInstance
from imports.aws.service_discovery_private_dns_namespace import ServiceDiscoveryPrivateDnsNamespace
from imports.aws.service_discovery_service import ServiceDiscoveryService
from imports.aws.vpc import Vpc
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = Vpc(self, "example",
            cidr_block="10.0.0.0/16",
            enable_dns_hostnames=True,
            enable_dns_support=True
        )
        aws_service_discovery_private_dns_namespace_example =
        ServiceDiscoveryPrivateDnsNamespace(self, "example_1",
            description="example",
            name="example.terraform.local",
            vpc=example.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_service_discovery_private_dns_namespace_example.override_logical_id("example")
        aws_service_discovery_service_example = ServiceDiscoveryService(self, "example_2",
            dns_config=ServiceDiscoveryServiceDnsConfig(
                dns_records=[ServiceDiscoveryServiceDnsConfigDnsRecords(
                    ttl=10,
                    type="A"
                )
                ],
                namespace_id=Token.as_string(aws_service_discovery_private_dns_namespace_example.id),
                routing_policy="MULTIVALUE"
            ),
            health_check_custom_config=ServiceDiscoveryServiceHealthCheckCustomConfig(
                failure_threshold=1
            ),
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_service_discovery_service_example.override_logical_id("example")
        aws_service_discovery_instance_example = ServiceDiscoveryInstance(self, "example_3",
            attributes={
                "AWS_INSTANCE_IPV4": "172.18.0.1",
                "custom_attribute": "custom"
            },
            instance_id="example-instance-id",
            service_id=Token.as_string(aws_service_discovery_service_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_service_discovery_instance_example.override_logical_id("example")
```

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.service_discovery_http_namespace import ServiceDiscoveryHttpNamespace
from imports.aws.service_discovery_instance import ServiceDiscoveryInstance
from imports.aws.service_discovery_service import ServiceDiscoveryService
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = ServiceDiscoveryHttpNamespace(self, "example",
            description="example",
            name="example.terraform.com"
        )
        aws_service_discovery_service_example = ServiceDiscoveryService(self, "example_1",
            name="example",
            namespace_id=example.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_service_discovery_service_example.override_logical_id("example")
        aws_service_discovery_instance_example = ServiceDiscoveryInstance(self, "example_2",
            attributes={
                "AWS_EC2_INSTANCE_ID": "i-0abdg374kd892cj6dl"
            },
            instance_id="example-instance-id",
            service_id=Token.as_string(aws_service_discovery_service_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_service_discovery_instance_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `instance_id` - (Required, ForceNew) The ID of the service instance.
* `service_id` - (Required, ForceNew) The ID of the service that you want to use to create the instance.
* `attributes` - (Required) A map contains the attributes of the instance. Check the [doc](https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html#API_RegisterInstance_RequestSyntax) for the supported attributes and syntax.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the instance.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Service Discovery Instance using the service ID and instance ID. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.service_discovery_instance import ServiceDiscoveryInstance
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        ServiceDiscoveryInstance.generate_config_for_import(self, "example", "0123456789/i-0123")
```

Using `terraform import`, import Service Discovery Instance using the service ID and instance ID. For example:

```console
% terraform import aws_service_discovery_instance.example 0123456789/i-0123
```

<!-- cache-key: cdktf-0.20.8 input-81e46074d207df4789822f0bad31c495113362f2fbc8b6456fb894ad88def8b7 -->