---
subcategory: "GuardDuty"
layout: aws
page_title: 'AWS: aws_guardduty_publishing_destination'
description: Provides a resource to manage a GuardDuty PublishingDestination
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_guardduty_publishing_destination

Provides a resource to manage a GuardDuty PublishingDestination. Requires an existing GuardDuty Detector.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_caller_identity import DataAwsCallerIdentity
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.data_aws_region import DataAwsRegion
from imports.aws.guardduty_detector import GuarddutyDetector
from imports.aws.guardduty_publishing_destination import GuarddutyPublishingDestination
from imports.aws.kms_key import KmsKey
from imports.aws.s3_bucket import S3Bucket
from imports.aws.s3_bucket_acl import S3BucketAcl
from imports.aws.s3_bucket_policy import S3BucketPolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test_gd = GuarddutyDetector(self, "test_gd",
            enable=True
        )
        gd_bucket = S3Bucket(self, "gd_bucket",
            bucket="example",
            force_destroy=True
        )
        S3BucketAcl(self, "gd_bucket_acl",
            acl="private",
            bucket=gd_bucket.id
        )
        current = DataAwsCallerIdentity(self, "current")
        bucket_pol = DataAwsIamPolicyDocument(self, "bucket_pol",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["s3:PutObject"],
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["guardduty.amazonaws.com"],
                    type="Service"
                )
                ],
                resources=["${" + gd_bucket.arn + "}/*"],
                sid="Allow PutObject"
            ), DataAwsIamPolicyDocumentStatement(
                actions=["s3:GetBucketLocation"],
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["guardduty.amazonaws.com"],
                    type="Service"
                )
                ],
                resources=[gd_bucket.arn],
                sid="Allow GetBucketLocation"
            )
            ]
        )
        data_aws_region_current = DataAwsRegion(self, "current_5")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_region_current.override_logical_id("current")
        gd_bucket_policy = S3BucketPolicy(self, "gd_bucket_policy",
            bucket=gd_bucket.id,
            policy=Token.as_string(bucket_pol.json)
        )
        kms_pol = DataAwsIamPolicyDocument(self, "kms_pol",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["kms:GenerateDataKey"],
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["guardduty.amazonaws.com"],
                    type="Service"
                )
                ],
                resources=["arn:aws:kms:${" + data_aws_region_current.name + "}:${" + current.account_id + "}:key/*"
                ],
                sid="Allow GuardDuty to encrypt findings"
            ), DataAwsIamPolicyDocumentStatement(
                actions=["kms:*"],
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["arn:aws:iam::${" + current.account_id + "}:root"],
                    type="AWS"
                )
                ],
                resources=["arn:aws:kms:${" + data_aws_region_current.name + "}:${" + current.account_id + "}:key/*"
                ],
                sid="Allow all users to modify/delete key (test only)"
            )
            ]
        )
        gd_key = KmsKey(self, "gd_key",
            deletion_window_in_days=7,
            description="Temporary key for AccTest of TF",
            policy=Token.as_string(kms_pol.json)
        )
        GuarddutyPublishingDestination(self, "test",
            depends_on=[gd_bucket_policy],
            destination_arn=gd_bucket.arn,
            detector_id=test_gd.id,
            kms_key_arn=gd_key.arn
        )
```

~> **Note:** Please do not use this simple example for Bucket-Policy and KMS Key Policy in a production environment. It is much too open for such a use-case. Refer to the AWS documentation here: https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_exportfindings.html

## Argument Reference

This resource supports the following arguments:

* `detector_id` - (Required) The detector ID of the GuardDuty.
* `destination_arn` - (Required) The bucket arn and prefix under which the findings get exported. Bucket-ARN is required, the prefix is optional and will be `AWSLogs/[Account-ID]/GuardDuty/[Region]/` if not provided
* `kms_key_arn` - (Required) The ARN of the KMS key used to encrypt GuardDuty findings. GuardDuty enforces this to be encrypted.
* `destination_type`- (Optional) Currently there is only "S3" available as destination type which is also the default value

~> **Note:** In case of missing permissions (S3 Bucket Policy _or_ KMS Key permissions) the resource will fail to create. If the permissions are changed after resource creation, this can be asked from the AWS API via the "DescribePublishingDestination" call (https://docs.aws.amazon.com/cli/latest/reference/guardduty/describe-publishing-destination.html).

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the GuardDuty PublishingDestination and the detector ID. Format: `<DetectorID>:<PublishingDestinationID>`

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import GuardDuty PublishingDestination using the master GuardDuty detector ID and PublishingDestinationID. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.guardduty_publishing_destination import GuarddutyPublishingDestination
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        GuarddutyPublishingDestination.generate_config_for_import(self, "test", "a4b86f26fa42e7e7cf0d1c333ea77777:a4b86f27a0e464e4a7e0516d242f1234")
```

Using `terraform import`, import GuardDuty PublishingDestination using the master GuardDuty detector ID and PublishingDestinationID. For example:

```console
% terraform import aws_guardduty_publishing_destination.test a4b86f26fa42e7e7cf0d1c333ea77777:a4b86f27a0e464e4a7e0516d242f1234
```

<!-- cache-key: cdktf-0.20.8 input-62a290b6c0d879190b7ab5d6098de0abf59abd632ca625aa1c6a6b8f48e6ac47 -->