---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_vpc_block_public_access_exclusion"
description: |-
  Terraform resource for managing an exception to the AWS VPC (Virtual Private Cloud) Block Public Access Exclusion.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_vpc_block_public_access_exclusion

Terraform resource for managing an AWS EC2 (Elastic Compute Cloud) VPC Block Public Access Exclusion.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws. import VpcBlockPublicAccessExclusion
from imports.aws.vpc import Vpc
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test = Vpc(self, "test",
            cidr_block="10.1.0.0/16"
        )
        aws_vpc_block_public_access_exclusion_test =
        VpcBlockPublicAccessExclusion(self, "test_1",
            internet_gateway_exclusion_mode="allow-bidirectional",
            vpc_id=test.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_block_public_access_exclusion_test.override_logical_id("test")
```

### Usage with subnet id

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws. import VpcBlockPublicAccessExclusion
from imports.aws.subnet import Subnet
from imports.aws.vpc import Vpc
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test = Vpc(self, "test",
            cidr_block="10.1.0.0/16"
        )
        aws_subnet_test = Subnet(self, "test_1",
            cidr_block="10.1.1.0/24",
            vpc_id=test.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_subnet_test.override_logical_id("test")
        aws_vpc_block_public_access_exclusion_test =
        VpcBlockPublicAccessExclusion(self, "test_2",
            internet_gateway_exclusion_mode="allow-egress",
            subnet_id=aws_subnet_test.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_block_public_access_exclusion_test.override_logical_id("test")
```

## Argument Reference

The following arguments are required:

* `internet_gateway_exclusion_mode` - (Required) Mode of exclusion from Block Public Access. The allowed values are `allow-egress` and `allow-bidirectional`.

The following arguments are optional:

* `vpc_id` - (Optional) Id of the VPC to which this exclusion applies. Either this or the subnet_id needs to be provided.
* `subnet_id` - (Optional) Id of the subnet to which this exclusion applies. Either this or the vpc_id needs to be provided.
* `tags` - (Optional) A map of tags to assign to the exclusion. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the VPC Block Public Access Exclusion.
* `resource_arn` - The Amazon Resource Name (ARN) the excluded resource.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `update` - (Default `30m`)
* `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import VPC Block Public Access Exclusion using the `id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws. import VpcBlockPublicAccessExclusion
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        VpcBlockPublicAccessExclusion.generate_config_for_import(self, "example", "vpcbpa-exclude-1234abcd")
```

Using `terraform import`, import EC2 (Elastic Compute Cloud) VPC Block Public Access Exclusion using the `id`. For example:

```console
% terraform import aws_vpc_block_public_access_exclusion.example vpcbpa-exclude-1234abcd
```

<!-- cache-key: cdktf-0.20.8 input-49012b1addb9848a5e6454ba1a5423da41c34acb24706de41877882a455dba33 -->