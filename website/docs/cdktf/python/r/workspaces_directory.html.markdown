---
subcategory: "WorkSpaces"
layout: "aws"
page_title: "AWS: aws_workspaces_directory"
description: |-
  Provides a WorkSpaces directory in AWS WorkSpaces Service.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_workspaces_directory

Provides a WorkSpaces directory in AWS WorkSpaces Service.

~> **NOTE:** AWS WorkSpaces service requires [`workspaces_DefaultRole`](https://docs.aws.amazon.com/workspaces/latest/adminguide/workspaces-access-control.html#create-default-role) IAM role to operate normally.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.directory_service_directory import DirectoryServiceDirectory
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy_attachment import IamRolePolicyAttachment
from imports.aws.subnet import Subnet
from imports.aws.vpc import Vpc
from imports.aws.workspaces_directory import WorkspacesDirectory
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = Vpc(self, "example",
            cidr_block="10.0.0.0/16"
        )
        workspaces = DataAwsIamPolicyDocument(self, "workspaces",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["workspaces.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        workspaces_default = IamRole(self, "workspaces_default",
            assume_role_policy=Token.as_string(workspaces.json),
            name="workspaces_DefaultRole"
        )
        workspaces_default_self_service_access = IamRolePolicyAttachment(self, "workspaces_default_self_service_access",
            policy_arn="arn:aws:iam::aws:policy/AmazonWorkSpacesSelfServiceAccess",
            role=workspaces_default.name
        )
        workspaces_default_service_access = IamRolePolicyAttachment(self, "workspaces_default_service_access",
            policy_arn="arn:aws:iam::aws:policy/AmazonWorkSpacesServiceAccess",
            role=workspaces_default.name
        )
        example_a = Subnet(self, "example_a",
            availability_zone="us-east-1a",
            cidr_block="10.0.0.0/24",
            vpc_id=example.id
        )
        example_b = Subnet(self, "example_b",
            availability_zone="us-east-1b",
            cidr_block="10.0.1.0/24",
            vpc_id=example.id
        )
        example_c = Subnet(self, "example_c",
            availability_zone="us-east-1c",
            cidr_block="10.0.2.0/24",
            vpc_id=example.id
        )
        example_d = Subnet(self, "example_d",
            availability_zone="us-east-1d",
            cidr_block="10.0.3.0/24",
            vpc_id=example.id
        )
        aws_directory_service_directory_example = DirectoryServiceDirectory(self, "example_9",
            name="corp.example.com",
            password="#S1ncerely",
            size="Small",
            vpc_settings=DirectoryServiceDirectoryVpcSettings(
                subnet_ids=[example_a.id, example_b.id],
                vpc_id=example.id
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_directory_service_directory_example.override_logical_id("example")
        aws_workspaces_directory_example = WorkspacesDirectory(self, "example_10",
            depends_on=[workspaces_default_service_access, workspaces_default_self_service_access
            ],
            directory_id=Token.as_string(aws_directory_service_directory_example.id),
            saml_properties=WorkspacesDirectorySamlProperties(
                status="ENABLED",
                user_access_url="https://sso.example.com/"
            ),
            self_service_permissions=WorkspacesDirectorySelfServicePermissions(
                change_compute_type=True,
                increase_volume_size=True,
                rebuild_workspace=True,
                restart_workspace=True,
                switch_running_mode=True
            ),
            subnet_ids=[example_c.id, example_d.id],
            tags={
                "Example": Token.as_string(True)
            },
            workspace_access_properties=WorkspacesDirectoryWorkspaceAccessProperties(
                device_type_android="ALLOW",
                device_type_chromeos="ALLOW",
                device_type_ios="ALLOW",
                device_type_linux="DENY",
                device_type_osx="ALLOW",
                device_type_web="DENY",
                device_type_windows="DENY",
                device_type_zeroclient="DENY"
            ),
            workspace_creation_properties=WorkspacesDirectoryWorkspaceCreationProperties(
                custom_security_group_id=Token.as_string(aws_security_group_example.id),
                default_ou="OU=AWS,DC=Workgroup,DC=Example,DC=com",
                enable_internet_access=True,
                enable_maintenance_mode=True,
                user_enabled_as_local_administrator=True
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_workspaces_directory_example.override_logical_id("example")
```

### IP Groups

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.workspaces_directory import WorkspacesDirectory
from imports.aws.workspaces_ip_group import WorkspacesIpGroup
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = WorkspacesIpGroup(self, "example",
            name="example"
        )
        aws_workspaces_directory_example = WorkspacesDirectory(self, "example_1",
            directory_id=Token.as_string(aws_directory_service_directory_example.id),
            ip_group_ids=[example.id]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_workspaces_directory_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `directory_id` - (Required) The directory identifier for registration in WorkSpaces service.
* `subnet_ids` - (Optional) The identifiers of the subnets where the directory resides.
* `ip_group_ids` – (Optional) The identifiers of the IP access control groups associated with the directory.
* `tags` – (Optional) A map of tags assigned to the WorkSpaces directory. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `saml_properties` – (Optional) Configuration of SAML authentication integration. Defined below.
* `self_service_permissions` – (Optional) Permissions to enable or disable self-service capabilities. Defined below.
* `workspace_access_properties` – (Optional) Specifies which devices and operating systems users can use to access their WorkSpaces. Defined below.
* `workspace_creation_properties` – (Optional) Default properties that are used for creating WorkSpaces. Defined below.

### saml_properties

* `relay_state_parameter_name` - (Optional) The relay state parameter name supported by the SAML 2.0 identity provider (IdP). Default `RelayState`.
* `status` - (Optional) Status of SAML 2.0 authentication. Default `DISABLED`.
* `user_access_url` - (Optional) The SAML 2.0 identity provider (IdP) user access URL.

### self_service_permissions

* `change_compute_type` – (Optional) Whether WorkSpaces directory users can change the compute type (bundle) for their workspace. Default `false`.
* `increase_volume_size` – (Optional) Whether WorkSpaces directory users can increase the volume size of the drives on their workspace. Default `false`.
* `rebuild_workspace` – (Optional) Whether WorkSpaces directory users can rebuild the operating system of a workspace to its original state. Default `false`.
* `restart_workspace` – (Optional) Whether WorkSpaces directory users can restart their workspace. Default `true`.
* `switch_running_mode` – (Optional) Whether WorkSpaces directory users can switch the running mode of their workspace. Default `false`.

### workspace_access_properties

* `device_type_android` – (Optional) Indicates whether users can use Android devices to access their WorkSpaces.
* `device_type_chromeos` – (Optional) Indicates whether users can use Chromebooks to access their WorkSpaces.
* `device_type_ios` – (Optional) Indicates whether users can use iOS devices to access their WorkSpaces.
* `device_type_linux` – (Optional) Indicates whether users can use Linux clients to access their WorkSpaces.
* `device_type_osx` – (Optional) Indicates whether users can use macOS clients to access their WorkSpaces.
* `device_type_web` – (Optional) Indicates whether users can access their WorkSpaces through a web browser.
* `device_type_windows` – (Optional) Indicates whether users can use Windows clients to access their WorkSpaces.
* `device_type_zeroclient` – (Optional) Indicates whether users can use zero client devices to access their WorkSpaces.

### workspace_creation_properties

-> **Note:** Once you specified `custom_security_group_id` or `default_ou`, there is no way to delete these attributes. If you cleanup them from the configuration, they still be present in state.

* `custom_security_group_id` – (Optional) The identifier of your custom security group. Should relate to the same VPC, where workspaces reside in.
* `default_ou` – (Optional) The default organizational unit (OU) for your WorkSpace directories. Should conform `"OU=<value>,DC=<value>,...,DC=<value>"` pattern.
* `enable_internet_access` – (Optional) Indicates whether internet access is enabled for your WorkSpaces.
* `enable_maintenance_mode` – (Optional) Indicates whether maintenance mode is enabled for your WorkSpaces. For more information, see [WorkSpace Maintenance](https://docs.aws.amazon.com/workspaces/latest/adminguide/workspace-maintenance.html)..
* `user_enabled_as_local_administrator` – (Optional) Indicates whether users are local administrators of their WorkSpaces.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The WorkSpaces directory identifier.
* `alias` - The directory alias.
* `customer_user_name` - The user name for the service account.
* `directory_name` - The name of the directory.
* `directory_type` - The directory type.
* `dns_ip_addresses` - The IP addresses of the DNS servers for the directory.
* `iam_role_id` - The identifier of the IAM role. This is the role that allows Amazon WorkSpaces to make calls to other services, such as Amazon EC2, on your behalf.
* `ip_group_ids` - The identifiers of the IP access control groups associated with the directory.
* `registration_code` - The registration code for the directory. This is the code that users enter in their Amazon WorkSpaces client application to connect to the directory.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).
* `workspace_security_group_id` - The identifier of the security group that is assigned to new WorkSpaces.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Workspaces directory using the directory ID. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.workspaces_directory import WorkspacesDirectory
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        WorkspacesDirectory.generate_config_for_import(self, "main", "d-4444444444")
```

Using `terraform import`, import Workspaces directory using the directory ID. For example:

```console
% terraform import aws_workspaces_directory.main d-4444444444
```

<!-- cache-key: cdktf-0.20.8 input-f7cff0cd2b83407a58d367c446b2c8ec52ee314cdd97d6921dfa0fd5f1fd2076 -->