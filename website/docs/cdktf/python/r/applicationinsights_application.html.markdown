---
subcategory: "CloudWatch Application Insights"
layout: "aws"
page_title: "AWS: aws_applicationinsights_application"
description: |-
  Provides a CloudWatch Application Insights Application resource
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_applicationinsights_application

Provides a ApplicationInsights Application resource.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.applicationinsights_application import ApplicationinsightsApplication
from imports.aws.resourcegroups_group import ResourcegroupsGroup
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = ResourcegroupsGroup(self, "example",
            name="example",
            resource_query=ResourcegroupsGroupResourceQuery(
                query=Token.as_string(
                    Fn.jsonencode({
                        "ResourceTypeFilters": ["AWS::EC2::Instance"],
                        "TagFilters": [{
                            "Key": "Stage",
                            "Values": ["Test"]
                        }
                        ]
                    }))
            )
        )
        aws_applicationinsights_application_example =
        ApplicationinsightsApplication(self, "example_1",
            resource_group_name=example.name
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_applicationinsights_application_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `resource_group_name` - (Required) Name of the resource group.

The following arguments are optional:

* `auto_config_enabled` - (Optional)  Indicates whether Application Insights automatically configures unmonitored resources in the resource group.
* `auto_create` - (Optional) Configures all of the resources in the resource group by applying the recommended configurations.
* `cwe_monitor_enabled` - (Optional)  Indicates whether Application Insights can listen to CloudWatch events for the application resources, such as instance terminated, failed deployment, and others.
* `grouping_type` - (Optional) Application Insights can create applications based on a resource group or on an account. To create an account-based application using all of the resources in the account, set this parameter to `ACCOUNT_BASED`.
* `ops_center_enabled` - (Optional) When set to `true`, creates opsItems for any problems detected on an application.
* `ops_item_sns_topic_arn` - (Optional) SNS topic provided to Application Insights that is associated to the created opsItem. Allows you to receive notifications for updates to the opsItem.
* `tags` - (Optional) Map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the Application.
* `id` - Name of the resource group.
* `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ApplicationInsights Applications using the `resource_group_name`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.applicationinsights_application import ApplicationinsightsApplication
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        ApplicationinsightsApplication.generate_config_for_import(self, "some", "some-application")
```

Using `terraform import`, import ApplicationInsights Applications using the `resource_group_name`. For example:

```console
% terraform import aws_applicationinsights_application.some some-application
```

<!-- cache-key: cdktf-0.20.8 input-30b40f9adb8f133c3e275766d86e95f547219ce5038fa7751ad75a6d3c0db957 -->