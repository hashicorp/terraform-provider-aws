---
subcategory: "Glue"
layout: "aws"
page_title: "AWS: aws_glue_partition_index"
description: |-
  Provides a Glue Partition Index.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_glue_partition_index

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.glue_catalog_database import GlueCatalogDatabase
from imports.aws.glue_catalog_table import GlueCatalogTable
from imports.aws.glue_partition_index import GluePartitionIndex
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = GlueCatalogDatabase(self, "example",
            name="example"
        )
        aws_glue_catalog_table_example = GlueCatalogTable(self, "example_1",
            database_name=example.name,
            name="example",
            owner="my_owner",
            parameters={
                "param1": "param1_val"
            },
            partition_keys=[GlueCatalogTablePartitionKeys(
                comment="my_column_1_comment",
                name="my_column_1",
                type="int"
            ), GlueCatalogTablePartitionKeys(
                comment="my_column_2_comment",
                name="my_column_2",
                type="string"
            )
            ],
            retention=1,
            storage_descriptor=GlueCatalogTableStorageDescriptor(
                bucket_columns=["bucket_column_1"],
                columns=[GlueCatalogTableStorageDescriptorColumns(
                    comment="my_column1_comment",
                    name="my_column_1",
                    type="int"
                ), GlueCatalogTableStorageDescriptorColumns(
                    comment="my_column2_comment",
                    name="my_column_2",
                    type="string"
                )
                ],
                compressed=False,
                input_format="SequenceFileInputFormat",
                location="my_location",
                number_of_buckets=1,
                output_format="SequenceFileInputFormat",
                parameters={
                    "param1": "param1_val"
                },
                ser_de_info=GlueCatalogTableStorageDescriptorSerDeInfo(
                    name="ser_de_name",
                    parameters={
                        "param1": "param_val_1"
                    },
                    serialization_library="org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe"
                ),
                skewed_info=GlueCatalogTableStorageDescriptorSkewedInfo(
                    skewed_column_names=["my_column_1"],
                    skewed_column_value_location_maps={
                        "my_column_1": "my_column_1_val_loc_map"
                    },
                    skewed_column_values=["skewed_val_1"]
                ),
                sort_columns=[GlueCatalogTableStorageDescriptorSortColumns(
                    column="my_column_1",
                    sort_order=1
                )
                ],
                stored_as_sub_directories=False
            ),
            table_type="VIRTUAL_VIEW",
            view_expanded_text="view_expanded_text_1",
            view_original_text="view_original_text_1"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_glue_catalog_table_example.override_logical_id("example")
        aws_glue_partition_index_example = GluePartitionIndex(self, "example_2",
            database_name=example.name,
            partition_index=GluePartitionIndexPartitionIndex(
                index_name="example",
                keys=["my_column_1", "my_column_2"]
            ),
            table_name=Token.as_string(aws_glue_catalog_table_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_glue_partition_index_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `table_name` - (Required) Name of the table. For Hive compatibility, this must be entirely lowercase.
* `database_name` - (Required) Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
* `partition_index` - (Required) Configuration block for a partition index. See [`partition_index`](#partition_index) below.
* `catalog_id` - (Optional) The catalog ID where the table resides.

### partition_index

* `index_name` - (Required) Name of the partition index.
* `keys` - (Required) Keys for the partition index.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Catalog ID, Database name, table name, and index name.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `10m`)
* `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Glue Partition Indexes using the catalog ID (usually AWS account ID), database name, table name, and index name. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.glue_partition_index import GluePartitionIndex
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        GluePartitionIndex.generate_config_for_import(self, "example", "123456789012:MyDatabase:MyTable:index-name")
```

Using `terraform import`, import Glue Partition Indexes using the catalog ID (usually AWS account ID), database name, table name, and index name. For example:

```console
% terraform import aws_glue_partition_index.example 123456789012:MyDatabase:MyTable:index-name
```

<!-- cache-key: cdktf-0.20.8 input-2c1eca414462f36b306c6c36d0f8b45e95a67975829b6e6678f2b74c1376628b -->