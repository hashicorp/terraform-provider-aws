---
subcategory: "Transit Gateway"
layout: "aws"
page_title: "AWS: aws_ec2_transit_gateway_peering_attachment"
description: |-
  Manages an EC2 Transit Gateway Peering Attachment
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ec2_transit_gateway_peering_attachment

Manages an EC2 Transit Gateway Peering Attachment.
For examples of custom route table association and propagation, see the [EC2 Transit Gateway Networking Examples Guide](https://docs.aws.amazon.com/vpc/latest/tgw/TGW_Scenarios.html).

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_region import DataAwsRegion
from imports.aws.ec2_transit_gateway import Ec2TransitGateway
from imports.aws.ec2_transit_gateway_peering_attachment import Ec2TransitGatewayPeeringAttachment
from imports.aws.provider import AwsProvider
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        local = AwsProvider(self, "aws",
            alias="local",
            region="us-east-1"
        )
        peer = AwsProvider(self, "aws_1",
            alias="peer",
            region="us-west-2"
        )
        aws_ec2_transit_gateway_local = Ec2TransitGateway(self, "local",
            provider=local,
            tags={
                "Name": "Local TGW"
            }
        )
        aws_ec2_transit_gateway_peer = Ec2TransitGateway(self, "peer",
            provider=peer,
            tags={
                "Name": "Peer TGW"
            }
        )
        data_aws_region_peer = DataAwsRegion(self, "peer_4",
            provider=peer
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_region_peer.override_logical_id("peer")
        Ec2TransitGatewayPeeringAttachment(self, "example",
            peer_account_id=Token.as_string(aws_ec2_transit_gateway_peer.owner_id),
            peer_region=Token.as_string(data_aws_region_peer.name),
            peer_transit_gateway_id=Token.as_string(aws_ec2_transit_gateway_peer.id),
            tags={
                "Name": "TGW Peering Requestor"
            },
            transit_gateway_id=Token.as_string(aws_ec2_transit_gateway_local.id)
        )
```

A full example of how to create a Transit Gateway in one AWS account, share it with a second AWS account, and attach a to a Transit Gateway in the second account via the `aws_ec2_transit_gateway_peering_attachment` resource can be found in [the `./examples/transit-gateway-cross-account-peering-attachment` directory within the Github Repository](https://github.com/hashicorp/terraform-provider-aws/tree/main/examples/transit-gateway-cross-account-peering-attachment).

## Argument Reference

This resource supports the following arguments:

* `peer_account_id` - (Optional) Account ID of EC2 Transit Gateway to peer with. Defaults to the account ID the [AWS provider][1] is currently connected to.
* `peer_region` - (Required) Region of EC2 Transit Gateway to peer with.
* `peer_transit_gateway_id` - (Required) Identifier of EC2 Transit Gateway to peer with.
* `options` - (Optional) Describes whether dynamic routing is enabled or disabled for the transit gateway peering request. See [options](#options) below for more details!
* `tags` - (Optional) Key-value tags for the EC2 Transit Gateway Peering Attachment. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `transit_gateway_id` - (Required) Identifier of EC2 Transit Gateway.

### options

The `options` block supports the following:

* `dynamic_routing` - (Optional) Indicates whether dynamic routing is enabled or disabled.. Supports `enable` and `disable`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - EC2 Transit Gateway Attachment identifier
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_ec2_transit_gateway_peering_attachment` using the EC2 Transit Gateway Attachment identifier. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.ec2_transit_gateway_peering_attachment import Ec2TransitGatewayPeeringAttachment
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        Ec2TransitGatewayPeeringAttachment.generate_config_for_import(self, "example", "tgw-attach-12345678")
```

Using `terraform import`, import `aws_ec2_transit_gateway_peering_attachment` using the EC2 Transit Gateway Attachment identifier. For example:

```console
% terraform import aws_ec2_transit_gateway_peering_attachment.example tgw-attach-12345678
```

[1]: /docs/providers/aws/index.html

<!-- cache-key: cdktf-0.20.1 input-41020aee510c0b05bb83970e5a2476a6ad33b6555e1212019aa8de77dffc534d -->