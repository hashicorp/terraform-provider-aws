---
subcategory: "Web Services Budgets"
layout: "aws"
page_title: "AWS: aws_budgets_budget"
description: |-
  Provides a budgets budget resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_budgets_budget

Provides a budgets budget resource. Budgets use the cost visualization provided by Cost Explorer to show you the status of your budgets, to provide forecasts of your estimated costs, and to track your AWS usage, including your free tier usage.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.budgets_budget import BudgetsBudget
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        BudgetsBudget(self, "ec2",
            budget_type="COST",
            cost_filter=[BudgetsBudgetCostFilter(
                name="Service",
                values=["Amazon Elastic Compute Cloud - Compute"]
            )
            ],
            limit_amount="1200",
            limit_unit="USD",
            name="budget-ec2-monthly",
            notification=[BudgetsBudgetNotification(
                comparison_operator="GREATER_THAN",
                notification_type="FORECASTED",
                subscriber_email_addresses=["test@example.com"],
                threshold=100,
                threshold_type="PERCENTAGE"
            )
            ],
            tags={
                "Tag1": "Value1",
                "Tag2": "Value2"
            },
            time_period_end="2087-06-15_00:00",
            time_period_start="2017-07-01_00:00",
            time_unit="MONTHLY"
        )
```

Create a budget for *$100*.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.budgets_budget import BudgetsBudget
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, timeUnit):
        super().__init__(scope, name)
        BudgetsBudget(self, "cost",
            budget_type="COST",
            limit_amount="100",
            limit_unit="USD",
            time_unit=time_unit
        )
```

Create a budget with planned budget limits.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.budgets_budget import BudgetsBudget
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, budgetType, timeUnit):
        super().__init__(scope, name)
        BudgetsBudget(self, "cost",
            planned_limit=[BudgetsBudgetPlannedLimit(
                amount="100",
                start_time="2017-07-01_00:00",
                unit="USD"
            ), BudgetsBudgetPlannedLimit(
                amount="200",
                start_time="2017-08-01_00:00",
                unit="USD"
            )
            ],
            budget_type=budget_type,
            time_unit=time_unit
        )
```

Create a budget for s3 with a limit of *3 GB* of storage.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.budgets_budget import BudgetsBudget
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, timeUnit):
        super().__init__(scope, name)
        BudgetsBudget(self, "s3",
            budget_type="USAGE",
            limit_amount="3",
            limit_unit="GB",
            time_unit=time_unit
        )
```

Create a Savings Plan Utilization Budget

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.budgets_budget import BudgetsBudget
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, timeUnit):
        super().__init__(scope, name)
        BudgetsBudget(self, "savings_plan_utilization",
            budget_type="SAVINGS_PLANS_UTILIZATION",
            cost_types=BudgetsBudgetCostTypes(
                include_credit=False,
                include_discount=False,
                include_other_subscription=False,
                include_recurring=False,
                include_refund=False,
                include_subscription=True,
                include_support=False,
                include_tax=False,
                include_upfront=False,
                use_blended=False
            ),
            limit_amount="100.0",
            limit_unit="PERCENTAGE",
            time_unit=time_unit
        )
```

Create a RI Utilization Budget

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.budgets_budget import BudgetsBudget
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, timeUnit):
        super().__init__(scope, name)
        BudgetsBudget(self, "ri_utilization",
            budget_type="RI_UTILIZATION",
            cost_filter=[BudgetsBudgetCostFilter(
                name="Service",
                values=["Amazon Relational Database Service"]
            )
            ],
            cost_types=BudgetsBudgetCostTypes(
                include_credit=False,
                include_discount=False,
                include_other_subscription=False,
                include_recurring=False,
                include_refund=False,
                include_subscription=True,
                include_support=False,
                include_tax=False,
                include_upfront=False,
                use_blended=False
            ),
            limit_amount="100.0",
            limit_unit="PERCENTAGE",
            time_unit=time_unit
        )
```

Create a Cost Filter using Resource Tags

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.budgets_budget import BudgetsBudget
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, budgetType, timeUnit):
        super().__init__(scope, name)
        BudgetsBudget(self, "cost",
            cost_filter=[BudgetsBudgetCostFilter(
                name="TagKeyValue",
                values=["TagKey$TagValue"]
            )
            ],
            budget_type=budget_type,
            time_unit=time_unit
        )
```

Create a cost_filter using resource tags, obtaining the tag value from a terraform variable

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.budgets_budget import BudgetsBudget
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, budgetType, timeUnit):
        super().__init__(scope, name)
        BudgetsBudget(self, "cost",
            cost_filter=[BudgetsBudgetCostFilter(
                name="TagKeyValue",
                values=["TagKey$${var.TagValue}"]
            )
            ],
            budget_type=budget_type,
            time_unit=time_unit
        )
```

## Argument Reference

For more detailed documentation about each argument, refer to the [AWS official
documentation](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-budget.html).

The following arguments are required:

* `budget_type` - (Required) Whether this budget tracks monetary cost or usage.
* `limit_amount` - (Required) The amount of cost or usage being measured for a budget.
* `limit_unit` - (Required) The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.
* `time_unit` - (Required) The length of time until a budget resets the actual and forecasted spend. Valid values: `MONTHLY`, `QUARTERLY`, `ANNUALLY`, and `DAILY`.

The following arguments are optional:

* `account_id` - (Optional) The ID of the target account for budget. Will use current user's account_id by default if omitted.
* `auto_adjust_data` - (Optional) Object containing [AutoAdjustData](#auto-adjust-data) which determines the budget amount for an auto-adjusting budget.
* `cost_filter` - (Optional) A list of [CostFilter](#cost-filter) name/values pair to apply to budget.
* `cost_types` - (Optional) Object containing [CostTypes](#cost-types) The types of cost included in a budget, such as tax and subscriptions.
* `name` - (Optional) The name of a budget. Unique within accounts.
* `name_prefix` - (Optional) The prefix of the name of a budget. Unique within accounts.
* `notification` - (Optional) Object containing [Budget Notifications](#budget-notification). Can be used multiple times to define more than one budget notification.
* `planned_limit` - (Optional) Object containing [Planned Budget Limits](#planned-budget-limits). Can be used multiple times to plan more than one budget limit. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
* `tags` - (Optional) Map of tags assigned to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `time_period_end` - (Optional) The end of the time period covered by the budget. There are no restrictions on the end date. Format: `2017-01-01_12:00`.
* `time_period_start` - (Optional) The start of the time period covered by the budget. If you don't specify a start date, AWS defaults to the start of your chosen time period. The start date must come before the end date. Format: `2017-01-01_12:00`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The ARN of the budget.
* `id` - id of resource.
* `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

### Auto Adjust Data

The parameters that determine the budget amount for an auto-adjusting budget.

* `auto_adjust_type` (Required) - The string that defines whether your budget auto-adjusts based on historical or forecasted data. Valid values: `FORECAST`,`HISTORICAL`
* `historical_options` (Optional) - Configuration block of [Historical Options](#historical-options). Required for `auto_adjust_type` of `HISTORICAL` Configuration block that defines the historical data that your auto-adjusting budget is based on.
* `last_auto_adjust_time` (Optional) - The last time that your budget was auto-adjusted.

### Historical Options

* `budget_adjustment_period` (Required) - The number of budget periods included in the moving-average calculation that determines your auto-adjusted budget amount.
* `lookback_available_periods` (Optional) - The integer that describes how many budget periods in your BudgetAdjustmentPeriod are included in the calculation of your current budget limit. If the first budget period in your BudgetAdjustmentPeriod has no cost data, then that budget period isn’t included in the average that determines your budget limit. You can’t set your own LookBackAvailablePeriods. The value is automatically calculated from the `budget_adjustment_period` and your historical cost data.

### Cost Types

Valid keys for `cost_types` parameter.

* `include_credit` - A boolean value whether to include credits in the cost budget. Defaults to `true`
* `include_discount` - Whether a budget includes discounts. Defaults to `true`
* `include_other_subscription` - A boolean value whether to include other subscription costs in the cost budget. Defaults to `true`
* `include_recurring` - A boolean value whether to include recurring costs in the cost budget. Defaults to `true`
* `include_refund` - A boolean value whether to include refunds in the cost budget. Defaults to `true`
* `include_subscription` - A boolean value whether to include subscriptions in the cost budget. Defaults to `true`
* `include_support` - A boolean value whether to include support costs in the cost budget. Defaults to `true`
* `include_tax` - A boolean value whether to include tax in the cost budget. Defaults to `true`
* `include_upfront` - A boolean value whether to include upfront costs in the cost budget. Defaults to `true`
* `use_amortized` - Whether a budget uses the amortized rate. Defaults to `false`
* `use_blended` - A boolean value whether to use blended costs in the cost budget. Defaults to `false`

Refer to [AWS CostTypes documentation](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_CostTypes.html) for further detail.

### Cost Filter

Based on your choice of budget type, you can choose one or more of the available budget filters.

* `PurchaseType`
* `UsageTypeGroup`
* `Service`
* `Operation`
* `UsageType`
* `BillingEntity`
* `CostCategory`
* `LinkedAccount`
* `TagKeyValue`
* `LegalEntityName`
* `InvoicingEntity`
* `AZ`
* `Region`
* `InstanceType`

Refer to [AWS CostFilter documentation](https://docs.aws.amazon.com/cost-management/latest/userguide/budgets-create-filters.html) for further detail.

### Budget Notification

Valid keys for `notification` parameter.

* `comparison_operator` - (Required) Comparison operator to use to evaluate the condition. Can be `LESS_THAN`, `EQUAL_TO` or `GREATER_THAN`.
* `threshold` - (Required) Threshold when the notification should be sent.
* `threshold_type` - (Required) What kind of threshold is defined. Can be `PERCENTAGE` OR `ABSOLUTE_VALUE`.
* `notification_type` - (Required) What kind of budget value to notify on. Can be `ACTUAL` or `FORECASTED`
* `subscriber_email_addresses` - (Optional) E-Mail addresses to notify. Either this or `subscriber_sns_topic_arns` is required.
* `subscriber_sns_topic_arns` - (Optional) SNS topics to notify. Either this or `subscriber_email_addresses` is required.

### Planned Budget Limits

Valid keys for `planned_limit` parameter.

* `start_time` - (Required) The start time of the budget limit. Format: `2017-01-01_12:00`. See [PlannedBudgetLimits](https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_Budget.html#awscostmanagement-Type-budgets_Budget-PlannedBudgetLimits) documentation.
* `amount` - (Required) The amount of cost or usage being measured for a budget.
* `unit` - (Required) The unit of measurement used for the budget forecast, actual spend, or budget threshold, such as dollars or GB. See [Spend](http://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/data-type-spend.html) documentation.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import budgets using `AccountID:BudgetName`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.budgets_budget import BudgetsBudget
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        BudgetsBudget.generate_config_for_import(self, "myBudget", "123456789012:myBudget")
```

Using `terraform import`, import budgets using `AccountID:BudgetName`. For example:

```console
% terraform import aws_budgets_budget.myBudget 123456789012:myBudget
```

<!-- cache-key: cdktf-0.20.1 input-4659c02ccf6bf7ddf8ab54ca8547bd42ceb36308ce7771f1c85d769ac386dbbc -->