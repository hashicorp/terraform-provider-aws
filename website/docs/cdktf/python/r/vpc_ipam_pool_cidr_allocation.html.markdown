---
subcategory: "VPC IPAM (IP Address Manager)"
layout: "aws"
page_title: "AWS: aws_vpc_ipam_pool_cidr_allocation"
description: |-
  Allocates (reserves) a CIDR from an IPAM address pool, preventing usage by IPAM.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_vpc_ipam_pool_cidr_allocation

Allocates (reserves) a CIDR from an IPAM address pool, preventing usage by IPAM. Only works for private IPv4.

## Example Usage

Basic usage:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_region import DataAwsRegion
from imports.aws.vpc_ipam import VpcIpam
from imports.aws.vpc_ipam_pool import VpcIpamPool
from imports.aws.vpc_ipam_pool_cidr import VpcIpamPoolCidr
from imports.aws.vpc_ipam_pool_cidr_allocation import VpcIpamPoolCidrAllocation
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        current = DataAwsRegion(self, "current")
        example = VpcIpam(self, "example",
            operating_regions=[VpcIpamOperatingRegions(
                region_name=Token.as_string(current.name)
            )
            ]
        )
        aws_vpc_ipam_pool_example = VpcIpamPool(self, "example_2",
            address_family="ipv4",
            ipam_scope_id=example.private_default_scope_id,
            locale=Token.as_string(current.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_ipam_pool_example.override_logical_id("example")
        aws_vpc_ipam_pool_cidr_example = VpcIpamPoolCidr(self, "example_3",
            cidr="172.20.0.0/16",
            ipam_pool_id=Token.as_string(aws_vpc_ipam_pool_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_ipam_pool_cidr_example.override_logical_id("example")
        aws_vpc_ipam_pool_cidr_allocation_example = VpcIpamPoolCidrAllocation(self, "example_4",
            cidr="172.20.0.0/24",
            depends_on=[aws_vpc_ipam_pool_cidr_example],
            ipam_pool_id=Token.as_string(aws_vpc_ipam_pool_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_ipam_pool_cidr_allocation_example.override_logical_id("example")
```

With the `disallowed_cidrs` attribute:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_region import DataAwsRegion
from imports.aws.vpc_ipam import VpcIpam
from imports.aws.vpc_ipam_pool import VpcIpamPool
from imports.aws.vpc_ipam_pool_cidr import VpcIpamPoolCidr
from imports.aws.vpc_ipam_pool_cidr_allocation import VpcIpamPoolCidrAllocation
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        current = DataAwsRegion(self, "current")
        example = VpcIpam(self, "example",
            operating_regions=[VpcIpamOperatingRegions(
                region_name=Token.as_string(current.name)
            )
            ]
        )
        aws_vpc_ipam_pool_example = VpcIpamPool(self, "example_2",
            address_family="ipv4",
            ipam_scope_id=example.private_default_scope_id,
            locale=Token.as_string(current.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_ipam_pool_example.override_logical_id("example")
        aws_vpc_ipam_pool_cidr_example = VpcIpamPoolCidr(self, "example_3",
            cidr="172.20.0.0/16",
            ipam_pool_id=Token.as_string(aws_vpc_ipam_pool_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_ipam_pool_cidr_example.override_logical_id("example")
        aws_vpc_ipam_pool_cidr_allocation_example = VpcIpamPoolCidrAllocation(self, "example_4",
            depends_on=[aws_vpc_ipam_pool_cidr_example],
            disallowed_cidrs=["172.20.0.0/28"],
            ipam_pool_id=Token.as_string(aws_vpc_ipam_pool_example.id),
            netmask_length=28
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_ipam_pool_cidr_allocation_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `cidr` - (Optional, Forces new resource) The CIDR you want to assign to the pool.
* `description` - (Optional, Forces new resource) The description for the allocation.
* `disallowed_cidrs` - (Optional, Forces new resource) Exclude a particular CIDR range from being returned by the pool.
* `ipam_pool_id` - (Required, Forces new resource) The ID of the pool to which you want to assign a CIDR.
* `netmask_length` - (Optional, Forces new resource) The netmask length of the CIDR you would like to allocate to the IPAM pool. Valid Values: `0-128`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the allocation.
* `resource_id` - The ID of the resource.
* `resource_owner` - The owner of the resource.
* `resource_type` - The type of the resource.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import IPAM allocations using the allocation `id` and `pool id`, separated by `_`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.vpc_ipam_pool_cidr_allocation import VpcIpamPoolCidrAllocation
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        VpcIpamPoolCidrAllocation.generate_config_for_import(self, "example", "ipam-pool-alloc-0dc6d196509c049ba8b549ff99f639736_ipam-pool-07cfb559e0921fcbe")
```

Using `terraform import`, import IPAM allocations using the allocation `id` and `pool id`, separated by `_`. For example:

```console
% terraform import aws_vpc_ipam_pool_cidr_allocation.example ipam-pool-alloc-0dc6d196509c049ba8b549ff99f639736_ipam-pool-07cfb559e0921fcbe
```

<!-- cache-key: cdktf-0.20.1 input-fda9663b9e39d957ce0f2859addfeffc21d1ce22091ce0b4c748dbc034daa31e -->