---
subcategory: "Directory Service"
layout: "aws"
page_title: "AWS: aws_directory_service_region"
description: |-
    Manages a replicated Region and directory for Multi-Region replication.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_directory_service_region

Manages a replicated Region and directory for Multi-Region replication.
Multi-Region replication is only supported for the Enterprise Edition of AWS Managed Microsoft AD.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformCount, Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_availability_zones import DataAwsAvailabilityZones
from imports.aws.data_aws_region import DataAwsRegion
from imports.aws.directory_service_directory import DirectoryServiceDirectory
from imports.aws.directory_service_region import DirectoryServiceRegion
from imports.aws.provider import AwsProvider
from imports.aws.subnet import Subnet
from imports.aws.vpc import Vpc
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        AwsProvider(self, "aws",
            region="us-west-2"
        )
        secondary = AwsProvider(self, "aws_1",
            alias="secondary",
            region="us-east-2"
        )
        example = Vpc(self, "example",
            cidr_block="10.0.0.0/16",
            tags={
                "Name": "Primary"
            }
        )
        example_secondary = Vpc(self, "example-secondary",
            cidr_block="10.1.0.0/16",
            provider=secondary,
            tags={
                "Name": "Secondary"
            }
        )
        available = DataAwsAvailabilityZones(self, "available",
            filter=[DataAwsAvailabilityZonesFilter(
                name="opt-in-status",
                values=["opt-in-not-required"]
            )
            ],
            state="available"
        )
        available_secondary = DataAwsAvailabilityZones(self, "available-secondary",
            filter=[DataAwsAvailabilityZonesFilter(
                name="opt-in-status",
                values=["opt-in-not-required"]
            )
            ],
            provider=secondary,
            state="available"
        )
        data_aws_region_example = DataAwsRegion(self, "example_6",
            provider=secondary
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_region_example.override_logical_id("example")
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        example_count = TerraformCount.of(Token.as_number("2"))
        aws_subnet_example = Subnet(self, "example_7",
            availability_zone=Token.as_string(
                Fn.lookup_nested(available.names, [example_count.index])),
            cidr_block=Token.as_string(
                Fn.cidrsubnet(example.cidr_block, 8, Token.as_number(example_count.index))),
            tags={
                "Name": "Primary"
            },
            vpc_id=example.id,
            count=example_count
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_subnet_example.override_logical_id("example")
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        example_secondary_count = TerraformCount.of(Token.as_number("2"))
        aws_subnet_example_secondary = Subnet(self, "example-secondary_8",
            availability_zone=Token.as_string(
                Fn.lookup_nested(available_secondary.names, [example_secondary_count.index])),
            cidr_block=Token.as_string(
                Fn.cidrsubnet(example_secondary.cidr_block, 8,
                    Token.as_number(example_secondary_count.index))),
            provider=secondary,
            tags={
                "Name": "Secondary"
            },
            vpc_id=example_secondary.id,
            count=example_secondary_count
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_subnet_example_secondary.override_logical_id("example-secondary")
        aws_directory_service_directory_example = DirectoryServiceDirectory(self, "example_9",
            name="example.com",
            password="SuperSecretPassw0rd",
            type="MicrosoftAD",
            vpc_settings=DirectoryServiceDirectoryVpcSettings(
                subnet_ids=Token.as_list(
                    Fn.lookup_nested(aws_subnet_example, ["*", "id"])),
                vpc_id=example.id
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_directory_service_directory_example.override_logical_id("example")
        aws_directory_service_region_example = DirectoryServiceRegion(self, "example_10",
            directory_id=Token.as_string(aws_directory_service_directory_example.id),
            region_name=Token.as_string(data_aws_region_example.name),
            tags={
                "Name": "Secondary"
            },
            vpc_settings=DirectoryServiceRegionVpcSettings(
                subnet_ids=Token.as_list(
                    Fn.lookup_nested(aws_subnet_example_secondary, ["*", "id"])),
                vpc_id=example_secondary.id
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_directory_service_region_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `desired_number_of_domain_controllers` - (Optional) The number of domain controllers desired in the replicated directory. Minimum value of `2`.
* `directory_id` - (Required) The identifier of the directory to which you want to add Region replication.
* `region_name` - (Required) The name of the Region where you want to add domain controllers for replication.
* `tags` - (Optional) Map of tags to assign to this resource. If configured with a provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `vpc_settings` - (Required) VPC information in the replicated Region. Detailed below.

### `vpc_settings`

* `subnet_ids` - (Required) The identifiers of the subnets for the directory servers.
* `vpc_id` - (Optional) The identifier of the VPC in which to create the directory.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).

## Timeouts

`aws_directory_service_region` provides the following [Timeouts](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts) configuration options:

- `create` - (Default `180 minutes`) Used for Region addition
- `update` - (Default `90 minutes`) Used for replicated directory update
- `delete` - (Default `90 minutes`) Used for Region removal

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Replicated Regions using directory ID,Region name. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.directory_service_region import DirectoryServiceRegion
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DirectoryServiceRegion.generate_config_for_import(self, "example", "d-9267651497,us-east-2")
```

Using `terraform import`, import Replicated Regions using directory ID,Region name. For example:

```console
% terraform import aws_directory_service_region.example d-9267651497,us-east-2
```

<!-- cache-key: cdktf-0.20.8 input-20d7af9911cb4ea2ab9c63d5899325921c11d1438c0a0bd4b54c4be7952b8fff -->