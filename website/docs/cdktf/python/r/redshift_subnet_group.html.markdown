---
subcategory: "Redshift"
layout: "aws"
page_title: "AWS: aws_redshift_subnet_group"
description: |-
  Provides a Redshift Subnet Group resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_redshift_subnet_group

Creates a new Amazon Redshift subnet group. You must provide a list of one or more subnets in your existing Amazon Virtual Private Cloud (Amazon VPC) when creating Amazon Redshift subnet group.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.redshift_subnet_group import RedshiftSubnetGroup
from imports.aws.subnet import Subnet
from imports.aws.vpc import Vpc
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        foo = Vpc(self, "foo",
            cidr_block="10.1.0.0/16"
        )
        bar = Subnet(self, "bar",
            availability_zone="us-west-2b",
            cidr_block="10.1.2.0/24",
            tags={
                "Name": "tf-dbsubnet-test-2"
            },
            vpc_id=foo.id
        )
        aws_subnet_foo = Subnet(self, "foo_2",
            availability_zone="us-west-2a",
            cidr_block="10.1.1.0/24",
            tags={
                "Name": "tf-dbsubnet-test-1"
            },
            vpc_id=foo.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_subnet_foo.override_logical_id("foo")
        aws_redshift_subnet_group_foo = RedshiftSubnetGroup(self, "foo_3",
            name="foo",
            subnet_ids=[Token.as_string(aws_subnet_foo.id), bar.id],
            tags={
                "environment": "Production"
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_redshift_subnet_group_foo.override_logical_id("foo")
```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The name of the Redshift Subnet group.
* `description` - (Optional) The description of the Redshift Subnet group. Defaults to "Managed by Terraform".
* `subnet_ids` - (Required) An array of VPC subnet IDs.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of the Redshift Subnet group name
* `id` - The Redshift Subnet group ID.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Redshift subnet groups using the `name`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.redshift_subnet_group import RedshiftSubnetGroup
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        RedshiftSubnetGroup.generate_config_for_import(self, "testgroup1", "test-cluster-subnet-group")
```

Using `terraform import`, import Redshift subnet groups using the `name`. For example:

```console
% terraform import aws_redshift_subnet_group.testgroup1 test-cluster-subnet-group
```

<!-- cache-key: cdktf-0.20.8 input-3d603e489c1bb01bdc966a54771f0f1ba11b9496fe058472a61fd0520c9b7c8c -->