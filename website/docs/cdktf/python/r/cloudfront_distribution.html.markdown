---
subcategory: "CloudFront"
layout: "aws"
page_title: "AWS: aws_cloudfront_distribution"
description: |-
  Provides a CloudFront web distribution resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cloudfront_distribution

Creates an Amazon CloudFront web distribution.

For information about CloudFront distributions, see the [Amazon CloudFront Developer Guide][1]. For specific information about creating CloudFront web distributions, see the [POST Distribution][2] page in the Amazon CloudFront API Reference.

~> **NOTE:** CloudFront distributions take about 15 minutes to reach a deployed state after creation or modification. During this time, deletes to resources will be blocked. If you need to delete a distribution that is enabled and you do not want to wait, you need to use the `retain_on_delete` flag.

## Example Usage

### S3 Origin

The example below creates a CloudFront distribution with an S3 origin.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudfront_distribution import CloudfrontDistribution
from imports.aws.s3_bucket import S3Bucket
from imports.aws.s3_bucket_acl import S3BucketAcl
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        s3_origin_id = "myS3Origin"
        b = S3Bucket(self, "b",
            bucket="mybucket",
            tags={
                "Name": "My bucket"
            }
        )
        S3BucketAcl(self, "b_acl",
            acl="private",
            bucket=b.id
        )
        CloudfrontDistribution(self, "s3_distribution",
            aliases=["mysite.example.com", "yoursite.example.com"],
            comment="Some comment",
            default_cache_behavior=CloudfrontDistributionDefaultCacheBehavior(
                allowed_methods=["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"
                ],
                cached_methods=["GET", "HEAD"],
                default_ttl=3600,
                forwarded_values=CloudfrontDistributionDefaultCacheBehaviorForwardedValues(
                    cookies=CloudfrontDistributionDefaultCacheBehaviorForwardedValuesCookies(
                        forward="none"
                    ),
                    query_string=False
                ),
                max_ttl=86400,
                min_ttl=0,
                target_origin_id=s3_origin_id,
                viewer_protocol_policy="allow-all"
            ),
            default_root_object="index.html",
            enabled=True,
            is_ipv6_enabled=True,
            logging_config=CloudfrontDistributionLoggingConfig(
                bucket="mylogs.s3.amazonaws.com",
                include_cookies=False,
                prefix="myprefix"
            ),
            ordered_cache_behavior=[CloudfrontDistributionOrderedCacheBehavior(
                allowed_methods=["GET", "HEAD", "OPTIONS"],
                cached_methods=["GET", "HEAD", "OPTIONS"],
                compress=True,
                default_ttl=86400,
                forwarded_values=CloudfrontDistributionOrderedCacheBehaviorForwardedValues(
                    cookies=CloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookies(
                        forward="none"
                    ),
                    headers=["Origin"],
                    query_string=False
                ),
                max_ttl=31536000,
                min_ttl=0,
                path_pattern="/content/immutable/*",
                target_origin_id=s3_origin_id,
                viewer_protocol_policy="redirect-to-https"
            ), CloudfrontDistributionOrderedCacheBehavior(
                allowed_methods=["GET", "HEAD", "OPTIONS"],
                cached_methods=["GET", "HEAD"],
                compress=True,
                default_ttl=3600,
                forwarded_values=CloudfrontDistributionOrderedCacheBehaviorForwardedValues(
                    cookies=CloudfrontDistributionOrderedCacheBehaviorForwardedValuesCookies(
                        forward="none"
                    ),
                    query_string=False
                ),
                max_ttl=86400,
                min_ttl=0,
                path_pattern="/content/*",
                target_origin_id=s3_origin_id,
                viewer_protocol_policy="redirect-to-https"
            )
            ],
            origin=[CloudfrontDistributionOrigin(
                domain_name=b.bucket_regional_domain_name,
                origin_access_control_id=default_var.id,
                origin_id=s3_origin_id
            )
            ],
            price_class="PriceClass_200",
            restrictions=CloudfrontDistributionRestrictions(
                geo_restriction=CloudfrontDistributionRestrictionsGeoRestriction(
                    locations=["US", "CA", "GB", "DE"],
                    restriction_type="whitelist"
                )
            ),
            tags={
                "Environment": "production"
            },
            viewer_certificate=CloudfrontDistributionViewerCertificate(
                cloudfront_default_certificate=True
            )
        )
```

### With Failover Routing

The example below creates a CloudFront distribution with an origin group for failover routing.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudfront_distribution import CloudfrontDistribution
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, allowedMethods, cachedMethods, viewerProtocolPolicy, enabled, restrictions, viewerCertificate):
        super().__init__(scope, name)
        CloudfrontDistribution(self, "s3_distribution",
            default_cache_behavior=CloudfrontDistributionDefaultCacheBehavior(
                target_origin_id="groupS3",
                allowed_methods=allowed_methods,
                cached_methods=cached_methods,
                viewer_protocol_policy=viewer_protocol_policy
            ),
            origin=[CloudfrontDistributionOrigin(
                domain_name=primary.bucket_regional_domain_name,
                origin_id="primaryS3",
                s3_origin_config=CloudfrontDistributionOriginS3OriginConfig(
                    origin_access_identity=default_var.cloudfront_access_identity_path
                )
            ), CloudfrontDistributionOrigin(
                domain_name=failover.bucket_regional_domain_name,
                origin_id="failoverS3",
                s3_origin_config=CloudfrontDistributionOriginS3OriginConfig(
                    origin_access_identity=default_var.cloudfront_access_identity_path
                )
            )
            ],
            origin_group=[CloudfrontDistributionOriginGroup(
                failover_criteria=CloudfrontDistributionOriginGroupFailoverCriteria(
                    status_codes=[403, 404, 500, 502]
                ),
                member=[CloudfrontDistributionOriginGroupMember(
                    origin_id="primaryS3"
                ), CloudfrontDistributionOriginGroupMember(
                    origin_id="failoverS3"
                )
                ],
                origin_id="groupS3"
            )
            ],
            enabled=enabled,
            restrictions=restrictions,
            viewer_certificate=viewer_certificate
        )
```

### With Managed Caching Policy

The example below creates a CloudFront distribution with an [AWS managed caching policy](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html).

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudfront_distribution import CloudfrontDistribution
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, cachedMethods, viewerProtocolPolicy):
        super().__init__(scope, name)
        s3_origin_id = "myS3Origin"
        CloudfrontDistribution(self, "s3_distribution",
            comment="Some comment",
            default_cache_behavior=CloudfrontDistributionDefaultCacheBehavior(
                allowed_methods=["GET", "HEAD", "OPTIONS"],
                cache_policy_id="4135ea2d-6df8-44a3-9df3-4b5a84be39ad",
                target_origin_id=s3_origin_id,
                cached_methods=cached_methods,
                viewer_protocol_policy=viewer_protocol_policy
            ),
            default_root_object="index.html",
            enabled=True,
            is_ipv6_enabled=True,
            origin=[CloudfrontDistributionOrigin(
                domain_name=primary.bucket_regional_domain_name,
                origin_id="myS3Origin",
                s3_origin_config=CloudfrontDistributionOriginS3OriginConfig(
                    origin_access_identity=default_var.cloudfront_access_identity_path
                )
            )
            ],
            restrictions=CloudfrontDistributionRestrictions(
                geo_restriction=CloudfrontDistributionRestrictionsGeoRestriction(
                    locations=["US", "CA", "GB", "DE"],
                    restriction_type="whitelist"
                )
            ),
            viewer_certificate=CloudfrontDistributionViewerCertificate(
                cloudfront_default_certificate=True
            )
        )
```

## Argument Reference

The CloudFront distribution argument layout is a complex structure composed of several sub-resources - these resources are laid out below.

### Top-Level Arguments

* `aliases` (Optional) - Extra CNAMEs (alternate domain names), if any, for this distribution.
* `comment` (Optional) - Any comments you want to include about the distribution.
* `continuous_deployment_policy_id` (Optional) - Identifier of a continuous deployment policy. This argument should only be set on a production distribution. See the [`aws_cloudfront_continuous_deployment_policy` resource](./cloudfront_continuous_deployment_policy.html.markdown) for additional details.
* `custom_error_response` (Optional) - One or more [custom error response](#custom-error-response-arguments) elements (multiples allowed).
* `default_cache_behavior` (Required) - [Default cache behavior](#default-cache-behavior-arguments) for this distribution (maximum one). Requires either `cache_policy_id` (preferred) or `forwarded_values` (deprecated) be set.
* `default_root_object` (Optional) - Object that you want CloudFront to return (for example, index.html) when an end user requests the root URL.
* `enabled` (Required) - Whether the distribution is enabled to accept end user requests for content.
* `is_ipv6_enabled` (Optional) - Whether the IPv6 is enabled for the distribution.
* `http_version` (Optional) - Maximum HTTP version to support on the distribution. Allowed values are `http1.1`, `http2`, `http2and3` and `http3`. The default is `http2`.
* `logging_config` (Optional) - The [logging configuration](#logging-config-arguments) that controls how logs are written to your distribution (maximum one).
* `ordered_cache_behavior` (Optional) - Ordered list of [cache behaviors](#cache-behavior-arguments) resource for this distribution. List from top to bottom in order of precedence. The topmost cache behavior will have precedence 0.
* `origin` (Required) - One or more [origins](#origin-arguments) for this distribution (multiples allowed).
* `origin_group` (Optional) - One or more [origin_group](#origin-group-arguments) for this distribution (multiples allowed).
* `price_class` (Optional) - Price class for this distribution. One of `PriceClass_All`, `PriceClass_200`, `PriceClass_100`.
* `restrictions` (Required) - The [restriction configuration](#restrictions-arguments) for this distribution (maximum one).
* `staging` (Optional) - A Boolean that indicates whether this is a staging distribution. Defaults to `false`.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `viewer_certificate` (Required) - The [SSL configuration](#viewer-certificate-arguments) for this distribution (maximum one).
* `web_acl_id` (Optional) - Unique identifier that specifies the AWS WAF web ACL, if any, to associate with this distribution. To specify a web ACL created using the latest version of AWS WAF (WAFv2), use the ACL ARN, for example `aws_wafv2_web_acl.example.arn`. To specify a web ACL created using AWS WAF Classic, use the ACL ID, for example `aws_waf_web_acl.example.id`. The WAF Web ACL must exist in the WAF Global (CloudFront) region and the credentials configuring this argument must have `waf:GetWebACL` permissions assigned.
* `retain_on_delete` (Optional) - Disables the distribution instead of deleting it when destroying the resource through Terraform. If this is set, the distribution needs to be deleted manually afterwards. Default: `false`.
* `wait_for_deployment` (Optional) - If enabled, the resource will wait for the distribution status to change from `InProgress` to `Deployed`. Setting this to`false` will skip the process. Default: `true`.

#### Cache Behavior Arguments

~> **NOTE:** To achieve the setting of 'Use origin cache headers' without a linked cache policy, use the following TTL values: `min_ttl` = 0, `max_ttl` = 31536000, `default_ttl` = 86400. See [this issue](https://github.com/hashicorp/terraform-provider-aws/issues/19382) for additional context.

* `allowed_methods` (Required) - Controls which HTTP methods CloudFront processes and forwards to your Amazon S3 bucket or your custom origin.
* `cached_methods` (Required) - Controls whether CloudFront caches the response to requests using the specified HTTP methods.
* `cache_policy_id` (Optional) - Unique identifier of the cache policy that is attached to the cache behavior. If configuring the `default_cache_behavior` either `cache_policy_id` or `forwarded_values` must be set.
* `compress` (Optional) - Whether you want CloudFront to automatically compress content for web requests that include `Accept-Encoding: gzip` in the request header (default: `false`).
* `default_ttl` (Optional) - Default amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request in the absence of an `Cache-Control max-age` or `Expires` header.
* `field_level_encryption_id` (Optional) - Field level encryption configuration ID.
* `forwarded_values` (Optional, **Deprecated** use `cache_policy_id` or `origin_request_policy_id ` instead) - The [forwarded values configuration](#forwarded-values-arguments) that specifies how CloudFront handles query strings, cookies and headers (maximum one).
* `lambda_function_association` (Optional) - A [config block](#lambda-function-association) that triggers a lambda function with specific actions (maximum 4).
* `function_association` (Optional) - A [config block](#function-association) that triggers a cloudfront function with specific actions (maximum 2).
* `max_ttl` (Optional) - Maximum amount of time (in seconds) that an object is in a CloudFront cache before CloudFront forwards another request to your origin to determine whether the object has been updated. Only effective in the presence of `Cache-Control max-age`, `Cache-Control s-maxage`, and `Expires` headers.
* `min_ttl` (Optional) - Minimum amount of time that you want objects to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated. Defaults to 0 seconds.
* `origin_request_policy_id` (Optional) - Unique identifier of the origin request policy that is attached to the behavior.
* `path_pattern` (Required) - Pattern (for example, `images/*.jpg`) that specifies which requests you want this cache behavior to apply to.
* `realtime_log_config_arn` (Optional) - ARN of the [real-time log configuration](cloudfront_realtime_log_config.html) that is attached to this cache behavior.
* `response_headers_policy_id` (Optional) - Identifier for a response headers policy.
* `smooth_streaming` (Optional) - Indicates whether you want to distribute media files in Microsoft Smooth Streaming format using the origin that is associated with this cache behavior.
* `target_origin_id` (Required) - Value of ID for the origin that you want CloudFront to route requests to when a request matches the path pattern either for a cache behavior or for the default cache behavior.
* `trusted_key_groups` (Optional) - List of key group IDs that CloudFront can use to validate signed URLs or signed cookies. See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
* `trusted_signers` (Optional) - List of AWS account IDs (or `self`) that you want to allow to create signed URLs for private content. See the [CloudFront User Guide](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html) for more information about this feature.
* `viewer_protocol_policy` (Required) - Use this element to specify the protocol that users can use to access the files in the origin specified by TargetOriginId when a request matches the path pattern in PathPattern. One of `allow-all`, `https-only`, or `redirect-to-https`.

##### Forwarded Values Arguments

* `cookies` (Required) - The [forwarded values cookies](#cookies-arguments) that specifies how CloudFront handles cookies (maximum one).
* `headers` (Optional) - Headers, if any, that you want CloudFront to vary upon for this cache behavior. Specify `*` to include all headers.
* `query_string` (Required) - Indicates whether you want CloudFront to forward query strings to the origin that is associated with this cache behavior.
* `query_string_cache_keys` (Optional) - When specified, along with a value of `true` for `query_string`, all query strings are forwarded, however only the query string keys listed in this argument are cached. When omitted with a value of `true` for `query_string`, all query string keys are cached.

##### Lambda Function Association

Lambda@Edge allows you to associate an AWS Lambda Function with a predefined
event. You can associate a single function per event type. See [What is
Lambda@Edge](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/what-is-lambda-at-edge.html)
for more information.

Example configuration:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudfront_distribution import CloudfrontDistribution
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, allowedMethods, cachedMethods, pathPattern, targetOriginId, viewerProtocolPolicy, defaultCacheBehavior, enabled, origin, restrictions, viewerCertificate):
        super().__init__(scope, name)
        CloudfrontDistribution(self, "example",
            ordered_cache_behavior=[CloudfrontDistributionOrderedCacheBehavior(
                lambda_function_association=[CloudfrontDistributionOrderedCacheBehaviorLambdaFunctionAssociation(
                    event_type="viewer-request",
                    include_body=False,
                    lambda_arn=Token.as_string(aws_lambda_function_example.qualified_arn)
                )
                ],
                allowed_methods=allowed_methods,
                cached_methods=cached_methods,
                path_pattern=path_pattern,
                target_origin_id=target_origin_id,
                viewer_protocol_policy=viewer_protocol_policy
            )
            ],
            default_cache_behavior=default_cache_behavior,
            enabled=enabled,
            origin=origin,
            restrictions=restrictions,
            viewer_certificate=viewer_certificate
        )
```

* `event_type` (Required) - Specific event to trigger this function. Valid values: `viewer-request`, `origin-request`, `viewer-response`, `origin-response`.
* `lambda_arn` (Required) - ARN of the Lambda function.
* `include_body` (Optional) - When set to true it exposes the request body to the lambda function. Defaults to false. Valid values: `true`, `false`.

##### Function Association

With CloudFront Functions in Amazon CloudFront, you can write lightweight functions in JavaScript for high-scale, latency-sensitive CDN customizations. You can associate a single function per event type. See [CloudFront Functions](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cloudfront-functions.html)
for more information.

Example configuration:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudfront_distribution import CloudfrontDistribution
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, allowedMethods, cachedMethods, pathPattern, targetOriginId, viewerProtocolPolicy, defaultCacheBehavior, enabled, origin, restrictions, viewerCertificate):
        super().__init__(scope, name)
        CloudfrontDistribution(self, "example",
            ordered_cache_behavior=[CloudfrontDistributionOrderedCacheBehavior(
                function_association=[CloudfrontDistributionOrderedCacheBehaviorFunctionAssociation(
                    event_type="viewer-request",
                    function_arn=Token.as_string(aws_cloudfront_function_example.arn)
                )
                ],
                allowed_methods=allowed_methods,
                cached_methods=cached_methods,
                path_pattern=path_pattern,
                target_origin_id=target_origin_id,
                viewer_protocol_policy=viewer_protocol_policy
            )
            ],
            default_cache_behavior=default_cache_behavior,
            enabled=enabled,
            origin=origin,
            restrictions=restrictions,
            viewer_certificate=viewer_certificate
        )
```

* `event_type` (Required) - Specific event to trigger this function. Valid values: `viewer-request` or `viewer-response`.
* `function_arn` (Required) - ARN of the CloudFront function.

##### Cookies Arguments

* `forward` (Required) - Whether you want CloudFront to forward cookies to the origin that is associated with this cache behavior. You can specify `all`, `none` or `whitelist`. If `whitelist`, you must include the subsequent `whitelisted_names`.
* `whitelisted_names` (Optional) - If you have specified `whitelist` to `forward`, the whitelisted cookies that you want CloudFront to forward to your origin.

#### Custom Error Response Arguments

* `error_caching_min_ttl` (Optional) - Minimum amount of time you want HTTP error codes to stay in CloudFront caches before CloudFront queries your origin to see whether the object has been updated.
* `error_code` (Required) - 4xx or 5xx HTTP status code that you want to customize.
* `response_code` (Optional) - HTTP status code that you want CloudFront to return with the custom error page to the viewer.
* `response_page_path` (Optional) - Path of the custom error page (for example, `/custom_404.html`).

#### Default Cache Behavior Arguments

The arguments for `default_cache_behavior` are the same as for
[`ordered_cache_behavior`](#cache-behavior-arguments), except for the `path_pattern`
argument should not be specified.

#### Logging Config Arguments

* `bucket` (Required) - Amazon S3 bucket to store the access logs in, for example, `myawslogbucket.s3.amazonaws.com`.
* `include_cookies` (Optional) - Whether to include cookies in access logs (default: `false`).
* `prefix` (Optional) - Prefix to the access log filenames for this distribution, for example, `myprefix/`.

#### Origin Arguments

* `connection_attempts` (Optional) - Number of times that CloudFront attempts to connect to the origin. Must be between 1-3. Defaults to 3.
* `connection_timeout` (Optional) - Number of seconds that CloudFront waits when trying to establish a connection to the origin. Must be between 1-10. Defaults to 10.
* `custom_origin_config` - The [CloudFront custom origin](#custom-origin-config-arguments) configuration information. If an S3 origin is required, use `origin_access_control_id` or `s3_origin_config` instead.
* `domain_name` (Required) - DNS domain name of either the S3 bucket, or web site of your custom origin.
* `custom_header` (Optional) - One or more sub-resources with `name` and `value` parameters that specify header data that will be sent to the origin (multiples allowed).
* `origin_access_control_id` (Optional) - Unique identifier of a [CloudFront origin access control][8] for this origin.
* `origin_id` (Required) - Unique identifier for the origin.
* `origin_path` (Optional) - Optional element that causes CloudFront to request your content from a directory in your Amazon S3 bucket or your custom origin.
* `origin_shield` - (Optional) [CloudFront Origin Shield](#origin-shield-arguments) configuration information. Using Origin Shield can help reduce the load on your origin. For more information, see [Using Origin Shield](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/origin-shield.html) in the Amazon CloudFront Developer Guide.
* `s3_origin_config` - (Optional) [CloudFront S3 origin](#s3-origin-config-arguments) configuration information. If a custom origin is required, use `custom_origin_config` instead.

##### Custom Origin Config Arguments

* `http_port` (Required) - HTTP port the custom origin listens on.
* `https_port` (Required) - HTTPS port the custom origin listens on.
* `origin_protocol_policy` (Required) - Origin protocol policy to apply to your origin. One of `http-only`, `https-only`, or `match-viewer`.
* `origin_ssl_protocols` (Required) - List of SSL/TLS protocols that CloudFront can use when connecting to your origin over HTTPS. Valid values: `SSLv3`, `TLSv1`, `TLSv1.1`, `TLSv1.2`. For more information, see [Minimum Origin SSL Protocol](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginSSLProtocols) in the Amazon CloudFront Developer Guide.
* `origin_keepalive_timeout` - (Optional) The Custom KeepAlive timeout, in seconds. By default, AWS enforces an upper limit of `60`. But you can request an [increase](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-request-timeout). Defaults to `5`.
* `origin_read_timeout` - (Optional) The Custom Read timeout, in seconds. By default, AWS enforces an upper limit of `60`. But you can request an [increase](http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/RequestAndResponseBehaviorCustomOrigin.html#request-custom-request-timeout). Defaults to `30`.

##### Origin Shield Arguments

* `enabled` (Required) - Whether Origin Shield is enabled.
* `origin_shield_region` (Optional) - AWS Region for Origin Shield. To specify a region, use the region code, not the region name. For example, specify the US East (Ohio) region as `us-east-2`.

##### S3 Origin Config Arguments

* `origin_access_identity` (Required) - The [CloudFront origin access identity][5] to associate with the origin.

#### Origin Group Arguments

* `origin_id` (Required) - Unique identifier for the origin group.
* `failover_criteria` (Required) - The [failover criteria](#failover-criteria-arguments) for when to failover to the secondary origin.
* `member` (Required) - Ordered [member](#member-arguments) configuration blocks assigned to the origin group, where the first member is the primary origin. You must specify two members.

##### Failover Criteria Arguments

* `status_codes` (Required) - List of HTTP status codes for the origin group.

##### Member Arguments

* `origin_id` (Required) - Unique identifier of the member origin.

#### Restrictions Arguments

The `restrictions` sub-resource takes another single sub-resource named `geo_restriction` (see the example for usage).

The arguments of `geo_restriction` are:

* `locations` (Required) - [ISO 3166-1-alpha-2 codes][4] for which you want CloudFront either to distribute your content (`whitelist`) or not distribute your content (`blacklist`). If the type is specified as `none` an empty array can be used.
* `restriction_type` (Required) - Method that you want to use to restrict distribution of your content by country: `none`, `whitelist`, or `blacklist`.

#### Viewer Certificate Arguments

* `acm_certificate_arn` - ARN of the [AWS Certificate Manager][6] certificate that you wish to use with this distribution. Specify this, `cloudfront_default_certificate`, or `iam_certificate_id`.  The ACM certificate must be in  US-EAST-1.
* `cloudfront_default_certificate` - `true` if you want viewers to use HTTPS to request your objects and you're using the CloudFront domain name for your distribution. Specify this, `acm_certificate_arn`, or `iam_certificate_id`.
* `iam_certificate_id` - IAM certificate identifier of the custom viewer certificate for this distribution if you are using a custom domain. Specify this, `acm_certificate_arn`, or `cloudfront_default_certificate`.
* `minimum_protocol_version` - Minimum version of the SSL protocol that you want CloudFront to use for HTTPS connections. Can only be set if `cloudfront_default_certificate = false`. See all possible values in [this](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/secure-connections-supported-viewer-protocols-ciphers.html) table under "Security policy." Some examples include: `TLSv1.2_2019` and `TLSv1.2_2021`. Default: `TLSv1`. **NOTE**: If you are using a custom certificate (specified with `acm_certificate_arn` or `iam_certificate_id`), and have specified `sni-only` in `ssl_support_method`, `TLSv1` or later must be specified. If you have specified `vip` in `ssl_support_method`, only `SSLv3` or `TLSv1` can be specified. If you have specified `cloudfront_default_certificate`, `TLSv1` must be specified.
* `ssl_support_method` - How you want CloudFront to serve HTTPS requests. One of `vip`, `sni-only`, or `static-ip`. Required if you specify `acm_certificate_arn` or `iam_certificate_id`. **NOTE:** `vip` causes CloudFront to use a dedicated IP address and may incur extra charges.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Identifier for the distribution. For example: `EDFDVBD632BHDS5`.
* `arn` - ARN for the distribution. For example: `arn:aws:cloudfront::123456789012:distribution/EDFDVBD632BHDS5`, where `123456789012` is your AWS account ID.
* `caller_reference` - Internal value used by CloudFront to allow future updates to the distribution configuration.
* `status` - Current status of the distribution. `Deployed` if the distribution's information is fully propagated throughout the Amazon CloudFront system.
* `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).
* `trusted_key_groups` - List of nested attributes for active trusted key groups, if the distribution is set up to serve private content with signed URLs.
    * `enabled` - `true` if any of the key groups have public keys that CloudFront can use to verify the signatures of signed URLs and signed cookies.
    * `items` - List of nested attributes for each key group.
        * `key_group_id` - ID of the key group that contains the public keys.
        * `key_pair_ids` - Set of CloudFront key pair IDs.
* `trusted_signers` - List of nested attributes for active trusted signers, if the distribution is set up to serve private content with signed URLs.
    * `enabled` - `true` if any of the AWS accounts listed as trusted signers have active CloudFront key pairs
    * `items` - List of nested attributes for each trusted signer
        * `aws_account_number` - AWS account ID or `self`
        * `key_pair_ids` - Set of active CloudFront key pairs associated with the signer account
* `domain_name` - Domain name corresponding to the distribution. For example: `d604721fxaaqy9.cloudfront.net`.
* `last_modified_time` - Date and time the distribution was last modified.
* `in_progress_validation_batches` - Number of invalidation batches currently in progress.
* `etag` - Current version of the distribution's information. For example: `E2QWRUHAPOMQZL`.
* `hosted_zone_id` - CloudFront Route 53 zone ID that can be used to route an [Alias Resource Record Set][7] to. This attribute is simply an alias for the zone ID `Z2FDTNDATAQYW2`.

[1]: http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html
[2]: https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateDistribution.html
[4]: http://www.iso.org/iso/country_codes/iso_3166_code_lists/country_names_and_code_elements.htm
[5]: /docs/providers/aws/r/cloudfront_origin_access_identity.html
[6]: https://aws.amazon.com/certificate-manager/
[7]: http://docs.aws.amazon.com/Route53/latest/APIReference/CreateAliasRRSAPI.html
[8]: /docs/providers/aws/r/cloudfront_origin_access_control.html

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import CloudFront Distributions using the `id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudfront_distribution import CloudfrontDistribution
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        CloudfrontDistribution.generate_config_for_import(self, "distribution", "E74FTE3EXAMPLE")
```

Using `terraform import`, import CloudFront Distributions using the `id`. For example:

```console
% terraform import aws_cloudfront_distribution.distribution E74FTE3EXAMPLE
```

<!-- cache-key: cdktf-0.20.1 input-ed382f1a0711034c7e89e360fe36178a0cddf9710e602c08afb5dd7214599f77 -->