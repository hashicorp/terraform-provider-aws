---
subcategory: "EventBridge"
layout: "aws"
page_title: "AWS: aws_cloudwatch_event_permission"
description: |-
  Provides a resource to create an EventBridge permission to support cross-account events in the current account default event bus.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cloudwatch_event_permission

Provides a resource to create an EventBridge permission to support cross-account events in the current account default event bus.

~> **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.

~> **Note:** The EventBridge bus policy resource  (`aws_cloudwatch_event_bus_policy`) is incompatible with the EventBridge permission resource (`aws_cloudwatch_event_permission`) and will overwrite permissions.

## Example Usage

### Account Access

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_event_permission import CloudwatchEventPermission
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        CloudwatchEventPermission(self, "DevAccountAccess",
            principal="123456789012",
            statement_id="DevAccountAccess"
        )
```

### Organization Access

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_event_permission import CloudwatchEventPermission
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        CloudwatchEventPermission(self, "OrganizationAccess",
            condition=CloudwatchEventPermissionCondition(
                key="aws:PrincipalOrgID",
                type="StringEquals",
                value=example.id
            ),
            principal="*",
            statement_id="OrganizationAccess"
        )
```

## Argument Reference

This resource supports the following arguments:

* `principal` - (Required) The 12-digit AWS account ID that you are permitting to put events to your default event bus. Specify `*` to permit any account to put events to your default event bus, optionally limited by `condition`.
* `statement_id` - (Required) An identifier string for the external account that you are granting permissions to.
* `action` - (Optional) The action that you are enabling the other account to perform. Defaults to `events:PutEvents`.
* `condition` - (Optional) Configuration block to limit the event bus permissions you are granting to only accounts that fulfill the condition. Specified below.
* `event_bus_name` - (Optional) The name of the event bus to set the permissions on.
  If you omit this, the permissions are set on the `default` event bus.

### condition

* `key` - (Required) Key for the condition. Valid values: `aws:PrincipalOrgID`.
* `type` - (Required) Type of condition. Value values: `StringEquals`.
* `value` - (Required) Value for the key.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The statement ID of the EventBridge permission.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import EventBridge permissions using the `event_bus_name/statement_id` (if you omit `event_bus_name`, the `default` event bus will be used). For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_event_permission import CloudwatchEventPermission
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        CloudwatchEventPermission.generate_config_for_import(self, "devAccountAccess", "example-event-bus/DevAccountAccess")
```

Using `terraform import`, import EventBridge permissions using the `event_bus_name/statement_id` (if you omit `event_bus_name`, the `default` event bus will be used). For example:

```console
% terraform import aws_cloudwatch_event_permission.DevAccountAccess example-event-bus/DevAccountAccess
```

<!-- cache-key: cdktf-0.20.8 input-61e6e8cd01bf17093c7daf47be3dce1db556b13575a6c0f84dd9556644d63f94 -->