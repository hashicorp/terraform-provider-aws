---
subcategory: "DSQL"
layout: "aws"
page_title: "AWS: aws_dsql_cluster_peering"
description: |-
  Terraform resource for managing an Amazon Aurora DSQL Cluster Peering.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_dsql_cluster_peering

Terraform resource for managing an Amazon Aurora DSQL Cluster Peering.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws. import DsqlCluster, DsqlClusterPeering
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example1 = DsqlCluster(self, "example_1",
            multi_region_properties=[{
                "witness_region": "us-west-2"
            }
            ]
        )
        example2 = DsqlCluster(self, "example_2",
            multi_region_properties=[{
                "witness_region": "us-west-2"
            }
            ],
            provider=alternate
        )
        aws_dsql_cluster_peering_example1 = DsqlClusterPeering(self, "example_1_2",
            clusters=[example2.arn],
            identifier=example1.identifier,
            witness_region=Fn.lookup_nested(example1.multi_region_properties, ["0", "witness_region"
            ])
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_dsql_cluster_peering_example1.override_logical_id("example_1")
        aws_dsql_cluster_peering_example2 = DsqlClusterPeering(self, "example_2_3",
            clusters=[example1.arn],
            identifier=example2.identifier,
            provider=alternate,
            witness_region=Fn.lookup_nested(example2.multi_region_properties, ["0", "witness_region"
            ])
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_dsql_cluster_peering_example2.override_logical_id("example_2")
```

## Argument Reference

This resource supports the following arguments:

* `clusters` - (Required) List of DSQL Cluster ARNs to be peered to this cluster.
* `identifier` - (Required) DSQL Cluster Identifier.
* `witness_region` - (Required) Witness region for a multi-region cluster.

## Attribute Reference

This resource exports no additional attributes.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import DSQL Cluster Peering using the `identifier`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws. import DsqlClusterPeering
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DsqlClusterPeering.generate_config_for_import(self, "example", "cluster-id-12345678")
```

Using `terraform import`, import DSQL Cluster Peering using the `identifier`. For example:

```console
% terraform import aws_dsql_cluster_peering.example cluster-id-12345678
```

<!-- cache-key: cdktf-0.20.8 input-9c9f17774f0c0c68d7be4885ba915a37d0aad760075092a2b05077680866cd38 -->