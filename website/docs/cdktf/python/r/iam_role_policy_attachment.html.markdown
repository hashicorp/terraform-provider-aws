---
subcategory: "IAM (Identity & Access Management)"
layout: "aws"
page_title: "AWS: aws_iam_role_policy_attachment"
description: |-
  Attaches a Managed IAM Policy to an IAM role
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_iam_role_policy_attachment

Attaches a Managed IAM Policy to an IAM role

~> **NOTE:** The usage of this resource conflicts with the `aws_iam_policy_attachment` resource and will permanently show a difference if both are defined.

~> **NOTE:** For a given role, this resource is incompatible with using the [`aws_iam_role` resource](/docs/providers/aws/r/iam_role.html) `managed_policy_arns` argument. When using that argument and this resource, both will attempt to manage the role's managed policy attachments and Terraform will show a permanent difference.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.iam_policy import IamPolicy
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy_attachment import IamRolePolicyAttachment
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        assume_role = DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["ec2.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        policy = DataAwsIamPolicyDocument(self, "policy",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["ec2:Describe*"],
                effect="Allow",
                resources=["*"]
            )
            ]
        )
        aws_iam_policy_policy = IamPolicy(self, "policy_2",
            description="A test policy",
            name="test-policy",
            policy=Token.as_string(policy.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_policy_policy.override_logical_id("policy")
        role = IamRole(self, "role",
            assume_role_policy=Token.as_string(assume_role.json),
            name="test-role"
        )
        IamRolePolicyAttachment(self, "test-attach",
            policy_arn=Token.as_string(aws_iam_policy_policy.arn),
            role=role.name
        )
```

## Argument Reference

This resource supports the following arguments:

* `role`  (Required) - The name of the IAM role to which the policy should be applied
* `policy_arn` (Required) - The ARN of the policy you want to apply

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.12.0 and later, the [`import` block](https://developer.hashicorp.com/terraform/language/import) can be used with the `identity` attribute. For example:

```terraform
import {
  to = aws_iam_role_policy_attachment.example
  identity = {
    role       = "test-role"
    policy_arn = "arn:aws:iam::xxxxxxxxxxxx:policy/test-policy"
  }
}

resource "aws_iam_role_policy_attachment" "example" {
  ### Configuration omitted for brevity ###
}
```

### Identity Schema

#### Required

* `role` (String) Name of the IAM role.
* `policy_arn` (String) ARN of the IAM policy.

#### Optional

* `account_id` (String) AWS Account where this resource is managed.

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import IAM role policy attachments using the role name and policy arn separated by `/`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.iam_role_policy_attachment import IamRolePolicyAttachment
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        IamRolePolicyAttachment.generate_config_for_import(self, "example", "test-role/arn:aws:iam::xxxxxxxxxxxx:policy/test-policy")
```

Using `terraform import`, import IAM role policy attachments using the role name and policy arn separated by `/`. For example:

```console
% terraform import aws_iam_role_policy_attachment.example test-role/arn:aws:iam::xxxxxxxxxxxx:policy/test-policy
```

<!-- cache-key: cdktf-0.20.8 input-45bbac38f9836b51ed5be779dd4b73fdfbcbd7886d5fe2317790d0bf2b80ac1d -->