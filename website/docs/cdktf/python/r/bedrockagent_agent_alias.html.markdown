---
subcategory: "Bedrock Agents"
layout: "aws"
page_title: "AWS: aws_bedrockagent_agent_alias"
description: |-
  Terraform resource for managing an AWS Agents for Amazon Bedrock Agent Alias.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_bedrockagent_agent_alias

Terraform resource for managing an AWS Agents for Amazon Bedrock Agent Alias.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.bedrockagent_agent import BedrockagentAgent
from imports.aws.bedrockagent_agent_alias import BedrockagentAgentAlias
from imports.aws.data_aws_caller_identity import DataAwsCallerIdentity
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.data_aws_partition import DataAwsPartition
from imports.aws.data_aws_region import DataAwsRegion
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy import IamRolePolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        current = DataAwsCallerIdentity(self, "current")
        data_aws_partition_current = DataAwsPartition(self, "current_1")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_partition_current.override_logical_id("current")
        data_aws_region_current = DataAwsRegion(self, "current_2")
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_region_current.override_logical_id("current")
        example_agent_permissions = DataAwsIamPolicyDocument(self, "example_agent_permissions",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["bedrock:InvokeModel"],
                resources=["arn:${" + data_aws_partition_current.partition + "}:bedrock:${" + data_aws_region_current.name + "}::foundation-model/anthropic.claude-v2"
                ]
            )
            ]
        )
        example_agent_trust = DataAwsIamPolicyDocument(self, "example_agent_trust",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                condition=[DataAwsIamPolicyDocumentStatementCondition(
                    test="StringEquals",
                    values=[Token.as_string(current.account_id)],
                    variable="aws:SourceAccount"
                ), DataAwsIamPolicyDocumentStatementCondition(
                    test="ArnLike",
                    values=["arn:${" + data_aws_partition_current.partition + "}:bedrock:${" + data_aws_region_current.name + "}:${" + current.account_id + "}:agent/*"
                    ],
                    variable="AWS:SourceArn"
                )
                ],
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["bedrock.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        example = IamRole(self, "example",
            assume_role_policy=Token.as_string(example_agent_trust.json),
            name_prefix="AmazonBedrockExecutionRoleForAgents_"
        )
        aws_iam_role_policy_example = IamRolePolicy(self, "example_6",
            policy=Token.as_string(example_agent_permissions.json),
            role=example.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_example.override_logical_id("example")
        aws_bedrockagent_agent_example = BedrockagentAgent(self, "example_7",
            agent_name="my-agent-name",
            agent_resource_role_arn=example.arn,
            foundation_model="anthropic.claude-v2",
            idle_ttl=500
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_bedrockagent_agent_example.override_logical_id("example")
        aws_bedrockagent_agent_alias_example = BedrockagentAgentAlias(self, "example_8",
            agent_alias_name="my-agent-alias",
            agent_id=Token.as_string(aws_bedrockagent_agent_example.agent_id),
            description="Test Alias"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_bedrockagent_agent_alias_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `agent_alias_name` - (Required) Name of the alias.
* `agent_id` - (Required, Forces new resource) Identifier of the agent to create an alias for.

The following arguments are optional:

* `description` - (Optional) Description of the alias.
* `routing_configuration` - (Optional) Details about the routing configuration of the alias. See [`routing_configuration` Block](#routing_configuration-block) for details.
* `tags` - (Optional) Map of tags assigned to the resource. If configured with a provider [`default_tags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### `routing_configuration` Block

The `routing_configuration` configuration block supports the following arguments:

* `agent_version` - (Optional) Version of the agent with which the alias is associated.
* `provisioned_throughput` - (Optional) ARN of the Provisioned Throughput assigned to the agent alias.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `agent_alias_arn` - ARN of the alias.
* `agent_alias_id` - Unique identifier of the alias.
* `id` - Alias ID and agent ID separated by `,`.
* `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `5m`)
* `update` - (Default `5m`)
* `delete` - (Default `5m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Agents for Amazon Bedrock Agent Alias using the alias ID and the agent ID separated by `,`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.bedrockagent_agent_alias import BedrockagentAgentAlias
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        BedrockagentAgentAlias.generate_config_for_import(self, "example", "66IVY0GUTF,GGRRAED6JP")
```

Using `terraform import`, import Agents for Amazon Bedrock Agent Alias using the alias ID and the agent ID separated by `,`. For example:

```console
% terraform import aws_bedrockagent_agent_alias.example 66IVY0GUTF,GGRRAED6JP
```

<!-- cache-key: cdktf-0.20.1 input-ec9002dbf394ea30a92ebfbe0cd46c10a1224be5c43880fe491b2e709a8ed68e -->