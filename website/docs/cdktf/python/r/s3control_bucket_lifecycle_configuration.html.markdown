---
subcategory: "S3 Control"
layout: "aws"
page_title: "AWS: aws_s3control_bucket_lifecycle_configuration"
description: |-
  Manages an S3 Control Bucket Lifecycle Configuration.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_s3control_bucket_lifecycle_configuration

Provides a resource to manage an S3 Control Bucket Lifecycle Configuration.

~> **NOTE:** Each S3 Control Bucket can only have one Lifecycle Configuration. Using multiple of this resource against the same S3 Control Bucket will result in perpetual differences each Terraform run.

-> This functionality is for managing [S3 on Outposts](https://docs.aws.amazon.com/AmazonS3/latest/dev/S3onOutposts.html). To manage S3 Bucket Lifecycle Configurations in an AWS Partition, see the [`aws_s3_bucket` resource](/docs/providers/aws/r/s3_bucket.html).

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.s3_control_bucket_lifecycle_configuration import S3ControlBucketLifecycleConfiguration
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        S3ControlBucketLifecycleConfiguration(self, "example",
            bucket=Token.as_string(aws_s3_control_bucket_example.arn),
            rule=[{
                "expiration": {
                    "days": 365
                },
                "filter": {
                    "prefix": "logs/"
                },
                "id": "logs"
            }, {
                "expiration": {
                    "days": 7
                },
                "filter": {
                    "prefix": "temp/"
                },
                "id": "temp"
            }
            ]
        )
```

## Argument Reference

The following arguments are required:

* `bucket` - (Required) Amazon Resource Name (ARN) of the bucket.
* `rule` - (Required) Configuration block(s) containing lifecycle rules for the bucket.
    * `abort_incomplete_multipart_upload` - (Optional) Configuration block containing settings for abort incomplete multipart upload.
        * `days_after_initiation` - (Required) Number of days after which Amazon S3 aborts an incomplete multipart upload.
    * `expiration` - (Optional) Configuration block containing settings for expiration of objects.
        * `date` - (Optional) Date the object is to be deleted. Should be in `YYYY-MM-DD` date format, e.g., `2020-09-30`.
        * `days` - (Optional) Number of days before the object is to be deleted.
        * `expired_object_delete_marker` - (Optional) Enable to remove a delete marker with no noncurrent versions. Cannot be specified with `date` or `days`.
    * `filter` - (Optional) Configuration block containing settings for filtering.
        * `prefix` - (Optional) Object prefix for rule filtering.
        * `tags` - (Optional) Key-value map of object tags for rule filtering.
    * `id` - (Required) Unique identifier for the rule.
    * `status` - (Optional) Status of the rule. Valid values: `Enabled` and `Disabled`. Defaults to `Enabled`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Amazon Resource Name (ARN) of the bucket.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import S3 Control Bucket Lifecycle Configurations using the Amazon Resource Name (ARN). For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.s3_control_bucket_lifecycle_configuration import S3ControlBucketLifecycleConfiguration
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        S3ControlBucketLifecycleConfiguration.generate_config_for_import(self, "example", "arn:aws:s3-outposts:us-east-1:123456789012:outpost/op-12345678/bucket/example")
```

Using `terraform import`, import S3 Control Bucket Lifecycle Configurations using the Amazon Resource Name (ARN). For example:

```console
% terraform import aws_s3control_bucket_lifecycle_configuration.example arn:aws:s3-outposts:us-east-1:123456789012:outpost/op-12345678/bucket/example
```

<!-- cache-key: cdktf-0.20.8 input-edd708f39cae61085d23015d0a484630286f25fd5088717d8cc3d17bdb735870 -->