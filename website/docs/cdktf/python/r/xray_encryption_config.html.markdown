---
subcategory: "X-Ray"
layout: "aws"
page_title: "AWS: aws_xray_encryption_config"
description: |-
    Creates and manages an AWS XRay Encryption Config.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_xray_encryption_config

Creates and manages an AWS XRay Encryption Config.

~> **NOTE:** Removing this resource from Terraform has no effect to the encryption configuration within X-Ray.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.xray_encryption_config import XrayEncryptionConfig
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        XrayEncryptionConfig(self, "example",
            type="NONE"
        )
```

## Example Usage with KMS Key

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_caller_identity import DataAwsCallerIdentity
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.kms_key import KmsKey
from imports.aws.xray_encryption_config import XrayEncryptionConfig
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        current = DataAwsCallerIdentity(self, "current")
        example = DataAwsIamPolicyDocument(self, "example",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["kms:*"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["arn:aws:iam::${" + current.account_id + "}:root"],
                    type="AWS"
                )
                ],
                resources=["*"],
                sid="Enable IAM User Permissions"
            )
            ]
        )
        aws_kms_key_example = KmsKey(self, "example_2",
            deletion_window_in_days=7,
            description="Some Key",
            policy=Token.as_string(example.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_kms_key_example.override_logical_id("example")
        aws_xray_encryption_config_example = XrayEncryptionConfig(self, "example_3",
            key_id=Token.as_string(aws_kms_key_example.arn),
            type="KMS"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_xray_encryption_config_example.override_logical_id("example")
```

## Argument Reference

* `type` - (Required) The type of encryption. Set to `KMS` to use your own key for encryption. Set to `NONE` for default encryption.
* `key_id` - (Optional) An AWS KMS customer master key (CMK) ARN.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Region name.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import XRay Encryption Config using the region name. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.xray_encryption_config import XrayEncryptionConfig
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        XrayEncryptionConfig.generate_config_for_import(self, "example", "us-west-2")
```

Using `terraform import`, import XRay Encryption Config using the region name. For example:

```console
% terraform import aws_xray_encryption_config.example us-west-2
```

<!-- cache-key: cdktf-0.20.8 input-55d226205a72425f4aa1a56a07d4e3a41a8d86c6c3b3f83bf024e6de8c19b0ed -->