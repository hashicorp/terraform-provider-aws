---
subcategory: "Lambda"
layout: "aws"
page_title: "AWS: aws_lambda_alias"
description: |-
  Manages an AWS Lambda Alias.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_lambda_alias

Manages an AWS Lambda Alias. Use this resource to create an alias that points to a specific Lambda function version for traffic management and deployment strategies.

For information about Lambda and how to use it, see [What is AWS Lambda?](http://docs.aws.amazon.com/lambda/latest/dg/welcome.html). For information about function aliases, see [CreateAlias](http://docs.aws.amazon.com/lambda/latest/dg/API_CreateAlias.html) and [AliasRoutingConfiguration](https://docs.aws.amazon.com/lambda/latest/dg/API_AliasRoutingConfiguration.html) in the API docs.

## Example Usage

### Basic Alias

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.lambda_alias import LambdaAlias
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        LambdaAlias(self, "example",
            description="Production environment alias",
            function_name=Token.as_string(aws_lambda_function_example.arn),
            function_version="1",
            name="production"
        )
```

### Alias with Traffic Splitting

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.lambda_alias import LambdaAlias
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        LambdaAlias(self, "example",
            description="Staging environment with traffic splitting",
            function_name=Token.as_string(aws_lambda_function_example.function_name),
            function_version="2",
            name="staging",
            routing_config=LambdaAliasRoutingConfig(
                additional_version_weights={
                    "1": 0.1,
                    "3": 0.2
                }
            )
        )
```

### Blue-Green Deployment Alias

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.lambda_alias import LambdaAlias
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        LambdaAlias(self, "example",
            description="Live traffic with gradual rollout to new version",
            function_name=Token.as_string(aws_lambda_function_example.function_name),
            function_version="5",
            name="live",
            routing_config=LambdaAliasRoutingConfig(
                additional_version_weights={
                    "6": 0.05
                }
            )
        )
```

### Development Alias

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.lambda_alias import LambdaAlias
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        LambdaAlias(self, "example",
            description="Development environment - always points to latest",
            function_name=Token.as_string(aws_lambda_function_example.function_name),
            function_version="$LATEST",
            name="dev"
        )
```

## Argument Reference

The following arguments are required:

* `function_name` - (Required) Name or ARN of the Lambda function.
* `function_version` - (Required) Lambda function version for which you are creating the alias. Pattern: `(\$LATEST|[0-9]+)`.
* `name` - (Required) Name for the alias. Pattern: `(?!^[0-9]+$)([a-zA-Z0-9-_]+)`.

The following arguments are optional:

* `description` - (Optional) Description of the alias.
* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `routing_config` - (Optional) Lambda alias' route configuration settings. [See below](#routing_config-configuration-block).

### routing_config Configuration Block

* `additional_version_weights` - (Optional) Map that defines the proportion of events that should be sent to different versions of a Lambda function.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN identifying your Lambda function alias.
* `invoke_arn` - ARN to be used for invoking Lambda Function from API Gateway - to be used in [`aws_api_gateway_integration`](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_integration)'s `uri`.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Lambda Function Aliases using the `function_name/alias`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.lambda_alias import LambdaAlias
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        LambdaAlias.generate_config_for_import(self, "example", "example/production")
```

For backwards compatibility, the following legacy `terraform import` command is also supported:

```console
% terraform import aws_lambda_alias.example example/production
```

<!-- cache-key: cdktf-0.20.8 input-62e4d99ac8cde5d2e410c69aa9e84b0e682e8a768a63f324544ac36c596ab9f7 -->