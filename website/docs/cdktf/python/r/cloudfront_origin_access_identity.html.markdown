---
subcategory: "CloudFront"
layout: "aws"
page_title: "AWS: aws_cloudfront_origin_access_identity"
description: |-
  Provides a CloudFront origin access identity.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cloudfront_origin_access_identity

Creates an Amazon CloudFront origin access identity.

For information about CloudFront distributions, see the
[Amazon CloudFront Developer Guide][1]. For more information on generating
origin access identities, see
[Using an Origin Access Identity to Restrict Access to Your Amazon S3 Content][2].

## Example Usage

The following example below creates a CloudFront origin access identity.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudfront_origin_access_identity import CloudfrontOriginAccessIdentity
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        CloudfrontOriginAccessIdentity(self, "example",
            comment="Some comment"
        )
```

## Argument Reference

* `comment` (Optional) - An optional comment for the origin access identity.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The identifier for the distribution. For example: `EDFDVBD632BHDS5`.
* `caller_reference` - Internal value used by CloudFront to allow future
   updates to the origin access identity.
* `cloudfront_access_identity_path` - A shortcut to the full path for the
   origin access identity to use in CloudFront, see below.
* `etag` - The current version of the origin access identity's information.
   For example: `E2QWRUHAPOMQZL`.
* `iam_arn` - A pre-generated ARN for use in S3 bucket policies (see below).
   Example: `arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity
   E2QWRUHAPOMQZL`.
* `s3_canonical_user_id` - The Amazon S3 canonical user ID for the origin
   access identity, which you use when giving the origin access identity read
   permission to an object in Amazon S3.

## Using With CloudFront

Normally, when referencing an origin access identity in CloudFront, you need to
prefix the ID with the `origin-access-identity/cloudfront/` special path.
The `cloudfront_access_identity_path` allows this to be circumvented.
The below snippet demonstrates use with the `s3_origin_config` structure for the
[`aws_cloudfront_distribution`][3] resource:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudfront_distribution import CloudfrontDistribution
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, domainName, originId, defaultCacheBehavior, enabled, restrictions, viewerCertificate):
        super().__init__(scope, name)
        CloudfrontDistribution(self, "example",
            origin=[CloudfrontDistributionOrigin(
                s3_origin_config=CloudfrontDistributionOriginS3OriginConfig(
                    origin_access_identity=Token.as_string(aws_cloudfront_origin_access_identity_example.cloudfront_access_identity_path)
                ),
                domain_name=domain_name,
                origin_id=origin_id
            )
            ],
            default_cache_behavior=default_cache_behavior,
            enabled=enabled,
            restrictions=restrictions,
            viewer_certificate=viewer_certificate
        )
```

### Updating your bucket policy

Note that the AWS API may translate the `s3_canonical_user_id` `CanonicalUser`
principal into an `AWS` IAM ARN principal when supplied in an
[`aws_s3_bucket`][4] bucket policy, causing spurious diffs in Terraform. If
you see this behavior, use the `iam_arn` instead:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.s3_bucket_policy import S3BucketPolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        s3_policy = DataAwsIamPolicyDocument(self, "s3_policy",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["s3:GetObject"],
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=[example.iam_arn],
                    type="AWS"
                )
                ],
                resources=["${" + aws_s3_bucket_example.arn + "}/*"]
            )
            ]
        )
        S3BucketPolicy(self, "example",
            bucket=Token.as_string(aws_s3_bucket_example.id),
            policy=Token.as_string(s3_policy.json)
        )
```

[1]: http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html
[2]: http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html
[3]: /docs/providers/aws/r/cloudfront_distribution.html
[4]: /docs/providers/aws/r/s3_bucket.html

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Cloudfront Origin Access Identities using the `id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudfront_origin_access_identity import CloudfrontOriginAccessIdentity
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        CloudfrontOriginAccessIdentity.generate_config_for_import(self, "originAccess", "E74FTE3AEXAMPLE")
```

Using `terraform import`, import Cloudfront Origin Access Identities using the `id`. For example:

```console
% terraform import aws_cloudfront_origin_access_identity.origin_access E74FTE3AEXAMPLE
```

<!-- cache-key: cdktf-0.20.1 input-c8db3d8043e295b534d10a38305c84400f283c41376e39cd1df56d209827b719 -->