---
subcategory: "WAF Classic Regional"
layout: "aws"
page_title: "AWS: aws_wafregional_web_acl"
description: |-
  Provides a AWS WAF Regional web access control group (ACL) resource for use with ALB.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_wafregional_web_acl

Provides a WAF Regional Web ACL Resource for use with Application Load Balancer.

## Example Usage

### Regular Rule

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.wafregional_ipset import WafregionalIpset
from imports.aws.wafregional_rule import WafregionalRule
from imports.aws.wafregional_web_acl import WafregionalWebAcl
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        ipset = WafregionalIpset(self, "ipset",
            ip_set_descriptor=[WafregionalIpsetIpSetDescriptor(
                type="IPV4",
                value="192.0.7.0/24"
            )
            ],
            name="tfIPSet"
        )
        wafrule = WafregionalRule(self, "wafrule",
            metric_name="tfWAFRule",
            name="tfWAFRule",
            predicate=[WafregionalRulePredicate(
                data_id=ipset.id,
                negated=False,
                type="IPMatch"
            )
            ]
        )
        WafregionalWebAcl(self, "wafacl",
            default_action=WafregionalWebAclDefaultAction(
                type="ALLOW"
            ),
            metric_name="tfWebACL",
            name="tfWebACL",
            rule=[WafregionalWebAclRule(
                action=WafregionalWebAclRuleAction(
                    type="BLOCK"
                ),
                priority=1,
                rule_id=wafrule.id,
                type="REGULAR"
            )
            ]
        )
```

### Group Rule

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.wafregional_web_acl import WafregionalWebAcl
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        WafregionalWebAcl(self, "example",
            default_action=WafregionalWebAclDefaultAction(
                type="ALLOW"
            ),
            metric_name="example",
            name="example",
            rule=[WafregionalWebAclRule(
                override_action=WafregionalWebAclRuleOverrideAction(
                    type="NONE"
                ),
                priority=1,
                rule_id=Token.as_string(aws_wafregional_rule_group_example.id),
                type="GROUP"
            )
            ]
        )
```

### Logging

~> *NOTE:* The Kinesis Firehose Delivery Stream name must begin with `aws-waf-logs-`. See the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/logging.html) for more information about enabling WAF logging.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.wafregional_web_acl import WafregionalWebAcl
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, defaultAction, metricName, name):
        super().__init__(scope, name)
        WafregionalWebAcl(self, "example",
            logging_configuration=WafregionalWebAclLoggingConfiguration(
                log_destination=Token.as_string(aws_kinesis_firehose_delivery_stream_example.arn),
                redacted_fields=WafregionalWebAclLoggingConfigurationRedactedFields(
                    field_to_match=[WafregionalWebAclLoggingConfigurationRedactedFieldsFieldToMatch(
                        type="URI"
                    ), WafregionalWebAclLoggingConfigurationRedactedFieldsFieldToMatch(
                        data="referer",
                        type="HEADER"
                    )
                    ]
                )
            ),
            default_action=default_action,
            metric_name=metric_name,
            name=name
        )
```

## Argument Reference

This resource supports the following arguments:

* `default_action` - (Required) The action that you want AWS WAF Regional to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL.
* `metric_name` - (Required) The name or description for the Amazon CloudWatch metric of this web ACL.
* `name` - (Required) The name or description of the web ACL.
* `logging_configuration` - (Optional) Configuration block to enable WAF logging. Detailed below.
* `rule` - (Optional) Set of configuration blocks containing rules for the web ACL. Detailed below.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### `default_action` Configuration Block

* `type` - (Required) Specifies how you want AWS WAF Regional to respond to requests that match the settings in a ruleE.g., `ALLOW`, `BLOCK` or `COUNT`

### `logging_configuration` Configuration Block

* `log_destination` - (Required) Amazon Resource Name (ARN) of Kinesis Firehose Delivery Stream
* `redacted_fields` - (Optional) Configuration block containing parts of the request that you want redacted from the logs. Detailed below.

#### `redacted_fields` Configuration Block

* `field_to_match` - (Required) Set of configuration blocks for fields to redact. Detailed below.

##### `field_to_match` Configuration Block

-> Additional information about this configuration can be found in the [AWS WAF Regional API Reference](https://docs.aws.amazon.com/waf/latest/APIReference/API_regional_FieldToMatch.html).

* `data` - (Optional) When the value of `type` is `HEADER`, enter the name of the header that you want the WAF to search, for example, `User-Agent` or `Referer`. If the value of `type` is any other value, omit `data`.
* `type` - (Required) The part of the web request that you want AWS WAF to search for a specified stringE.g., `HEADER` or `METHOD`

### `rule` Configuration Block

-> Additional information about this configuration can be found in the [AWS WAF Regional API Reference](https://docs.aws.amazon.com/waf/latest/APIReference/API_regional_ActivatedRule.html).

* `priority` - (Required) Specifies the order in which the rules in a WebACL are evaluated.
  Rules with a lower value are evaluated before rules with a higher value.
* `rule_id` - (Required) ID of the associated WAF (Regional) rule (e.g., [`aws_wafregional_rule`](/docs/providers/aws/r/wafregional_rule.html)). WAF (Global) rules cannot be used.
* `action` - (Optional) Configuration block of the action that CloudFront or AWS WAF takes when a web request matches the conditions in the rule.  Not used if `type` is `GROUP`. Detailed below.
* `override_action` - (Optional) Configuration block of the override the action that a group requests CloudFront or AWS WAF takes when a web request matches the conditions in the rule.  Only used if `type` is `GROUP`. Detailed below.
* `type` - (Optional) The rule type, either `REGULAR`, as defined by [Rule](http://docs.aws.amazon.com/waf/latest/APIReference/API_Rule.html), `RATE_BASED`, as defined by [RateBasedRule](http://docs.aws.amazon.com/waf/latest/APIReference/API_RateBasedRule.html), or `GROUP`, as defined by [RuleGroup](https://docs.aws.amazon.com/waf/latest/APIReference/API_RuleGroup.html). The default is REGULAR. If you add a RATE_BASED rule, you need to set `type` as `RATE_BASED`. If you add a GROUP rule, you need to set `type` as `GROUP`.

#### `action` / `override_action` Configuration Block

* `type` - (Required) Specifies how you want AWS WAF Regional to respond to requests that match the settings in a rule. Valid values for `action` are `ALLOW`, `BLOCK` or `COUNT`. Valid values for `override_action` are `COUNT` and `NONE`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of the WAF Regional WebACL.
* `id` - The ID of the WAF Regional WebACL.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import WAF Regional Web ACL using the id. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.wafregional_web_acl import WafregionalWebAcl
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        WafregionalWebAcl.generate_config_for_import(self, "wafacl", "a1b2c3d4-d5f6-7777-8888-9999aaaabbbbcccc")
```

Using `terraform import`, import WAF Regional Web ACL using the id. For example:

```console
% terraform import aws_wafregional_web_acl.wafacl a1b2c3d4-d5f6-7777-8888-9999aaaabbbbcccc
```

<!-- cache-key: cdktf-0.20.8 input-becb283a0bf3a66968d3b5835eb6a5ff193e490c6ee5cb1289a6144e0f32490f -->