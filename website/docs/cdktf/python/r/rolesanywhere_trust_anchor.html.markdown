---
subcategory: "Roles Anywhere"
layout: "aws"
page_title: "AWS: aws_rolesanywhere_trust_anchor"
description: |-
  Provides a Roles Anywhere Trust Anchor resource
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_rolesanywhere_trust_anchor

Terraform resource for managing a Roles Anywhere Trust Anchor.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.acmpca_certificate import AcmpcaCertificate
from imports.aws.acmpca_certificate_authority import AcmpcaCertificateAuthority
from imports.aws.acmpca_certificate_authority_certificate import AcmpcaCertificateAuthorityCertificate
from imports.aws.data_aws_partition import DataAwsPartition
from imports.aws.rolesanywhere_trust_anchor import RolesanywhereTrustAnchor
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = AcmpcaCertificateAuthority(self, "example",
            certificate_authority_configuration=AcmpcaCertificateAuthorityCertificateAuthorityConfiguration(
                key_algorithm="RSA_4096",
                signing_algorithm="SHA512WITHRSA",
                subject=AcmpcaCertificateAuthorityCertificateAuthorityConfigurationSubject(
                    common_name="example.com"
                )
            ),
            permanent_deletion_time_in_days=7,
            type="ROOT"
        )
        aws_acmpca_certificate_authority_certificate_example =
        AcmpcaCertificateAuthorityCertificate(self, "example_1",
            certificate=Token.as_string(aws_acmpca_certificate_example.certificate),
            certificate_authority_arn=example.arn,
            certificate_chain=Token.as_string(aws_acmpca_certificate_example.certificate_chain)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_acmpca_certificate_authority_certificate_example.override_logical_id("example")
        RolesanywhereTrustAnchor(self, "test",
            depends_on=[aws_acmpca_certificate_authority_certificate_example],
            name="example",
            source=RolesanywhereTrustAnchorSource(
                source_data=RolesanywhereTrustAnchorSourceSourceData(
                    acm_pca_arn=example.arn
                ),
                source_type="AWS_ACM_PCA"
            )
        )
        current = DataAwsPartition(self, "current")
        aws_acmpca_certificate_test = AcmpcaCertificate(self, "test_4",
            certificate_authority_arn=example.arn,
            certificate_signing_request=example.certificate_signing_request,
            signing_algorithm="SHA512WITHRSA",
            template_arn="arn:${" + current.partition + "}:acm-pca:::template/RootCACertificate/V1",
            validity=AcmpcaCertificateValidity(
                type="YEARS",
                value=Token.as_string(1)
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_acmpca_certificate_test.override_logical_id("test")
```

## Argument Reference

This resource supports the following arguments:

* `enabled` - (Optional) Whether or not the Trust Anchor should be enabled.
* `name` - (Required) The name of the Trust Anchor.
* `source` - (Required) The source of trust, documented below
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### Nested Blocks

#### `source`

* `source_data` - (Required) The data denoting the source of trust, documented below
* `source_type` - (Required) The type of the source of trust. Must be either `AWS_ACM_PCA` or `CERTIFICATE_BUNDLE`.

#### `source_data`

* `acm_pca_arn` - (Optional, required when `source_type` is `AWS_ACM_PCA`) The ARN of an ACM Private Certificate Authority.
* `x509_certificate_data` - (Optional, required when `source_type` is `CERTIFICATE_BUNDLE`)

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of the Trust Anchor
* `id` - The Trust Anchor ID.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_rolesanywhere_trust_anchor` using its `id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.rolesanywhere_trust_anchor import RolesanywhereTrustAnchor
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        RolesanywhereTrustAnchor.generate_config_for_import(self, "example", "92b2fbbb-984d-41a3-a765-e3cbdb69ebb1")
```

Using `terraform import`, import `aws_rolesanywhere_trust_anchor` using its `id`. For example:

```console
% terraform import aws_rolesanywhere_trust_anchor.example 92b2fbbb-984d-41a3-a765-e3cbdb69ebb1
```

<!-- cache-key: cdktf-0.20.8 input-89d8cc3f15e0773b9fe438113eea5ac563a091c5c19d681db300ed32379fb0a0 -->