---
subcategory: "Oracle Database@AWS"
layout: "AWS: aws_odb_network_peering_connection"
page_title: "AWS: aws_odb_network_peering_connection"
description: |-
  Terraform  resource for managing oracle database network peering resource in AWS.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_odb_network_peering_connection

Terraform  resource for managing oracle database network peering resource in AWS.

You can find out more about Oracle Database@AWS from [User Guide](https://docs.aws.amazon.com/odb/latest/UserGuide/what-is-odb.html).

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.odb_network_peering_connection import OdbNetworkPeeringConnection
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        OdbNetworkPeeringConnection(self, "example",
            display_name="example",
            odb_network_id="my-odb-network-id",
            peer_network_id="my-vpc-id",
            tags={
                "env": "dev"
            }
        )
```

## Argument Reference

The following arguments are required:

* `odb_network_id` - (Required) The unique identifier of the ODB network that initiates the peering connection. A sample ID is `odbpcx-abcdefgh12345678`. Changing this will force Terraform to create a new resource.
* `peer_network_id` - (Required) The unique identifier of the ODB peering connection. Changing this will force Terraform to create a new resource.
* `display_name` - (Required) Display name of the ODB network peering connection. Changing this will force Terraform to create a new resource.

The following arguments are optional:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `status` - Status of the ODB network peering connection.
* `status_reason` - The reason for the current status of the ODB peering connection.
* `odb_network_arn` - ARN of the ODB network peering connection.
* `peer_network_arn` - ARN of the peer network peering connection.
* `odb_peering_connection_type` - Type of the ODB peering connection.
* `created_at` - Created time of the ODB network peering connection.
* `percent_progress` - Progress of the ODB network peering connection.
* `tags_all` - A map of tags assigned to the resource, including inherited tags.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `24h`)
* `update` - (Default `24h`)
* `delete` - (Default `24h`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import OpenSearch Ingestion Pipeline using the `id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.odb_network_peering_connection import OdbNetworkPeeringConnection
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        OdbNetworkPeeringConnection.generate_config_for_import(self, "example", "example")
```

Using `terraform import`, import odb network peering using the `id`. For example:

```console
% terraform import aws_odb_network_peering_connection.example example
```

<!-- cache-key: cdktf-0.20.8 input-3b7970f60b910748b7e14667dba675a121b4f263f9418d4d4ce6d09bb25d200e -->