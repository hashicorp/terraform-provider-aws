---
subcategory: "SNS (Simple Notification)"
layout: "aws"
page_title: "AWS: aws_sns_topic_policy"
description: |-
  Provides an SNS topic policy resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_sns_topic_policy

Provides an SNS topic policy resource

~> **NOTE:** If a Principal is specified as just an AWS account ID rather than an ARN, AWS silently converts it to the ARN for the root user, causing future terraform plans to differ. To avoid this problem, just specify the full ARN, e.g., `arn:aws:iam::123456789012:root`

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.sns_topic import SnsTopic
from imports.aws.sns_topic_policy import SnsTopicPolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test = SnsTopic(self, "test",
            name="my-topic-with-policy"
        )
        sns_topic_policy = DataAwsIamPolicyDocument(self, "sns_topic_policy",
            policy_id="__default_policy_ID",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["SNS:Subscribe", "SNS:SetTopicAttributes", "SNS:RemovePermission", "SNS:Receive", "SNS:Publish", "SNS:ListSubscriptionsByTopic", "SNS:GetTopicAttributes", "SNS:DeleteTopic", "SNS:AddPermission"
                ],
                condition=[DataAwsIamPolicyDocumentStatementCondition(
                    test="StringEquals",
                    values=[account_id.string_value],
                    variable="AWS:SourceOwner"
                )
                ],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["*"],
                    type="AWS"
                )
                ],
                resources=[test.arn],
                sid="__default_statement_ID"
            )
            ]
        )
        SnsTopicPolicy(self, "default",
            arn=test.arn,
            policy=Token.as_string(sns_topic_policy.json)
        )
```

## Argument Reference

This resource supports the following arguments:

* `arn` - (Required) The ARN of the SNS topic
* `policy` - (Required) The fully-formed AWS policy as JSON. For more information about building AWS IAM policy documents with Terraform, see the [AWS IAM Policy Document Guide](https://learn.hashicorp.com/terraform/aws/iam-policy).

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `owner` - The AWS Account ID of the SNS topic owner

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import SNS Topic Policy using the topic ARN. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.sns_topic_policy import SnsTopicPolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        SnsTopicPolicy.generate_config_for_import(self, "userUpdates", "arn:aws:sns:us-west-2:123456789012:my-topic")
```

Using `terraform import`, import SNS Topic Policy using the topic ARN. For example:

```console
% terraform import aws_sns_topic_policy.user_updates arn:aws:sns:us-west-2:123456789012:my-topic
```

<!-- cache-key: cdktf-0.20.8 input-a37f2a58a641b8a016d885ba8eb79be8ca2b4870d24077cc7aa1f9dce6cb0e5f -->