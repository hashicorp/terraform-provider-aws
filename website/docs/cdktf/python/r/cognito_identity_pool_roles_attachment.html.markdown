---
subcategory: "Cognito Identity"
layout: "aws"
page_title: "AWS: aws_cognito_identity_pool_roles_attachment"
description: |-
  Provides an AWS Cognito Identity Pool Roles Attachment.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cognito_identity_pool_roles_attachment

Provides an AWS Cognito Identity Pool Roles Attachment.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cognito_identity_pool import CognitoIdentityPool
from imports.aws.cognito_identity_pool_roles_attachment import CognitoIdentityPoolRolesAttachment
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy import IamRolePolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        main = CognitoIdentityPool(self, "main",
            allow_unauthenticated_identities=False,
            identity_pool_name="identity pool",
            supported_login_providers={
                "graph.facebook.com": "7346241598935555"
            }
        )
        authenticated = DataAwsIamPolicyDocument(self, "authenticated",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRoleWithWebIdentity"],
                condition=[DataAwsIamPolicyDocumentStatementCondition(
                    test="StringEquals",
                    values=[main.id],
                    variable="cognito-identity.amazonaws.com:aud"
                ), DataAwsIamPolicyDocumentStatementCondition(
                    test="ForAnyValue:StringLike",
                    values=["authenticated"],
                    variable="cognito-identity.amazonaws.com:amr"
                )
                ],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["cognito-identity.amazonaws.com"],
                    type="Federated"
                )
                ]
            )
            ]
        )
        authenticated_role_policy = DataAwsIamPolicyDocument(self, "authenticated_role_policy",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["mobileanalytics:PutEvents", "cognito-sync:*", "cognito-identity:*"
                ],
                effect="Allow",
                resources=["*"]
            )
            ]
        )
        aws_iam_role_authenticated = IamRole(self, "authenticated_3",
            assume_role_policy=Token.as_string(authenticated.json),
            name="cognito_authenticated"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_authenticated.override_logical_id("authenticated")
        aws_iam_role_policy_authenticated = IamRolePolicy(self, "authenticated_4",
            name="authenticated_policy",
            policy=Token.as_string(authenticated_role_policy.json),
            role=Token.as_string(aws_iam_role_authenticated.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_authenticated.override_logical_id("authenticated")
        aws_cognito_identity_pool_roles_attachment_main =
        CognitoIdentityPoolRolesAttachment(self, "main_5",
            identity_pool_id=main.id,
            role_mapping=[CognitoIdentityPoolRolesAttachmentRoleMapping(
                ambiguous_role_resolution="AuthenticatedRole",
                identity_provider="graph.facebook.com",
                mapping_rule=[CognitoIdentityPoolRolesAttachmentRoleMappingMappingRule(
                    claim="isAdmin",
                    match_type="Equals",
                    role_arn=Token.as_string(aws_iam_role_authenticated.arn),
                    value="paid"
                )
                ],
                type="Rules"
            )
            ],
            roles={
                "authenticated": Token.as_string(aws_iam_role_authenticated.arn)
            }
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cognito_identity_pool_roles_attachment_main.override_logical_id("main")
```

## Argument Reference

The Cognito Identity Pool Roles Attachment argument layout is a structure composed of several sub-resources - these resources are laid out below.

* `identity_pool_id` (Required) - An identity pool ID in the format `REGION_GUID`.
* `role_mapping` (Optional) - A List of [Role Mapping](#role-mappings).
* `roles` (Required) - The map of roles associated with this pool. For a given role, the key will be either "authenticated" or "unauthenticated" and the value will be the Role ARN.

#### Role Mappings

* `identity_provider` (Required) - A string identifying the identity provider, for example, "graph.facebook.com" or "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id". Depends on `cognito_identity_providers` set on `aws_cognito_identity_pool` resource or a `aws_cognito_identity_provider` resource.
* `ambiguous_role_resolution` (Optional) - Specifies the action to be taken if either no rules match the claim value for the Rules type, or there is no cognito:preferred_role claim and there are multiple cognito:roles matches for the Token type. `Required` if you specify Token or Rules as the Type.
* `mapping_rule` (Optional) - The [Rules Configuration](#rules-configuration) to be used for mapping users to roles. You can specify up to 25 rules per identity provider. Rules are evaluated in order. The first one to match specifies the role.
* `type` (Required) - The role mapping type.

#### Rules Configuration

* `claim` (Required) - The claim name that must be present in the token, for example, "isAdmin" or "paid".
* `match_type` (Required) - The match condition that specifies how closely the claim value in the IdP token must match Value.
* `role_arn` (Required) - The role ARN.
* `value` (Required) - A brief string that the claim must match, for example, "paid" or "yes".

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The identity pool ID.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Cognito Identity Pool Roles Attachment using the Identity Pool ID. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cognito_identity_pool_roles_attachment import CognitoIdentityPoolRolesAttachment
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        CognitoIdentityPoolRolesAttachment.generate_config_for_import(self, "example", "us-west-2:b64805ad-cb56-40ba-9ffc-f5d8207e6d42")
```

Using `terraform import`, import Cognito Identity Pool Roles Attachment using the Identity Pool ID. For example:

```console
% terraform import aws_cognito_identity_pool_roles_attachment.example us-west-2:b64805ad-cb56-40ba-9ffc-f5d8207e6d42
```

<!-- cache-key: cdktf-0.20.8 input-74c6734db32e60310fb7b71d1ef7e57fff3eb57e2065822e5e2535d8f77e6646 -->