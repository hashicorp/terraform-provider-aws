---
subcategory: "WAF Classic Regional"
layout: "aws"
page_title: "AWS: aws_wafregional_web_acl_association"
description: |-
  Manages an association with WAF Regional Web ACL
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_wafregional_web_acl_association

Manages an association with WAF Regional Web ACL.

-> **Note:** An Application Load Balancer can only be associated with one WAF Regional WebACL.

## Example Usage

### Application Load Balancer Association

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.alb import Alb
from imports.aws.data_aws_availability_zones import DataAwsAvailabilityZones
from imports.aws.subnet import Subnet
from imports.aws.vpc import Vpc
from imports.aws.wafregional_ipset import WafregionalIpset
from imports.aws.wafregional_rule import WafregionalRule
from imports.aws.wafregional_web_acl import WafregionalWebAcl
from imports.aws.wafregional_web_acl_association import WafregionalWebAclAssociation
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        foo = Vpc(self, "foo",
            cidr_block="10.1.0.0/16"
        )
        ipset = WafregionalIpset(self, "ipset",
            ip_set_descriptor=[WafregionalIpsetIpSetDescriptor(
                type="IPV4",
                value="192.0.7.0/24"
            )
            ],
            name="tfIPSet"
        )
        aws_wafregional_rule_foo = WafregionalRule(self, "foo_2",
            metric_name="tfWAFRule",
            name="tfWAFRule",
            predicate=[WafregionalRulePredicate(
                data_id=ipset.id,
                negated=False,
                type="IPMatch"
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_wafregional_rule_foo.override_logical_id("foo")
        aws_wafregional_web_acl_foo = WafregionalWebAcl(self, "foo_3",
            default_action=WafregionalWebAclDefaultAction(
                type="ALLOW"
            ),
            metric_name="foo",
            name="foo",
            rule=[WafregionalWebAclRule(
                action=WafregionalWebAclRuleAction(
                    type="BLOCK"
                ),
                priority=1,
                rule_id=Token.as_string(aws_wafregional_rule_foo.id)
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_wafregional_web_acl_foo.override_logical_id("foo")
        available = DataAwsAvailabilityZones(self, "available")
        bar = Subnet(self, "bar",
            availability_zone=Token.as_string(Fn.lookup_nested(available.names, ["1"])),
            cidr_block="10.1.2.0/24",
            vpc_id=foo.id
        )
        aws_subnet_foo = Subnet(self, "foo_6",
            availability_zone=Token.as_string(Fn.lookup_nested(available.names, ["0"])),
            cidr_block="10.1.1.0/24",
            vpc_id=foo.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_subnet_foo.override_logical_id("foo")
        aws_alb_foo = Alb(self, "foo_7",
            internal=True,
            subnets=[Token.as_string(aws_subnet_foo.id), bar.id]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_alb_foo.override_logical_id("foo")
        aws_wafregional_web_acl_association_foo = WafregionalWebAclAssociation(self, "foo_8",
            resource_arn=Token.as_string(aws_alb_foo.arn),
            web_acl_id=Token.as_string(aws_wafregional_web_acl_foo.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_wafregional_web_acl_association_foo.override_logical_id("foo")
```

### API Gateway Association

```terraform
resource "aws_wafregional_ipset" "ipset" {
  name = "tfIPSet"

  ip_set_descriptor {
    type  = "IPV4"
    value = "192.0.7.0/24"
  }
}

resource "aws_wafregional_rule" "foo" {
  name        = "tfWAFRule"
  metric_name = "tfWAFRule"

  predicate {
    data_id = aws_wafregional_ipset.ipset.id
    negated = false
    type    = "IPMatch"
  }
}

resource "aws_wafregional_web_acl" "foo" {
  name        = "foo"
  metric_name = "foo"

  default_action {
    type = "ALLOW"
  }

  rule {
    action {
      type = "BLOCK"
    }

    priority = 1
    rule_id  = aws_wafregional_rule.foo.id
  }
}

resource "aws_api_gateway_rest_api" "example" {
  body = jsonencode({
    openapi = "3.0.1"
    info = {
      title   = "example"
      version = "1.0"
    }
    paths = {
      "/path1" = {
        get = {
          x-amazon-apigateway-integration = {
            httpMethod           = "GET"
            payloadFormatVersion = "1.0"
            type                 = "HTTP_PROXY"
            uri                  = "https://ip-ranges.amazonaws.com/ip-ranges.json"
          }
        }
      }
    }
  })

  name = "example"
}

resource "aws_api_gateway_deployment" "example" {
  rest_api_id = aws_api_gateway_rest_api.example.id

  triggers = {
    redeployment = sha1(jsonencode(aws_api_gateway_rest_api.example.body))
  }

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_api_gateway_stage" "example" {
  deployment_id = aws_api_gateway_deployment.example.id
  rest_api_id   = aws_api_gateway_rest_api.example.id
  stage_name    = "example"
}

resource "aws_wafregional_web_acl_association" "association" {
  resource_arn = aws_api_gateway_stage.example.arn
  web_acl_id   = aws_wafregional_web_acl.foo.id
}
```

## Argument Reference

This resource supports the following arguments:

* `web_acl_id` - (Required) The ID of the WAF Regional WebACL to create an association.
* `resource_arn` - (Required) ARN of the resource to associate with. For example, an Application Load Balancer or API Gateway Stage.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the association

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import WAF Regional Web ACL Association using their `web_acl_id:resource_arn`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.wafregional_web_acl_association import WafregionalWebAclAssociation
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        WafregionalWebAclAssociation.generate_config_for_import(self, "foo", "web_acl_id:resource_arn")
```

Using `terraform import`, import WAF Regional Web ACL Association using their `web_acl_id:resource_arn`. For example:

```console
% terraform import aws_wafregional_web_acl_association.foo web_acl_id:resource_arn
```

<!-- cache-key: cdktf-0.20.1 input-748840947a2a9cc391b869f3bab0bc54cc54f0f6f837b68a1e0e5c25081b9174 -->