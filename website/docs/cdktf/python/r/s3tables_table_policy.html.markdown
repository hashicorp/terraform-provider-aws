---
subcategory: "S3 Tables"
layout: "aws"
page_title: "AWS: aws_s3tables_table_policy"
description: |-
  Terraform resource for managing an Amazon S3 Tables Table Policy.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_s3tables_table_policy

Terraform resource for managing an Amazon S3 Tables Table Policy.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.s3_tables_namespace import S3TablesNamespace
from imports.aws.s3_tables_table import S3TablesTable
from imports.aws.s3_tables_table_bucket import S3TablesTableBucket
from imports.aws.s3_tables_table_policy import S3TablesTablePolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = S3TablesTableBucket(self, "example",
            name="example-bucket"
        )
        data_aws_iam_policy_document_example = DataAwsIamPolicyDocument(self, "example_1",
            statement=[DataAwsIamPolicyDocumentStatement()]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_iam_policy_document_example.override_logical_id("example")
        aws_s3_tables_namespace_example = S3TablesNamespace(self, "example_2",
            namespace=["example-namespace"],
            table_bucket_arn=example.arn
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_tables_namespace_example.override_logical_id("example")
        aws_s3_tables_table_example = S3TablesTable(self, "example_3",
            format="ICEBERG",
            name="example-table",
            namespace=aws_s3_tables_namespace_example,
            table_bucket_arn=Token.as_string(aws_s3_tables_namespace_example.table_bucket_arn)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_tables_table_example.override_logical_id("example")
        aws_s3_tables_table_policy_example = S3TablesTablePolicy(self, "example_4",
            name=test.name,
            namespace=test.namespace,
            resource_policy=Token.as_string(data_aws_iam_policy_document_example.json),
            table_bucket_arn=test.table_bucket_arn
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_tables_table_policy_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `resource_policy` - (Required) Amazon Web Services resource-based policy document in JSON format.
* `name` - (Required, Forces new resource) Name of the table.
  Must be between 1 and 255 characters in length.
  Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
* `namespace` - (Required, Forces new resource) Name of the namespace for this table.
  Must be between 1 and 255 characters in length.
  Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
* `table_bucket_arn` - (Required, Forces new resource) ARN referencing the Table Bucket that contains this Namespace.

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import S3 Tables Table Policy using the `table_bucket_arn`, the value of `namespace`, and the value of `name`, separated by a semicolon (`;`). For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.s3_tables_table_policy import S3TablesTablePolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        S3TablesTablePolicy.generate_config_for_import(self, "example", "arn:aws:s3tables:us-west-2:123456789012:bucket/example-bucket;example-namespace;example-table")
```

Using `terraform import`, import S3 Tables Table Policy using the `table_bucket_arn`, the value of `namespace`, and the value of `name`, separated by a semicolon (`;`). For example:

```console
% terraform import aws_s3tables_table_policy.example 'arn:aws:s3tables:us-west-2:123456789012:bucket/example-bucket;example-namespace;example-table'
```

<!-- cache-key: cdktf-0.20.8 input-8a785b6f52d0ea0fd3ea7c49dc448a77c5d6b604d2d3279af70874b10ee9c3bd -->