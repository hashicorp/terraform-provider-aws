---
subcategory: "AppSync"
layout: "aws"
page_title: "AWS: aws_appsync_resolver"
description: |-
  Provides an AppSync Resolver.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_appsync_resolver

Provides an AppSync Resolver.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.appsync_datasource import AppsyncDatasource
from imports.aws.appsync_graphql_api import AppsyncGraphqlApi
from imports.aws.appsync_resolver import AppsyncResolver
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        test = AppsyncGraphqlApi(self, "test",
            authentication_type="API_KEY",
            name="tf-example",
            schema="type Mutation {\n\tputPost(id: ID!, title: String!): Post\n}\n\ntype Post {\n\tid: ID!\n\ttitle: String!\n}\n\ntype Query {\n\tsinglePost(id: ID!): Post\n}\n\nschema {\n\tquery: Query\n\tmutation: Mutation\n}\n\n"
        )
        AppsyncResolver(self, "Mutation_pipelineTest",
            api_id=test.id,
            field="pipelineTest",
            kind="PIPELINE",
            pipeline_config=AppsyncResolverPipelineConfig(
                functions=[test1.function_id, test2.function_id, test3.function_id]
            ),
            request_template="{}",
            response_template="$util.toJson($ctx.result)",
            type="Mutation"
        )
        aws_appsync_datasource_test = AppsyncDatasource(self, "test_2",
            api_id=test.id,
            http_config=AppsyncDatasourceHttpConfig(
                endpoint="http://example.com"
            ),
            name="tf_example",
            type="HTTP"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_appsync_datasource_test.override_logical_id("test")
        aws_appsync_resolver_test = AppsyncResolver(self, "test_3",
            api_id=test.id,
            caching_config=AppsyncResolverCachingConfig(
                caching_keys=["$context.identity.sub", "$context.arguments.id"],
                ttl=60
            ),
            data_source=Token.as_string(aws_appsync_datasource_test.name),
            field="singlePost",
            request_template="{\n    \"version\": \"2018-05-29\",\n    \"method\": \"GET\",\n    \"resourcePath\": \"/\",\n    \"params\":{\n        \"headers\": $utils.http.copyheaders($ctx.request.headers)\n    }\n}\n\n",
            response_template="#if($ctx.result.statusCode == 200)\n    $ctx.result.body\n#else\n    $utils.appendError($ctx.result.body, $ctx.result.statusCode)\n#end\n\n",
            type="Query"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_appsync_resolver_test.override_logical_id("test")
```

## Example Usage JS

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.appsync_resolver import AppsyncResolver
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        AppsyncResolver(self, "example",
            api_id=test.id,
            code=Token.as_string(Fn.file("some-code-dir")),
            field="pipelineTest",
            kind="PIPELINE",
            pipeline_config=AppsyncResolverPipelineConfig(
                functions=[Token.as_string(aws_appsync_function_test.function_id)]
            ),
            runtime=AppsyncResolverRuntime(
                name="APPSYNC_JS",
                runtime_version="1.0.0"
            ),
            type="Query"
        )
```

## Argument Reference

This resource supports the following arguments:

* `api_id` - (Required) API ID for the GraphQL API.
* `code` - (Optional) The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
* `type` - (Required) Type name from the schema defined in the GraphQL API.
* `field` - (Required) Field name from the schema defined in the GraphQL API.
* `request_template` - (Optional) Request mapping template for UNIT resolver or 'before mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
* `response_template` - (Optional) Response mapping template for UNIT resolver or 'after mapping template' for PIPELINE resolver. Required for non-Lambda resolvers.
* `data_source` - (Optional) Data source name.
* `max_batch_size` - (Optional) Maximum batching size for a resolver. Valid values are between `0` and `2000`.
* `kind`  - (Optional) Resolver type. Valid values are `UNIT` and `PIPELINE`.
* `sync_config` - (Optional) Describes a Sync configuration for a resolver. See [Sync Config](#sync-config).
* `pipeline_config` - (Optional) The caching configuration for the resolver. See [Pipeline Config](#pipeline-config).
* `caching_config` - (Optional) The Caching Config. See [Caching Config](#caching-config).
* `runtime` - (Optional) Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See [Runtime](#runtime).

### Caching Config

* `caching_keys` - (Optional) The caching keys for a resolver that has caching activated. Valid values are entries from the $context.arguments, $context.source, and $context.identity maps.
* `ttl` - (Optional) The TTL in seconds for a resolver that has caching activated. Valid values are between `1` and `3600` seconds.

### Pipeline Config

* `functions` - (Optional) A list of Function objects.

### Sync Config

* `conflict_detection` - (Optional) Conflict Detection strategy to use. Valid values are `NONE` and `VERSION`.
* `conflict_handler` - (Optional) Conflict Resolution strategy to perform in the event of a conflict. Valid values are `NONE`, `OPTIMISTIC_CONCURRENCY`, `AUTOMERGE`, and `LAMBDA`.
* `lambda_conflict_handler_config` - (Optional) Lambda Conflict Handler Config when configuring `LAMBDA` as the Conflict Handler. See [Lambda Conflict Handler Config](#lambda-conflict-handler-config).

#### Lambda Conflict Handler Config

* `lambda_conflict_handler_arn` - (Optional) ARN for the Lambda function to use as the Conflict Handler.

### Runtime

* `name` - (Optional) The name of the runtime to use. Currently, the only allowed value is `APPSYNC_JS`.
* `runtime_version` - (Optional) The version of the runtime to use. Currently, the only allowed version is `1.0.0`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_appsync_resolver` using the `api_id`, a hyphen, `type`, a hypen and `field`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.appsync_resolver import AppsyncResolver
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        AppsyncResolver.generate_config_for_import(self, "example", "abcdef123456-exampleType-exampleField")
```

Using `terraform import`, import `aws_appsync_resolver` using the `api_id`, a hyphen, `type`, a hypen and `field`. For example:

```console
% terraform import aws_appsync_resolver.example abcdef123456-exampleType-exampleField
```

<!-- cache-key: cdktf-0.20.8 input-c52e7e65e799b6104f6c311a148eb1f52433b7035e764e94e6ade1153f6ef6e4 -->