---
subcategory: "EC2 Image Builder"
layout: "aws"
page_title: "AWS: aws_imagebuilder_infrastructure_configuration"
description: |-
  Manages an Image Builder Infrastructure Configuration
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_imagebuilder_infrastructure_configuration

Manages an Image Builder Infrastructure Configuration.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.imagebuilder_infrastructure_configuration import ImagebuilderInfrastructureConfiguration
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        ImagebuilderInfrastructureConfiguration(self, "example",
            description="example description",
            instance_profile_name=Token.as_string(aws_iam_instance_profile_example.name),
            instance_types=["t2.nano", "t3.micro"],
            key_pair=Token.as_string(aws_key_pair_example.key_name),
            logging=ImagebuilderInfrastructureConfigurationLogging(
                s3_logs=ImagebuilderInfrastructureConfigurationLoggingS3Logs(
                    s3_bucket_name=Token.as_string(aws_s3_bucket_example.bucket),
                    s3_key_prefix="logs"
                )
            ),
            name="example",
            security_group_ids=[Token.as_string(aws_security_group_example.id)],
            sns_topic_arn=Token.as_string(aws_sns_topic_example.arn),
            subnet_id=main.id,
            tags={
                "foo": "bar"
            },
            terminate_instance_on_failure=True
        )
```

## Argument Reference

The following arguments are required:

* `instance_profile_name` - (Required) Name of IAM Instance Profile.
* `name` - (Required) Name for the configuration.

The following arguments are optional:

* `description` - (Optional) Description for the configuration.
* `instance_metadata_options` - (Optional) Configuration block with instance metadata options for the HTTP requests that pipeline builds use to launch EC2 build and test instances. Detailed below.
* `instance_types` - (Optional) Set of EC2 Instance Types.
* `key_pair` - (Optional) Name of EC2 Key Pair.
* `logging` - (Optional) Configuration block with logging settings. Detailed below.
* `resource_tags` - (Optional) Key-value map of resource tags to assign to infrastructure created by the configuration.
* `security_group_ids` - (Optional) Set of EC2 Security Group identifiers.
* `sns_topic_arn` - (Optional) Amazon Resource Name (ARN) of SNS Topic.
* `subnet_id` - (Optional) EC2 Subnet identifier. Also requires `security_group_ids` argument.
* `tags` - (Optional) Key-value map of resource tags to assign to the configuration. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `terminate_instance_on_failure` - (Optional) Enable if the instance should be terminated when the pipeline fails. Defaults to `false`.

### instance_metadata_options

The following arguments are optional:

* `http_put_response_hop_limit` - The number of hops that an instance can traverse to reach its destonation.
* `http_tokens` - Whether a signed token is required for instance metadata retrieval requests. Valid values: `required`, `optional`.

### logging

The following arguments are required:

* `s3_logs` - (Required) Configuration block with S3 logging settings. Detailed below.

### s3_logs

The following arguments are required:

* `s3_bucket_name` - (Required) Name of the S3 Bucket.

The following arguments are optional:

* `s3_key_prefix` - (Optional) Prefix to use for S3 logs. Defaults to `/`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Amazon Resource Name (ARN) of the configuration.
* `arn` - Amazon Resource Name (ARN) of the configuration.
* `date_created` - Date when the configuration was created.
* `date_updated` - Date when the configuration was updated.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_imagebuilder_infrastructure_configuration` using the Amazon Resource Name (ARN). For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.imagebuilder_infrastructure_configuration import ImagebuilderInfrastructureConfiguration
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        ImagebuilderInfrastructureConfiguration.generate_config_for_import(self, "example", "arn:aws:imagebuilder:us-east-1:123456789012:infrastructure-configuration/example")
```

Using `terraform import`, import `aws_imagebuilder_infrastructure_configuration` using the Amazon Resource Name (ARN). For example:

```console
% terraform import aws_imagebuilder_infrastructure_configuration.example arn:aws:imagebuilder:us-east-1:123456789012:infrastructure-configuration/example
```

<!-- cache-key: cdktf-0.20.8 input-92ce8940a00b3a6132cb84f5e5797b0c5f3f5546af00335b30802f922e76f2ef -->