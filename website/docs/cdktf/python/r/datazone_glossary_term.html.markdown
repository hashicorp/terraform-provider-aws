---
subcategory: "DataZone"
layout: "aws"
page_title: "AWS: aws_datazone_glossary_term"
description: |-
  Terraform resource for managing an AWS DataZone Glossary Term.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_datazone_glossary_term

Terraform resource for managing an AWS DataZone Glossary Term.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.datazone_domain import DatazoneDomain
from imports.aws.datazone_glossary import DatazoneGlossary
from imports.aws.datazone_glossary_term import DatazoneGlossaryTerm
from imports.aws.datazone_project import DatazoneProject
from imports.aws.iam_role import IamRole
from imports.aws.security_group import SecurityGroup
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = IamRole(self, "example",
            assume_role_policy=Token.as_string(
                Fn.jsonencode({
                    "Statement": [{
                        "Action": ["sts:AssumeRole", "sts:TagSession"],
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "datazone.amazonaws.com"
                        }
                    }, {
                        "Action": ["sts:AssumeRole", "sts:TagSession"],
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "cloudformation.amazonaws.com"
                        }
                    }
                    ],
                    "Version": "2012-10-17"
                })),
            inline_policy=[IamRoleInlinePolicy(
                name="example",
                policy=Token.as_string(
                    Fn.jsonencode({
                        "Statement": [{
                            "Action": ["datazone:*", "ram:*", "sso:*", "kms:*"],
                            "Effect": "Allow",
                            "Resource": "*"
                        }
                        ],
                        "Version": "2012-10-17"
                    }))
            )
            ],
            name="example"
        )
        aws_security_group_example = SecurityGroup(self, "example_1",
            name="example_name"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_security_group_example.override_logical_id("example")
        aws_datazone_domain_example = DatazoneDomain(self, "example_2",
            domain_execution_role=example.arn,
            name="example_name"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_datazone_domain_example.override_logical_id("example")
        aws_datazone_project_example = DatazoneProject(self, "example_3",
            domain_identifier=Token.as_string(aws_datazone_domain_example.id),
            glossary_terms=["2N8w6XJCwZf"],
            name="example",
            skip_deletion_check=True
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_datazone_project_example.override_logical_id("example")
        aws_datazone_glossary_example = DatazoneGlossary(self, "example_4",
            description="description",
            domain_identifier=Token.as_string(aws_datazone_project_example.domain_identifier),
            name="example",
            owning_project_identifier=Token.as_string(aws_datazone_project_example.id),
            status="ENABLED"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_datazone_glossary_example.override_logical_id("example")
        aws_datazone_glossary_term_example = DatazoneGlossaryTerm(self, "example_5",
            domain_identifier=Token.as_string(aws_datazone_domain_example.id),
            glossary_identifier=Token.as_string(aws_datazone_glossary_example.id),
            name="example",
            status="ENABLED"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_datazone_glossary_term_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `domain_identifier` - (Required) Identifier of domain.
* `glossary_identifier` - (Required) Identifier of glossary.
* `name` - (Required) Name of glossary term.

The following arguments are optional:

* `long_description` - (Optional) Long description of entry.
* `short_description` - (Optional) Short description of entry.
* `status` - (Optional) If glossary term is ENABLED or DISABLED.
* `term_relations` - (Optional) Object classifying the term relations through the following attributes:
    * `classifies` - (Optional) String array that calssifies the term relations.
    * `is_as` - (Optional) The isA property of the term relations.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Id of the glossary term.
* `created_at` - Time of glossary term creation.
* `created_by` - Creator of glossary term.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30s`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import DataZone Glossary Term using a comma-delimited string combining the `domain_identifier`, `id`, and the `glossary_identifier`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.datazone_glossary_term import DatazoneGlossaryTerm
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DatazoneGlossaryTerm.generate_config_for_import(self, "example", "domain_identifier,id,glossary_identifier")
```

Using `terraform import`, import DataZone Glossary Term using a comma-delimited string combining the `domain_identifier`, `id`, and the `glossary_identifier`. For example:

```console
% terraform import aws_datazone_glossary_term.example domain-id,glossary-term-id,glossary-id
```

<!-- cache-key: cdktf-0.20.1 input-c37c106222a8610b78c71f287b61a97f73ed65e0fcf11dc9955f4ce2e9b9506c -->