---
subcategory: "Directory Service"
layout: "aws"
page_title: "AWS: aws_directory_service_trust"
description: |-
  Manages a trust relationship between two Active Directory Directories.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_directory_service_trust

Manages a trust relationship between two Active Directory Directories.

The directories may either be both AWS Managed Microsoft AD domains or an AWS Managed Microsoft AD domain and a self-managed Active Directory Domain.

The Trust relationship must be configured on both sides of the relationship.
If a Trust has only been created on one side, it will be in the state `VerifyFailed`.
Once the second Trust is created, the first will update to the correct state.

## Example Usage

### Two-Way Trust

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.directory_service_directory import DirectoryServiceDirectory
from imports.aws.directory_service_trust import DirectoryServiceTrust
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, password, password1):
        super().__init__(scope, name)
        one = DirectoryServiceDirectory(self, "one",
            name="one.example.com",
            type="MicrosoftAD",
            password=password
        )
        two = DirectoryServiceDirectory(self, "two",
            name="two.example.com",
            type="MicrosoftAD",
            password=password1
        )
        aws_directory_service_trust_one = DirectoryServiceTrust(self, "one_2",
            conditional_forwarder_ip_addrs=two.dns_ip_addresses,
            directory_id=one.id,
            remote_domain_name=two.name,
            trust_direction="Two-Way",
            trust_password="Some0therPassword"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_directory_service_trust_one.override_logical_id("one")
        aws_directory_service_trust_two = DirectoryServiceTrust(self, "two_3",
            conditional_forwarder_ip_addrs=one.dns_ip_addresses,
            directory_id=two.id,
            remote_domain_name=one.name,
            trust_direction="Two-Way",
            trust_password="Some0therPassword"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_directory_service_trust_two.override_logical_id("two")
```

### One-Way Trust

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.directory_service_directory import DirectoryServiceDirectory
from imports.aws.directory_service_trust import DirectoryServiceTrust
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, password, password1):
        super().__init__(scope, name)
        one = DirectoryServiceDirectory(self, "one",
            name="one.example.com",
            type="MicrosoftAD",
            password=password
        )
        two = DirectoryServiceDirectory(self, "two",
            name="two.example.com",
            type="MicrosoftAD",
            password=password1
        )
        aws_directory_service_trust_one = DirectoryServiceTrust(self, "one_2",
            conditional_forwarder_ip_addrs=two.dns_ip_addresses,
            directory_id=one.id,
            remote_domain_name=two.name,
            trust_direction="One-Way: Incoming",
            trust_password="Some0therPassword"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_directory_service_trust_one.override_logical_id("one")
        aws_directory_service_trust_two = DirectoryServiceTrust(self, "two_3",
            conditional_forwarder_ip_addrs=one.dns_ip_addresses,
            directory_id=two.id,
            remote_domain_name=one.name,
            trust_direction="One-Way: Outgoing",
            trust_password="Some0therPassword"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_directory_service_trust_two.override_logical_id("two")
```

## Argument Reference

This resource supports the following arguments:

* `conditional_forwarder_ip_addrs` - (Optional) Set of IPv4 addresses for the DNS server associated with the remote Directory.
  Can contain between 1 and 4 values.
* `delete_associated_conditional_forwarder` - (Optional) Whether to delete the conditional forwarder when deleting the Trust relationship.
* `directory_id` - (Required) ID of the Directory.
* `remote_domain_name` - (Required) Fully qualified domain name of the remote Directory.
* `selective_auth` - (Optional) Whether to enable selective authentication.
  Valid values are `Enabled` and `Disabled`.
  Default value is `Disabled`.
* `trust_direction` - (Required) The direction of the Trust relationship.
  Valid values are `One-Way: Outgoing`, `One-Way: Incoming`, and `Two-Way`.
* `trust_password` - (Required) Password for the Trust.
  Does not need to match the passwords for either Directory.
  Can contain upper- and lower-case letters, numbers, and punctuation characters.
  May be up to 128 characters long.
* `trust_type` - (Optional) Type of the Trust relationship.
  Valid values are `Forest` and `External`.
  Default value is `Forest`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `created_date_time` - Date and time when the Trust was created.
* `id` - The Trust identifier.
* `last_updated_date_time` - Date and time when the Trust was last updated.
* `state_last_updated_date_time` - Date and time when the Trust state in `trust_state` was last updated.
* `trust_state` - State of the Trust relationship.
  One of `Created`, `VerifyFailed`,`Verified`, `UpdateFailed`,`Updated`,`Deleted`, or `Failed`.
* `trust_state_reason` - Reason for the Trust state set in `trust_state`.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import the Trust relationship using the directory ID and remote domain name, separated by a `/`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.directory_service_trust import DirectoryServiceTrust
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DirectoryServiceTrust.generate_config_for_import(self, "example", "d-926724cf57/directory.example.com")
```

Using `terraform import`, import the Trust relationship using the directory ID and remote domain name, separated by a `/`. For example:

```console
% terraform import aws_directory_service_trust.example d-926724cf57/directory.example.com
```

<!-- cache-key: cdktf-0.20.8 input-66aa03e6601035df60798595ea8787d00d4683201307e38bda224131aa72224e -->