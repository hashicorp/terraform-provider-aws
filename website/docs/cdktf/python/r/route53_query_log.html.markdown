---
subcategory: "Route 53"
layout: "aws"
page_title: "AWS: aws_route53_query_log"
description: |-
  Provides a Route53 query logging configuration resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_route53_query_log

Provides a Route53 query logging configuration resource.

~> **NOTE:** There are restrictions on the configuration of query logging. Notably,
the CloudWatch log group must be in the `us-east-1` region,
a permissive CloudWatch log resource policy must be in place, and
the Route53 hosted zone must be public.
See [Configuring Logging for DNS Queries](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logs.html?console_help=true#query-logs-configuring) for additional details.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_log_group import CloudwatchLogGroup
from imports.aws.cloudwatch_log_resource_policy import CloudwatchLogResourcePolicy
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.provider import AwsProvider
from imports.aws.route53_query_log import Route53QueryLog
from imports.aws.route53_zone import Route53Zone
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        us_east1 = AwsProvider(self, "aws",
            alias="us-east-1",
            region="us-east-1"
        )
        example_com = Route53Zone(self, "example_com",
            name="example.com"
        )
        route53_query_logging_policy = DataAwsIamPolicyDocument(self, "route53-query-logging-policy",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["logs:CreateLogStream", "logs:PutLogEvents"],
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["route53.amazonaws.com"],
                    type="Service"
                )
                ],
                resources=["arn:aws:logs:*:*:log-group:/aws/route53/*"]
            )
            ]
        )
        aws_route53_example_com = CloudwatchLogGroup(self, "aws_route53_example_com",
            name="/aws/route53/${" + example_com.name + "}",
            provider=us_east1,
            retention_in_days=30
        )
        aws_cloudwatch_log_resource_policy_route53_query_logging_policy =
        CloudwatchLogResourcePolicy(self, "route53-query-logging-policy_4",
            policy_document=Token.as_string(route53_query_logging_policy.json),
            policy_name="route53-query-logging-policy",
            provider=us_east1
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cloudwatch_log_resource_policy_route53_query_logging_policy.override_logical_id("route53-query-logging-policy")
        aws_route53_query_log_example_com = Route53QueryLog(self, "example_com_5",
            cloudwatch_log_group_arn=aws_route53_example_com.arn,
            depends_on=[aws_cloudwatch_log_resource_policy_route53_query_logging_policy],
            zone_id=example_com.zone_id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_route53_query_log_example_com.override_logical_id("example_com")
```

## Argument Reference

This resource supports the following arguments:

* `cloudwatch_log_group_arn` - (Required) CloudWatch log group ARN to send query logs.
* `zone_id` - (Required) Route53 hosted zone ID to enable query logs.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The Amazon Resource Name (ARN) of the Query Logging Config.
* `id` - The query logging configuration ID

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Route53 query logging configurations using their ID. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.route53_query_log import Route53QueryLog
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        Route53QueryLog.generate_config_for_import(self, "exampleCom", "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx")
```

Using `terraform import`, import Route53 query logging configurations using their ID. For example:

```console
% terraform import aws_route53_query_log.example_com xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
```

<!-- cache-key: cdktf-0.20.8 input-d9656f2fc1e20251769a3e2a3d8099ca32009721211d5ef362901f305ddc7e9e -->