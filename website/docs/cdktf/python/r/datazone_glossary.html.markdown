---
subcategory: "DataZone"
layout: "aws"
page_title: "AWS: aws_datazone_glossary"
description: |-
  Terraform resource for managing an AWS DataZone Glossary.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_datazone_glossary

Terraform resource for managing an AWS DataZone Glossary.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.datazone_domain import DatazoneDomain
from imports.aws.datazone_glossary import DatazoneGlossary
from imports.aws.datazone_project import DatazoneProject
from imports.aws.iam_role import IamRole
from imports.aws.security_group import SecurityGroup
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        domain_execution_role = IamRole(self, "domain_execution_role",
            assume_role_policy=Token.as_string(
                Fn.jsonencode({
                    "Statement": [{
                        "Action": ["sts:AssumeRole", "sts:TagSession"],
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "datazone.amazonaws.com"
                        }
                    }, {
                        "Action": ["sts:AssumeRole", "sts:TagSession"],
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "cloudformation.amazonaws.com"
                        }
                    }
                    ],
                    "Version": "2012-10-17"
                })),
            inline_policy=[IamRoleInlinePolicy(
                name="example_name",
                policy=Token.as_string(
                    Fn.jsonencode({
                        "Statement": [{
                            "Action": ["datazone:*", "ram:*", "sso:*", "kms:*"],
                            "Effect": "Allow",
                            "Resource": "*"
                        }
                        ],
                        "Version": "2012-10-17"
                    }))
            )
            ],
            name="example_name"
        )
        SecurityGroup(self, "test",
            name="example_name"
        )
        aws_datazone_domain_test = DatazoneDomain(self, "test_2",
            domain_execution_role=domain_execution_role.arn,
            name="example_name"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_datazone_domain_test.override_logical_id("test")
        aws_datazone_project_test = DatazoneProject(self, "test_3",
            description="desc",
            domain_identifier=Token.as_string(aws_datazone_domain_test.id),
            glossary_terms=["2N8w6XJCwZf"],
            name="example_name",
            skip_deletion_check=True
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_datazone_project_test.override_logical_id("test")
        aws_datazone_glossary_test = DatazoneGlossary(self, "test_4",
            description="description",
            domain_identifier=Token.as_string(aws_datazone_project_test.domain_identifier),
            name="example_name",
            owning_project_identifier=Token.as_string(aws_datazone_project_test.id),
            status="DISABLED"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_datazone_glossary_test.override_logical_id("test")
```

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.datazone_glossary import DatazoneGlossary
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DatazoneGlossary(self, "test",
            description="description",
            domain_identifier=Token.as_string(aws_datazone_project_test.domain_identifier),
            name="example_name",
            owning_project_identifier=Token.as_string(aws_datazone_project_test.id),
            status="DISABLED"
        )
```

## Argument Reference

The following arguments are required:

* `name` - (Required) Name of the glossary. Must have length between 1 and 256.
* `owning_project_identifier` - (Required) ID of the project that owns business glossary. Must follow regex of ^[a-zA-Z0-9_-]{1,36}$.

The following arguments are optional:

* `description` - (Optional) Description of the glossary. Must have a length between 0 and 4096.
* `status` - (Optional) Status of business glossary. Valid values are DISABLED and ENABLED.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Id of the Glossary.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import DataZone Glossary using the `example_id_arg`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.datazone_glossary import DatazoneGlossary
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DatazoneGlossary.generate_config_for_import(self, "example", "domain-id,glossary-id,owning_project_identifier")
```

Using `terraform import`, import DataZone Glossary using the import Datazone Glossary using a comma-delimited string combining the domain id, glossary id, and the id of the project it's under. For example:

```console
% terraform import aws_datazone_glossary.example domain-id,glossary-id,owning-project-identifier
```

<!-- cache-key: cdktf-0.20.1 input-7110119e257d0e97a08a2b70761e9109f2ab35a3b62d81c390d315bf3054bd0f -->