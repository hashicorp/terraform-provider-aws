---
subcategory: "Transit Gateway"
layout: "aws"
page_title: "AWS: aws_ec2_transit_gateway_multicast_domain"
description: |-
  Manages an EC2 Transit Gateway Multicast Domain
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ec2_transit_gateway_multicast_domain

Manages an EC2 Transit Gateway Multicast Domain.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_ami import DataAwsAmi
from imports.aws.data_aws_availability_zones import DataAwsAvailabilityZones
from imports.aws.ec2_transit_gateway import Ec2TransitGateway
from imports.aws.ec2_transit_gateway_multicast_domain import Ec2TransitGatewayMulticastDomain
from imports.aws.ec2_transit_gateway_multicast_domain_association import Ec2TransitGatewayMulticastDomainAssociation
from imports.aws.ec2_transit_gateway_multicast_group_member import Ec2TransitGatewayMulticastGroupMember
from imports.aws.ec2_transit_gateway_multicast_group_source import Ec2TransitGatewayMulticastGroupSource
from imports.aws.ec2_transit_gateway_vpc_attachment import Ec2TransitGatewayVpcAttachment
from imports.aws.instance import Instance
from imports.aws.subnet import Subnet
from imports.aws.vpc import Vpc
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        tgw = Ec2TransitGateway(self, "tgw",
            multicast_support="enable"
        )
        domain = Ec2TransitGatewayMulticastDomain(self, "domain",
            static_sources_support="enable",
            tags={
                "Name": "Transit_Gateway_Multicast_Domain_Example"
            },
            transit_gateway_id=tgw.id
        )
        vpc1 = Vpc(self, "vpc1",
            cidr_block="10.0.0.0/16"
        )
        vpc2 = Vpc(self, "vpc2",
            cidr_block="10.1.0.0/16"
        )
        amazon_linux = DataAwsAmi(self, "amazon_linux",
            filter=[DataAwsAmiFilter(
                name="name",
                values=["amzn-ami-hvm-*-x86_64-gp2"]
            ), DataAwsAmiFilter(
                name="owner-alias",
                values=["amazon"]
            )
            ],
            most_recent=True,
            owners=["amazon"]
        )
        available = DataAwsAvailabilityZones(self, "available",
            state="available"
        )
        subnet1 = Subnet(self, "subnet1",
            availability_zone=Token.as_string(Fn.lookup_nested(available.names, ["0"])),
            cidr_block="10.0.1.0/24",
            vpc_id=vpc1.id
        )
        subnet2 = Subnet(self, "subnet2",
            availability_zone=Token.as_string(Fn.lookup_nested(available.names, ["1"])),
            cidr_block="10.0.2.0/24",
            vpc_id=vpc1.id
        )
        subnet3 = Subnet(self, "subnet3",
            availability_zone=Token.as_string(Fn.lookup_nested(available.names, ["0"])),
            cidr_block="10.1.1.0/24",
            vpc_id=vpc2.id
        )
        attachment1 = Ec2TransitGatewayVpcAttachment(self, "attachment1",
            subnet_ids=[subnet1.id, subnet2.id],
            transit_gateway_id=tgw.id,
            vpc_id=vpc1.id
        )
        attachment2 = Ec2TransitGatewayVpcAttachment(self, "attachment2",
            subnet_ids=[subnet3.id],
            transit_gateway_id=tgw.id,
            vpc_id=vpc2.id
        )
        instance1 = Instance(self, "instance1",
            ami=Token.as_string(amazon_linux.id),
            instance_type="t2.micro",
            subnet_id=subnet1.id
        )
        instance2 = Instance(self, "instance2",
            ami=Token.as_string(amazon_linux.id),
            instance_type="t2.micro",
            subnet_id=subnet2.id
        )
        instance3 = Instance(self, "instance3",
            ami=Token.as_string(amazon_linux.id),
            instance_type="t2.micro",
            subnet_id=subnet3.id
        )
        association1 = Ec2TransitGatewayMulticastDomainAssociation(self, "association1",
            subnet_id=subnet1.id,
            transit_gateway_attachment_id=attachment1.id,
            transit_gateway_multicast_domain_id=domain.id
        )
        Ec2TransitGatewayMulticastDomainAssociation(self, "association2",
            subnet_id=subnet2.id,
            transit_gateway_attachment_id=attachment2.id,
            transit_gateway_multicast_domain_id=domain.id
        )
        association3 = Ec2TransitGatewayMulticastDomainAssociation(self, "association3",
            subnet_id=subnet3.id,
            transit_gateway_attachment_id=attachment2.id,
            transit_gateway_multicast_domain_id=domain.id
        )
        Ec2TransitGatewayMulticastGroupMember(self, "member1",
            group_ip_address="224.0.0.1",
            network_interface_id=instance1.primary_network_interface_id,
            transit_gateway_multicast_domain_id=association1.transit_gateway_multicast_domain_id
        )
        Ec2TransitGatewayMulticastGroupMember(self, "member2",
            group_ip_address="224.0.0.1",
            network_interface_id=instance2.primary_network_interface_id,
            transit_gateway_multicast_domain_id=association1.transit_gateway_multicast_domain_id
        )
        Ec2TransitGatewayMulticastGroupSource(self, "source",
            group_ip_address="224.0.0.1",
            network_interface_id=instance3.primary_network_interface_id,
            transit_gateway_multicast_domain_id=association3.transit_gateway_multicast_domain_id
        )
```

## Argument Reference

This resource supports the following arguments:

* `transit_gateway_id` - (Required) EC2 Transit Gateway identifier. The EC2 Transit Gateway must have `multicast_support` enabled.
* `auto_accept_shared_associations` - (Optional) Whether to automatically accept cross-account subnet associations that are associated with the EC2 Transit Gateway Multicast Domain. Valid values: `disable`, `enable`. Default value: `disable`.
* `igmpv2_support` - (Optional) Whether to enable Internet Group Management Protocol (IGMP) version 2 for the EC2 Transit Gateway Multicast Domain. Valid values: `disable`, `enable`. Default value: `disable`.
* `static_sources_support` - (Optional) Whether to enable support for statically configuring multicast group sources for the EC2 Transit Gateway Multicast Domain. Valid values: `disable`, `enable`. Default value: `disable`.
* `tags` - (Optional) Key-value tags for the EC2 Transit Gateway Multicast Domain. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - EC2 Transit Gateway Multicast Domain identifier.
* `arn` - EC2 Transit Gateway Multicast Domain Amazon Resource Name (ARN).
* `owner_id` - Identifier of the AWS account that owns the EC2 Transit Gateway Multicast Domain.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `10m`)
- `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_ec2_transit_gateway_multicast_domain` using the EC2 Transit Gateway Multicast Domain identifier. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.ec2_transit_gateway_multicast_domain import Ec2TransitGatewayMulticastDomain
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        Ec2TransitGatewayMulticastDomain.generate_config_for_import(self, "example", "tgw-mcast-domain-12345")
```

Using `terraform import`, import `aws_ec2_transit_gateway_multicast_domain` using the EC2 Transit Gateway Multicast Domain identifier. For example:

```console
% terraform import aws_ec2_transit_gateway_multicast_domain.example tgw-mcast-domain-12345
```

<!-- cache-key: cdktf-0.20.8 input-8493dfab227c918d9b3e4e208962affb97781a33e5cd93321c066ab973c7252b -->