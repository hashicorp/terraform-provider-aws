---
subcategory: "RDS (Relational Database)"
layout: "aws"
page_title: "AWS: aws_rds_export_task"
description: |-
  Terraform resource for managing an AWS RDS (Relational Database) Export Task.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_rds_export_task

Terraform resource for managing an AWS RDS (Relational Database) Export Task.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.rds_export_task import RdsExportTask
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        RdsExportTask(self, "example",
            export_task_identifier="example",
            iam_role_arn=Token.as_string(aws_iam_role_example.arn),
            kms_key_id=Token.as_string(aws_kms_key_example.arn),
            s3_bucket_name=Token.as_string(aws_s3_bucket_example.id),
            source_arn=Token.as_string(aws_db_snapshot_example.db_snapshot_arn)
        )
```

### Complete Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.db_instance import DbInstance
from imports.aws.db_snapshot import DbSnapshot
from imports.aws.iam_policy import IamPolicy
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy_attachment import IamRolePolicyAttachment
from imports.aws.kms_key import KmsKey
from imports.aws.rds_export_task import RdsExportTask
from imports.aws.s3_bucket import S3Bucket
from imports.aws.s3_bucket_acl import S3BucketAcl
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = DbInstance(self, "example",
            allocated_storage=10,
            db_name="test",
            engine="mysql",
            engine_version="5.7",
            identifier="example",
            instance_class="db.t3.micro",
            parameter_group_name="default.mysql5.7",
            password="foobarbaz",
            skip_final_snapshot=True,
            username="foo"
        )
        aws_db_snapshot_example = DbSnapshot(self, "example_1",
            db_instance_identifier=example.identifier,
            db_snapshot_identifier="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_db_snapshot_example.override_logical_id("example")
        aws_iam_role_example = IamRole(self, "example_2",
            assume_role_policy=Token.as_string(
                Fn.jsonencode({
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "export.rds.amazonaws.com"
                        },
                        "Sid": ""
                    }
                    ],
                    "Version": "2012-10-17"
                })),
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_example.override_logical_id("example")
        aws_kms_key_example = KmsKey(self, "example_3",
            deletion_window_in_days=10
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_kms_key_example.override_logical_id("example")
        aws_s3_bucket_example = S3Bucket(self, "example_4",
            bucket="example",
            force_destroy=True
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_example.override_logical_id("example")
        aws_s3_bucket_acl_example = S3BucketAcl(self, "example_5",
            acl="private",
            bucket=Token.as_string(aws_s3_bucket_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_acl_example.override_logical_id("example")
        data_aws_iam_policy_document_example = DataAwsIamPolicyDocument(self, "example_6",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["s3:ListAllMyBuckets"],
                resources=["*"]
            ), DataAwsIamPolicyDocumentStatement(
                actions=["s3:GetBucketLocation", "s3:ListBucket"],
                resources=[Token.as_string(aws_s3_bucket_example.arn)]
            ), DataAwsIamPolicyDocumentStatement(
                actions=["s3:GetObject", "s3:PutObject", "s3:DeleteObject"],
                resources=["${" + aws_s3_bucket_example.arn + "}/*"]
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_iam_policy_document_example.override_logical_id("example")
        aws_iam_policy_example = IamPolicy(self, "example_7",
            name="example",
            policy=Token.as_string(data_aws_iam_policy_document_example.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_policy_example.override_logical_id("example")
        aws_iam_role_policy_attachment_example = IamRolePolicyAttachment(self, "example_8",
            policy_arn=Token.as_string(aws_iam_policy_example.arn),
            role=Token.as_string(aws_iam_role_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_attachment_example.override_logical_id("example")
        aws_rds_export_task_example = RdsExportTask(self, "example_9",
            export_only=["database"],
            export_task_identifier="example",
            iam_role_arn=Token.as_string(aws_iam_role_example.arn),
            kms_key_id=Token.as_string(aws_kms_key_example.arn),
            s3_bucket_name=Token.as_string(aws_s3_bucket_example.id),
            s3_prefix="my_prefix/example",
            source_arn=Token.as_string(aws_db_snapshot_example.db_snapshot_arn)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_rds_export_task_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `export_task_identifier` - (Required) Unique identifier for the snapshot export task.
* `iam_role_arn` - (Required) ARN of the IAM role to use for writing to the Amazon S3 bucket.
* `kms_key_id` - (Required) ID of the Amazon Web Services KMS key to use to encrypt the snapshot.
* `s3_bucket_name` - (Required) Name of the Amazon S3 bucket to export the snapshot to.
* `source_arn` - (Required) Amazon Resource Name (ARN) of the snapshot to export.

The following arguments are optional:

* `export_only` - (Optional) Data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are documented in the [AWS StartExportTask API documentation](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_StartExportTask.html#API_StartExportTask_RequestParameters).
* `s3_prefix` - (Optional) Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `failure_cause` - Reason the export failed, if it failed.
* `id` - Unique identifier for the snapshot export task (same value as `export_task_identifier`).
* `percent_progress` - Progress of the snapshot export task as a percentage.
* `snapshot_time` - Time that the snapshot was created.
* `source_type` - Type of source for the export.
* `status` - Status of the export task.
* `task_end_time` - Time that the snapshot export task completed.
* `task_start_time` - Time that the snapshot export task started.
* `warning_message` - Warning about the snapshot export task, if any.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import a RDS (Relational Database) Export Task using the `export_task_identifier`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.rds_export_task import RdsExportTask
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        RdsExportTask.generate_config_for_import(self, "example", "example")
```

Using `terraform import`, import a RDS (Relational Database) Export Task using the `export_task_identifier`. For example:

```console
% terraform import aws_rds_export_task.example example
```

<!-- cache-key: cdktf-0.20.8 input-85f7fbc39b14c8bc604a74daa69a5c20b76d661a4af3a134d17931198e7cd32a -->