---
subcategory: "WorkSpaces"
layout: "aws"
page_title: "AWS: aws_workspaces_workspace"
description: |-
  Provides a workspaces in AWS Workspaces Service.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_workspaces_workspace

Provides a workspace in [AWS Workspaces](https://docs.aws.amazon.com/workspaces/latest/adminguide/amazon-workspaces.html) Service

~> **NOTE:** AWS WorkSpaces service requires [`workspaces_DefaultRole`](https://docs.aws.amazon.com/workspaces/latest/adminguide/workspaces-access-control.html#create-default-role) IAM role to operate normally.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_kms_key import DataAwsKmsKey
from imports.aws.data_aws_workspaces_bundle import DataAwsWorkspacesBundle
from imports.aws.workspaces_workspace import WorkspacesWorkspace
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        workspaces = DataAwsKmsKey(self, "workspaces",
            key_id="alias/aws/workspaces"
        )
        value_windows10 = DataAwsWorkspacesBundle(self, "value_windows_10",
            bundle_id="wsb-bh8rsxt14"
        )
        WorkspacesWorkspace(self, "example",
            bundle_id=Token.as_string(value_windows10.id),
            directory_id=Token.as_string(aws_workspaces_directory_example.id),
            root_volume_encryption_enabled=True,
            tags={
                "Department": "IT"
            },
            user_name="john.doe",
            user_volume_encryption_enabled=True,
            volume_encryption_key=Token.as_string(workspaces.arn),
            workspace_properties=WorkspacesWorkspaceWorkspaceProperties(
                compute_type_name="VALUE",
                root_volume_size_gib=80,
                running_mode="AUTO_STOP",
                running_mode_auto_stop_timeout_in_minutes=60,
                user_volume_size_gib=10
            )
        )
```

## Argument Reference

This resource supports the following arguments:

* `directory_id` - (Required) The ID of the directory for the WorkSpace.
* `bundle_id` - (Required) The ID of the bundle for the WorkSpace.
* `user_name` – (Required) The user name of the user for the WorkSpace. This user name must exist in the directory for the WorkSpace.
* `root_volume_encryption_enabled` - (Optional) Indicates whether the data stored on the root volume is encrypted.
* `user_volume_encryption_enabled` – (Optional) Indicates whether the data stored on the user volume is encrypted.
* `volume_encryption_key` – (Optional) The ARN of a symmetric AWS KMS customer master key (CMK) used to encrypt data stored on your WorkSpace. Amazon WorkSpaces does not support asymmetric CMKs.
* `tags` - (Optional) The tags for the WorkSpace. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `workspace_properties` – (Optional) The WorkSpace properties.

`workspace_properties` supports the following:

* `compute_type_name` – (Optional) The compute type. For more information, see [Amazon WorkSpaces Bundles](http://aws.amazon.com/workspaces/details/#Amazon_WorkSpaces_Bundles). Valid values are `VALUE`, `STANDARD`, `PERFORMANCE`, `POWER`, `GRAPHICS`, `POWERPRO`, `GRAPHICSPRO`, `GRAPHICS_G4DN`, and `GRAPHICSPRO_G4DN`.
* `root_volume_size_gib` – (Optional) The size of the root volume.
* `running_mode` – (Optional) The running mode. For more information, see [Manage the WorkSpace Running Mode](https://docs.aws.amazon.com/workspaces/latest/adminguide/running-mode.html). Valid values are `AUTO_STOP` and `ALWAYS_ON`.
* `running_mode_auto_stop_timeout_in_minutes` – (Optional) The time after a user logs off when WorkSpaces are automatically stopped. Configured in 60-minute intervals.
* `user_volume_size_gib` – (Optional) The size of the user storage.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The workspaces ID.
* `ip_address` - The IP address of the WorkSpace.
* `computer_name` - The name of the WorkSpace, as seen by the operating system.
* `state` - The operational state of the WorkSpace.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `30m`)
- `update` - (Default `10m`)
- `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Workspaces using their ID. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.workspaces_workspace import WorkspacesWorkspace
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        WorkspacesWorkspace.generate_config_for_import(self, "example", "ws-9z9zmbkhv")
```

Using `terraform import`, import Workspaces using their ID. For example:

```console
% terraform import aws_workspaces_workspace.example ws-9z9zmbkhv
```

<!-- cache-key: cdktf-0.20.8 input-5d3b14ab533dbbfb49b079db145d3d7cd623cbd43efb18f5f11b0a2debdc876c -->