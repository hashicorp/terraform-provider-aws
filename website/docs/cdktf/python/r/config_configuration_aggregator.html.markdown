---
subcategory: "Config"
layout: "aws"
page_title: "AWS: aws_config_configuration_aggregator"
description: |-
  Manages an AWS Config Configuration Aggregator.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_config_configuration_aggregator

Manages an AWS Config Configuration Aggregator

## Example Usage

### Account Based Aggregation

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.config_configuration_aggregator import ConfigConfigurationAggregator
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        ConfigConfigurationAggregator(self, "account",
            account_aggregation_source=ConfigConfigurationAggregatorAccountAggregationSource(
                account_ids=["123456789012"],
                regions=["us-west-2"]
            ),
            name="example"
        )
```

### Organization Based Aggregation

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.config_configuration_aggregator import ConfigConfigurationAggregator
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy_attachment import IamRolePolicyAttachment
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        assume_role = DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["config.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        organization = IamRole(self, "organization",
            assume_role_policy=Token.as_string(assume_role.json),
            name="example"
        )
        aws_iam_role_policy_attachment_organization = IamRolePolicyAttachment(self, "organization_2",
            policy_arn="arn:aws:iam::aws:policy/service-role/AWSConfigRoleForOrganizations",
            role=organization.name
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_attachment_organization.override_logical_id("organization")
        aws_config_configuration_aggregator_organization =
        ConfigConfigurationAggregator(self, "organization_3",
            depends_on=[aws_iam_role_policy_attachment_organization],
            name="example",
            organization_aggregation_source=ConfigConfigurationAggregatorOrganizationAggregationSource(
                all_regions=True,
                role_arn=organization.arn
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_config_configuration_aggregator_organization.override_logical_id("organization")
```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The name of the configuration aggregator.
* `account_aggregation_source` - (Optional) The account(s) to aggregate config data from as documented below.
* `organization_aggregation_source` - (Optional) The organization to aggregate config data from as documented below.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

Either `account_aggregation_source` or `organization_aggregation_source` must be specified.

### `account_aggregation_source`

* `account_ids` - (Required) List of 12-digit account IDs of the account(s) being aggregated.
* `all_regions` - (Optional) If true, aggregate existing AWS Config regions and future regions.
* `regions` - (Optional) List of source regions being aggregated.

Either `regions` or `all_regions` (as true) must be specified.

### `organization_aggregation_source`

~> **Note:** If your source type is an organization, you must be signed in to the master account and all features must be enabled in your organization. AWS Config calls EnableAwsServiceAccess API to enable integration between AWS Config and AWS Organizations.

* `all_regions` - (Optional) If true, aggregate existing AWS Config regions and future regions.
* `regions` - (Optional) List of source regions being aggregated.
* `role_arn` - (Required) ARN of the IAM role used to retrieve AWS Organization details associated with the aggregator account.

Either `regions` or `all_regions` (as true) must be specified.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The ARN of the aggregator
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Configuration Aggregators using the name. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.config_configuration_aggregator import ConfigConfigurationAggregator
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        ConfigConfigurationAggregator.generate_config_for_import(self, "example", "foo")
```

Using `terraform import`, import Configuration Aggregators using the name. For example:

```console
% terraform import aws_config_configuration_aggregator.example foo
```

<!-- cache-key: cdktf-0.20.8 input-bd7368dc645892d0916218e47f2c57cc5932d586ba0ba2eedc64e2d5eb4009f8 -->