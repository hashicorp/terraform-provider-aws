---
subcategory: "WorkSpaces Web"
layout: "aws"
page_title: "AWS: aws_workspacesweb_network_settings_association"
description: |-
  Terraform resource for managing an AWS WorkSpaces Web Network Settings Association.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_workspacesweb_network_settings_association

Terraform resource for managing an AWS WorkSpaces Web Network Settings Association.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformCount, Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_availability_zones import DataAwsAvailabilityZones
from imports.aws.security_group import SecurityGroup
from imports.aws.subnet import Subnet
from imports.aws.vpc import Vpc
from imports.aws.workspacesweb_network_settings import WorkspaceswebNetworkSettings
from imports.aws.workspacesweb_network_settings_association import WorkspaceswebNetworkSettingsAssociation
from imports.aws.workspacesweb_portal import WorkspaceswebPortal
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = Vpc(self, "example",
            cidr_block="10.0.0.0/16",
            tags={
                "Name": "example"
            }
        )
        aws_workspacesweb_portal_example = WorkspaceswebPortal(self, "example_1",
            display_name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_workspacesweb_portal_example.override_logical_id("example")
        available = DataAwsAvailabilityZones(self, "available",
            filter=[DataAwsAvailabilityZonesFilter(
                name="opt-in-status",
                values=["opt-in-not-required"]
            )
            ],
            state="available"
        )
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        example_count = TerraformCount.of(Token.as_number("2"))
        aws_security_group_example = SecurityGroup(self, "example_3",
            name="example-${" + example_count.index + "}",
            tags={
                "Name": "example"
            },
            vpc_id=example.id,
            count=example_count
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_security_group_example.override_logical_id("example")
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        aws_subnet_example_count = TerraformCount.of(Token.as_number("2"))
        aws_subnet_example = Subnet(self, "example_4",
            availability_zone=Token.as_string(
                Fn.lookup_nested(available.names, [aws_subnet_example_count.index])),
            cidr_block=Token.as_string(
                Fn.cidrsubnet(example.cidr_block, 8,
                    Token.as_number(aws_subnet_example_count.index))),
            tags={
                "Name": "example"
            },
            vpc_id=example.id,
            count=aws_subnet_example_count
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_subnet_example.override_logical_id("example")
        aws_workspacesweb_network_settings_example =
        WorkspaceswebNetworkSettings(self, "example_5",
            security_group_ids=[
                Token.as_string(Fn.lookup_nested(aws_security_group_example, ["0", "id"])),
                Token.as_string(Fn.lookup_nested(aws_security_group_example, ["1", "id"]))
            ],
            subnet_ids=[
                Token.as_string(Fn.lookup_nested(aws_subnet_example, ["0", "id"])),
                Token.as_string(Fn.lookup_nested(aws_subnet_example, ["1", "id"]))
            ],
            vpc_id=example.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_workspacesweb_network_settings_example.override_logical_id("example")
        aws_workspacesweb_network_settings_association_example =
        WorkspaceswebNetworkSettingsAssociation(self, "example_6",
            network_settings_arn=Token.as_string(aws_workspacesweb_network_settings_example.network_settings_arn),
            portal_arn=Token.as_string(aws_workspacesweb_portal_example.portal_arn)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_workspacesweb_network_settings_association_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `network_settings_arn` - (Required) ARN of the network settings to associate with the portal. Forces replacement if changed.
* `portal_arn` - (Required) ARN of the portal to associate with the network settings. Forces replacement if changed.

The following arguments are optional:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import WorkSpaces Web Network Settings Association using the `network_settings_arn,portal_arn`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.workspacesweb_network_settings_association import WorkspaceswebNetworkSettingsAssociation
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        WorkspaceswebNetworkSettingsAssociation.generate_config_for_import(self, "example", "arn:aws:workspaces-web:us-west-2:123456789012:networkSettings/network_settings-id-12345678,arn:aws:workspaces-web:us-west-2:123456789012:portal/portal-id-12345678")
```

<!-- cache-key: cdktf-0.20.8 input-c0abc142dc2706acec5f8522d7989a8ec41867d6a5aafb61e2bb0d352c75bd97 -->