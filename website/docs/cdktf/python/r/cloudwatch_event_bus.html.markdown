---
subcategory: "EventBridge"
layout: "aws"
page_title: "AWS: aws_cloudwatch_event_bus"
description: |-
  Provides an EventBridge event bus resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cloudwatch_event_bus

Provides an EventBridge event bus resource.

~> **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.

## Example Usage

### Basic Usages

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_event_bus import CloudwatchEventBus
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        CloudwatchEventBus(self, "messenger",
            name="chat-messages"
        )
```

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_event_bus import CloudwatchEventBus
from imports.aws.data_aws_cloudwatch_event_source import DataAwsCloudwatchEventSource
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        examplepartner = DataAwsCloudwatchEventSource(self, "examplepartner",
            name_prefix="aws.partner/examplepartner.com"
        )
        aws_cloudwatch_event_bus_examplepartner = CloudwatchEventBus(self, "examplepartner_1",
            description="Event bus for example partner events",
            event_source_name=Token.as_string(examplepartner.name),
            name=Token.as_string(examplepartner.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cloudwatch_event_bus_examplepartner.override_logical_id("examplepartner")
```

### Logging to CloudWatch Logs, S3, and Data Firehose

See [Configuring logs for Amazon EventBridge event buses](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-bus-logs.html) for more details.

#### Required Resources

* EventBridge Event Bus with `log_config` configured
* Log destinations:

    * CloudWatch Logs log group
    * S3 bucket
    * Data Firehose delivery stream

* Resource-based policy or tagging for the service-linked role:

    * CloudWatch Logs log group - `aws_cloudwatch_log_resource_policy` to allow `delivery.logs.amazonaws.com` to put logs into the log group
    * S3 bucket - `aws_s3_bucket_policy` to allow `delivery.logs.amazonaws.com` to put logs into the bucket
    * Data Firehose delivery stream - tagging the delivery stream with `LogDeliveryEnabled = "true"` to allow the service-linked role `AWSServiceRoleForLogDelivery` to deliver logs

* CloudWatch Logs Delivery:

    * `aws_cloudwatch_log_delivery_source` for each log type (INFO, ERROR, TRACE)
    * `aws_cloudwatch_log_delivery_destination` for the log destination (S3 bucket, CloudWatch Logs log group, or Data Firehose delivery stream)
    * `aws_cloudwatch_log_delivery` to link each log typeâ€™s delivery source to the delivery destination

#### Example Usage

The following example demonstrates how to set up logging for an EventBridge event bus to all three destinations: CloudWatch Logs, S3, and Data Firehose.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_event_bus import CloudwatchEventBus
from imports.aws.cloudwatch_log_delivery import CloudwatchLogDelivery
from imports.aws.cloudwatch_log_delivery_destination import CloudwatchLogDeliveryDestination
from imports.aws.cloudwatch_log_delivery_source import CloudwatchLogDeliverySource
from imports.aws.cloudwatch_log_group import CloudwatchLogGroup
from imports.aws.cloudwatch_log_resource_policy import CloudwatchLogResourcePolicy
from imports.aws.data_aws_caller_identity import DataAwsCallerIdentity
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.kinesis_firehose_delivery_stream import KinesisFirehoseDeliveryStream
from imports.aws.s3_bucket import S3Bucket
from imports.aws.s3_bucket_policy import S3BucketPolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, destination, name):
        super().__init__(scope, name)
        example = CloudwatchEventBus(self, "example",
            log_config=CloudwatchEventBusLogConfig(
                include_detail="FULL",
                level="TRACE"
            ),
            name="example-event-bus"
        )
        error_logs = CloudwatchLogDeliverySource(self, "error_logs",
            log_type="ERROR_LOGS",
            name="EventBusSource-${" + example.name + "}-ERROR_LOGS",
            resource_arn=example.arn
        )
        info_logs = CloudwatchLogDeliverySource(self, "info_logs",
            log_type="INFO_LOGS",
            name="EventBusSource-${" + example.name + "}-INFO_LOGS",
            resource_arn=example.arn
        )
        trace_logs = CloudwatchLogDeliverySource(self, "trace_logs",
            log_type="TRACE_LOGS",
            name="EventBusSource-${" + example.name + "}-TRACE_LOGS",
            resource_arn=example.arn
        )
        event_bus_logs = CloudwatchLogGroup(self, "event_bus_logs",
            name="/aws/vendedlogs/events/event-bus/${" + example.name + "}"
        )
        cloudfront_logs = KinesisFirehoseDeliveryStream(self, "cloudfront_logs",
            tags={
                "LogDeliveryEnabled": "true"
            },
            destination=destination,
            name=name
        )
        aws_s3_bucket_example = S3Bucket(self, "example_6",
            bucket="example-event-bus-logs"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_example.override_logical_id("example")
        current = DataAwsCallerIdentity(self, "current")
        bucket = DataAwsIamPolicyDocument(self, "bucket",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["s3:PutObject"],
                condition=[DataAwsIamPolicyDocumentStatementCondition(
                    test="StringEquals",
                    values=["bucket-owner-full-control"],
                    variable="s3:x-amz-acl"
                ), DataAwsIamPolicyDocumentStatementCondition(
                    test="StringEquals",
                    values=[Token.as_string(current.account_id)],
                    variable="aws:SourceAccount"
                ), DataAwsIamPolicyDocumentStatementCondition(
                    test="ArnLike",
                    values=[info_logs.arn, error_logs.arn, trace_logs.arn],
                    variable="aws:SourceArn"
                )
                ],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["delivery.logs.amazonaws.com"],
                    type="Service"
                )
                ],
                resources=["${" + aws_s3_bucket_example.arn + "}/AWSLogs/${" + current.account_id + "}/EventBusLogs/*"
                ]
            )
            ]
        )
        cwlogs = DataAwsIamPolicyDocument(self, "cwlogs",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["logs:CreateLogStream", "logs:PutLogEvents"],
                condition=[DataAwsIamPolicyDocumentStatementCondition(
                    test="StringEquals",
                    values=[Token.as_string(current.account_id)],
                    variable="aws:SourceAccount"
                ), DataAwsIamPolicyDocumentStatementCondition(
                    test="ArnLike",
                    values=[info_logs.arn, error_logs.arn, trace_logs.arn],
                    variable="aws:SourceArn"
                )
                ],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["delivery.logs.amazonaws.com"],
                    type="Service"
                )
                ],
                resources=["${" + event_bus_logs.arn + "}:log-stream:*"]
            )
            ]
        )
        aws_cloudwatch_log_delivery_destination_cwlogs =
        CloudwatchLogDeliveryDestination(self, "cwlogs_10",
            delivery_destination_configuration=[CloudwatchLogDeliveryDestinationDeliveryDestinationConfiguration(
                destination_resource_arn=event_bus_logs.arn
            )
            ],
            name="EventsDeliveryDestination-${" + example.name + "}-CWLogs"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cloudwatch_log_delivery_destination_cwlogs.override_logical_id("cwlogs")
        firehose = CloudwatchLogDeliveryDestination(self, "firehose",
            delivery_destination_configuration=[CloudwatchLogDeliveryDestinationDeliveryDestinationConfiguration(
                destination_resource_arn=cloudfront_logs.arn
            )
            ],
            name="EventsDeliveryDestination-${" + example.name + "}-Firehose"
        )
        s3 = CloudwatchLogDeliveryDestination(self, "s3",
            delivery_destination_configuration=[CloudwatchLogDeliveryDestinationDeliveryDestinationConfiguration(
                destination_resource_arn=Token.as_string(aws_s3_bucket_example.arn)
            )
            ],
            name="EventsDeliveryDestination-${" + example.name + "}-S3"
        )
        aws_cloudwatch_log_resource_policy_example =
        CloudwatchLogResourcePolicy(self, "example_13",
            policy_document=Token.as_string(cwlogs.json),
            policy_name="AWSLogDeliveryWrite-${" + example.name + "}"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cloudwatch_log_resource_policy_example.override_logical_id("example")
        aws_s3_bucket_policy_example = S3BucketPolicy(self, "example_14",
            bucket=Token.as_string(aws_s3_bucket_example.bucket),
            policy=Token.as_string(bucket.json)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_bucket_policy_example.override_logical_id("example")
        s3_info_logs = CloudwatchLogDelivery(self, "s3_info_logs",
            delivery_destination_arn=s3.arn,
            delivery_source_name=info_logs.name
        )
        cwlogs_info_logs = CloudwatchLogDelivery(self, "cwlogs_info_logs",
            delivery_destination_arn=Token.as_string(aws_cloudwatch_log_delivery_destination_cwlogs.arn),
            delivery_source_name=info_logs.name,
            depends_on=[s3_info_logs]
        )
        firehose_info_logs = CloudwatchLogDelivery(self, "firehose_info_logs",
            delivery_destination_arn=firehose.arn,
            delivery_source_name=info_logs.name,
            depends_on=[cwlogs_info_logs]
        )
        s3_error_logs = CloudwatchLogDelivery(self, "s3_error_logs",
            delivery_destination_arn=s3.arn,
            delivery_source_name=error_logs.name,
            depends_on=[s3_info_logs]
        )
        s3_trace_logs = CloudwatchLogDelivery(self, "s3_trace_logs",
            delivery_destination_arn=s3.arn,
            delivery_source_name=trace_logs.name,
            depends_on=[s3_error_logs]
        )
        cwlogs_error_logs = CloudwatchLogDelivery(self, "cwlogs_error_logs",
            delivery_destination_arn=Token.as_string(aws_cloudwatch_log_delivery_destination_cwlogs.arn),
            delivery_source_name=error_logs.name,
            depends_on=[s3_error_logs, cwlogs_info_logs]
        )
        cwlogs_trace_logs = CloudwatchLogDelivery(self, "cwlogs_trace_logs",
            delivery_destination_arn=Token.as_string(aws_cloudwatch_log_delivery_destination_cwlogs.arn),
            delivery_source_name=trace_logs.name,
            depends_on=[s3_trace_logs, cwlogs_error_logs]
        )
        firehose_error_logs = CloudwatchLogDelivery(self, "firehose_error_logs",
            delivery_destination_arn=firehose.arn,
            delivery_source_name=error_logs.name,
            depends_on=[cwlogs_error_logs, firehose_info_logs]
        )
        CloudwatchLogDelivery(self, "firehose_trace_logs",
            delivery_destination_arn=firehose.arn,
            delivery_source_name=trace_logs.name,
            depends_on=[cwlogs_trace_logs, firehose_error_logs]
        )
```

## Argument Reference

This resource supports the following arguments:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
The following arguments are required:

* `name` - (Required) Name of the new event bus. The names of custom event buses can't contain the / character. To create a partner event bus, ensure that the `name` matches the `event_source_name`.

The following arguments are optional:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `dead_letter_config` - (Optional) Configuration details of the Amazon SQS queue for EventBridge to use as a dead-letter queue (DLQ). This block supports the following arguments:
    * `arn` - (Optional) The ARN of the SQS queue specified as the target for the dead-letter queue.
* `description` - (Optional) Event bus description.
* `event_source_name` - (Optional) Partner event source that the new event bus will be matched with. Must match `name`.
* `kms_key_identifier` - (Optional) Identifier of the AWS KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt events on this event bus. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN.
* `log_config` - (Optional) Block for logging configuration settings for the event bus.
    * `include_detail` - (Optional) Whether EventBridge include detailed event information in the records it generates. Valid values are `NONE` and `FULL`.
    * `level` - (Optional) Level of logging detail to include. Valid values are `OFF`, `ERROR`, `INFO`, and `TRACE`.
* `tags` - (Optional) Map of tags assigned to the resource. If configured with a provider [`default_tags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the event bus.
* `id` - Name of the event bus.
* `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import EventBridge event buses using the `name` (which can also be a partner event source name). For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cloudwatch_event_bus import CloudwatchEventBus
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        CloudwatchEventBus.generate_config_for_import(self, "messenger", "chat-messages")
```

Using `terraform import`, import EventBridge event buses using the name of the event bus (which can also be a partner event source name). For example:

```console
% terraform import aws_cloudwatch_event_bus.messenger chat-messages
```

<!-- cache-key: cdktf-0.20.8 input-6a14bd7d7f255755ef60997e6a45fb2c4123248750103e6ba40ec79eef1338ca -->