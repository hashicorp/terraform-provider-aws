---
subcategory: "IoT Core"
layout: "aws"
page_title: "AWS: aws_iot_ca_certificate"
description: |-
    Creates and manages an AWS IoT CA Certificate.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_iot_ca_certificate

Creates and manages an AWS IoT CA Certificate.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_iot_registration_code import DataAwsIotRegistrationCode
from imports.aws.iot_ca_certificate import IotCaCertificate
from imports.tls.cert_request import CertRequest
from imports.tls.locally_signed_cert import LocallySignedCert
from imports.tls.private_key import PrivateKey
from imports.tls.self_signed_cert import SelfSignedCert
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        # The following providers are missing schema information and might need manual adjustments to synthesize correctly: tls.
        #     For a more precise conversion please use the --provider flag in convert.
        ca = PrivateKey(self, "ca",
            algorithm="RSA"
        )
        verification = PrivateKey(self, "verification",
            algorithm="RSA"
        )
        tls_self_signed_cert_ca = SelfSignedCert(self, "ca_2",
            allowed_uses=["key_encipherment", "digital_signature", "server_auth"],
            is_ca_certificate=True,
            private_key_pem=ca.private_key_pem,
            subject=[{
                "common_name": "example.com",
                "organization": "ACME Examples, Inc"
            }
            ],
            validity_period_hours=12
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tls_self_signed_cert_ca.override_logical_id("ca")
        example = DataAwsIotRegistrationCode(self, "example")
        tls_cert_request_verification = CertRequest(self, "verification_4",
            private_key_pem=verification.private_key_pem,
            subject=[{
                "common_name": example.registration_code
            }
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tls_cert_request_verification.override_logical_id("verification")
        tls_locally_signed_cert_verification = LocallySignedCert(self, "verification_5",
            allowed_uses=["key_encipherment", "digital_signature", "server_auth"],
            ca_cert_pem=tls_self_signed_cert_ca.cert_pem,
            ca_private_key_pem=ca.private_key_pem,
            cert_request_pem=tls_cert_request_verification.cert_request_pem,
            validity_period_hours=12
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        tls_locally_signed_cert_verification.override_logical_id("verification")
        aws_iot_ca_certificate_example = IotCaCertificate(self, "example_6",
            active=True,
            allow_auto_registration=True,
            ca_certificate_pem=Token.as_string(tls_self_signed_cert_ca.cert_pem),
            verification_certificate_pem=Token.as_string(tls_locally_signed_cert_verification.cert_pem)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iot_ca_certificate_example.override_logical_id("example")
```

## Argument Reference

* `active` - (Required)  Boolean flag to indicate if the certificate should be active for device authentication.
* `allow_auto_registration` - (Required)  Boolean flag to indicate if the certificate should be active for device regisration.
* `ca_certificate_pem` - (Required)  PEM encoded CA certificate.
* `certificate_mode` - (Optional)  The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
* `registration_config` - (Optional) Information about the registration configuration. See below.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `verification_certificate_pem` - (Optional) PEM encoded verification certificate containing the common name of a registration code. Review
  [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificate_mode` is `DEFAULT`.

### registration_config

* `role_arn` - (Optional) The ARN of the role.
* `template_body` - (Optional) The template body.
* `template_name` - (Optional) The name of the provisioning template.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The internal ID assigned to this CA certificate.
* `arn` - The ARN of the created CA certificate.
* `customer_version` - The customer version of the CA certificate.
* `generation_id` - The generation ID of the CA certificate.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).
* `validity` - When the CA certificate is valid.
    * `not_after` - The certificate is not valid after this date.
    * `not_before` - The certificate is not valid before this date.

<!-- cache-key: cdktf-0.20.8 input-c5fc1f0a710ef5472f25b8e9639aa2a5bb22ff79e04926030c3f0710b353cd73 -->