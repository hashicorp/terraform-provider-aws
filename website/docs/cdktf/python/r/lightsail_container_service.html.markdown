---
subcategory: "Lightsail"
layout: "aws"
page_title: "AWS: aws_lightsail_container_service"
description: |- 
  Manages a Lightsail container service for running containerized applications.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_lightsail_container_service

Manages a Lightsail container service. Use this resource to create and manage a scalable compute and networking platform for deploying, running, and managing containerized applications in Lightsail.

~> **Note:** For more information about the AWS Regions in which you can create Amazon Lightsail container services, see ["Regions and Availability Zones in Amazon Lightsail"](https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail).

~> **NOTE:** You must create and validate an SSL/TLS certificate before you can use `public_domain_names` with your container service. For more information, see [Enabling and managing custom domains for your Amazon Lightsail container services](https://lightsail.aws.amazon.com/ls/docs/en_us/articles/amazon-lightsail-creating-container-services-certificates).

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.lightsail_container_service import LightsailContainerService
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        LightsailContainerService(self, "example",
            is_disabled=False,
            name="container-service-1",
            power="nano",
            scale=1,
            tags={
                "foo1": "bar1",
                "foo2": ""
            }
        )
```

### Public Domain Names

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.lightsail_container_service import LightsailContainerService
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, name, power, scale):
        super().__init__(scope, name)
        LightsailContainerService(self, "example",
            public_domain_names=LightsailContainerServicePublicDomainNames(
                certificate=[LightsailContainerServicePublicDomainNamesCertificate(
                    certificate_name="example-certificate",
                    domain_names=["www.example.com"]
                )
                ]
            ),
            name=name,
            power=power,
            scale=scale
        )
```

### Private Registry Access

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.ecr_repository_policy import EcrRepositoryPolicy
from imports.aws.lightsail_container_service import LightsailContainerService
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, name, power, scale):
        super().__init__(scope, name)
        example = LightsailContainerService(self, "example",
            private_registry_access=LightsailContainerServicePrivateRegistryAccess(
                ecr_image_puller_role=LightsailContainerServicePrivateRegistryAccessEcrImagePullerRole(
                    is_active=True
                )
            ),
            name=name,
            power=power,
            scale=scale
        )
        data_aws_iam_policy_document_example = DataAwsIamPolicyDocument(self, "example_1",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["ecr:BatchGetImage", "ecr:GetDownloadUrlForLayer"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=[
                        Token.as_string(
                            Fn.lookup_nested(example.private_registry_access, ["0", "ecr_image_puller_role", "0", "principal_arn"
                            ]))
                    ],
                    type="AWS"
                )
                ]
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_iam_policy_document_example.override_logical_id("example")
        aws_ecr_repository_policy_example = EcrRepositoryPolicy(self, "example_2",
            policy=Token.as_string(data_aws_iam_policy_document_example.json),
            repository=Token.as_string(aws_ecr_repository_example.name)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_ecr_repository_policy_example.override_logical_id("example")
```

## Argument Reference

The following arguments are required:

* `name` - (Required) Name of the container service. Names must be of length 1 to 63, and be unique within each AWS Region in your Lightsail account.
* `power` - (Required) Power specification for the container service. The power specifies the amount of memory, the number of vCPUs, and the monthly price of each node of the container service. Possible values: `nano`, `micro`, `small`, `medium`, `large`, `xlarge`.
* `scale` - (Required) Scale specification for the container service. The scale specifies the allocated compute nodes of the container service.

The following arguments are optional:

* `is_disabled` - (Optional) Whether to disable the container service. Defaults to `false`.
* `private_registry_access` - (Optional) Configuration for the container service to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. [See below](#private-registry-access).
* `public_domain_names` - (Optional) Public domain names to use with the container service, such as example.com and www.example.com. You can specify up to four public domain names for a container service. The domain names that you specify are used when you create a deployment with a container configured as the public endpoint of your container service. If you don't specify public domain names, then you can use the default domain of the container service. [See below](#public-domain-names).
* `tags` - (Optional) Map of tags to assign to the resource. To create a key-only tag, use an empty string as the value. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.

### Private Registry Access

The `private_registry_access` block supports the following arguments:

* `ecr_image_puller_role` - (Optional) Configuration to access private container image repositories, such as Amazon Elastic Container Registry (Amazon ECR) private repositories. [See below](#ecr-image-puller-role).

### ECR Image Puller Role

The `ecr_image_puller_role` block supports the following arguments:

* `is_active` - (Optional) Whether to activate the role. Defaults to `false`.

### Public Domain Names

The `public_domain_names` block supports the following arguments:

* `certificate` - (Required) Set of certificate configurations for the public domain names. Each element contains the following attributes:
    * `certificate_name` - (Required) Name of the certificate.
    * `domain_names` - (Required) List of domain names for the certificate.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the container service.
* `availability_zone` - Availability Zone. Follows the format us-east-2a (case-sensitive).
* `created_at` - Date and time when the container service was created.
* `id` - Same as `name`.
* `power_id` - Power ID of the container service.
* `principal_arn` - Principal ARN of the container service. The principal ARN can be used to create a trust relationship between your standard AWS account and your Lightsail container service. This allows you to give your service permission to access resources in your standard AWS account.
* `private_domain_name` - Private domain name of the container service. The private domain name is accessible only by other resources within the default virtual private cloud (VPC) of your Lightsail account.
* `private_registry_access` - Configuration for the container service to access private container image repositories. Contains the following attributes:
    * `ecr_image_puller_role` - Configuration to access private container image repositories. Contains the following attributes:
        * `principal_arn` - Principal ARN of the container service. The principal ARN can be used to create a trust relationship between your standard AWS account and your Lightsail container service.
* `region_name` - AWS Region name.
* `resource_type` - Lightsail resource type of the container service (i.e., ContainerService).
* `state` - Current state of the container service.
* `tags_all` - Map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
* `url` - Publicly accessible URL of the container service. If no public endpoint is specified in the currentDeployment, this URL returns a 404 response.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `update` - (Default `30m`)
* `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Lightsail Container Service using the `name`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.lightsail_container_service import LightsailContainerService
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        LightsailContainerService.generate_config_for_import(self, "example", "container-service-1")
```

Using `terraform import`, import Lightsail Container Service using the `name`. For example:

```console
% terraform import aws_lightsail_container_service.example container-service-1
```

<!-- cache-key: cdktf-0.20.8 input-957bac77c363bd5691f285580e8b1f01a4d148754f5ed1a78deb145615753a6f -->