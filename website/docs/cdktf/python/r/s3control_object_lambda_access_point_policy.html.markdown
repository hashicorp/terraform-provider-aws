---
subcategory: "S3 Control"
layout: "aws"
page_title: "AWS: aws_s3control_object_lambda_access_point_policy"
description: |-
  Provides a resource to manage an S3 Object Lambda Access Point resource policy.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_s3control_object_lambda_access_point_policy

Provides a resource to manage an S3 Object Lambda Access Point resource policy.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.s3_access_point import S3AccessPoint
from imports.aws.s3_bucket import S3Bucket
from imports.aws.s3_control_object_lambda_access_point import S3ControlObjectLambdaAccessPoint
from imports.aws.s3_control_object_lambda_access_point_policy import S3ControlObjectLambdaAccessPointPolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = S3Bucket(self, "example",
            bucket="example"
        )
        aws_s3_access_point_example = S3AccessPoint(self, "example_1",
            bucket=example.id,
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_access_point_example.override_logical_id("example")
        aws_s3_control_object_lambda_access_point_example =
        S3ControlObjectLambdaAccessPoint(self, "example_2",
            configuration={
                "supporting_access_point": Token.as_string(aws_s3_access_point_example.arn),
                "transformation_configuration": [{
                    "actions": ["GetObject"],
                    "content_transformation": {
                        "aws_lambda": {
                            "function_arn": Token.as_string(aws_lambda_function_example.arn)
                        }
                    }
                }
                ]
            },
            name="example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_control_object_lambda_access_point_example.override_logical_id("example")
        aws_s3_control_object_lambda_access_point_policy_example =
        S3ControlObjectLambdaAccessPointPolicy(self, "example_3",
            name=Token.as_string(aws_s3_control_object_lambda_access_point_example.name),
            policy=Token.as_string(
                Fn.jsonencode({
                    "Statement": [{
                        "Action": "s3-object-lambda:GetObject",
                        "Effect": "Allow",
                        "Principal": {
                            "AWS": current.account_id
                        },
                        "Resource": aws_s3_control_object_lambda_access_point_example.arn
                    }
                    ],
                    "Version": "2008-10-17"
                }))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_s3_control_object_lambda_access_point_policy_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `account_id` - (Optional) The AWS account ID for the account that owns the Object Lambda Access Point. Defaults to automatically determined account ID of the Terraform AWS provider.
* `name` - (Required) The name of the Object Lambda Access Point.
* `policy` - (Required) The Object Lambda Access Point resource policy document.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `has_public_access_policy` - Indicates whether this access point currently has a policy that allows public access.
* `id` - The AWS account ID and access point name separated by a colon (`:`).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Object Lambda Access Point policies using the `account_id` and `name`, separated by a colon (`:`). For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.s3_control_object_lambda_access_point_policy import S3ControlObjectLambdaAccessPointPolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        S3ControlObjectLambdaAccessPointPolicy.generate_config_for_import(self, "example", "123456789012:example")
```

Using `terraform import`, import Object Lambda Access Point policies using the `account_id` and `name`, separated by a colon (`:`). For example:

```console
% terraform import aws_s3control_object_lambda_access_point_policy.example 123456789012:example
```

<!-- cache-key: cdktf-0.20.8 input-5b9c13a7dd0a431d893638258adc51525d5b10d18a0ee8ec93b51bafe8ccf083 -->