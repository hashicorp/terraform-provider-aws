---
subcategory: "Transfer Family"
layout: "aws"
page_title: "AWS: aws_transfer_access"
description: |-
  Provides a AWS Transfer Access resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_transfer_access

Provides a AWS Transfer Access resource.

~> **NOTE:** We suggest using [`jsonencode()`](https://developer.hashicorp.com/terraform/language/functions/jsonencode) or [`aws_iam_policy_document`](/docs/providers/aws/d/iam_policy_document.html) when assigning a value to `policy`. They seamlessly translate Terraform language into JSON, enabling you to maintain consistency within your configuration without the need for context switches. Also, you can sidestep potential complications arising from formatting discrepancies, whitespace inconsistencies, and other nuances inherent to JSON.

## Example Usage

### Basic S3

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.transfer_access import TransferAccess
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        TransferAccess(self, "example",
            external_id="S-1-1-12-1234567890-123456789-1234567890-1234",
            home_directory="/${" + aws_s3_bucket_example.id + "}/",
            role=Token.as_string(aws_iam_role_example.arn),
            server_id=Token.as_string(aws_transfer_server_example.id)
        )
```

### Basic EFS

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.transfer_access import TransferAccess
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        TransferAccess(self, "test",
            external_id="S-1-1-12-1234567890-123456789-1234567890-1234",
            home_directory="/${" + aws_efs_file_system_test.id + "}/",
            posix_profile=TransferAccessPosixProfile(
                gid=1000,
                uid=1000
            ),
            role=Token.as_string(aws_iam_role_test.arn),
            server_id=Token.as_string(aws_transfer_server_test.id)
        )
```

## Argument Reference

This resource supports the following arguments:

* `external_id` - (Required) The SID of a group in the directory connected to the Transfer Server (e.g., `S-1-1-12-1234567890-123456789-1234567890-1234`)
* `server_id` - (Required) The Server ID of the Transfer Server (e.g., `s-12345678`)
* `home_directory` - (Optional) The landing directory (folder) for a user when they log in to the server using their SFTP client.  It should begin with a `/`.  The first item in the path is the name of the home bucket (accessible as `${Transfer:HomeBucket}` in the policy) and the rest is the home directory (accessible as `${Transfer:HomeDirectory}` in the policy). For example, `/example-bucket-1234/username` would set the home bucket to `example-bucket-1234` and the home directory to `username`.
* `home_directory_mappings` - (Optional) Logical directory mappings that specify what S3 paths and keys should be visible to your user and how you want to make them visible. See [Home Directory Mappings](#home-directory-mappings) below.
* `home_directory_type` - (Optional) The type of landing directory (folder) you mapped for your users' home directory. Valid values are `PATH` and `LOGICAL`.
* `policy` - (Optional) An IAM JSON policy document that scopes down user access to portions of their Amazon S3 bucket. IAM variables you can use inside this policy include `${Transfer:UserName}`, `${Transfer:HomeDirectory}`, and `${Transfer:HomeBucket}`. Since the IAM variable syntax matches Terraform's interpolation syntax, they must be escaped inside Terraform configuration strings (`$${Transfer:UserName}`).  These are evaluated on-the-fly when navigating the bucket.
* `posix_profile` - (Optional) Specifies the full POSIX identity, including user ID (Uid), group ID (Gid), and any secondary groups IDs (SecondaryGids), that controls your users' access to your Amazon EFS file systems. See [Posix Profile](#posix-profile) below.
* `role` - (Required) Amazon Resource Name (ARN) of an IAM role that allows the service to controls your userâ€™s access to your Amazon S3 bucket.

### Home Directory Mappings

* `entry` - (Required) Represents an entry and a target.
* `target` - (Required) Represents the map target.

### Posix Profile

* `gid` - (Required) The POSIX group ID used for all EFS operations by this user.
* `uid` - (Required) The POSIX user ID used for all EFS operations by this user.
* `secondary_gids` - (Optional) The secondary POSIX group IDs used for all EFS operations by this user.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id`  - The ID of the resource

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Transfer Accesses using the `server_id` and `external_id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.transfer_access import TransferAccess
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        TransferAccess.generate_config_for_import(self, "example", "s-12345678/S-1-1-12-1234567890-123456789-1234567890-1234")
```

Using `terraform import`, import Transfer Accesses using the `server_id` and `external_id`. For example:

```console
% terraform import aws_transfer_access.example s-12345678/S-1-1-12-1234567890-123456789-1234567890-1234
```

<!-- cache-key: cdktf-0.20.1 input-27853b9acff5960bf03ca886682c7af40e4ac45eda5ee2c17ded312b63e3c898 -->