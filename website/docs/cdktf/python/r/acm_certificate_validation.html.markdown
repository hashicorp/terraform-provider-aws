---
subcategory: "ACM (Certificate Manager)"
layout: "aws"
page_title: "AWS: aws_acm_certificate_validation"
description: |-
  Waits for and checks successful validation of an ACM certificate.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_acm_certificate_validation

This resource represents a successful validation of an ACM certificate in concert
with other resources.

Most commonly, this resource is used together with [`aws_route53_record`](route53_record.html) and
[`aws_acm_certificate`](acm_certificate.html) to request a DNS validated certificate,
deploy the required validation records and wait for validation to complete.

~> **WARNING:** This resource implements a part of the validation workflow. It does not represent a real-world entity in AWS, therefore changing or deleting this resource on its own has no immediate effect.

## Example Usage

### DNS Validation with Route 53

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformIterator, Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.acm_certificate import AcmCertificate
from imports.aws.acm_certificate_validation import AcmCertificateValidation
from imports.aws.data_aws_route53_zone import DataAwsRoute53Zone
from imports.aws.lb_listener import LbListener
from imports.aws.route53_record import Route53Record
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, defaultAction, loadBalancerArn):
        super().__init__(scope, name)
        example = AcmCertificate(self, "example",
            domain_name="example.com",
            validation_method="DNS"
        )
        data_aws_route53_zone_example = DataAwsRoute53Zone(self, "example_1",
            name="example.com",
            private_zone=False
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_route53_zone_example.override_logical_id("example")
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        example_for_each_iterator = TerraformIterator.from_list(
            Token.as_any("${{ for dvo in ${" + example.domain_validation_options + "} : dvo.domain_name => {\n      name   = dvo.resource_record_name\n      record = dvo.resource_record_value\n      type   = dvo.resource_record_type\n    }}}"))
        aws_route53_record_example = Route53Record(self, "example_2",
            allow_overwrite=True,
            name=Token.as_string(
                Fn.lookup_nested(example_for_each_iterator.value, ["name"])),
            records=[
                Token.as_string(
                    Fn.lookup_nested(example_for_each_iterator.value, ["record"]))
            ],
            ttl=60,
            type=Token.as_string(
                Fn.lookup_nested(example_for_each_iterator.value, ["type"])),
            zone_id=Token.as_string(data_aws_route53_zone_example.zone_id),
            for_each=example_for_each_iterator
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_route53_record_example.override_logical_id("example")
        aws_acm_certificate_validation_example = AcmCertificateValidation(self, "example_3",
            certificate_arn=example.arn,
            validation_record_fqdns=Token.as_list("${[ for record in ${" + aws_route53_record_example.fqn + "} : record.fqdn]}")
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_acm_certificate_validation_example.override_logical_id("example")
        aws_lb_listener_example = LbListener(self, "example_4",
            certificate_arn=Token.as_string(aws_acm_certificate_validation_example.certificate_arn),
            default_action=default_action,
            load_balancer_arn=load_balancer_arn
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_lb_listener_example.override_logical_id("example")
```

### Alternative Domains DNS Validation with Route 53

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformIterator, Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.acm_certificate import AcmCertificate
from imports.aws.acm_certificate_validation import AcmCertificateValidation
from imports.aws.data_aws_route53_zone import DataAwsRoute53Zone
from imports.aws.lb_listener import LbListener
from imports.aws.route53_record import Route53Record
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, defaultAction, loadBalancerArn):
        super().__init__(scope, name)
        example = AcmCertificate(self, "example",
            domain_name="example.com",
            subject_alternative_names=["www.example.com", "example.org"],
            validation_method="DNS"
        )
        # In most cases loops should be handled in the programming language context and
        #     not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
        #     you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
        #     you need to keep this like it is.
        example_for_each_iterator = TerraformIterator.from_list(
            Token.as_any("${{ for dvo in ${" + example.domain_validation_options + "} : dvo.domain_name => {\n      name    = dvo.resource_record_name\n      record  = dvo.resource_record_value\n      type    = dvo.resource_record_type\n      zone_id = dvo.domain_name == \"example.org\" ? data.aws_route53_zone.example_org.zone_id : data.aws_route53_zone.example_com.zone_id\n    }}}"))
        aws_route53_record_example = Route53Record(self, "example_1",
            allow_overwrite=True,
            name=Token.as_string(
                Fn.lookup_nested(example_for_each_iterator.value, ["name"])),
            records=[
                Token.as_string(
                    Fn.lookup_nested(example_for_each_iterator.value, ["record"]))
            ],
            ttl=60,
            type=Token.as_string(
                Fn.lookup_nested(example_for_each_iterator.value, ["type"])),
            zone_id=Token.as_string(
                Fn.lookup_nested(example_for_each_iterator.value, ["zone_id"])),
            for_each=example_for_each_iterator
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_route53_record_example.override_logical_id("example")
        DataAwsRoute53Zone(self, "example_com",
            name="example.com",
            private_zone=False
        )
        DataAwsRoute53Zone(self, "example_org",
            name="example.org",
            private_zone=False
        )
        aws_acm_certificate_validation_example = AcmCertificateValidation(self, "example_4",
            certificate_arn=example.arn,
            validation_record_fqdns=Token.as_list("${[ for record in ${" + aws_route53_record_example.fqn + "} : record.fqdn]}")
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_acm_certificate_validation_example.override_logical_id("example")
        aws_lb_listener_example = LbListener(self, "example_5",
            certificate_arn=Token.as_string(aws_acm_certificate_validation_example.certificate_arn),
            default_action=default_action,
            load_balancer_arn=load_balancer_arn
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_lb_listener_example.override_logical_id("example")
```

### Email Validation

In this situation, the resource is simply a waiter for manual email approval of ACM certificates.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.acm_certificate import AcmCertificate
from imports.aws.acm_certificate_validation import AcmCertificateValidation
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = AcmCertificate(self, "example",
            domain_name="example.com",
            validation_method="EMAIL"
        )
        aws_acm_certificate_validation_example = AcmCertificateValidation(self, "example_1",
            certificate_arn=example.arn
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_acm_certificate_validation_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `certificate_arn` - (Required) ARN of the certificate that is being validated.
* `validation_record_fqdns` - (Optional) List of FQDNs that implement the validation. Only valid for DNS validation method ACM certificates. If this is set, the resource can implement additional sanity checks and has an explicit dependency on the resource that is implementing the validation

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Time at which the certificate was issued

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `75m`)

<!-- cache-key: cdktf-0.20.8 input-bd8c04ee824aa9ba9e41a615796c1554d255a22e9d0a9dd833af77b9c40bb301 -->