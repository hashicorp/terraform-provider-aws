---
subcategory: "IAM (Identity & Access Management)"
layout: "aws"
page_title: "AWS: aws_iam_role_policy_attachments_exclusive"
description: |-
  Terraform resource for maintaining exclusive management of customer managed policies assigned to an AWS IAM (Identity & Access Management) role.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_iam_role_policy_attachments_exclusive

Terraform resource for maintaining exclusive management of customer managed policies assigned to an AWS IAM (Identity & Access Management) role.

!> This resource takes exclusive ownership over customer managed policies attached to a role. This includes removal of customer managed policies which are not explicitly configured. To prevent persistent drift, ensure any `aws_iam_role_policy_attachment` resources managed alongside this resource are included in the `policy_arns` argument.

~> Destruction of this resource means Terraform will no longer manage reconciliation of the configured policy attachments. It __will not__ detach the configured policies from the role.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.iam_role_policy_attachments_exclusive import IamRolePolicyAttachmentsExclusive
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        IamRolePolicyAttachmentsExclusive(self, "example",
            policy_arns=[Token.as_string(aws_iam_policy_example.arn)],
            role_name=Token.as_string(aws_iam_role_example.name)
        )
```

### Disallow Customer Managed Policies

To automatically remove any configured customer managed policies, set the `policy_arns` argument to an empty list.

~> This will not __prevent__ customer managed policies from being assigned to a role via Terraform (or any other interface). This resource enables bringing customer managed policy assignments into a configured state, however, this reconciliation happens only when `apply` is proactively run.

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.iam_role_policy_attachments_exclusive import IamRolePolicyAttachmentsExclusive
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, policyArns):
        super().__init__(scope, name)
        IamRolePolicyAttachmentsExclusive(self, "example",
            policy_arns=policy_arns,
            role_name=Token.as_string(aws_iam_role_example.name)
        )
```

## Argument Reference

The following arguments are required:

* `role_name` - (Required) IAM role name.
* `policy_arns` - (Required) A list of customer managed policy ARNs to be attached to the role. Policies attached to this role but not configured in this argument will be removed.

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to exclusively manage customer managed policy assignments using the `role_name`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.iam_role_policy_attachments_exclusive import IamRolePolicyAttachmentsExclusive
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        IamRolePolicyAttachmentsExclusive.generate_config_for_import(self, "example", "MyRole")
```

Using `terraform import`, import exclusive management of customer managed policy assignments using the `role_name`. For example:

```console
% terraform import aws_iam_role_policy_attachments_exclusive.example MyRole
```

<!-- cache-key: cdktf-0.20.8 input-0de90380db2d868b6779517650d4ed2ea66aa1fa4ea7dc903b086a86e35c2a65 -->