---
subcategory: "Transit Gateway"
layout: "aws"
page_title: "AWS: aws_ec2_transit_gateway_route"
description: |-
  Manages an EC2 Transit Gateway Route
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ec2_transit_gateway_route

Manages an EC2 Transit Gateway Route.

## Example Usage

### Standard usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.ec2_transit_gateway_route import Ec2TransitGatewayRoute
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        Ec2TransitGatewayRoute(self, "example",
            destination_cidr_block="0.0.0.0/0",
            transit_gateway_attachment_id=Token.as_string(aws_ec2_transit_gateway_vpc_attachment_example.id),
            transit_gateway_route_table_id=Token.as_string(aws_ec2_transit_gateway_example.association_default_route_table_id)
        )
```

### Blackhole route

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.ec2_transit_gateway_route import Ec2TransitGatewayRoute
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        Ec2TransitGatewayRoute(self, "example",
            blackhole=True,
            destination_cidr_block="0.0.0.0/0",
            transit_gateway_route_table_id=Token.as_string(aws_ec2_transit_gateway_example.association_default_route_table_id)
        )
```

## Argument Reference

This resource supports the following arguments:

* `destination_cidr_block` - (Required) IPv4 or IPv6 RFC1924 CIDR used for destination matches. Routing decisions are based on the most specific match.
* `transit_gateway_attachment_id` - (Optional) Identifier of EC2 Transit Gateway Attachment (required if `blackhole` is set to false).
* `blackhole` - (Optional) Indicates whether to drop traffic that matches this route (default to `false`).
* `transit_gateway_route_table_id` - (Required) Identifier of EC2 Transit Gateway Route Table.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - EC2 Transit Gateway Route Table identifier combined with destination

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_ec2_transit_gateway_route` using the EC2 Transit Gateway Route Table, an underscore, and the destination. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.ec2_transit_gateway_route import Ec2TransitGatewayRoute
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        Ec2TransitGatewayRoute.generate_config_for_import(self, "example", "tgw-rtb-12345678_0.0.0.0/0")
```

Using `terraform import`, import `aws_ec2_transit_gateway_route` using the EC2 Transit Gateway Route Table, an underscore, and the destination. For example:

```console
% terraform import aws_ec2_transit_gateway_route.example tgw-rtb-12345678_0.0.0.0/0
```

<!-- cache-key: cdktf-0.20.8 input-3f4289296824edee3b69e6fca23a5970445532afeb5abfc08517d091ea79a4c6 -->