---
subcategory: "Device Farm"
layout: "aws"
page_title: "AWS: aws_devicefarm_network_profile"
description: |-
  Provides a Devicefarm network profile
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_devicefarm_network_profile

Provides a resource to manage AWS Device Farm Network Profiles.
âˆ‚
~> **NOTE:** AWS currently has limited regional support for Device Farm (e.g., `us-west-2`). See [AWS Device Farm endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/devicefarm.html) for information on supported regions.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.devicefarm_network_profile import DevicefarmNetworkProfile
from imports.aws.devicefarm_project import DevicefarmProject
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = DevicefarmProject(self, "example",
            name="example"
        )
        aws_devicefarm_network_profile_example = DevicefarmNetworkProfile(self, "example_1",
            name="example",
            project_arn=example.arn
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_devicefarm_network_profile_example.override_logical_id("example")
```

## Argument Reference

* `description` - (Optional) The description of the network profile.
* `downlink_bandwidth_bits` - (Optional) The data throughput rate in bits per second, as an integer from `0` to `104857600`. Default value is `104857600`.
* `downlink_delay_ms` - (Optional) Delay time for all packets to destination in milliseconds as an integer from `0` to `2000`.
* `downlink_jitter_ms` - (Optional) Time variation in the delay of received packets in milliseconds as an integer from `0` to `2000`.
* `downlink_loss_percent` - (Optional) Proportion of received packets that fail to arrive from `0` to `100` percent.
* `name` - (Required) The name for the network profile.
* `uplink_bandwidth_bits` - (Optional) The data throughput rate in bits per second, as an integer from `0` to `104857600`. Default value is `104857600`.
* `uplink_delay_ms` - (Optional) Delay time for all packets to destination in milliseconds as an integer from `0` to `2000`.
* `uplink_jitter_ms` - (Optional) Time variation in the delay of received packets in milliseconds as an integer from `0` to `2000`.
* `uplink_loss_percent` - (Optional) Proportion of received packets that fail to arrive from `0` to `100` percent.
* `project_arn` - (Required) The ARN of the project for the network profile.
* `type` - (Optional) The type of network profile to create. Valid values are listed are `PRIVATE` and `CURATED`.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The Amazon Resource Name of this network profile.
* `tags_all` - A map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import DeviceFarm Network Profiles using their ARN. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.devicefarm_network_profile import DevicefarmNetworkProfile
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DevicefarmNetworkProfile.generate_config_for_import(self, "example", "arn:aws:devicefarm:us-west-2:123456789012:networkprofile:4fa784c7-ccb4-4dbf-ba4f-02198320daa1")
```

Using `terraform import`, import DeviceFarm Network Profiles using their ARN. For example:

```console
% terraform import aws_devicefarm_network_profile.example arn:aws:devicefarm:us-west-2:123456789012:networkprofile:4fa784c7-ccb4-4dbf-ba4f-02198320daa1
```

<!-- cache-key: cdktf-0.20.8 input-82616cb48039f8368ead9b616e986d34cc6658f5bc299c003c202bc94e665131 -->