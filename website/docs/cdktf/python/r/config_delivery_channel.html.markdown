---
subcategory: "Config"
layout: "aws"
page_title: "AWS: aws_config_delivery_channel"
description: |-
  Provides an AWS Config Delivery Channel.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_config_delivery_channel

Provides an AWS Config Delivery Channel.

~> **Note:** Delivery Channel requires a [Configuration Recorder](/docs/providers/aws/r/config_configuration_recorder.html) to be present. Use of `depends_on` (as shown below) is recommended to avoid race conditions.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.config_configuration_recorder import ConfigConfigurationRecorder
from imports.aws.config_delivery_channel import ConfigDeliveryChannel
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.iam_role import IamRole
from imports.aws.iam_role_policy import IamRolePolicy
from imports.aws.s3_bucket import S3Bucket
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        b = S3Bucket(self, "b",
            bucket="example-awsconfig",
            force_destroy=True
        )
        assume_role = DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["config.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        p = DataAwsIamPolicyDocument(self, "p",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["s3:*"],
                effect="Allow",
                resources=[b.arn, "${" + b.arn + "}/*"]
            )
            ]
        )
        r = IamRole(self, "r",
            assume_role_policy=Token.as_string(assume_role.json),
            name="awsconfig-example"
        )
        aws_iam_role_policy_p = IamRolePolicy(self, "p_4",
            name="awsconfig-example",
            policy=Token.as_string(p.json),
            role=r.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_policy_p.override_logical_id("p")
        foo = ConfigConfigurationRecorder(self, "foo",
            name="example",
            role_arn=r.arn
        )
        aws_config_delivery_channel_foo = ConfigDeliveryChannel(self, "foo_6",
            depends_on=[foo],
            name="example",
            s3_bucket_name=b.bucket
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_config_delivery_channel_foo.override_logical_id("foo")
```

## Argument Reference

This resource supports the following arguments:

* `name` - (Optional) The name of the delivery channel. Defaults to `default`. Changing it recreates the resource.
* `s3_bucket_name` - (Required) The name of the S3 bucket used to store the configuration history.
* `s3_key_prefix` - (Optional) The prefix for the specified S3 bucket.
* `s3_kms_key_arn` - (Optional) The ARN of the AWS KMS key used to encrypt objects delivered by AWS Config. Must belong to the same Region as the destination S3 bucket.
* `sns_topic_arn` - (Optional) The ARN of the SNS topic that AWS Config delivers notifications to.
* `snapshot_delivery_properties` - (Optional) Options for how AWS Config delivers configuration snapshots. See below

### `snapshot_delivery_properties`

* `delivery_frequency` - (Optional) - The frequency with which AWS Config recurringly delivers configuration snapshotsE.g., `One_Hour` or `Three_Hours`. Valid values are listed [here](https://docs.aws.amazon.com/config/latest/APIReference/API_ConfigSnapshotDeliveryProperties.html#API_ConfigSnapshotDeliveryProperties_Contents).

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The name of the delivery channel.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Delivery Channel using the name. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.config_delivery_channel import ConfigDeliveryChannel
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        ConfigDeliveryChannel.generate_config_for_import(self, "foo", "example")
```

Using `terraform import`, import Delivery Channel using the name. For example:

```console
% terraform import aws_config_delivery_channel.foo example
```

<!-- cache-key: cdktf-0.20.8 input-54435b5e17865652d2b4e1be7bdaf36c37288ea5a996a242391550ce3763b0a2 -->