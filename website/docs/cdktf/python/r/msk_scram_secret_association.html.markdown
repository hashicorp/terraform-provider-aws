---
subcategory: "Managed Streaming for Kafka"
layout: "aws"
page_title: "AWS: aws_msk_scram_secret_association"
description: |-
  Associates SCRAM secrets with a Managed Streaming for Kafka (MSK) cluster.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_msk_scram_secret_association

Associates SCRAM secrets stored in the Secrets Manager service with a Managed Streaming for Kafka (MSK) cluster.

!> This resource takes exclusive ownership over SCRAM secrets associated with a cluster. This includes removal of SCRAM secrets which are not explicitly configured. To prevent persistent drift, ensure any `aws_msk_single_scram_secret_association` resources managed alongside this resource are included in the `secret_arn_list` argument.

-> **Note:** The following assumes the MSK cluster has SASL/SCRAM authentication enabled. See below for example usage or refer to the [Username/Password Authentication](https://docs.aws.amazon.com/msk/latest/developerguide/msk-password.html) section of the MSK Developer Guide for more details.

To set up username and password authentication for a cluster, create an [`aws_secretsmanager_secret` resource](/docs/providers/aws/r/secretsmanager_secret.html) and associate
a username and password with the secret with an [`aws_secretsmanager_secret_version` resource](/docs/providers/aws/r/secretsmanager_secret_version.html). When creating a secret for the cluster,
the `name` must have the prefix `AmazonMSK_` and you must either use an existing custom AWS KMS key or create a new
custom AWS KMS key for your secret with the [`aws_kms_key` resource](/docs/providers/aws/r/kms_key.html). It is important to note that a policy is required for the `aws_secretsmanager_secret`
resource in order for Kafka to be able to read it. This policy is attached automatically when the `aws_msk_scram_secret_association` is used,
however, this policy will not be in terraform and as such, will present a diff on plan/apply. For that reason, you must use the [`aws_secretsmanager_secret_policy`
resource](/docs/providers/aws/r/secretsmanager_secret_policy.html) as shown below in order to ensure that the state is in a clean state after the creation of secret and the association to the cluster.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.kms_key import KmsKey
from imports.aws.msk_cluster import MskCluster
from imports.aws.msk_scram_secret_association import MskScramSecretAssociation
from imports.aws.secretsmanager_secret import SecretsmanagerSecret
from imports.aws.secretsmanager_secret_policy import SecretsmanagerSecretPolicy
from imports.aws.secretsmanager_secret_version import SecretsmanagerSecretVersion
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name, *, brokerNodeGroupInfo, kafkaVersion, numberOfBrokerNodes):
        super().__init__(scope, name)
        example = KmsKey(self, "example",
            description="Example Key for MSK Cluster Scram Secret Association"
        )
        aws_msk_cluster_example = MskCluster(self, "example_1",
            client_authentication=MskClusterClientAuthentication(
                sasl=MskClusterClientAuthenticationSasl(
                    scram=True
                )
            ),
            cluster_name="example",
            broker_node_group_info=broker_node_group_info,
            kafka_version=kafka_version,
            number_of_broker_nodes=number_of_broker_nodes
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_msk_cluster_example.override_logical_id("example")
        aws_secretsmanager_secret_example = SecretsmanagerSecret(self, "example_2",
            kms_key_id=example.key_id,
            name="AmazonMSK_example"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_secretsmanager_secret_example.override_logical_id("example")
        aws_secretsmanager_secret_version_example =
        SecretsmanagerSecretVersion(self, "example_3",
            secret_id=Token.as_string(aws_secretsmanager_secret_example.id),
            secret_string=Token.as_string(
                Fn.jsonencode({
                    "password": "pass",
                    "username": "user"
                }))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_secretsmanager_secret_version_example.override_logical_id("example")
        data_aws_iam_policy_document_example = DataAwsIamPolicyDocument(self, "example_4",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["secretsmanager:getSecretValue"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["kafka.amazonaws.com"],
                    type="Service"
                )
                ],
                resources=[Token.as_string(aws_secretsmanager_secret_example.arn)],
                sid="AWSKafkaResourcePolicy"
            )
            ]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_iam_policy_document_example.override_logical_id("example")
        aws_msk_scram_secret_association_example = MskScramSecretAssociation(self, "example_5",
            cluster_arn=Token.as_string(aws_msk_cluster_example.arn),
            depends_on=[aws_secretsmanager_secret_version_example],
            secret_arn_list=[Token.as_string(aws_secretsmanager_secret_example.arn)]
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_msk_scram_secret_association_example.override_logical_id("example")
        aws_secretsmanager_secret_policy_example = SecretsmanagerSecretPolicy(self, "example_6",
            policy=Token.as_string(data_aws_iam_policy_document_example.json),
            secret_arn=Token.as_string(aws_secretsmanager_secret_example.arn)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_secretsmanager_secret_policy_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `cluster_arn` - (Required, Forces new resource) Amazon Resource Name (ARN) of the MSK cluster.
* `secret_arn_list` - (Required) List of AWS Secrets Manager secret ARNs.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Amazon Resource Name (ARN) of the MSK cluster.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import MSK SCRAM Secret Associations using the `id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.msk_scram_secret_association import MskScramSecretAssociation
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        MskScramSecretAssociation.generate_config_for_import(self, "example", "arn:aws:kafka:us-west-2:123456789012:cluster/example/279c0212-d057-4dba-9aa9-1c4e5a25bfc7-3")
```

Using `terraform import`, import MSK SCRAM Secret Associations using the `id`. For example:

```console
% terraform import aws_msk_scram_secret_association.example arn:aws:kafka:us-west-2:123456789012:cluster/example/279c0212-d057-4dba-9aa9-1c4e5a25bfc7-3
```

<!-- cache-key: cdktf-0.20.8 input-7cada2fdd943e43d676c04c972d59565150f424bb7230fb974abfdfaf6b7fbc8 -->