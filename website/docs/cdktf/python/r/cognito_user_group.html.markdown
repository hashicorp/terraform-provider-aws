---
subcategory: "Cognito IDP (Identity Provider)"
layout: "aws"
page_title: "AWS: aws_cognito_user_group"
description: |-
  Provides a Cognito User Group resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cognito_user_group

Provides a Cognito User Group resource.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cognito_user_group import CognitoUserGroup
from imports.aws.cognito_user_pool import CognitoUserPool
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.iam_role import IamRole
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        main = CognitoUserPool(self, "main",
            name="identity pool"
        )
        group_role = DataAwsIamPolicyDocument(self, "group_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRoleWithWebIdentity"],
                condition=[DataAwsIamPolicyDocumentStatementCondition(
                    test="StringEquals",
                    values=["us-east-1:12345678-dead-beef-cafe-123456790ab"],
                    variable="cognito-identity.amazonaws.com:aud"
                ), DataAwsIamPolicyDocumentStatementCondition(
                    test="ForAnyValue:StringLike",
                    values=["authenticated"],
                    variable="cognito-identity.amazonaws.com:amr"
                )
                ],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["cognito-identity.amazonaws.com"],
                    type="Federated"
                )
                ]
            )
            ]
        )
        aws_iam_role_group_role = IamRole(self, "group_role_2",
            assume_role_policy=Token.as_string(group_role.json),
            name="user-group-role"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_iam_role_group_role.override_logical_id("group_role")
        aws_cognito_user_group_main = CognitoUserGroup(self, "main_3",
            description="Managed by Terraform",
            name="user-group",
            precedence=42,
            role_arn=Token.as_string(aws_iam_role_group_role.arn),
            user_pool_id=main.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_cognito_user_group_main.override_logical_id("main")
```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The name of the user group.
* `user_pool_id` - (Required) The user pool ID.
* `description` - (Optional) The description of the user group.
* `precedence` - (Optional) The precedence of the user group.
* `role_arn` - (Optional) The ARN of the IAM role to be associated with the user group.

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Cognito User Groups using the `user_pool_id`/`name` attributes concatenated. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.cognito_user_group import CognitoUserGroup
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        CognitoUserGroup.generate_config_for_import(self, "group", "us-east-1_vG78M4goG/user-group")
```

Using `terraform import`, import Cognito User Groups using the `user_pool_id`/`name` attributes concatenated. For example:

```console
% terraform import aws_cognito_user_group.group us-east-1_vG78M4goG/user-group
```

<!-- cache-key: cdktf-0.20.8 input-cc1b14439a5de34e3245c86b3fde6854b55b9ec7ad46bd038fb95fabbe714a37 -->