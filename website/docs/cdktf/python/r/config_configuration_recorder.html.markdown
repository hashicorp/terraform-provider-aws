---
subcategory: "Config"
layout: "aws"
page_title: "AWS: aws_config_configuration_recorder"
description: |-
  Provides an AWS Config Configuration Recorder.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_config_configuration_recorder

Provides an AWS Config Configuration Recorder. Please note that this resource **does not start** the created recorder automatically.

~> **Note:** _Starting_ the Configuration Recorder requires a [delivery channel](/docs/providers/aws/r/config_delivery_channel.html) (while delivery channel creation requires Configuration Recorder). This is why [`aws_config_configuration_recorder_status`](/docs/providers/aws/r/config_configuration_recorder_status.html) is a separate resource.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.config_configuration_recorder import ConfigConfigurationRecorder
from imports.aws.data_aws_iam_policy_document import DataAwsIamPolicyDocument
from imports.aws.iam_role import IamRole
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        assume_role = DataAwsIamPolicyDocument(self, "assume_role",
            statement=[DataAwsIamPolicyDocumentStatement(
                actions=["sts:AssumeRole"],
                effect="Allow",
                principals=[DataAwsIamPolicyDocumentStatementPrincipals(
                    identifiers=["config.amazonaws.com"],
                    type="Service"
                )
                ]
            )
            ]
        )
        r = IamRole(self, "r",
            assume_role_policy=Token.as_string(assume_role.json),
            name="awsconfig-example"
        )
        ConfigConfigurationRecorder(self, "foo",
            name="example",
            role_arn=r.arn
        )
```

### Exclude Resources Types Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.config_configuration_recorder import ConfigConfigurationRecorder
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        ConfigConfigurationRecorder(self, "foo",
            name="example",
            recording_group=ConfigConfigurationRecorderRecordingGroup(
                all_supported=False,
                exclusion_by_resource_types=[ConfigConfigurationRecorderRecordingGroupExclusionByResourceTypes(
                    resource_types=["AWS::EC2::Instance"]
                )
                ],
                recording_strategy=[ConfigConfigurationRecorderRecordingGroupRecordingStrategy(
                    use_only="EXCLUSION_BY_RESOURCE_TYPES"
                )
                ]
            ),
            role_arn=r.arn
        )
```

### Periodic Recording

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.config_configuration_recorder import ConfigConfigurationRecorder
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        ConfigConfigurationRecorder(self, "foo",
            name="example",
            recording_group=ConfigConfigurationRecorderRecordingGroup(
                all_supported=False,
                include_global_resource_types=False,
                resource_types=["AWS::EC2::Instance", "AWS::EC2::NetworkInterface"]
            ),
            recording_mode=ConfigConfigurationRecorderRecordingMode(
                recording_frequency="CONTINUOUS",
                recording_mode_override=ConfigConfigurationRecorderRecordingModeRecordingModeOverride(
                    description="Only record EC2 network interfaces daily",
                    recording_frequency="DAILY",
                    resource_types=["AWS::EC2::NetworkInterface"]
                )
            ),
            role_arn=r.arn
        )
```

## Argument Reference

This resource supports the following arguments:

* `name` - (Optional) The name of the recorder. Defaults to `default`. Changing it recreates the resource.
* `role_arn` - (Required) Amazon Resource Name (ARN) of the IAM role. Used to make read or write requests to the delivery channel and to describe the AWS resources associated with the account. See [AWS Docs](http://docs.aws.amazon.com/config/latest/developerguide/iamrole-permissions.html) for more details.
* `recording_group` - (Optional) Recording group - see below.
* `recording_mode` - (Optional) Recording mode - see below.

### recording_group Configuration Block

* `all_supported` - (Optional) Specifies whether AWS Config records configuration changes for every supported type of regional resource (which includes any new type that will become supported in the future). Conflicts with `resource_types`. Defaults to `true`.
* `exclusion_by_resource_types` - (Optional) An object that specifies how AWS Config excludes resource types from being recorded by the configuration recorder.To use this option, you must set the useOnly field of RecordingStrategy to `EXCLUSION_BY_RESOURCE_TYPES` Requires `all_supported = false`. Conflicts with `resource_types`.
* `include_global_resource_types` - (Optional) Specifies whether AWS Config includes all supported types of _global resources_ with the resources that it records. Requires `all_supported = true`. Conflicts with `resource_types`.
* `recording_strategy` - (Optional) Recording Strategy. Detailed below.
* `resource_types` - (Optional) A list that specifies the types of AWS resources for which AWS Config records configuration changes (for example, `AWS::EC2::Instance` or `AWS::CloudTrail::Trail`). See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types. In order to use this attribute, `all_supported` must be set to false.

#### exclusion_by_resource_types Configuration Block

* `resource_types` - (Optional) A list that specifies the types of AWS resources for which AWS Config excludes records configuration changes. See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types.

#### recording_strategy Configuration Block

* ` use_only` - (Optional) The recording strategy for the configuration recorder. See [relevant part of AWS Docs](https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingStrategy.html)

### recording_mode Configuration Block

* `recording_frequency` - (Required) Default reecording frequency. `CONTINUOUS` or `DAILY`.
* `recording_mode_override` - (Optional) Recording mode overrides. Detailed below.

#### recording_mode_override Configuration Block

* `description` - (Optional) A description you provide of the override.
* `resource_types` - (Required) A list that specifies the types of AWS resources for which the override applies to.  See [restrictions in the AWS Docs](https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingModeOverride.html)
* `recording_frequency` - (Required) The recording frequency for the resources in the override block. `CONTINUOUS` or `DAILY`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Name of the recorder

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Configuration Recorder using the name. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.config_configuration_recorder import ConfigConfigurationRecorder
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        ConfigConfigurationRecorder.generate_config_for_import(self, "foo", "example")
```

Using `terraform import`, import Configuration Recorder using the name. For example:

```console
% terraform import aws_config_configuration_recorder.foo example
```

<!-- cache-key: cdktf-0.20.8 input-abb2a30c6aaa0f7b0debfcd2ded1ca9be070019688f41914c9c15ae47a17cbc7 -->