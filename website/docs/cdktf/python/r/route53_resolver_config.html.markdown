---
subcategory: "Route 53 Resolver"
layout: "aws"
page_title: "AWS: aws_route53_resolver_config"
description: |-
  Provides a Route 53 Resolver config resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_route53_resolver_config

Provides a Route 53 Resolver config resource.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.route53_resolver_config import Route53ResolverConfig
from imports.aws.vpc import Vpc
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = Vpc(self, "example",
            cidr_block="10.0.0.0/16",
            enable_dns_hostnames=True,
            enable_dns_support=True
        )
        aws_route53_resolver_config_example = Route53ResolverConfig(self, "example_1",
            autodefined_reverse_flag="DISABLE",
            resource_id=example.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_route53_resolver_config_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `resource_id` - (Required) The ID of the VPC that the configuration is for.
* `autodefined_reverse_flag` - (Required) Indicates whether or not the Resolver will create autodefined rules for reverse DNS lookups. Valid values: `ENABLE`, `DISABLE`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the resolver configuration.
* `owner_id` - The AWS account ID of the owner of the VPC that this resolver configuration applies to.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Route 53 Resolver configs using the Route 53 Resolver config ID. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.route53_resolver_config import Route53ResolverConfig
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        Route53ResolverConfig.generate_config_for_import(self, "example", "rslvr-rc-715aa20c73a23da7")
```

Using `terraform import`, import Route 53 Resolver configs using the Route 53 Resolver config ID. For example:

```console
% terraform import aws_route53_resolver_config.example rslvr-rc-715aa20c73a23da7
```

<!-- cache-key: cdktf-0.20.8 input-9e9ab64717f5492816cdea672c9253b6943b2cad6b967b971fcb44194acec4cf -->