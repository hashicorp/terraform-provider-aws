---
subcategory: "Control Tower"
layout: "aws"
page_title: "AWS: aws_controltower_control"
description: |-
  Allows the application of pre-defined controls to organizational units.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_controltower_control

Allows the application of pre-defined controls to organizational units. For more information on usage, please see the
[AWS Control Tower User Guide](https://docs.aws.amazon.com/controltower/latest/userguide/enable-guardrails.html).

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Fn, Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.controltower_control import ControltowerControl
from imports.aws.data_aws_organizations_organization import DataAwsOrganizationsOrganization
from imports.aws.data_aws_organizations_organizational_units import DataAwsOrganizationsOrganizationalUnits
from imports.aws.data_aws_region import DataAwsRegion
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = DataAwsOrganizationsOrganization(self, "example")
        data_aws_organizations_organizational_units_example =
        DataAwsOrganizationsOrganizationalUnits(self, "example_1",
            parent_id=Token.as_string(Fn.lookup_nested(example.roots, ["0", "id"]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_organizations_organizational_units_example.override_logical_id("example")
        current = DataAwsRegion(self, "current")
        aws_controltower_control_example = ControltowerControl(self, "example_3",
            control_identifier="arn:aws:controltower:${" + current.name + "}::control/AWS-GR_EC2_VOLUME_INUSE_CHECK",
            parameters=[ControltowerControlParameters(
                key="AllowedRegions",
                value=Token.as_string(Fn.jsonencode(["us-east-1"]))
            )
            ],
            target_identifier=Token.as_string(
                Fn.lookup_nested("${[ for x in ${" + data_aws_organizations_organizational_units_example.children + "} : x.arn if x.name == \"Infrastructure\"]}", ["0"]))
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_controltower_control_example.override_logical_id("example")
```

## Argument Reference

This following arguments are required:

* `control_identifier` - (Required) The ARN of the control. Only Strongly recommended and Elective controls are permitted, with the exception of the Region deny guardrail.
* `target_identifier` - (Required) The ARN of the organizational unit.

The following arguments are optional:

* `parameters` - (Optional) Parameter values which are specified to configure the control when you enable it. See [Parameters](#parameters) for more details.

### Parameters

* `key` - (Required) The name of the parameter.
* `value` - (Required) The value of the parameter.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The ARN of the EnabledControl resource.
* `id` - The ARN of the organizational unit.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Control Tower Controls using their `organizational_unit_arn,control_identifier`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.controltower_control import ControltowerControl
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        ControltowerControl.generate_config_for_import(self, "example", "arn:aws:organizations::123456789101:ou/o-qqaejywet/ou-qg5o-ufbhdtv3,arn:aws:controltower:us-east-1::control/WTDSMKDKDNLE")
```

Using `terraform import`, import Control Tower Controls using their `organizational_unit_arn/control_identifier`. For example:

```console
% terraform import aws_controltower_control.example arn:aws:organizations::123456789101:ou/o-qqaejywet/ou-qg5o-ufbhdtv3,arn:aws:controltower:us-east-1::control/WTDSMKDKDNLE
```

<!-- cache-key: cdktf-0.20.1 input-5f1cc75964a9bab80576b7038263cd126393a7d6d85ad5f6f57aad1a6e199a91 -->