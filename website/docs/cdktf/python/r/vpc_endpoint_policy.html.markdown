---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_vpc_endpoint_policy"
description: |-
  Provides a VPC Endpoint Policy resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_vpc_endpoint_policy

Provides a VPC Endpoint Policy resource.

## Example Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, Fn, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.data_aws_vpc_endpoint_service import DataAwsVpcEndpointService
from imports.aws.vpc import Vpc
from imports.aws.vpc_endpoint import VpcEndpoint
from imports.aws.vpc_endpoint_policy import VpcEndpointPolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        example = Vpc(self, "example",
            cidr_block="10.0.0.0/16"
        )
        data_aws_vpc_endpoint_service_example = DataAwsVpcEndpointService(self, "example_1",
            service="dynamodb"
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        data_aws_vpc_endpoint_service_example.override_logical_id("example")
        aws_vpc_endpoint_example = VpcEndpoint(self, "example_2",
            service_name=Token.as_string(data_aws_vpc_endpoint_service_example.service_name),
            vpc_id=example.id
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_endpoint_example.override_logical_id("example")
        aws_vpc_endpoint_policy_example = VpcEndpointPolicy(self, "example_3",
            policy=Token.as_string(
                Fn.jsonencode({
                    "Statement": [{
                        "Action": ["dynamodb:*"],
                        "Effect": "Allow",
                        "Principal": {
                            "AWS": "*"
                        },
                        "Resource": "*",
                        "Sid": "AllowAll"
                    }
                    ],
                    "Version": "2012-10-17"
                })),
            vpc_endpoint_id=Token.as_string(aws_vpc_endpoint_example.id)
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        aws_vpc_endpoint_policy_example.override_logical_id("example")
```

## Argument Reference

This resource supports the following arguments:

* `vpc_endpoint_id` - (Required) The VPC Endpoint ID.
* `policy` - (Optional) A policy to attach to the endpoint that controls access to the service. Defaults to full access. All `Gateway` and some `Interface` endpoints support policies - see the [relevant AWS documentation](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-endpoints-access.html) for more details. For more information about building AWS IAM policy documents with Terraform, see the [AWS IAM Policy Document Guide](https://learn.hashicorp.com/terraform/aws/iam-policy).

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the VPC endpoint.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import VPC Endpoint Policies using the `id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.vpc_endpoint_policy import VpcEndpointPolicy
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        VpcEndpointPolicy.generate_config_for_import(self, "example", "vpce-3ecf2a57")
```

Using `terraform import`, import VPC Endpoint Policies using the `id`. For example:

```console
% terraform import aws_vpc_endpoint_policy.example vpce-3ecf2a57
```

<!-- cache-key: cdktf-0.20.8 input-a5b2784f8f44ade8f56c203390d38d1010def6c1bdaafcb341605772236d19d6 -->