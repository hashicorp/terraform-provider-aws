---
subcategory: "VPC Lattice"
layout: "aws"
page_title: "AWS: aws_vpclattice_service"
description: |-
  Terraform resource for managing an AWS VPC Lattice Service.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_vpclattice_service

Terraform resource for managing an AWS VPC Lattice Service.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.vpclattice_service import VpclatticeService
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        VpclatticeService(self, "example",
            auth_type="AWS_IAM",
            custom_domain_name="example.com",
            name="example"
        )
```

## Argument Reference

The following arguments are required:

* `name` - (Required) Name of the service. The name must be unique within the account. The valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.Must be between 3 and 40 characters in length.

The following arguments are optional:

* `auth_type` - (Optional) Type of IAM policy. Either `NONE` or `AWS_IAM`.
* `certificate_arn` - (Optional) Amazon Resource Name (ARN) of the certificate.
* `custom_domain_name` - (Optional) Custom domain name of the service.
* `tags` - (Optional) Key-value mapping of resource tags. If configured with a provider [`default_tags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the service.
* `dns_entry` - DNS name of the service.
* `id` - Unique identifier for the service.
* `status` - Status of the service.
* `tags_all` - Map of tags assigned to the resource, including those inherited from the provider [`default_tags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `5m`)
* `delete` - (Default `5m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import VPC Lattice Service using the `id`. For example:

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.vpclattice_service import VpclatticeService
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        VpclatticeService.generate_config_for_import(self, "example", "svc-06728e2357ea55f8a")
```

Using `terraform import`, import VPC Lattice Service using the `id`. For example:

```console
% terraform import aws_vpclattice_service.example svc-06728e2357ea55f8a
```

<!-- cache-key: cdktf-0.20.8 input-f9acfec4249fc51134e9cb5589073b543ce94ac0103b759f9c21d3128e90b21c -->