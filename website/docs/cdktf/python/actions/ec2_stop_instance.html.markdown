---
subcategory: "EC2 (Elastic Compute Cloud)"
layout: "aws"
page_title: "AWS: aws_ec2_stop_instance"
description: |-
  Stops an EC2 instance.
---


<!-- Please do not edit this file, it is generated. -->
# Action: aws_ec2_stop_instance

~> **Note:** `aws_ec2_stop_instance` is in alpha. Its interface and behavior may change as the feature evolves, and breaking changes are possible. It is offered as a technical preview without compatibility guarantees until Terraform 1.14 is generally available.

Stops an EC2 instance. This action will gracefully stop the instance and wait for it to reach the stopped state.

For information about Amazon EC2, see the [Amazon EC2 User Guide](https://docs.aws.amazon.com/ec2/latest/userguide/). For specific information about stopping instances, see the [StopInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_StopInstances.html) page in the Amazon EC2 API Reference.

~> **Note:** This action directly stops EC2 instances which will interrupt running workloads. Ensure proper coordination with your applications before using this action.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import Token, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.instance import Instance
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        Instance(self, "example",
            ami=Token.as_string(amazon_linux.id),
            instance_type="t3.micro",
            tags={
                "Name": "example-instance"
            }
        )
```

### Force Stop

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
```

### Maintenance Window

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from cdktf import TerraformResourceLifecycle
from constructs import Construct
from cdktf import Token, DataResource, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.instance import Instance
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        web_server = Instance(self, "web_server",
            ami=Token.as_string(amazon_linux.id),
            instance_type="t3.micro",
            tags={
                "Name": "web-server"
            }
        )
        DataResource(self, "maintenance_trigger",
            depends_on=[web_server],
            input=maintenance_window.value,
            lifecycle=TerraformResourceLifecycle(
                action_trigger=[{
                    "actions": [aws_ec2_stop_instance.maintenance],
                    "events": [before_create, before_update]
                }
                ]
            )
        )
```

## Argument Reference

This action supports the following arguments:

* `instance_id` - (Required) ID of the EC2 instance to stop. Must be a valid EC2 instance ID (e.g., i-1234567890abcdef0).
* `force` - (Optional) Forces the instance to stop. The instance does not have an opportunity to flush file system caches or file system metadata. If you use this option, you must perform file system check and repair procedures. This option is not recommended for Windows instances. Default: `false`.
* `timeout` - (Optional) Timeout in seconds to wait for the instance to stop. Must be between 30 and 3600 seconds. Default: `600`.

<!-- cache-key: cdktf-0.20.8 input-1f689da6b7520c54a615490a1faa04a6beb5faab1761e0a2cd30ce855a9cca08 -->