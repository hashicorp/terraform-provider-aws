---
subcategory: "SNS (Simple Notification)"
layout: "aws"
page_title: "AWS: aws_sns_publish"
description: |-
  Publishes a message to an Amazon SNS topic.
---


<!-- Please do not edit this file, it is generated. -->
# Action: aws_sns_publish

~> **Note:** `aws_sns_publish` is in beta. Its interface and behavior may change as the feature evolves, and breaking changes are possible. It is offered as a technical preview without compatibility guarantees until Terraform 1.14 is generally available.

Publishes a message to an Amazon SNS topic. This action allows for imperative message publishing with full control over message attributes and structure.

For information about Amazon SNS, see the [Amazon SNS Developer Guide](https://docs.aws.amazon.com/sns/latest/dg/). For specific information about publishing messages, see the [Publish](https://docs.aws.amazon.com/sns/latest/api/API_Publish.html) page in the Amazon SNS API Reference.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from cdktf import TerraformResourceLifecycle
from constructs import Construct
from cdktf import DataResource, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.sns_topic import SnsTopic
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        SnsTopic(self, "example",
            name="example-topic"
        )
        terraform_data_example = DataResource(self, "example_1",
            input="trigger-message",
            lifecycle=TerraformResourceLifecycle(
                action_trigger=[{
                    "actions": [aws_sns_publish.example],
                    "events": [before_create, before_update]
                }
                ]
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        terraform_data_example.override_logical_id("example")
```

### Message with Subject

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
```

### JSON Message Structure

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
```

### Message with Attributes

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
```

### Deployment Notification

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from cdktf import TerraformResourceLifecycle
from constructs import Construct
from cdktf import DataResource, TerraformStack
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DataResource(self, "deploy_trigger",
            depends_on=[app, main],
            input=deployment_id.value,
            lifecycle=TerraformResourceLifecycle(
                action_trigger=[{
                    "actions": [aws_sns_publish.deploy_complete],
                    "events": [before_create, before_update]
                }
                ]
            )
        )
```

## Argument Reference

This action supports the following arguments:

* `message` - (Required) Message to publish. For JSON message structure, this should be a JSON object with protocol-specific messages. Maximum size is 256 KB.
* `message_attributes` - (Optional) Message attributes to include with the message. Each attribute consists of a name, data type, and value. Up to 10 attributes are allowed. [See below.](#message-attributes)
* `message_structure` - (Optional) Set to `json` if you want to send different messages for each protocol. If not specified, the message will be sent as-is to all protocols.
* `subject` - (Optional) Optional subject for the message. Only used for email and email-json protocols. Maximum length is 100 characters.
* `topic_arn` - (Required) ARN of the SNS topic to publish the message to.

### Message Attributes

The `message_attributes` block supports:

* `data_type` - (Required) Data type of the message attribute. Valid values are `String`, `Number`, and `Binary`.
* `map_block_key` - (Required) Name of the message attribute (used as map key). Must be unique within the message.
* `string_value` - (Required) Value of the message attribute.

<!-- cache-key: cdktf-0.20.8 input-c0478d7376f377525252e3f6b26d58d33907fdecb7f5a8dc67fbc710a54f4f28 -->