---
subcategory: "SES (Simple Email)"
layout: "aws"
page_title: "AWS: aws_ses_send_email"
description: |-
  Sends an email using Amazon SES.
---


<!-- Please do not edit this file, it is generated. -->
# Action: aws_ses_send_email

~> **Note:** `aws_ses_send_email` is in beta. Its interface and behavior may change as the feature evolves, and breaking changes are possible. It is offered as a technical preview without compatibility guarantees until Terraform 1.14 is generally available.

Sends an email using Amazon SES. This action allows for imperative email sending with full control over recipients, content, and formatting.

For information about Amazon SES, see the [Amazon SES Developer Guide](https://docs.aws.amazon.com/ses/latest/dg/). For specific information about sending emails, see the [SendEmail](https://docs.aws.amazon.com/ses/latest/APIReference/API_SendEmail.html) page in the Amazon SES API Reference.

~> **Note:** All email addresses used must be verified in Amazon SES or belong to a verified domain. Due to the difficulty in testing, your help is important in discovering and reporting issues.

## Example Usage

### Basic Usage

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from cdktf import TerraformResourceLifecycle
from constructs import Construct
from cdktf import DataResource, TerraformStack
#
# Provider bindings are generated by running `cdktf get`.
# See https://cdk.tf/provider-generation for more details.
#
from imports.aws.ses_email_identity import SesEmailIdentity
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        SesEmailIdentity(self, "example",
            email="sender@example.com"
        )
        terraform_data_example = DataResource(self, "example_1",
            input="send-notification",
            lifecycle=TerraformResourceLifecycle(
                action_trigger=[{
                    "actions": [aws_ses_send_email.example],
                    "events": [before_create, before_update]
                }
                ]
            )
        )
        # This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.
        terraform_data_example.override_logical_id("example")
```

### HTML Email with Multiple Recipients

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
```

### Deployment Notification

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from cdktf import TerraformResourceLifecycle
from constructs import Construct
from cdktf import DataResource, TerraformStack
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
        DataResource(self, "deployment",
            depends_on=[app],
            input=deployment_id.value,
            lifecycle=TerraformResourceLifecycle(
                action_trigger=[{
                    "actions": [aws_ses_send_email.deploy_notification],
                    "events": [after_create]
                }
                ]
            )
        )
```

### Alert Email with Dynamic Content

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
```

### Multi-format Email

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
```

### Conditional Email Sending

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
```

### Batch Processing Notification

```python
# DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
from constructs import Construct
from cdktf import TerraformStack
class MyConvertedCode(TerraformStack):
    def __init__(self, scope, name):
        super().__init__(scope, name)
```

## Argument Reference

This action supports the following arguments:

* `bcc_addresses` - (Optional) List of email addresses for the BCC: field of the message. Recipients in this list will receive the email but their addresses will not be visible to other recipients.
* `cc_addresses` - (Optional) List of email addresses for the CC: field of the message. Recipients in this list will receive the email and their addresses will be visible to all recipients.
* `html_body` - (Optional) Message body in HTML format. Either `text_body` or `html_body` (or both) must be specified. HTML content allows for rich formatting including links, images, and styling.
* `reply_to_addresses` - (Optional) List of reply-to email addresses for the message. If the recipient replies to the message, each reply-to address will receive the reply. If not specified, replies will go to the source address.
* `return_path` - (Optional) Email address that bounces and complaints will be forwarded to when feedback forwarding is enabled. This is useful for handling delivery failures and spam complaints.
* `source` - (Required) Email address that is sending the email. This address must be either individually verified with Amazon SES, or from a domain that has been verified with Amazon SES.
* `subject` - (Required) Subject of the message: A short summary of the content, which will appear in the recipient's inbox.
* `text_body` - (Optional) Message body in text format. Either `text_body` or `html_body` (or both) must be specified. Text format ensures compatibility with all email clients.
* `to_addresses` - (Optional) List of email addresses for the To: field of the message. These are the primary recipients of the email.

<!-- cache-key: cdktf-0.20.8 input-cad0c5ac5fd2b630cb2ee04e04daeefd5e85e12772e94953ba5b7d94882e7cb4 -->