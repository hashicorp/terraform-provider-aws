---
subcategory: "SFN (Step Functions)"
layout: "aws"
page_title: "AWS: aws_sfn_start_execution"
description: |-
  Starts a Step Functions state machine execution with the specified input data.
---


<!-- Please do not edit this file, it is generated. -->
# Action: aws_sfn_start_execution

~> **Note:** `aws_sfn_start_execution` is in beta. Its interface and behavior may change as the feature evolves, and breaking changes are possible. It is offered as a technical preview without compatibility guarantees until Terraform 1.14 is generally available.

Starts a Step Functions state machine execution with the specified input data. This action allows for imperative execution of state machines with full control over execution parameters.

For information about AWS Step Functions, see the [AWS Step Functions Developer Guide](https://docs.aws.amazon.com/step-functions/latest/dg/). For specific information about starting executions, see the [StartExecution](https://docs.aws.amazon.com/step-functions/latest/apireference/API_StartExecution.html) page in the AWS Step Functions API Reference.

~> **Note:** For `STANDARD` workflows, executions with the same name and input are idempotent. For `EXPRESS` workflows, each execution is unique regardless of name and input.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, DataResource, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SfnStateMachine } from "./.gen/providers/aws/sfn-state-machine";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new SfnStateMachine(this, "example", {
      definition: Token.asString(
        Fn.jsonencode({
          Comment: "A simple minimal example",
          StartAt: "Hello",
          States: {
            Hello: {
              End: true,
              Result: "Hello World!",
              Type: "Pass",
            },
          },
        })
      ),
      name: "example-state-machine",
      roleArn: sfn.arn,
    });
    const terraformDataExample = new DataResource(this, "example_1", {
      input: "trigger-execution",
      lifecycle: {
        actionTrigger: [
          {
            actions: [awsSfnStartExecution.example],
            events: [beforeCreate, beforeUpdate],
          },
        ],
      },
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    terraformDataExample.overrideLogicalId("example");
  }
}

```

### Named Execution

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
  }
}

```

### Execution with Version

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
  }
}

```

### Execution with Alias

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SfnAlias } from "./.gen/providers/aws/sfn-alias";
interface MyConfig {
  stateMachineVersionArn: any;
  weight: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new SfnAlias(this, "prod", {
      name: "PROD",
      routingConfiguration: [
        {
          state_machine_version_weight: [
            {
              state_machine_version_arn: example.arn,
              weight: 100,
            },
          ],
          stateMachineVersionArn: config.stateMachineVersionArn,
          weight: config.weight,
        },
      ],
      state_machine_arn: example.arn,
    });
  }
}

```

### X-Ray Tracing

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
  }
}

```

### CI/CD Pipeline Integration

Use this action in your deployment pipeline to trigger post-deployment workflows:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { DataResource, TerraformStack } from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new DataResource(this, "deploy_complete", {
      dependsOn: [processors],
      input: deploymentId,
      lifecycle: {
        actionTrigger: [
          {
            actions: [awsSfnStartExecution.postDeploy],
            events: [beforeCreate, beforeUpdate],
          },
        ],
      },
    });
  }
}

```

### Environment-Specific Processing

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
  }
}

```

### Complex Workflow Orchestration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
  }
}

```

## Argument Reference

This action supports the following arguments:

* `input` - (Optional) JSON input data for the execution. Must be valid JSON. Defaults to `{}` if not specified. The input size limit is 256 KB.
* `name` - (Optional) Name of the execution. Must be unique within the account/region/state machine for 90 days. If not provided, Step Functions automatically generates a UUID. Names must not contain whitespace, brackets, wildcards, or special characters.
* `state_machine_arn` - (Required) ARN of the state machine to execute. Can be an unqualified ARN, version-qualified ARN (e.g., `arn:aws:states:region:account:stateMachine:name:version`), or alias-qualified ARN (e.g., `arn:aws:states:region:account:stateMachine:name:alias`).
* `trace_header` - (Optional) AWS X-Ray trace header for distributed tracing. Used to correlate execution traces across services.

<!-- cache-key: cdktf-0.20.8 input-f50fb55ee205b83bb20f487d54e45117cd2994b0cffa9684ab55b6deaddea547 -->