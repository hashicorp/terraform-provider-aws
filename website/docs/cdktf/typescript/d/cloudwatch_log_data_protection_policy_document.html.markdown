---
subcategory: "CloudWatch Logs"
layout: "aws"
page_title: "AWS: aws_cloudwatch_log_data_protection_policy_document"
description: |-
  Generates a CloudWatch Log Group Data Protection Policy document in JSON format
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_cloudwatch_log_data_protection_policy_document

Generates a CloudWatch Log Group Data Protection Policy document in JSON format for use with the `aws_cloudwatch_log_data_protection_policy` resource.

-> For more information about data protection policies, see the [Help protect sensitive log data with masking](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data.html).

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchLogDataProtectionPolicy } from "./.gen/providers/aws/cloudwatch-log-data-protection-policy";
import { DataAwsCloudwatchLogDataProtectionPolicyDocument } from "./.gen/providers/aws/data-aws-cloudwatch-log-data-protection-policy-document";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DataAwsCloudwatchLogDataProtectionPolicyDocument(
      this,
      "example",
      {
        name: "Example",
        statement: [
          {
            dataIdentifiers: [
              "arn:aws:dataprotection::aws:data-identifier/EmailAddress",
              "arn:aws:dataprotection::aws:data-identifier/DriversLicense-US",
            ],
            operation: {
              audit: {
                findingsDestination: {
                  cloudwatchLogs: {
                    logGroup: audit.name,
                  },
                  firehose: {
                    deliveryStream: Token.asString(
                      awsKinesisFirehoseDeliveryStreamAudit.name
                    ),
                  },
                  s3: {
                    bucket: Token.asString(awsS3BucketAudit.bucket),
                  },
                },
              },
            },
            sid: "Audit",
          },
          {
            dataIdentifiers: [
              "arn:aws:dataprotection::aws:data-identifier/EmailAddress",
              "arn:aws:dataprotection::aws:data-identifier/DriversLicense-US",
            ],
            operation: {
              deidentify: {
                maskConfig: {},
              },
            },
            sid: "Deidentify",
          },
        ],
      }
    );
    const awsCloudwatchLogDataProtectionPolicyExample =
      new CloudwatchLogDataProtectionPolicy(this, "example_1", {
        logGroupName: Token.asString(awsCloudwatchLogGroupExample.name),
        policyDocument: Token.asString(example.json),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCloudwatchLogDataProtectionPolicyExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `name` - (Required) The name of the data protection policy document.
* `statement` - (Required) Configures the data protection policy.

-> There must be exactly two statements: the first with an `audit` operation, and the second with a `deidentify` operation.

The following arguments are optional:

* `description` - (Optional)
* `version` - (Optional)

### statement Configuration Block

* `dataIdentifiers` - (Required) Set of at least 1 sensitive data identifiers that you want to mask. Read more in [Types of data that you can protect](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/protect-sensitive-log-data-types.html).
* `operation` - (Required) Configures the data protection operation applied by this statement.
* `sid` - (Optional) Name of this statement.

#### operation Configuration Block

* `audit` - (Optional) Configures the detection of sensitive data.
* `deidentify` - (Optional) Configures the masking of sensitive data.

-> Every policy statement must specify exactly one operation.

##### audit Configuration Block

* `findingsDestination` - (Required) Configures destinations to send audit findings to.

##### findings_destination Configuration Block

* `cloudwatchLogs` - (Optional) Configures CloudWatch Logs as a findings destination.
* `firehose` - (Optional) Configures Kinesis Firehose as a findings destination.
* `s3` - (Optional) Configures S3 as a findings destination.

###### cloudwatch_logs Configuration Block

* `logGroup` - (Required) Name of the CloudWatch Log Group to send findings to.

###### firehose Configuration Block

* `deliveryStream` - (Required) Name of the Kinesis Firehose Delivery Stream to send findings to.

###### s3 Configuration Block

* `bucket` - (Required) Name of the S3 Bucket to send findings to.

##### deidentify Configuration Block

* `maskConfig` - (Required) An empty object that configures masking.

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `json` - Standard JSON policy document rendered based on the arguments above.

<!-- cache-key: cdktf-0.20.8 input-f0c94e0aa8a0da473585431ea622f8f0cfd32bb09136ae337369c54288ff6f27 -->