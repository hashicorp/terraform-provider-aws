---
subcategory: "Lambda"
layout: "aws"
page_title: "AWS: aws_lambda_function_url"
description: |-
  Provides details about an AWS Lambda Function URL.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_lambda_function_url

Provides details about an AWS Lambda Function URL. Use this data source to retrieve information about an existing function URL configuration.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformOutput, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsLambdaFunctionUrl } from "./.gen/providers/aws/data-aws-lambda-function-url";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DataAwsLambdaFunctionUrl(this, "example", {
      functionName: "my_lambda_function",
    });
    new TerraformOutput(this, "function_url", {
      value: example.functionUrl,
    });
  }
}

```

### With Qualifier

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsLambdaFunctionUrl } from "./.gen/providers/aws/data-aws-lambda-function-url";
import { Route53Record } from "./.gen/providers/aws/route53-record";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DataAwsLambdaFunctionUrl(this, "example", {
      functionName: Token.asString(awsLambdaFunctionExample.functionName),
      qualifier: "production",
    });
    new Route53Record(this, "lambda_alias", {
      name: "api.example.com",
      records: [
        Token.asString(
          Fn.replace(Token.asString(example.functionUrl), "https://", "")
        ),
      ],
      ttl: 300,
      type: "CNAME",
      zoneId: Token.asString(awsRoute53ZoneExample.zoneId),
    });
  }
}

```

### Retrieve CORS Configuration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Op, conditional, TerraformOutput, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsLambdaFunctionUrl } from "./.gen/providers/aws/data-aws-lambda-function-url";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DataAwsLambdaFunctionUrl(this, "example", {
      functionName: "api_function",
    });
    const corsConfig = conditional(
      Op.gt(Fn.lengthOf(example.cors), 0),
      Fn.lookupNested(example.cors, ["0"]),
      "null"
    );
    const allowedOrigins = conditional(
      Op.neq(corsConfig, "null"),
      Fn.lookupNested(corsConfig, ["allow_origins"]),
      []
    );
    new TerraformOutput(this, "cors_allowed_origins", {
      value: allowedOrigins,
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `functionName` - (Required) Name or ARN of the Lambda function.

The following arguments are optional:

* `qualifier` - (Optional) Alias name or `$LATEST`.
* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `authorizationType` - Type of authentication that the function URL uses.
* `cors` - Cross-origin resource sharing (CORS) settings for the function URL. [See below](#cors-attribute-reference).
* `creationTime` - When the function URL was created, in [ISO-8601 format](https://www.w3.org/TR/NOTE-datetime).
* `functionArn` - ARN of the function.
* `functionUrl` - HTTP URL endpoint for the function in the format `https://<url_id>.lambda-url.<region>.on.aws/`.
* `invokeMode` - Whether the Lambda function responds in `BUFFERED` or `RESPONSE_STREAM` mode.
* `lastModifiedTime` - When the function URL configuration was last updated, in [ISO-8601 format](https://www.w3.org/TR/NOTE-datetime).
* `urlId` - Generated ID for the endpoint.

### cors Attribute Reference

* `allowCredentials` - Whether credentials are included in the CORS request.
* `allowHeaders` - List of headers that are specified in the Access-Control-Request-Headers header.
* `allowMethods` - List of HTTP methods that are allowed when calling the function URL.
* `allowOrigins` - List of origins that are allowed to make requests to the function URL.
* `exposeHeaders` - List of headers in the response that you want to expose to the origin that called the function URL.
* `maxAge` - Maximum amount of time, in seconds, that web browsers can cache results of a preflight request.

<!-- cache-key: cdktf-0.20.8 input-a3fbb7d4a1cde826c9cf5ce4af263c86d37313ebad8b1b916b410f8067689714 -->