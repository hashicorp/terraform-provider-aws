---
subcategory: "S3 (Simple Storage)"
layout: "aws"
page_title: "AWS: aws_s3_bucket_object"
description: |-
    Provides metadata and optionally content of an S3 object
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_s3_bucket_object

~> **NOTE:** The `aws_s3_bucket_object` data source is DEPRECATED and will be removed in a future version! Use `aws_s3_object` instead, where new features and fixes will be added.

The S3 object data source allows access to the metadata and
_optionally_ (see below) content of an object stored inside S3 bucket.

~> **Note:** The content of an object (`body` field) is available only for objects which have a human-readable `Content-Type` (`text/*` and `application/json`). This is to prevent printing unsafe characters and potentially downloading large amount of data which would be thrown away in favor of metadata.

## Example Usage

The following example retrieves a text object (which must have a `Content-Type`
value starting with `text/`) and uses it as the `userData` for an EC2 instance:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsS3BucketObject } from "./.gen/providers/aws/data-aws-s3-bucket-object";
import { Instance } from "./.gen/providers/aws/instance";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const bootstrapScript = new DataAwsS3BucketObject(
      this,
      "bootstrap_script",
      {
        bucket: "ourcorp-deploy-config",
        key: "ec2-bootstrap-script.sh",
      }
    );
    new Instance(this, "example", {
      ami: "ami-2757f631",
      instanceType: "t2.micro",
      userData: Token.asString(bootstrapScript.body),
    });
  }
}

```

The following, more-complex example retrieves only the metadata for a zip
file stored in S3, which is then used to pass the most recent `versionId`
to AWS Lambda for use as a function implementation. More information about
Lambda functions is available in the documentation for
[`aws_lambda_function`](/docs/providers/aws/r/lambda_function.html).

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsS3BucketObject } from "./.gen/providers/aws/data-aws-s3-bucket-object";
import { LambdaFunction } from "./.gen/providers/aws/lambda-function";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const lambda = new DataAwsS3BucketObject(this, "lambda", {
      bucket: "ourcorp-lambda-functions",
      key: "hello-world.zip",
    });
    new LambdaFunction(this, "test_lambda", {
      functionName: "lambda_function_name",
      handler: "exports.test",
      role: iamForLambda.arn,
      s3Bucket: Token.asString(lambda.id),
      s3Key: Token.asString(lambda.key),
      s3ObjectVersion: Token.asString(lambda.versionId),
    });
  }
}

```

## Argument Reference

This data source supports the following arguments:

* `bucket` - (Required) Name of the bucket to read the object from. Alternatively, an [S3 access point](https://docs.aws.amazon.com/AmazonS3/latest/dev/using-access-points.html) ARN can be specified
* `key` - (Required) Full path to the object inside the bucket
* `versionId` - (Optional) Specific version ID of the object returned (defaults to latest version)

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `body` - Object data (see **limitations above** to understand cases in which this field is actually available)
* `bucketKeyEnabled` - (Optional) Whether or not to use [Amazon S3 Bucket Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html) for SSE-KMS.
* `cacheControl` - Caching behavior along the request/reply chain.
* `contentDisposition` - Presentational information for the object.
* `contentEncoding` - What content encodings have been applied to the object and thus what decoding mechanisms must be applied to obtain the media-type referenced by the Content-Type header field.
* `contentLanguage` - Language the content is in.
* `contentLength` - Size of the body in bytes.
* `contentType` - Standard MIME type describing the format of the object data.
* `etag` - [ETag](https://en.wikipedia.org/wiki/HTTP_ETag) generated for the object (an MD5 sum of the object content in case it's not encrypted)
* `expiration` - If the object expiration is configured (see [object lifecycle management](http://docs.aws.amazon.com/AmazonS3/latest/dev/object-lifecycle-mgmt.html)), the field includes this header. It includes the expiry-date and rule-id key value pairs providing object expiration information. The value of the rule-id is URL encoded.
* `expires` - Date and time at which the object is no longer cacheable.
* `lastModified` - Last modified date of the object in RFC1123 format (e.g., `Mon, 02 Jan 2006 15:04:05 MST`)
* `metadata` - Map of metadata stored with the object in S3. [Keys](https://developer.hashicorp.com/terraform/language/expressions/types#maps-objects) are always returned in lowercase.
* `objectLockLegalHoldStatus` - Indicates whether this object has an active [legal hold](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html#object-lock-legal-holds). This field is only returned if you have permission to view an object's legal hold status.
* `objectLockMode` - Object lock [retention mode](https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html#object-lock-retention-modes) currently in place for this object.
* `objectLockRetainUntilDate` - The date and time when this object's object lock will expire.
* `serverSideEncryption` - If the object is stored using server-side encryption (KMS or Amazon S3-managed encryption key), this field includes the chosen encryption and algorithm used.
* `sseKmsKeyId` - If present, specifies the ID of the Key Management Service (KMS) master encryption key that was used for the object.
* `storageClass` - [Storage class](http://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html) information of the object. Available for all objects except for `Standard` storage class objects.
* `versionId` - Latest version ID of the object returned.
* `websiteRedirectLocation` - If the bucket is configured as a website, redirects requests for this object to another object in the same bucket or to an external URL. Amazon S3 stores the value of this header in the object metadata.
* `tags`  - Map of tags assigned to the object.

-> **Note:** Terraform ignores all leading `/`s in the object's `key` and treats multiple `/`s in the rest of the object's `key` as a single `/`, so values of `/index.html` and `index.html` correspond to the same S3 object as do `first//second///third//` and `first/second/third/`.

<!-- cache-key: cdktf-0.20.1 input-1c9f93546343cc319f2c016556a9d3d387bb7edadd8094325646d3e0015a6242 -->