---
subcategory: "Organizations"
layout: "aws"
page_title: "AWS: aws_organizations_policies_for_target"
description: |-
  Terraform data source for managing an AWS Organizations Policies For Target.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_organizations_policies_for_target

Terraform data source for managing an AWS Organizations Policies For Target.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformIterator, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsOrganizationsOrganization } from "./.gen/providers/aws/data-aws-organizations-organization";
import { DataAwsOrganizationsPoliciesForTarget } from "./.gen/providers/aws/data-aws-organizations-policies-for-target";
import { DataAwsOrganizationsPolicy } from "./.gen/providers/aws/data-aws-organizations-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DataAwsOrganizationsOrganization(this, "example", {});
    const dataAwsOrganizationsPoliciesForTargetExample =
      new DataAwsOrganizationsPoliciesForTarget(this, "example_1", {
        filter: "SERVICE_CONTROL_POLICY",
        targetId: Token.asString(Fn.lookupNested(example.roots, ["0", "id"])),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsOrganizationsPoliciesForTargetExample.overrideLogicalId("example");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const exampleForEachIterator = TerraformIterator.fromList(
      Token.asAny(Fn.toset(dataAwsOrganizationsPoliciesForTargetExample.ids))
    );
    const dataAwsOrganizationsPolicyExample = new DataAwsOrganizationsPolicy(
      this,
      "example_2",
      {
        policyId: Token.asString(exampleForEachIterator.value),
        forEach: exampleForEachIterator,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsOrganizationsPolicyExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `targetId` - (Required) The root (string that begins with "r-" followed by 4-32 lowercase letters or digits), account (12 digit string), or Organizational Unit (string starting with "ou-" followed by 4-32 lowercase letters or digits. This string is followed by a second "-" dash and from 8-32 additional lowercase letters or digits.)
* `filter` - (Required) Must supply one of the 5 different policy filters for a target (AISERVICES_OPT_OUT_POLICY | BACKUP_POLICY | RESOURCE_CONTROL_POLICY | SERVICE_CONTROL_POLICY | TAG_POLICY)

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `ids` - List of all the policy ids found.

<!-- cache-key: cdktf-0.20.8 input-27172d4e78ab2c79a6b38575e2c6c5dc8abedc78025cbd4174fa27ea650a160d -->