---
subcategory: "Lambda"
layout: "aws"
page_title: "AWS: aws_lambda_layer_version"
description: |-
  Provides details about an AWS Lambda Layer Version.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_lambda_layer_version

Provides details about an AWS Lambda Layer Version. Use this data source to retrieve information about a specific layer version or find the latest version compatible with your runtime and architecture requirements.

## Example Usage

### Get Latest Layer Version

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsLambdaLayerVersion } from "./.gen/providers/aws/data-aws-lambda-layer-version";
import { LambdaFunction } from "./.gen/providers/aws/lambda-function";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DataAwsLambdaLayerVersion(this, "example", {
      layerName: "my-shared-utilities",
    });
    const awsLambdaFunctionExample = new LambdaFunction(this, "example_1", {
      filename: "function.zip",
      functionName: "example_function",
      handler: "index.handler",
      layers: [Token.asString(example.arn)],
      role: lambdaRole.arn,
      runtime: "nodejs20.x",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsLambdaFunctionExample.overrideLogicalId("example");
  }
}

```

### Get Specific Layer Version

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformOutput, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsLambdaLayerVersion } from "./.gen/providers/aws/data-aws-lambda-layer-version";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DataAwsLambdaLayerVersion(this, "example", {
      layerName: "production-utilities",
      version: 5,
    });
    new TerraformOutput(this, "layer_info", {
      value: [
        {
          arn: example.arn,
          description: example.description,
          version: example.version,
        },
      ],
    });
  }
}

```

### Get Latest Compatible Layer Version

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsLambdaLayerVersion } from "./.gen/providers/aws/data-aws-lambda-layer-version";
import { LambdaFunction } from "./.gen/providers/aws/lambda-function";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const armLayer = new DataAwsLambdaLayerVersion(this, "arm_layer", {
      compatibleArchitecture: "arm64",
      layerName: "optimized-libraries",
    });
    const pythonLayer = new DataAwsLambdaLayerVersion(this, "python_layer", {
      compatibleRuntime: "python3.12",
      layerName: "python-dependencies",
    });
    new LambdaFunction(this, "example", {
      architectures: ["arm64"],
      filename: "function.zip",
      functionName: "multi_layer_function",
      handler: "app.handler",
      layers: [Token.asString(pythonLayer.arn), Token.asString(armLayer.arn)],
      role: lambdaRole.arn,
      runtime: "python3.12",
    });
  }
}

```

### Compare Layer Versions

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Op, TerraformOutput, conditional, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsLambdaLayerVersion } from "./.gen/providers/aws/data-aws-lambda-layer-version";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const latest = new DataAwsLambdaLayerVersion(this, "latest", {
      layerName: "shared-layer",
    });
    const stable = new DataAwsLambdaLayerVersion(this, "stable", {
      layerName: "shared-layer",
      version: 3,
    });
    const useLatestLayer = Op.gt(latest.version, 5);
    new TerraformOutput(this, "selected_layer_version", {
      value: conditional(useLatestLayer, latest.version, stable.version),
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `layerName` - (Required) Name of the Lambda layer.

The following arguments are optional:

* `compatibleArchitecture` - (Optional) Specific architecture the layer version must support. Conflicts with `version`. If specified, the latest available layer version supporting the provided architecture will be used.
* `compatibleRuntime` - (Optional) Specific runtime the layer version must support. Conflicts with `version`. If specified, the latest available layer version supporting the provided runtime will be used.
* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `version` - (Optional) Specific layer version. Conflicts with `compatibleRuntime` and `compatibleArchitecture`. If omitted, the latest available layer version will be used.

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `arn` - ARN of the Lambda Layer with version.
* `codeSha256` - Base64-encoded representation of raw SHA-256 sum of the zip file.
* `compatibleArchitectures` - List of [Architectures](https://docs.aws.amazon.com/lambda/latest/dg/API_GetLayerVersion.html#SSS-GetLayerVersion-response-CompatibleArchitectures) the specific Lambda Layer version is compatible with.
* `compatibleRuntimes` - List of [Runtimes](https://docs.aws.amazon.com/lambda/latest/dg/API_GetLayerVersion.html#SSS-GetLayerVersion-response-CompatibleRuntimes) the specific Lambda Layer version is compatible with.
* `createdDate` - Date this resource was created.
* `description` - Description of the specific Lambda Layer version.
* `layerArn` - ARN of the Lambda Layer without version.
* `licenseInfo` - License info associated with the specific Lambda Layer version.
* `signingJobArn` - ARN of a signing job.
* `signingProfileVersionArn` - ARN for a signing profile version.
* `sourceCodeHash` - (**Deprecated** use `codeSha256` instead) Base64-encoded representation of raw SHA-256 sum of the zip file.
* `sourceCodeSize` - Size in bytes of the function .zip file.
* `version` - Lambda Layer version.

<!-- cache-key: cdktf-0.20.8 input-e07374b20dbbcf1fa3dd31a1a0e974b3636c36b4595dcbf5dca3b69d6a778b95 -->