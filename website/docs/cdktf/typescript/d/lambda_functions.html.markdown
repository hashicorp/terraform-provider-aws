---
subcategory: "Lambda"
layout: "aws"
page_title: "AWS: aws_lambda_functions"
description: |-
  Provides a list of AWS Lambda Functions.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_lambda_functions

Provides a list of AWS Lambda Functions in the current region. Use this data source to discover existing Lambda functions for inventory, monitoring, or bulk operations.

## Example Usage

### List All Functions

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformOutput, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsLambdaFunctions } from "./.gen/providers/aws/data-aws-lambda-functions";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const all = new DataAwsLambdaFunctions(this, "all", {});
    new TerraformOutput(this, "all_function_names", {
      value: all.functionNames,
    });
    new TerraformOutput(this, "function_count", {
      value: Fn.lengthOf(all.functionNames),
    });
  }
}

```

### Use Function List for Bulk Operations

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformCount, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchMetricAlarm } from "./.gen/providers/aws/cloudwatch-metric-alarm";
import { DataAwsLambdaFunctions } from "./.gen/providers/aws/data-aws-lambda-functions";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const all = new DataAwsLambdaFunctions(this, "all", {});
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const lambdaErrorsCount = TerraformCount.of(
      Token.asNumber(Fn.lengthOf(all.functionNames))
    );
    new CloudwatchMetricAlarm(this, "lambda_errors", {
      alarmDescription: "This metric monitors lambda errors",
      alarmName:
        Token.asString(
          Fn.lookupNested(all.functionNames, [lambdaErrorsCount.index])
        ) + "-errors",
      comparisonOperator: "GreaterThanThreshold",
      dimensions: {
        FunctionName: Token.asString(
          Fn.lookupNested(all.functionNames, [lambdaErrorsCount.index])
        ),
      },
      evaluationPeriods: Token.asNumber("2"),
      metricName: "Errors",
      namespace: "AWS/Lambda",
      period: Token.asNumber("300"),
      statistic: "Sum",
      tags: {
        Environment: "monitoring",
        Purpose: "lambda-error-tracking",
      },
      threshold: Token.asNumber("5"),
      count: lambdaErrorsCount,
    });
  }
}

```

### Filter Functions by Name Pattern

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformOutput, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsLambdaFunctions } from "./.gen/providers/aws/data-aws-lambda-functions";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const all = new DataAwsLambdaFunctions(this, "all", {});
    const apiFunctions =
      "${[ for name in ${" +
      all.functionNames +
      '} : name if can(regex("^api-", name))]}';
    const workerFunctions =
      "${[ for name in ${" +
      all.functionNames +
      '} : name if can(regex("^worker-", name))]}';
    new TerraformOutput(this, "api_functions", {
      value: apiFunctions,
    });
    new TerraformOutput(this, "worker_functions", {
      value: workerFunctions,
    });
  }
}

```

### Create Function Inventory

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import {
  TerraformOutput,
  Fn,
  Token,
  TerraformCount,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsLambdaFunction } from "./.gen/providers/aws/data-aws-lambda-function";
import { DataAwsLambdaFunctions } from "./.gen/providers/aws/data-aws-lambda-functions";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const all = new DataAwsLambdaFunctions(this, "all", {});
    const functionInventory =
      "${[ for i, name in ${" +
      all.functionNames +
      "} : {\n      name        = name\n      arn         = data.aws_lambda_functions.all.function_arns[i]\n      runtime     = data.aws_lambda_function.details[i].runtime\n      memory_size = data.aws_lambda_function.details[i].memory_size\n      timeout     = data.aws_lambda_function.details[i].timeout\n      handler     = data.aws_lambda_function.details[i].handler\n    }]}";
    new TerraformOutput(this, "function_inventory", {
      value: functionInventory,
    });
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const detailsCount = TerraformCount.of(
      Token.asNumber(Fn.lengthOf(all.functionNames))
    );
    new DataAwsLambdaFunction(this, "details", {
      functionName: Token.asString(
        Fn.lookupNested(all.functionNames, [detailsCount.index])
      ),
      count: detailsCount,
    });
  }
}

```

## Argument Reference

The following arguments are optional:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `functionArns` - List of Lambda Function ARNs.
* `functionNames` - List of Lambda Function names.

<!-- cache-key: cdktf-0.20.8 input-b31ec9a16cef88c0dedaba7708970877b336b8a7e1553d35424ba70de0cf79f7 -->