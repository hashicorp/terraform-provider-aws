---
subcategory: "Redshift Serverless"
layout: "aws"
page_title: "AWS: aws_redshiftserverless_credentials"
description: |-
  Provides redshift serverless credentials
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_redshiftserverless_credentials

Provides redshift serverless temporary credentials for a workgroup.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsRedshiftserverlessCredentials } from "./.gen/providers/aws/data-aws-redshiftserverless-credentials";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new DataAwsRedshiftserverlessCredentials(this, "example", {
      workgroupName: Token.asString(
        awsRedshiftserverlessWorkgroupExample.workgroupName
      ),
    });
  }
}

```

## Argument Reference

This data source supports the following arguments:

* `workgroupName` - (Required) The name of the workgroup associated with the database.
* `dbName` - (Optional) The name of the database to get temporary authorization to log on to.
* `durationSeconds` - (Optional) The number of seconds until the returned temporary password expires. The minimum is 900 seconds, and the maximum is 3600 seconds.

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `dbPassword` - Temporary password that authorizes the user name returned by `dbUser` to log on to the database `dbName`.
* `dbUser` - A database user name that is authorized to log on to the database `dbName` using the password `dbPassword` . If the specified `dbUser` exists in the database, the new user name has the same database privileges as the user named in `dbUser` . By default, the user is added to PUBLIC. the user doesn't exist in the database.
* `expiration` - Date and time the password in `dbPassword` expires.

<!-- cache-key: cdktf-0.20.8 input-34a2bbcfc773ba4d89d7b456bbb05f8a84bac33ed819e86e9a4b29600cb82b59 -->