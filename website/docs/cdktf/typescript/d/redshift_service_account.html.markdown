---
subcategory: "Redshift"
layout: "aws"
page_title: "AWS: aws_redshift_service_account"
description: |-
  Get AWS Redshift Service Account for storing audit data in S3.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_redshift_service_account

Use this data source to get the Account ID of the [AWS Redshift Service Account](http://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html#db-auditing-enable-logging)
in a given region for the purpose of allowing Redshift to store audit data in S3.

~> **Note:** AWS documentation [states that](https://docs.aws.amazon.com/redshift/latest/mgmt/db-auditing.html#db-auditing-bucket-permissions) a [service principal name](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#principal-services) should be used instead of an AWS account ID in any relevant IAM policy.
The `aws_redshift_service_account` data source has been deprecated and will be removed in a future version.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { DataAwsRedshiftServiceAccount } from "./.gen/providers/aws/data-aws-redshift-service-account";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketPolicy } from "./.gen/providers/aws/s3-bucket-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const bucket = new S3Bucket(this, "bucket", {
      bucket: "tf-redshift-logging-test-bucket",
      forceDestroy: true,
    });
    const main = new DataAwsRedshiftServiceAccount(this, "main", {});
    const allowAuditLogging = new DataAwsIamPolicyDocument(
      this,
      "allow_audit_logging",
      {
        statement: [
          {
            actions: ["s3:PutObject"],
            effect: "Allow",
            principals: [
              {
                identifiers: [Token.asString(main.arn)],
                type: "AWS",
              },
            ],
            resources: ["${" + bucket.arn + "}/*"],
            sid: "Put bucket policy needed for audit logging",
          },
          {
            actions: ["s3:GetBucketAcl"],
            effect: "Allow",
            principals: [
              {
                identifiers: [Token.asString(main.arn)],
                type: "AWS",
              },
            ],
            resources: Token.asList(dataAwsS3BucketBucket.arn),
            sid: "Get bucket policy needed for audit logging",
          },
        ],
      }
    );
    const awsS3BucketPolicyAllowAuditLogging = new S3BucketPolicy(
      this,
      "allow_audit_logging_3",
      {
        bucket: bucket.id,
        policy: Token.asString(allowAuditLogging.json),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3BucketPolicyAllowAuditLogging.overrideLogicalId("allow_audit_logging");
  }
}

```

## Argument Reference

* `region` - (Optional) Name of the region whose AWS Redshift account ID is desired.
Defaults to the region from the AWS provider configuration.

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `id` - ID of the AWS Redshift service account in the selected region.
* `arn` - ARN of the AWS Redshift service account in the selected region.

<!-- cache-key: cdktf-0.20.8 input-e94000569ef4938913b2e5c8ffc6e76ff71e3d14063c879ff153df1bb864e656 -->