---
subcategory: "Lambda"
layout: "aws"
page_title: "AWS: aws_lambda_function"
description: |-
  Provides details about an AWS Lambda Function.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_lambda_function

Provides details about an AWS Lambda Function. Use this data source to obtain information about an existing Lambda function for use in other resources or as a reference for function configurations.

~> **Note:** This data source returns information about the latest version or alias specified by the `qualifier`. If no `qualifier` is provided, it returns information about the most recent published version, or `$LATEST` if no published version exists.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformOutput, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsLambdaFunction } from "./.gen/providers/aws/data-aws-lambda-function";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DataAwsLambdaFunction(this, "example", {
      functionName: "my-lambda-function",
    });
    new TerraformOutput(this, "function_arn", {
      value: example.arn,
    });
  }
}

```

### Using Function Alias

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ApiGatewayIntegration } from "./.gen/providers/aws/api-gateway-integration";
import { DataAwsLambdaFunction } from "./.gen/providers/aws/data-aws-lambda-function";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DataAwsLambdaFunction(this, "example", {
      functionName: "api-handler",
      qualifier: "production",
    });
    const awsApiGatewayIntegrationExample = new ApiGatewayIntegration(
      this,
      "example_1",
      {
        httpMethod: Token.asString(awsApiGatewayMethodExample.httpMethod),
        integrationHttpMethod: "POST",
        resourceId: Token.asString(awsApiGatewayResourceExample.id),
        restApiId: Token.asString(awsApiGatewayRestApiExample.id),
        type: "AWS_PROXY",
        uri: Token.asString(example.invokeArn),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsApiGatewayIntegrationExample.overrideLogicalId("example");
  }
}

```

### Function Configuration Reference

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsLambdaFunction } from "./.gen/providers/aws/data-aws-lambda-function";
import { LambdaFunction } from "./.gen/providers/aws/lambda-function";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const reference = new DataAwsLambdaFunction(this, "reference", {
      functionName: "existing-function",
    });
    new LambdaFunction(this, "example", {
      architectures: Token.asList(reference.architectures),
      environment: {
        variables: Token.asStringMap(
          Fn.lookupNested(reference.environment, ["0", "variables"])
        ),
      },
      filename: "new-function.zip",
      functionName: "new-function",
      handler: Token.asString(reference.handler),
      memorySize: Token.asNumber(reference.memorySize),
      role: Token.asString(reference.role),
      runtime: Token.asString(reference.runtime),
      timeout: Token.asNumber(reference.timeout),
      vpcConfig: {
        securityGroupIds: Token.asList(
          Fn.lookupNested(reference.vpcConfig, ["0", "security_group_ids"])
        ),
        subnetIds: Token.asList(
          Fn.lookupNested(reference.vpcConfig, ["0", "subnet_ids"])
        ),
      },
    });
  }
}

```

### Function Version Management

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformOutput, Op, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsLambdaFunction } from "./.gen/providers/aws/data-aws-lambda-function";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const latest = new DataAwsLambdaFunction(this, "latest", {
      functionName: "my-function",
      qualifier: "$LATEST",
    });
    const version = new DataAwsLambdaFunction(this, "version", {
      functionName: "my-function",
      qualifier: "3",
    });
    new TerraformOutput(this, "version_comparison", {
      value: [
        {
          code_difference: Op.neq(version.codeSha256, latest.codeSha256),
          latest_version: latest.version,
          specific_version: version.version,
        },
      ],
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `functionName` - (Required) Name of the Lambda function.

The following arguments are optional:

* `qualifier` - (Optional) Alias name or version number of the Lambda function. E.g., `$LATEST`, `my-alias`, or `1`. When not included: the data source resolves to the most recent published version; if no published version exists: it resolves to the most recent unpublished version.
* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `architectures` - Instruction set architecture for the Lambda function.
* `arn` - Unqualified (no `:QUALIFIER` or `:VERSION` suffix) ARN identifying your Lambda Function. See also `qualifiedArn`.
* `codeSha256` - Base64-encoded representation of raw SHA-256 sum of the zip file.
* `codeSigningConfigArn` - ARN for a Code Signing Configuration.
* `deadLetterConfig` - Configuration for the function's dead letter queue. [See below](#dead_letter_config-attribute-reference).
* `description` - Description of what your Lambda Function does.
* `environment` - Lambda environment's configuration settings. [See below](#environment-attribute-reference).
* `ephemeralStorage` - Amount of ephemeral storage (`/tmp`) allocated for the Lambda Function. [See below](#ephemeral_storage-attribute-reference).
* `fileSystemConfig` - Connection settings for an Amazon EFS file system. [See below](#file_system_config-attribute-reference).
* `handler` - Function entrypoint in your code.
* `imageUri` - URI of the container image.
* `invokeArn` - ARN to be used for invoking Lambda Function from API Gateway. **Note:** Starting with `v4.51.0` of the provider, this will not include the qualifier.
* `kmsKeyArn` - ARN for the KMS encryption key.
* `lastModified` - Date this resource was last modified.
* `layers` - List of Lambda Layer ARNs attached to your Lambda Function.
* `loggingConfig` - Advanced logging settings. [See below](#logging_config-attribute-reference).
* `memorySize` - Amount of memory in MB your Lambda Function can use at runtime.
* `qualifiedArn` - Qualified (`:QUALIFIER` or `:VERSION` suffix) ARN identifying your Lambda Function. See also `arn`.
* `qualifiedInvokeArn` - Qualified (`:QUALIFIER` or `:VERSION` suffix) ARN to be used for invoking Lambda Function from API Gateway. See also `invokeArn`.
* `reservedConcurrentExecutions` - Amount of reserved concurrent executions for this Lambda function or `-1` if unreserved.
* `role` - IAM role attached to the Lambda Function.
* `runtime` - Runtime environment for the Lambda function.
* `signingJobArn` - ARN of a signing job.
* `signingProfileVersionArn` - ARN for a signing profile version.
* `sourceCodeHash` - (**Deprecated** use `codeSha256` instead) Base64-encoded representation of raw SHA-256 sum of the zip file.
* `sourceCodeSize` - Size in bytes of the function .zip file.
* `tags` - Map of tags assigned to the Lambda Function.
* `timeout` - Function execution time at which Lambda should terminate the function.
* `tracingConfig` - Tracing settings of the function. [See below](#tracing_config-attribute-reference).
* `version` - Version of the Lambda function returned. If `qualifier` is not set, this will resolve to the most recent published version. If no published version of the function exists, `version` will resolve to `$LATEST`.
* `vpcConfig` - VPC configuration associated with your Lambda function. [See below](#vpc_config-attribute-reference).

### dead_letter_config

* `targetArn` - ARN of an SNS topic or SQS queue to notify when an invocation fails.

### environment

* `variables` - Map of environment variables that are accessible from the function code during execution.

### ephemeral_storage

* `size` - Size of the Lambda function ephemeral storage (`/tmp`) in MB.

### file_system_config

* `arn` - ARN of the Amazon EFS Access Point that provides access to the file system.
* `localMountPath` - Path where the function can access the file system, starting with `/mnt/`.

### logging_config

* `applicationLogLevel` - Detail level of the logs your application sends to CloudWatch when using supported logging libraries.
* `logFormat` - Format for your function's logs. Valid values: `Text`, `JSON`.
* `logGroup` - CloudWatch log group your function sends logs to.
* `systemLogLevel` - Detail level of the Lambda platform event logs sent to CloudWatch.

### tracing_config

* `mode` - Tracing mode. Valid values: `Active`, `PassThrough`.

### vpc_config

* `securityGroupIds` - List of security group IDs associated with the Lambda function.
* `subnetIds` - List of subnet IDs associated with the Lambda function.
* `vpcId` - ID of the VPC.

<!-- cache-key: cdktf-0.20.8 input-200be751c3b592b14918f59d2e6b6f393f3287d111c99f16f6143303ff4aca47 -->