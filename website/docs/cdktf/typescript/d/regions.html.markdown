---
subcategory: "Meta Data Sources"
layout: "aws"
page_title: "AWS: aws_regions"
description: |-
    Provides information about AWS Regions.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_regions

Provides information about AWS Regions. Can be used to filter regions i.e., by Opt-In status or only regions enabled for current account. To get details like endpoint and description of each region the data source can be combined with the [`awsRegion` data source](/docs/providers/aws/d/region.html).

## Example Usage

Enabled AWS Regions:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsRegions } from "./.gen/providers/aws/data-aws-regions";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new DataAwsRegions(this, "current", {});
  }
}

```

All the regions regardless of the availability

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsRegions } from "./.gen/providers/aws/data-aws-regions";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new DataAwsRegions(this, "current", {
      allRegions: true,
    });
  }
}

```

To see regions that are filtered by `"not-opted-in"`, the `allRegions` argument needs to be set to `true` or no results will be returned.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsRegions } from "./.gen/providers/aws/data-aws-regions";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new DataAwsRegions(this, "current", {
      allRegions: true,
      filter: [
        {
          name: "opt-in-status",
          values: ["not-opted-in"],
        },
      ],
    });
  }
}

```

## Argument Reference

This data source supports the following arguments:

* `allRegions` - (Optional) If true the source will query all regions regardless of availability.

* `filter` - (Optional) Configuration block(s) to use as filters. Detailed below.

### filter Configuration Block

The `filter` configuration block supports the following arguments:

* `name` - (Required) Name of the filter field. Valid values can be found in the [describe-regions AWS CLI Reference][1].
* `values` - (Required) Set of values that are accepted for the given filter field. Results will be selected if any given value matches.

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `id` - Identifier of the current partition (e.g., `aws` in AWS Commercial, `aws-cn` in AWS China).
* `names` - Names of regions that meets the criteria.

[1]: https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-regions.html

<!-- cache-key: cdktf-0.20.8 input-729936980236c90d4bfd49d088a65b256dd691594554c0abd78aef71806ddd45 -->