---
subcategory: "Outposts"
layout: "aws"
page_title: "AWS: aws_outposts_asset"
description: |-
  Information about hardware assets in an Outpost.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_outposts_asset

Information about a specific hardware asset in an Outpost.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformCount, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsOutpostsAsset } from "./.gen/providers/aws/data-aws-outposts-asset";
import { DataAwsOutpostsAssets } from "./.gen/providers/aws/data-aws-outposts-assets";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DataAwsOutpostsAssets(this, "example", {
      arn: Token.asString(dataAwsOutpostsOutpostExample.arn),
    });
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const exampleCount = TerraformCount.of(
      Token.asNumber(Fn.lengthOf(example.assetIds))
    );
    const dataAwsOutpostsAssetExample = new DataAwsOutpostsAsset(
      this,
      "example_1",
      {
        arn: Token.asString(dataAwsOutpostsOutpostExample.arn),
        assetId: Token.asString(
          Fn.element(thisVar.assetIds, Token.asNumber(exampleCount.index))
        ),
        count: exampleCount,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsOutpostsAssetExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `arn` - (Required) Outpost ARN.
* `assetId` - (Required) ID of the asset.

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `assetType` - Type of the asset.
* `hostId` - Host ID of the Dedicated Hosts on the asset, if a Dedicated Host is provisioned.
* `rackElevation` - Position of an asset in a rack measured in rack units.
* `rackId` - Rack ID of the asset.

<!-- cache-key: cdktf-0.20.8 input-8f6a07737f519ffaadeaca6364717f481098718bcbccdc2303dde41b73d75ac9 -->