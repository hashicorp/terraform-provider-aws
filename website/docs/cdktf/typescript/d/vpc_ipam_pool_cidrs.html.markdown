---
subcategory: "VPC IPAM (IP Address Manager)"
layout: "aws"
page_title: "AWS: aws_vpc_ipam_pool_cidrs"
description: |-
    Returns cidrs provisioned into an IPAM pool.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_vpc_ipam_pool_cidrs

`aws_vpc_ipam_pool_cidrs` provides details about an IPAM pool.

This resource can prove useful when an ipam pool was shared to your account and you want to know all (or a filtered list) of the CIDRs that are provisioned into the pool.

## Example Usage

Basic usage:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsVpcIpamPool } from "./.gen/providers/aws/data-aws-vpc-ipam-pool";
import { DataAwsVpcIpamPoolCidrs } from "./.gen/providers/aws/data-aws-vpc-ipam-pool-cidrs";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const p = new DataAwsVpcIpamPool(this, "p", {
      filter: [
        {
          name: "description",
          values: ["*mypool*"],
        },
        {
          name: "address-family",
          values: ["ipv4"],
        },
      ],
    });
    new DataAwsVpcIpamPoolCidrs(this, "c", {
      ipamPoolId: Token.asString(p.id),
    });
  }
}

```

Filtering:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformIterator, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsVpcIpamPoolCidrs } from "./.gen/providers/aws/data-aws-vpc-ipam-pool-cidrs";
import { Ec2ManagedPrefixList } from "./.gen/providers/aws/ec2-managed-prefix-list";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const c = new DataAwsVpcIpamPoolCidrs(this, "c", {
      filter: [
        {
          name: "cidr",
          values: ["10.*"],
        },
      ],
      ipamPoolId: "ipam-pool-123",
    });
    const mycidrs =
      "${[ for cidr in ${" +
      c.ipamPoolCidrs +
      '} : cidr.cidr if cidr.state == "provisioned"]}';
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const plsDynamicIterator0 = TerraformIterator.fromList(
      Token.asAny(mycidrs)
    );
    new Ec2ManagedPrefixList(this, "pls", {
      addressFamily: "IPv4",
      maxEntries: Token.asNumber(Fn.lengthOf(mycidrs)),
      name: "IPAM Pool (${" + test.id + "}) Cidrs",
      entry: plsDynamicIterator0.dynamic({
        cidr: plsDynamicIterator0.value,
        description: plsDynamicIterator0.value,
      }),
    });
  }
}

```

## Argument Reference

This data source supports the following arguments:

* `ipamPoolId` - ID of the IPAM pool you would like the list of provisioned CIDRs.
* `filter` - Custom filter block as described below.

### `filter`

More complex filters can be expressed using one or more `filter` sub-blocks, which take the following arguments:

* `name` - (Required) Name of the field to filter by, as defined by
  [the underlying AWS API](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_GetIpamPoolCidrs.html).
* `values` - (Required) Set of values that are accepted for the given field.

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `ipamPoolCidrs` - The CIDRs provisioned into the IPAM pool, described below.

### ipam_pool_cidrs

* `cidr` - A network CIDR.
* `state` - The provisioning state of that CIDR.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `read` - (Default `1m`)

<!-- cache-key: cdktf-0.20.8 input-e6aeb2e0aaf75b93552763f30ce2969165ef5e2ba0b203aa62b11b342bc1609b -->