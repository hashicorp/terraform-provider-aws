---
subcategory: "ELB Classic"
layout: "aws"
page_title: "AWS: aws_elb_service_account"
description: |-
  Get AWS Elastic Load Balancing Service Account
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_elb_service_account

Use this data source to get the Account ID of the [AWS Elastic Load Balancing Service Account](http://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-access-logs.html#attach-bucket-policy)
in a given region for the purpose of permitting in S3 bucket policy.

~> **Note:** For AWS Regions opened since Jakarta (`ap-southeast-3`) in December 2021, AWS [documents that](https://docs.aws.amazon.com/elasticloadbalancing/latest/classic/enable-access-logs.html#attach-bucket-policy) a [service principal name](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_principal.html#principal-services) should be used instead of an AWS account ID in any relevant IAM policy.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsElbServiceAccount } from "./.gen/providers/aws/data-aws-elb-service-account";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { Elb } from "./.gen/providers/aws/elb";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketAcl } from "./.gen/providers/aws/s3-bucket-acl";
import { S3BucketPolicy } from "./.gen/providers/aws/s3-bucket-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const elbLogs = new S3Bucket(this, "elb_logs", {
      bucket: "my-elb-tf-test-bucket",
    });
    new S3BucketAcl(this, "elb_logs_acl", {
      acl: "private",
      bucket: elbLogs.id,
    });
    const main = new DataAwsElbServiceAccount(this, "main", {});
    const allowElbLogging = new DataAwsIamPolicyDocument(
      this,
      "allow_elb_logging",
      {
        statement: [
          {
            actions: ["s3:PutObject"],
            effect: "Allow",
            principals: [
              {
                identifiers: [Token.asString(main.arn)],
                type: "AWS",
              },
            ],
            resources: ["${" + elbLogs.arn + "}/AWSLogs/*"],
          },
        ],
      }
    );
    new Elb(this, "bar", {
      accessLogs: {
        bucket: elbLogs.id,
        interval: 5,
      },
      availabilityZones: ["us-west-2a"],
      listener: [
        {
          instancePort: 8000,
          instanceProtocol: "http",
          lbPort: 80,
          lbProtocol: "http",
        },
      ],
      name: "my-foobar-terraform-elb",
    });
    const awsS3BucketPolicyAllowElbLogging = new S3BucketPolicy(
      this,
      "allow_elb_logging_5",
      {
        bucket: elbLogs.id,
        policy: Token.asString(allowElbLogging.json),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3BucketPolicyAllowElbLogging.overrideLogicalId("allow_elb_logging");
  }
}

```

## Argument Reference

* `region` - (Optional) Name of the region whose AWS ELB account ID is desired.
  Defaults to the region from the AWS provider configuration.

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `id` - ID of the AWS ELB service account in the selected region.
* `arn` - ARN of the AWS ELB service account in the selected region.

<!-- cache-key: cdktf-0.20.8 input-5c1a0a2f00d960e1eac9847050597712fa9715a5b915ce4e9af9ffb2813ec3ab -->