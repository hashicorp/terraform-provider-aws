---
subcategory: "Audit Manager"
layout: "aws"
page_title: "AWS: aws_auditmanager_control"
description: |-
  Terraform data source for managing an AWS Audit Manager Control.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_auditmanager_control

Terraform data source for managing an AWS Audit Manager Control.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsAuditmanagerControl } from "./.gen/providers/aws/data-aws-auditmanager-control";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new DataAwsAuditmanagerControl(this, "example", {
      name: "1. Risk Management",
      type: "Standard",
    });
  }
}

```

### With Framework Resource

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AuditmanagerFramework } from "./.gen/providers/aws/auditmanager-framework";
import { DataAwsAuditmanagerControl } from "./.gen/providers/aws/data-aws-auditmanager-control";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DataAwsAuditmanagerControl(this, "example", {
      name: "1. Risk Management",
      type: "Standard",
    });
    const example2 = new DataAwsAuditmanagerControl(this, "example2", {
      name: "2. Personnel",
      type: "Standard",
    });
    const awsAuditmanagerFrameworkExample = new AuditmanagerFramework(
      this,
      "example_2",
      {
        controlSets: [
          {
            controls: [
              {
                id: Token.asString(example.id),
              },
            ],
            name: "example",
          },
          {
            controls: [
              {
                id: Token.asString(example2.id),
              },
            ],
            name: "example2",
          },
        ],
        name: "example",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAuditmanagerFrameworkExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `name` - (Required) Name of the control.
* `type` - (Required) Type of control. Valid values are `Custom` and `Standard`.

## Attribute Reference

See the [`aws_auditmanager_control` resource](/docs/providers/aws/r/auditmanager_control.html) for details on the returned attributes - they are identical.

<!-- cache-key: cdktf-0.20.8 input-3db48c85023c8e29684006da94ab0858a40f92b8fb222869b34399953eba3333 -->