---
subcategory: "Organizations"
layout: "aws"
page_title: "AWS: aws_organizations_policies"
description: |-
  Terraform data source for managing an AWS Organizations Policies.
---


<!-- Please do not edit this file, it is generated. -->
# Data Source: aws_organizations_policies

Terraform data source for managing an AWS Organizations Policies.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformIterator, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsOrganizationsPolicies } from "./.gen/providers/aws/data-aws-organizations-policies";
import { DataAwsOrganizationsPolicy } from "./.gen/providers/aws/data-aws-organizations-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DataAwsOrganizationsPolicies(this, "example", {
      filter: "SERVICE_CONTROL_POLICY",
    });
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const exampleForEachIterator = TerraformIterator.fromList(
      Token.asAny(Fn.toset(example.ids))
    );
    const dataAwsOrganizationsPolicyExample = new DataAwsOrganizationsPolicy(
      this,
      "example_1",
      {
        policyId: Token.asString(exampleForEachIterator.value),
        forEach: exampleForEachIterator,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsOrganizationsPolicyExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `filter` - (Required) The type of policies to be returned in the response. Valid values are `AISERVICES_OPT_OUT_POLICY | BACKUP_POLICY | RESOURCE_CONTROL_POLICY | SERVICE_CONTROL_POLICY | TAG_POLICY`

## Attribute Reference

This data source exports the following attributes in addition to the arguments above:

* `ids` - List of all the policy ids found.

<!-- cache-key: cdktf-0.20.8 input-3ab4270f54c1c17fbe383d62aa3e9fdfcfc2557743daf88d275029dff3b153c9 -->