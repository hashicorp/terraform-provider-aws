---
subcategory: "CodeBuild"
layout: "aws"
page_title: "AWS: aws_codebuild_fleet"
description: |-
  Provides a CodeBuild Fleet Resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_codebuild_fleet

Provides a CodeBuild Fleet Resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CodebuildFleet } from "./.gen/providers/aws/codebuild-fleet";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new CodebuildFleet(this, "test", {
      baseCapacity: 2,
      computeType: "BUILD_GENERAL1_SMALL",
      environmentType: "LINUX_CONTAINER",
      name: "full-example-codebuild-fleet",
      overflowBehavior: "QUEUE",
      scalingConfiguration: {
        maxCapacity: 5,
        scalingType: "TARGET_TRACKING_SCALING",
        targetTrackingScalingConfigs: [
          {
            metricType: "FLEET_UTILIZATION_RATE",
            targetValue: 97.5,
          },
        ],
      },
    });
  }
}

```

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CodebuildFleet } from "./.gen/providers/aws/codebuild-fleet";
interface MyConfig {
  baseCapacity: any;
  computeType: any;
  environmentType: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new CodebuildFleet(this, "example", {
      name: "example-codebuild-fleet",
      baseCapacity: config.baseCapacity,
      computeType: config.computeType,
      environmentType: config.environmentType,
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `name` - (Required) Fleet name.
* `baseCapacity` - (Required) Number of machines allocated to the ﬂeet.
* `computeType` - (Required) Compute resources the compute fleet uses. See [compute types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html#environment.types) for more information and valid values.
* `environmentType` - (Required) Environment type of the compute fleet. See [environment types](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html#environment.types) for more information and valid values.

The following arguments are optional:

* `compute_configuration` - (Optional) The compute configuration of the compute fleet. This is only required if `computeType` is set to `ATTRIBUTE_BASED_COMPUTE`. See [`compute_configuration`](#compute_configuration) below.
* `fleetServiceRole` - (Optional) The service role associated with the compute fleet.
* `imageId` - (Optional) The Amazon Machine Image (AMI) of the compute fleet.
* `overflowBehavior` - (Optional) Overflow behavior for compute fleet. Valid values: `ON_DEMAND`, `QUEUE`.
* `scalingConfiguration` - (Optional) Configuration block. This option is only valid when your overflow behavior is `QUEUE`. See [`scalingConfiguration`](#scaling_configuration) below.
* `tags` - (Optional) Map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `vpcConfig` - (Optional) Configuration block. See [`vpcConfig`](#vpc_config) below.

### compute_configuration

* `disk` - (Optional) Amount of disk space of the instance type included in the fleet.
* `machine_type` - (Optional) Machine type of the instance type included in the fleet. Valid values: `GENERAL`, `NVME`.
* `memory` - (Optional) Amount of memory of the instance type included in the fleet.
* `vcpu` - (Optional) Number of vCPUs of the instance type included in the fleet.

### scaling_configuration

* `maxCapacity` - (Optional) Maximum number of instances in the ﬂeet when auto-scaling.
* `scalingType` - (Optional) Scaling type for a compute fleet. Valid value: `TARGET_TRACKING_SCALING`.
* `targetTrackingScalingConfigs` - (Optional) Configuration block. Detailed below.

#### scaling_configuration: target_tracking_scaling_configs

* `metricType` - (Optional) Metric type to determine auto-scaling. Valid value: `FLEET_UTILIZATION_RATE`.
* `targetValue` - (Optional) Value of metricType when to start scaling.

### vpc_config

* `securityGroupIds` - (Required) A list of one or more security groups IDs in your Amazon VPC.
* `subnets` - (Required) A list of one or more subnet IDs in your Amazon VPC.
* `vpcId` - (Required) The ID of the Amazon VPC.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the Fleet.
* `created` - Creation time of the fleet.
* `id` - ARN of the Fleet.
* `lastModified` - Last modification time of the fleet.
* `status` - Nested attribute containing information about the current status of the fleet.
    * `context` - Additional information about a compute fleet.
    * `message` - Message associated with the status of a compute fleet.
    * `statusCode` - Status code of the compute fleet.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import CodeBuild Fleet using the `name` or the `arn`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CodebuildFleet } from "./.gen/providers/aws/codebuild-fleet";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    CodebuildFleet.generateConfigForImport(this, "name", "fleet-name");
  }
}

```

Using `terraform import`, import CodeBuild Fleet using the `name`. For example:

```console
% terraform import aws_codebuild_fleet.name fleet-name
```

<!-- cache-key: cdktf-0.20.8 input-fa06d5482be245bb3fced3fa7e741b380ec91afe7cdfa28aaaa9e3e3a8d884d0 -->