---
subcategory: "Bedrock Agents"
layout: "aws"
page_title: "AWS: aws_bedrockagent_agent"
description: |-
  Terraform resource for managing an AWS Agents for Amazon Bedrock Agent.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_bedrockagent_agent

Terraform resource for managing an AWS Agents for Amazon Bedrock Agent.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BedrockagentAgent } from "./.gen/providers/aws/bedrockagent-agent";
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { DataAwsPartition } from "./.gen/providers/aws/data-aws-partition";
import { DataAwsRegion } from "./.gen/providers/aws/data-aws-region";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicy } from "./.gen/providers/aws/iam-role-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const current = new DataAwsCallerIdentity(this, "current", {});
    const dataAwsPartitionCurrent = new DataAwsPartition(this, "current_1", {});
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsPartitionCurrent.overrideLogicalId("current");
    const dataAwsRegionCurrent = new DataAwsRegion(this, "current_2", {});
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsRegionCurrent.overrideLogicalId("current");
    const exampleAgentPermissions = new DataAwsIamPolicyDocument(
      this,
      "example_agent_permissions",
      {
        statement: [
          {
            actions: ["bedrock:InvokeModel"],
            resources: [
              "arn:${" +
                dataAwsPartitionCurrent.partition +
                "}:bedrock:${" +
                dataAwsRegionCurrent.name +
                "}::foundation-model/anthropic.claude-v2",
            ],
          },
        ],
      }
    );
    const exampleAgentTrust = new DataAwsIamPolicyDocument(
      this,
      "example_agent_trust",
      {
        statement: [
          {
            actions: ["sts:AssumeRole"],
            condition: [
              {
                test: "StringEquals",
                values: [Token.asString(current.accountId)],
                variable: "aws:SourceAccount",
              },
              {
                test: "ArnLike",
                values: [
                  "arn:${" +
                    dataAwsPartitionCurrent.partition +
                    "}:bedrock:${" +
                    dataAwsRegionCurrent.name +
                    "}:${" +
                    current.accountId +
                    "}:agent/*",
                ],
                variable: "AWS:SourceArn",
              },
            ],
            principals: [
              {
                identifiers: ["bedrock.amazonaws.com"],
                type: "Service",
              },
            ],
          },
        ],
      }
    );
    const example = new IamRole(this, "example", {
      assumeRolePolicy: Token.asString(exampleAgentTrust.json),
      namePrefix: "AmazonBedrockExecutionRoleForAgents_",
    });
    const awsIamRolePolicyExample = new IamRolePolicy(this, "example_6", {
      policy: Token.asString(exampleAgentPermissions.json),
      role: example.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyExample.overrideLogicalId("example");
    const awsBedrockagentAgentExample = new BedrockagentAgent(
      this,
      "example_7",
      {
        agentName: "my-agent-name",
        agentResourceRoleArn: example.arn,
        foundationModel: "anthropic.claude-v2",
        idleSessionTtlInSeconds: 500,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsBedrockagentAgentExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `agentName` - (Required) Name of the agent.
* `agentResourceRoleArn` - (Required) ARN of the IAM role with permissions to invoke API operations on the agent.
* `foundationModel` - (Required) Foundation model used for orchestration by the agent.

The following arguments are optional:

* `customerEncryptionKeyArn` - (Optional) ARN of the AWS KMS key that encrypts the agent.
* `description` - (Optional) Description of the agent.
* `idleSessionTtlInSeconds` - (Optional) Number of seconds for which Amazon Bedrock keeps information about a user's conversation with the agent. A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.
* `instruction` - (Optional) Instructions that tell the agent what it should do and how it should interact with users.
* `prepareAgent` (Optional) Whether to prepare the agent after creation or modification. Defaults to `true`.
* `promptOverrideConfiguration` (Optional) Configurations to override prompt templates in different parts of an agent sequence. For more information, see [Advanced prompts](https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html). See [`promptOverrideConfiguration` Block](#prompt_override_configuration-block) for details.
* `skipResourceInUseCheck` - (Optional) Whether the in-use check is skipped when deleting the agent.
* `tags` - (Optional) Map of tags assigned to the resource. If configured with a provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### `promptOverrideConfiguration` Block

The `promptOverrideConfiguration` configuration block supports the following arguments:

* `prompt_configurations` - (Required) Configurations to override a prompt template in one part of an agent sequence. See [`prompt_configurations` Block](#prompt_configurations-block) for details.
* `override_lambda` - (Optional) ARN of the Lambda function to use when parsing the raw foundation model output in parts of the agent sequence. If you specify this field, at least one of the `prompt_configurations` block must contain a `parser_mode` value that is set to `OVERRIDDEN`.

### `prompt_configurations` Block

The `prompt_configurations` configuration block supports the following arguments:

* `base_prompt_template` - (Required) prompt template with which to replace the default prompt template. You can use placeholder variables in the base prompt template to customize the prompt. For more information, see [Prompt template placeholder variables](https://docs.aws.amazon.com/bedrock/latest/userguide/prompt-placeholders.html).
* `inference_configuration` - (Required) Inference parameters to use when the agent invokes a foundation model in the part of the agent sequence defined by the `prompt_type`. For more information, see [Inference parameters for foundation models](https://docs.aws.amazon.com/bedrock/latest/userguide/model-parameters.html). See [`inference_configuration` Block](#inference_configuration-block) for details.
* `parser_mode` - (Required) Whether to override the default parser Lambda function when parsing the raw foundation model output in the part of the agent sequence defined by the `prompt_type`. If you set the argument as `OVERRIDDEN`, the `override_lambda` argument in the [`promptOverrideConfiguration`](#prompt_override_configuration-block) block must be specified with the ARN of a Lambda function. Valid values: `DEFAULT`, `OVERRIDDEN`.
* `prompt_creation_mode` - (Required) Whether to override the default prompt template for this `prompt_type`. Set this argument to `OVERRIDDEN` to use the prompt that you provide in the `base_prompt_template`. If you leave it as `DEFAULT`, the agent uses a default prompt template. Valid values: `DEFAULT`, `OVERRIDDEN`.
* `prompt_state` - (Required) Whether to allow the agent to carry out the step specified in the `prompt_type`. If you set this argument to `DISABLED`, the agent skips that step. Valid Values: `ENABLED`, `DISABLED`.
* `prompt_type` - (Required) Step in the agent sequence that this prompt configuration applies to. Valid values: `PRE_PROCESSING`, `ORCHESTRATION`, `POST_PROCESSING`, `KNOWLEDGE_BASE_RESPONSE_GENERATION`.

### `inference_configuration` Block

The `inference_configuration` configuration block supports the following arguments:

* `maxLength` - (Required) Maximum number of tokens to allow in the generated response.
* `stop_sequences` - (Required) List of stop sequences. A stop sequence is a sequence of characters that causes the model to stop generating the response.
* `temperature` - (Required) Likelihood of the model selecting higher-probability options while generating a response. A lower value makes the model more likely to choose higher-probability options, while a higher value makes the model more likely to choose lower-probability options.
* `top_k` - (Required) Number of top most-likely candidates, between 0 and 500, from which the model chooses the next token in the sequence.
* `top_p` - (Required) Top percentage of the probability distribution of next tokens, between 0 and 1 (denoting 0% and 100%), from which the model chooses the next token in the sequence.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `agentArn` - ARN of the agent.
* `agentId` - Unique identifier of the agent.
* `agentVersion` - Version of the agent.
* `id` - Unique identifier of the agent.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `5m`)
* `update` - (Default `5m`)
* `delete` - (Default `5m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Agents for Amazon Bedrock Agent using the agent ID. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BedrockagentAgent } from "./.gen/providers/aws/bedrockagent-agent";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    BedrockagentAgent.generateConfigForImport(this, "example", "GGRRAED6JP");
  }
}

```

Using `terraform import`, import Agents for Amazon Bedrock Agent using the agent ID. For example:

```console
% terraform import aws_bedrockagent_agent.example GGRRAED6JP
```

<!-- cache-key: cdktf-0.20.1 input-acb4c2d3b81a79eb9e4203112e86e0dbc9c4e32ff252ce91902801ea3f230570 -->