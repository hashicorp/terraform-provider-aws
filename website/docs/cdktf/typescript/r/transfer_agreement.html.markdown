---
subcategory: "Transfer Family"
layout: "aws"
page_title: "AWS: aws_transfer_agreement"
description: |-
  Provides a AWS Transfer AS2 Agreement Resource
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_transfer_agreement

Provides a AWS Transfer AS2 Agreement resource.

## Example Usage

### Basic

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { TransferAgreement } from "./.gen/providers/aws/transfer-agreement";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new TransferAgreement(this, "example", {
      accessRole: test.arn,
      baseDirectory: "/DOC-EXAMPLE-BUCKET/home/mydirectory",
      description: "example",
      localProfileId: local.profileId,
      partnerProfileId: partner.profileId,
      serverId: Token.asString(awsTransferServerTest.id),
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `accessRole` - (Required) The IAM Role which provides read and write access to the parent directory of the file location mentioned in the StartFileTransfer request.
* `baseDirectory` - (Required) The landing directory for the files transferred by using the AS2 protocol.
* `description` - (Optional) The Optional description of the transdfer.
* `localProfileId` - (Required) The unique identifier for the AS2 local profile.
* `partnerProfileId` - (Required) The unique identifier for the AS2 partner profile.
* `serverId` - (Required) The unique server identifier for the server instance. This is the specific server the agreement uses.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `agreementId`  - The unique identifier for the AS2 agreement.
* `arn` - The ARN of the agreement.
* `staus`  - The staus of the agreement which is either ACTIVE or INACTIVE.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Transfer AS2 Agreement using the `server_id/agreement_id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { TransferAgreement } from "./.gen/providers/aws/transfer-agreement";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    TransferAgreement.generateConfigForImport(
      this,
      "example",
      "s-4221a88afd5f4362a/a-4221a88afd5f4362a"
    );
  }
}

```

Using `terraform import`, import Transfer AS2 Agreement using the `server_id/agreement_id`. For example:

```console
% terraform import aws_transfer_agreement.example s-4221a88afd5f4362a/a-4221a88afd5f4362a
```

<!-- cache-key: cdktf-0.20.8 input-68e33cbd7ad4965dddc102db9b300dde49f777c8ef6bfaa3845050362aa8992d -->