---
subcategory: "FinSpace"
layout: "aws"
page_title: "AWS: aws_finspace_kx_scaling_group"
description: |-
  Terraform resource for managing an AWS FinSpace Kx Scaling Group.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_finspace_kx_scaling_group

Terraform resource for managing an AWS FinSpace Kx Scaling Group.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { FinspaceKxScalingGroup } from "./.gen/providers/aws/finspace-kx-scaling-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new FinspaceKxScalingGroup(this, "example", {
      availabilityZoneId: "use1-az2",
      environmentId: Token.asString(awsFinspaceKxEnvironmentExample.id),
      hostType: "kx.sg.4xlarge",
      name: "my-tf-kx-scalinggroup",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `availabilityZoneId` - (Required) The availability zone identifiers for the requested regions.
* `environmentId` - (Required) A unique identifier for the kdb environment, where you want to create the scaling group.
* `name` - (Required) Unique name for the scaling group that you want to create.
* `hostType` - (Required) The memory and CPU capabilities of the scaling group host on which FinSpace Managed kdb clusters will be placed.

The following arguments are optional:

* `tags` - (Optional) Key-value mapping of resource tags. If configured with a provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level. You can add up to 50 tags to a scaling group.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) identifier of the KX Scaling Group.
* `clusters` - The list of Managed kdb clusters that are currently active in the given scaling group.
* `createdTimestamp` - The timestamp at which the scaling group was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.
* `lastModifiedTimestamp` - Last timestamp at which the scaling group was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
* `status` - The status of scaling group.
    * `CREATING` – The scaling group creation is in progress.
    * `CREATE_FAILED` – The scaling group creation has failed.
    * `ACTIVE` – The scaling group is active.
    * `UPDATING` – The scaling group is in the process of being updated.
    * `UPDATE_FAILED` – The update action failed.
    * `DELETING` – The scaling group is in the process of being deleted.
    * `DELETE_FAILED` – The system failed to delete the scaling group.
    * `DELETED` – The scaling group is successfully deleted.
* `statusReason` - The error message when a failed state occurs.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `4h`)
* `update` - (Default `30m`)
* `delete` - (Default `4h`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import an AWS FinSpace Kx scaling group using the `id` (environment ID and scaling group name, comma-delimited). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { FinspaceKxScalingGroup } from "./.gen/providers/aws/finspace-kx-scaling-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    FinspaceKxScalingGroup.generateConfigForImport(
      this,
      "example",
      "n3ceo7wqxoxcti5tujqwzs,my-tf-kx-scalinggroup"
    );
  }
}

```

Using `terraform import`, import an AWS FinSpace Kx Scaling Group using the `id` (environment ID and scaling group name, comma-delimited). For example:

```console
% terraform import aws_finspace_kx_scaling_group.example n3ceo7wqxoxcti5tujqwzs,my-tf-kx-scalinggroup
```

<!-- cache-key: cdktf-0.20.8 input-67e16416dfe971126ea2b848067b2d42aa4ab0bafac9e3fea6cd772114a1f9b3 -->