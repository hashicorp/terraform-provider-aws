---
subcategory: "Transit Gateway"
layout: "aws"
page_title: "AWS: aws_ec2_transit_gateway_multicast_domain"
description: |-
  Manages an EC2 Transit Gateway Multicast Domain
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ec2_transit_gateway_multicast_domain

Manages an EC2 Transit Gateway Multicast Domain.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsAmi } from "./.gen/providers/aws/data-aws-ami";
import { DataAwsAvailabilityZones } from "./.gen/providers/aws/data-aws-availability-zones";
import { Ec2TransitGateway } from "./.gen/providers/aws/ec2-transit-gateway";
import { Ec2TransitGatewayMulticastDomain } from "./.gen/providers/aws/ec2-transit-gateway-multicast-domain";
import { Ec2TransitGatewayMulticastDomainAssociation } from "./.gen/providers/aws/ec2-transit-gateway-multicast-domain-association";
import { Ec2TransitGatewayMulticastGroupMember } from "./.gen/providers/aws/ec2-transit-gateway-multicast-group-member";
import { Ec2TransitGatewayMulticastGroupSource } from "./.gen/providers/aws/ec2-transit-gateway-multicast-group-source";
import { Ec2TransitGatewayVpcAttachment } from "./.gen/providers/aws/ec2-transit-gateway-vpc-attachment";
import { Instance } from "./.gen/providers/aws/instance";
import { Subnet } from "./.gen/providers/aws/subnet";
import { Vpc } from "./.gen/providers/aws/vpc";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const tgw = new Ec2TransitGateway(this, "tgw", {
      multicastSupport: "enable",
    });
    const domain = new Ec2TransitGatewayMulticastDomain(this, "domain", {
      staticSourcesSupport: "enable",
      tags: {
        Name: "Transit_Gateway_Multicast_Domain_Example",
      },
      transitGatewayId: tgw.id,
    });
    const vpc1 = new Vpc(this, "vpc1", {
      cidrBlock: "10.0.0.0/16",
    });
    const vpc2 = new Vpc(this, "vpc2", {
      cidrBlock: "10.1.0.0/16",
    });
    const amazonLinux = new DataAwsAmi(this, "amazon_linux", {
      filter: [
        {
          name: "name",
          values: ["amzn-ami-hvm-*-x86_64-gp2"],
        },
        {
          name: "owner-alias",
          values: ["amazon"],
        },
      ],
      mostRecent: true,
      owners: ["amazon"],
    });
    const available = new DataAwsAvailabilityZones(this, "available", {
      state: "available",
    });
    const subnet1 = new Subnet(this, "subnet1", {
      availabilityZone: Token.asString(Fn.lookupNested(available.names, ["0"])),
      cidrBlock: "10.0.1.0/24",
      vpcId: vpc1.id,
    });
    const subnet2 = new Subnet(this, "subnet2", {
      availabilityZone: Token.asString(Fn.lookupNested(available.names, ["1"])),
      cidrBlock: "10.0.2.0/24",
      vpcId: vpc1.id,
    });
    const subnet3 = new Subnet(this, "subnet3", {
      availabilityZone: Token.asString(Fn.lookupNested(available.names, ["0"])),
      cidrBlock: "10.1.1.0/24",
      vpcId: vpc2.id,
    });
    const attachment1 = new Ec2TransitGatewayVpcAttachment(
      this,
      "attachment1",
      {
        subnetIds: [subnet1.id, subnet2.id],
        transitGatewayId: tgw.id,
        vpcId: vpc1.id,
      }
    );
    const attachment2 = new Ec2TransitGatewayVpcAttachment(
      this,
      "attachment2",
      {
        subnetIds: [subnet3.id],
        transitGatewayId: tgw.id,
        vpcId: vpc2.id,
      }
    );
    const instance1 = new Instance(this, "instance1", {
      ami: Token.asString(amazonLinux.id),
      instanceType: "t2.micro",
      subnetId: subnet1.id,
    });
    const instance2 = new Instance(this, "instance2", {
      ami: Token.asString(amazonLinux.id),
      instanceType: "t2.micro",
      subnetId: subnet2.id,
    });
    const instance3 = new Instance(this, "instance3", {
      ami: Token.asString(amazonLinux.id),
      instanceType: "t2.micro",
      subnetId: subnet3.id,
    });
    const association1 = new Ec2TransitGatewayMulticastDomainAssociation(
      this,
      "association1",
      {
        subnetId: subnet1.id,
        transitGatewayAttachmentId: attachment1.id,
        transitGatewayMulticastDomainId: domain.id,
      }
    );
    new Ec2TransitGatewayMulticastDomainAssociation(this, "association2", {
      subnetId: subnet2.id,
      transitGatewayAttachmentId: attachment2.id,
      transitGatewayMulticastDomainId: domain.id,
    });
    const association3 = new Ec2TransitGatewayMulticastDomainAssociation(
      this,
      "association3",
      {
        subnetId: subnet3.id,
        transitGatewayAttachmentId: attachment2.id,
        transitGatewayMulticastDomainId: domain.id,
      }
    );
    new Ec2TransitGatewayMulticastGroupMember(this, "member1", {
      groupIpAddress: "224.0.0.1",
      networkInterfaceId: instance1.primaryNetworkInterfaceId,
      transitGatewayMulticastDomainId:
        association1.transitGatewayMulticastDomainId,
    });
    new Ec2TransitGatewayMulticastGroupMember(this, "member2", {
      groupIpAddress: "224.0.0.1",
      networkInterfaceId: instance2.primaryNetworkInterfaceId,
      transitGatewayMulticastDomainId:
        association1.transitGatewayMulticastDomainId,
    });
    new Ec2TransitGatewayMulticastGroupSource(this, "source", {
      groupIpAddress: "224.0.0.1",
      networkInterfaceId: instance3.primaryNetworkInterfaceId,
      transitGatewayMulticastDomainId:
        association3.transitGatewayMulticastDomainId,
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `transitGatewayId` - (Required) EC2 Transit Gateway identifier. The EC2 Transit Gateway must have `multicastSupport` enabled.
* `autoAcceptSharedAssociations` - (Optional) Whether to automatically accept cross-account subnet associations that are associated with the EC2 Transit Gateway Multicast Domain. Valid values: `disable`, `enable`. Default value: `disable`.
* `igmpv2Support` - (Optional) Whether to enable Internet Group Management Protocol (IGMP) version 2 for the EC2 Transit Gateway Multicast Domain. Valid values: `disable`, `enable`. Default value: `disable`.
* `staticSourcesSupport` - (Optional) Whether to enable support for statically configuring multicast group sources for the EC2 Transit Gateway Multicast Domain. Valid values: `disable`, `enable`. Default value: `disable`.
* `tags` - (Optional) Key-value tags for the EC2 Transit Gateway Multicast Domain. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - EC2 Transit Gateway Multicast Domain identifier.
* `arn` - EC2 Transit Gateway Multicast Domain Amazon Resource Name (ARN).
* `ownerId` - Identifier of the AWS account that owns the EC2 Transit Gateway Multicast Domain.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `10m`)
- `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_ec2_transit_gateway_multicast_domain` using the EC2 Transit Gateway Multicast Domain identifier. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Ec2TransitGatewayMulticastDomain } from "./.gen/providers/aws/ec2-transit-gateway-multicast-domain";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    Ec2TransitGatewayMulticastDomain.generateConfigForImport(
      this,
      "example",
      "tgw-mcast-domain-12345"
    );
  }
}

```

Using `terraform import`, import `aws_ec2_transit_gateway_multicast_domain` using the EC2 Transit Gateway Multicast Domain identifier. For example:

```console
% terraform import aws_ec2_transit_gateway_multicast_domain.example tgw-mcast-domain-12345
```

<!-- cache-key: cdktf-0.20.8 input-8493dfab227c918d9b3e4e208962affb97781a33e5cd93321c066ab973c7252b -->