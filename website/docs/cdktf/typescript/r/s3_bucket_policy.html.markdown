---
subcategory: "S3 (Simple Storage)"
layout: "aws"
page_title: "AWS: aws_s3_bucket_policy"
description: |-
  Attaches a policy to an S3 bucket resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_s3_bucket_policy

Attaches a policy to an S3 bucket resource.

-> Policies can be attached to both S3 general purpose buckets and S3 directory buckets.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketPolicy } from "./.gen/providers/aws/s3-bucket-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new S3Bucket(this, "example", {
      bucket: "my-tf-test-bucket",
    });
    const allowAccessFromAnotherAccount = new DataAwsIamPolicyDocument(
      this,
      "allow_access_from_another_account",
      {
        statement: [
          {
            actions: ["s3:GetObject", "s3:ListBucket"],
            principals: [
              {
                identifiers: ["123456789012"],
                type: "AWS",
              },
            ],
            resources: [example.arn, "${" + example.arn + "}/*"],
          },
        ],
      }
    );
    const awsS3BucketPolicyAllowAccessFromAnotherAccount = new S3BucketPolicy(
      this,
      "allow_access_from_another_account_2",
      {
        bucket: example.id,
        policy: Token.asString(allowAccessFromAnotherAccount.json),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3BucketPolicyAllowAccessFromAnotherAccount.overrideLogicalId(
      "allow_access_from_another_account"
    );
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `bucket` - (Required) Name of the bucket to which to apply the policy.
* `policy` - (Required) Text of the policy. Although this is a bucket policy rather than an IAM policy, the [`aws_iam_policy_document`](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/data-sources/iam_policy_document) data source may be used, so long as it specifies a principal. For more information about building AWS IAM policy documents with Terraform, see the [AWS IAM Policy Document Guide](https://learn.hashicorp.com/terraform/aws/iam-policy). Note: Bucket policies are limited to 20 KB in size.

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import S3 bucket policies using the bucket name. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { S3BucketPolicy } from "./.gen/providers/aws/s3-bucket-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    S3BucketPolicy.generateConfigForImport(
      this,
      "allowAccessFromAnotherAccount",
      "my-tf-test-bucket"
    );
  }
}

```

Using `terraform import`, import S3 bucket policies using the bucket name. For example:

```console
% terraform import aws_s3_bucket_policy.allow_access_from_another_account my-tf-test-bucket
```

<!-- cache-key: cdktf-0.20.8 input-ce73bb0e8c95d107e5421c665248cb3f86ed08c2b8db8245400a825a612f812b -->