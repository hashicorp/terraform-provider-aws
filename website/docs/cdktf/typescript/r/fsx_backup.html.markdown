---
subcategory: "FSx"
layout: "aws"
page_title: "AWS: aws_fsx_backup"
description: |-
  Manages a FSx Backup.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_fsx_backup

Provides a FSx Backup resource.

## Example Usage

## Lustre Example

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { FsxBackup } from "./.gen/providers/aws/fsx-backup";
import { FsxLustreFileSystem } from "./.gen/providers/aws/fsx-lustre-file-system";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new FsxLustreFileSystem(this, "example", {
      deploymentType: "PERSISTENT_1",
      perUnitStorageThroughput: 50,
      storageCapacity: 1200,
      subnetIds: [Token.asString(awsSubnetExample.id)],
    });
    const awsFsxBackupExample = new FsxBackup(this, "example_1", {
      fileSystemId: example.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsFsxBackupExample.overrideLogicalId("example");
  }
}

```

## Windows Example

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { FsxBackup } from "./.gen/providers/aws/fsx-backup";
import { FsxWindowsFileSystem } from "./.gen/providers/aws/fsx-windows-file-system";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new FsxWindowsFileSystem(this, "example", {
      activeDirectoryId: eample.id,
      skipFinalBackup: true,
      storageCapacity: 32,
      subnetIds: [example1.id],
      throughputCapacity: 8,
    });
    const awsFsxBackupExample = new FsxBackup(this, "example_1", {
      fileSystemId: example.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsFsxBackupExample.overrideLogicalId("example");
  }
}

```

## ONTAP Example

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { FsxBackup } from "./.gen/providers/aws/fsx-backup";
import { FsxOntapVolume } from "./.gen/providers/aws/fsx-ontap-volume";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new FsxOntapVolume(this, "example", {
      junctionPath: "/example",
      name: "example",
      sizeInMegabytes: 1024,
      storageEfficiencyEnabled: true,
      storageVirtualMachineId: test.id,
    });
    const awsFsxBackupExample = new FsxBackup(this, "example_1", {
      volumeId: example.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsFsxBackupExample.overrideLogicalId("example");
  }
}

```

## OpenZFS Example

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { FsxBackup } from "./.gen/providers/aws/fsx-backup";
import { FsxOpenzfsFileSystem } from "./.gen/providers/aws/fsx-openzfs-file-system";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new FsxOpenzfsFileSystem(this, "example", {
      deploymentType: "SINGLE_AZ_1",
      storageCapacity: 64,
      subnetIds: [Token.asString(awsSubnetExample.id)],
      throughputCapacity: 64,
    });
    const awsFsxBackupExample = new FsxBackup(this, "example_1", {
      fileSystemId: example.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsFsxBackupExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

Note - Only file_system_id or volume_id can be specified. file_system_id is used for Lustre and Windows, volume_id is used for ONTAP.

* `fileSystemId` - (Optional) The ID of the file system to back up. Required if backing up Lustre or Windows file systems.
* `tags` - (Optional) A map of tags to assign to the file system. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
* `volumeId` - (Optional) The ID of the volume to back up. Required if backing up a ONTAP Volume.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name of the backup.
* `id` - Identifier of the backup, e.g., `fs-12345678`
* `kmsKeyId` -  The ID of the AWS Key Management Service (AWS KMS) key used to encrypt the backup of the Amazon FSx file system's data at rest.
* `ownerId` - AWS account identifier that created the file system.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).
* `type` - The type of the file system backup.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `10m`)
* `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import FSx Backups using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { FsxBackup } from "./.gen/providers/aws/fsx-backup";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    FsxBackup.generateConfigForImport(this, "example", "fs-543ab12b1ca672f33");
  }
}

```

Using `terraform import`, import FSx Backups using the `id`. For example:

```console
% terraform import aws_fsx_backup.example fs-543ab12b1ca672f33
```

<!-- cache-key: cdktf-0.20.8 input-0ec17c1115f996a3a9d6f257bcf0f3b19a4abf6354a302a0d56b57c97b46ab01 -->