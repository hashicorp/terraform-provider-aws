---
subcategory: "ECS (Elastic Container)"
layout: "aws"
page_title: "AWS: aws_ecs_task_set"
description: |-
  Provides an ECS task set.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ecs_task_set

Provides an ECS task set - effectively a task that is expected to run until an error occurs or a user terminates it (typically a webserver or a database).

See [ECS Task Set section in AWS developer guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/deployment-type-external.html).

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EcsTaskSet } from "./.gen/providers/aws/ecs-task-set";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new EcsTaskSet(this, "example", {
      cluster: Token.asString(awsEcsClusterExample.id),
      loadBalancer: [
        {
          containerName: "mongo",
          containerPort: 8080,
          targetGroupArn: Token.asString(awsLbTargetGroupExample.arn),
        },
      ],
      service: Token.asString(awsEcsServiceExample.id),
      taskDefinition: Token.asString(awsEcsTaskDefinitionExample.arn),
    });
  }
}

```

### Ignoring Changes to Scale

You can utilize the generic Terraform resource [lifecycle configuration block](https://www.terraform.io/docs/configuration/meta-arguments/lifecycle.html) with `ignore_changes` to create an ECS service with an initial count of running instances, then ignore any changes to that count caused externally (e.g. Application Autoscaling).

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EcsTaskSet } from "./.gen/providers/aws/ecs-task-set";
interface MyConfig {
  cluster: any;
  service: any;
  taskDefinition: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new EcsTaskSet(this, "example", {
      lifecycle: {
        ignoreChanges: ["scale"],
      },
      scale: {
        value: 50,
      },
      cluster: config.cluster,
      service: config.service,
      taskDefinition: config.taskDefinition,
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `service` - (Required) The short name or ARN of the ECS service.
* `cluster` - (Required) The short name or ARN of the cluster that hosts the service to create the task set in.
* `taskDefinition` - (Required) The family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service.

The following arguments are optional:

* `capacityProviderStrategy` - (Optional) The capacity provider strategy to use for the service. Can be one or more.  [Defined below](#capacity_provider_strategy).
* `externalId` - (Optional) The external ID associated with the task set.
* `forceDelete` - (Optional) Whether to allow deleting the task set without waiting for scaling down to 0. You can force a task set to delete even if it's in the process of scaling a resource. Normally, Terraform drains all the tasks before deleting the task set. This bypasses that behavior and potentially leaves resources dangling.
* `launchType` - (Optional) The launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`.
* `loadBalancer` - (Optional) Details on load balancers that are used with a task set. [Detailed below](#load_balancer).
* `platformVersion` - (Optional) The platform version on which to run your service. Only applicable for `launchType` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
* `networkConfiguration` - (Optional) The network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. [Detailed below](#network_configuration).
* `scale` - (Optional) A floating-point percentage of the desired number of tasks to place and keep running in the task set. [Detailed below](#scale).
* `serviceRegistries` - (Optional) The service discovery registries for the service. The maximum number of `serviceRegistries` blocks is `1`. [Detailed below](#service_registries).
* `tags` - (Optional) A map of tags to assign to the file system. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
* `waitUntilStable` - (Optional) Whether `terraform` should wait until the task set has reached `STEADY_STATE`.
* `waitUntilStableTimeout` - (Optional) Wait timeout for task set to reach `STEADY_STATE`. Valid time units include `ns`, `us` (or `Âµs`), `ms`, `s`, `m`, and `h`. Default `10m`.

## capacity_provider_strategy

The `capacityProviderStrategy` configuration block supports the following:

* `capacityProvider` - (Required) The short name or full Amazon Resource Name (ARN) of the capacity provider.
* `weight` - (Required) The relative percentage of the total number of launched tasks that should use the specified capacity provider.
* `base` - (Optional) The number of tasks, at a minimum, to run on the specified capacity provider. Only one capacity provider in a capacity provider strategy can have a base defined.

## load_balancer

The `loadBalancer` configuration block supports the following:

* `containerName` - (Required) The name of the container to associate with the load balancer (as it appears in a container definition).
* `loadBalancerName` - (Optional, Required for ELB Classic) The name of the ELB (Classic) to associate with the service.
* `targetGroupArn` - (Optional, Required for ALB/NLB) The ARN of the Load Balancer target group to associate with the service.
* `containerPort` - (Optional) The port on the container to associate with the load balancer. Defaults to `0` if not specified.

~> **Note:** Specifying multiple `loadBalancer` configurations is still not supported by AWS for ECS task set.

## network_configuration

The `networkConfiguration` configuration block supports the following:

* `subnets` - (Required) The subnets associated with the task or service. Maximum of 16.
* `securityGroups` - (Optional) The security groups associated with the task or service. If you do not specify a security group, the default security group for the VPC is used. Maximum of 5.
* `assignPublicIp` - (Optional) Whether to assign a public IP address to the ENI (`FARGATE` launch type only). Valid values are `true` or `false`. Default `false`.

For more information, see [Task Networking](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html).

## scale

The `scale` configuration block supports the following:

* `unit` - (Optional) The unit of measure for the scale value. Default: `PERCENT`.
* `value` - (Optional) The value, specified as a percent total of a service's `desiredCount`, to scale the task set. Defaults to `0` if not specified. Accepted values are numbers between 0.0 and 100.0.

## service_registries

`serviceRegistries` support the following:

* `registryArn` - (Required) The ARN of the Service Registry. The currently supported service registry is Amazon Route 53 Auto Naming Service([`aws_service_discovery_service` resource](/docs/providers/aws/r/service_discovery_service.html)). For more information, see [Service](https://docs.aws.amazon.com/Route53/latest/APIReference/API_autonaming_Service.html).
* `port` - (Optional) The port value used if your Service Discovery service specified an SRV record.
* `containerPort` - (Optional) The port value, already specified in the task definition, to be used for your service discovery service.
* `containerName` - (Optional) The container name value, already specified in the task definition, to be used for your service discovery service.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The `taskSetId`, `service` and `cluster` separated by commas (`,`).
* `arn` - The Amazon Resource Name (ARN) that identifies the task set.
* `stabilityStatus` - The stability status. This indicates whether the task set has reached a steady state.
* `status` - The status of the task set.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).
* `taskSetId` - The ID of the task set.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ECS Task Sets using the `taskSetId`, `service`, and `cluster` separated by commas (`,`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EcsTaskSet } from "./.gen/providers/aws/ecs-task-set";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    EcsTaskSet.generateConfigForImport(
      this,
      "example",
      "ecs-svc/7177320696926227436,arn:aws:ecs:us-west-2:123456789101:service/example/example-1234567890,arn:aws:ecs:us-west-2:123456789101:cluster/example"
    );
  }
}

```

Using `terraform import`, import ECS Task Sets using the `taskSetId`, `service`, and `cluster` separated by commas (`,`). For example:

```console
% terraform import aws_ecs_task_set.example ecs-svc/7177320696926227436,arn:aws:ecs:us-west-2:123456789101:service/example/example-1234567890,arn:aws:ecs:us-west-2:123456789101:cluster/example
```

<!-- cache-key: cdktf-0.20.8 input-0c23f439c10bf62237c2978dae4ddbb20ffe6a937ff6356657670867f1942259 -->