---
subcategory: "FinSpace"
layout: "aws"
page_title: "AWS: aws_finspace_kx_environment"
description: |-
  Terraform resource for managing an AWS FinSpace Kx Environment.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_finspace_kx_environment

Terraform resource for managing an AWS FinSpace Kx Environment.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { FinspaceKxEnvironment } from "./.gen/providers/aws/finspace-kx-environment";
import { KmsKey } from "./.gen/providers/aws/kms-key";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new KmsKey(this, "example", {
      deletionWindowInDays: 7,
      description: "Sample KMS Key",
    });
    const awsFinspaceKxEnvironmentExample = new FinspaceKxEnvironment(
      this,
      "example_1",
      {
        kmsKeyId: example.arn,
        name: "my-tf-kx-environment",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsFinspaceKxEnvironmentExample.overrideLogicalId("example");
  }
}

```

### With Transit Gateway Configuration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Ec2TransitGateway } from "./.gen/providers/aws/ec2-transit-gateway";
import { FinspaceKxEnvironment } from "./.gen/providers/aws/finspace-kx-environment";
import { KmsKey } from "./.gen/providers/aws/kms-key";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new Ec2TransitGateway(this, "example", {
      description: "example",
    });
    const awsKmsKeyExample = new KmsKey(this, "example_1", {
      deletionWindowInDays: 7,
      description: "Sample KMS Key",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsKmsKeyExample.overrideLogicalId("example");
    new FinspaceKxEnvironment(this, "example_env", {
      customDnsConfiguration: [
        {
          customDnsServerIp: "10.0.0.76",
          customDnsServerName: "example.finspace.amazonaws.com",
        },
      ],
      description: "Environment description",
      kmsKeyId: Token.asString(awsKmsKeyExample.arn),
      name: "my-tf-kx-environment",
      transitGatewayConfiguration: {
        routableCidrSpace: "100.64.0.0/26",
        transitGatewayId: example.id,
      },
    });
  }
}

```

### With Transit Gateway Attachment Network ACL Configuration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Op, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Ec2TransitGateway } from "./.gen/providers/aws/ec2-transit-gateway";
import { FinspaceKxEnvironment } from "./.gen/providers/aws/finspace-kx-environment";
import { KmsKey } from "./.gen/providers/aws/kms-key";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new Ec2TransitGateway(this, "example", {
      description: "example",
    });
    const awsKmsKeyExample = new KmsKey(this, "example_1", {
      deletionWindowInDays: 7,
      description: "Sample KMS Key",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsKmsKeyExample.overrideLogicalId("example");
    new FinspaceKxEnvironment(this, "example_env", {
      customDnsConfiguration: [
        {
          customDnsServerIp: "10.0.0.76",
          customDnsServerName: "example.finspace.amazonaws.com",
        },
      ],
      description: "Environment description",
      kmsKeyId: Token.asString(awsKmsKeyExample.arn),
      name: "my-tf-kx-environment",
      transitGatewayConfiguration: {
        attachmentNetworkAclConfiguration: [
          {
            cidrBlock: "0.0.0.0/0",
            icmpTypeCode: {
              code: Token.asNumber(Op.negate(1)),
              type: Token.asNumber(Op.negate(1)),
            },
            portRange: {
              from: 53,
              to: 53,
            },
            protocol: "6",
            ruleAction: "allow",
            ruleNumber: 1,
          },
        ],
        routableCidrSpace: "100.64.0.0/26",
        transitGatewayId: example.id,
      },
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `name` - (Required) Name of the KX environment that you want to create.
* `kmsKeyId` - (Required) KMS key ID to encrypt your data in the FinSpace environment.

The following arguments are optional:

* `customDnsConfiguration` - (Optional) List of DNS server name and server IP. This is used to set up Route-53 outbound resolvers. Defined below.
* `description` - (Optional) Description for the KX environment.
* `tags` - (Optional) Key-value mapping of resource tags. If configured with a provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `transitGatewayConfiguration` - (Optional) Transit gateway and network configuration that is used to connect the KX environment to an internal network. Defined below.

### custom_dns_configuration

The custom_dns_configuration block supports the following arguments:

* `customDnsServerIp` - (Required) IP address of the DNS server.
* `customDnsServerName` - (Required) Name of the DNS server.

### transit_gateway_configuration

The transit_gateway_configuration block supports the following arguments:

* `routableCidrSpace` - (Required) Routing CIDR on behalf of KX environment. It could be any “/26 range in the 100.64.0.0 CIDR space. After providing, it will be added to the customer’s transit gateway routing table so that the traffics could be routed to KX network.
* `transitGatewayId` - (Required) Identifier of the transit gateway created by the customer to connect outbound traffics from KX network to your internal network.
* `attachmentNetworkAclConfiguration` - (Optional) Rules that define how you manage outbound traffic from kdb network to your internal network. Defined below.

### attachment_network_acl_configuration

The network access control list (ACL) is an optional layer of security for VPCs that acts as a firewall for controlling traffic in and out of one or more subnets.
The entry is a set of numbered ingress and egress rules that determine whether a packet should be allowed in or out of a subnet associated with the ACL.
Entries in the ACL are processed according to the rule numbers, in ascending order. The `attachmentNetworkAclConfiguration` block supports the following arguments:

* `cidrBlock` - (Required) The IPv4 network range to allow or deny, in CIDR notation. The specified CIDR block is modified to its canonical form. For example, `100.68.0.18/18` will be converted to `100.68.0.0/18`.
* `protocol` - (Required) Protocol number. A value of `1` means all the protocols.
* `ruleAction` - (Required) Indicates whether to `allow` or `deny` the traffic that matches the rule.
* `ruleNumber` - (Required) Rule number for the entry. All the network ACL entries are processed in ascending order by rule number.
* `icmpTypeCode` - (Optional) Defines the ICMP protocol that consists of the ICMP type and code. Defined below.
* `portRange` - (Optional) Range of ports the rule applies to. Defined below.

### port_range

The range of ports the rule applies to (between `0` and `65535`). The `portRange` block supports the following arguments:

* `from` - (Required) First port in the range.
* `to` - (Required) Last port in the range.

### icmp_type_code

Defines the ICMP protocol that consists of the ICMP type and code. The `icmpTypeCode` block supports the following arguments:

* `code` - (Required) ICMP code. A value of `-1` means all codes for the specified ICMP type.
* `type` - (Required) ICMP type. A value of `-1` means all types.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) identifier of the KX environment.
* `availabilityZones` - AWS Availability Zone IDs that this environment is available in. Important when selecting VPC subnets to use in cluster creation.
* `createdTimestamp` - Timestamp at which the environment is created in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
* `id` - Unique identifier for the KX environment.
* `infrastructureAccountId` - Unique identifier for the AWS environment infrastructure account.
* `lastModifiedTimestamp` - Last timestamp at which the environment was updated in FinSpace. Value determined as epoch time in seconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000.
* `status` - Status of environment creation
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `update` - (Default `30m`)
* `delete` - (Default `75m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import an AWS FinSpace Kx Environment using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { FinspaceKxEnvironment } from "./.gen/providers/aws/finspace-kx-environment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    FinspaceKxEnvironment.generateConfigForImport(
      this,
      "example",
      "n3ceo7wqxoxcti5tujqwzs"
    );
  }
}

```

Using `terraform import`, import an AWS FinSpace Kx Environment using the `id`. For example:

```console
% terraform import aws_finspace_kx_environment.example n3ceo7wqxoxcti5tujqwzs
```

<!-- cache-key: cdktf-0.20.8 input-d97c22abd7224cef7df912e8bd43d2d4e6a61fc878245515c1d2fff4f7189646 -->