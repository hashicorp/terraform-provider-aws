---
subcategory: "Pinpoint"
layout: "aws"
page_title: "AWS: aws_pinpoint_email_channel"
description: |-
  Provides a Pinpoint Email Channel resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_pinpoint_email_channel

Provides a Pinpoint Email Channel resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicy } from "./.gen/providers/aws/iam-role-policy";
import { PinpointApp } from "./.gen/providers/aws/pinpoint-app";
import { PinpointEmailChannel } from "./.gen/providers/aws/pinpoint-email-channel";
import { SesDomainIdentity } from "./.gen/providers/aws/ses-domain-identity";
interface MyConfig {
  identity: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    const app = new PinpointApp(this, "app", {});
    new SesDomainIdentity(this, "identity", {
      domain: "example.com",
    });
    const assumeRole = new DataAwsIamPolicyDocument(this, "assume_role", {
      statement: [
        {
          actions: ["sts:AssumeRole"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["pinpoint.amazonaws.com"],
              type: "Service",
            },
          ],
        },
      ],
    });
    const rolePolicy = new DataAwsIamPolicyDocument(this, "role_policy", {
      statement: [
        {
          actions: ["mobileanalytics:PutEvents", "mobileanalytics:PutItems"],
          effect: "Allow",
          resources: ["*"],
        },
      ],
    });
    const role = new IamRole(this, "role", {
      assumeRolePolicy: Token.asString(assumeRole.json),
    });
    const awsIamRolePolicyRolePolicy = new IamRolePolicy(
      this,
      "role_policy_5",
      {
        name: "role_policy",
        policy: Token.asString(rolePolicy.json),
        role: role.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyRolePolicy.overrideLogicalId("role_policy");
    new PinpointEmailChannel(this, "email", {
      applicationId: app.applicationId,
      fromAddress: "user@example.com",
      roleArn: role.arn,
      identity: config.identity,
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `applicationId` - (Required) The application ID.
* `enabled` - (Optional) Whether the channel is enabled or disabled. Defaults to `true`.
* `configurationSet` - (Optional) The ARN of the Amazon SES configuration set that you want to apply to messages that you send through the channel.
* `fromAddress` - (Required) The email address used to send emails from. You can use email only (`user@example.com`) or friendly address (`User <user@example.com>`). This field comply with [RFC 5322](https://www.ietf.org/rfc/rfc5322.txt).
* `identity` - (Required) The ARN of an identity verified with SES.
* `roleArn` - (Optional) *Deprecated* The ARN of an IAM Role used to submit events to Mobile Analytics' event ingestion service.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `messagesPerSecond` - Messages per second that can be sent.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Pinpoint Email Channel using the `application-id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { PinpointEmailChannel } from "./.gen/providers/aws/pinpoint-email-channel";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    PinpointEmailChannel.generateConfigForImport(
      this,
      "email",
      "application-id"
    );
  }
}

```

Using `terraform import`, import Pinpoint Email Channel using the `application-id`. For example:

```console
% terraform import aws_pinpoint_email_channel.email application-id
```

<!-- cache-key: cdktf-0.20.8 input-6378f9b4a01e95270fdc0e626fd068fb87d9b632a57e241b972a8df73443edf7 -->