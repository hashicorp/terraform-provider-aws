---
subcategory: "IoT Core"
layout: "aws"
page_title: "AWS: aws_iot_ca_certificate"
description: |-
    Creates and manages an AWS IoT CA Certificate.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_iot_ca_certificate

Creates and manages an AWS IoT CA Certificate.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIotRegistrationCode } from "./.gen/providers/aws/data-aws-iot-registration-code";
import { IotCaCertificate } from "./.gen/providers/aws/iot-ca-certificate";
import { CertRequest } from "./.gen/providers/tls/cert-request";
import { LocallySignedCert } from "./.gen/providers/tls/locally-signed-cert";
import { PrivateKey } from "./.gen/providers/tls/private-key";
import { SelfSignedCert } from "./.gen/providers/tls/self-signed-cert";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: tls.
    For a more precise conversion please use the --provider flag in convert.*/
    const ca = new PrivateKey(this, "ca", {
      algorithm: "RSA",
    });
    const verification = new PrivateKey(this, "verification", {
      algorithm: "RSA",
    });
    const tlsSelfSignedCertCa = new SelfSignedCert(this, "ca_2", {
      allowed_uses: ["key_encipherment", "digital_signature", "server_auth"],
      is_ca_certificate: true,
      private_key_pem: ca.privateKeyPem,
      subject: [
        {
          common_name: "example.com",
          organization: "ACME Examples, Inc",
        },
      ],
      validity_period_hours: 12,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tlsSelfSignedCertCa.overrideLogicalId("ca");
    const example = new DataAwsIotRegistrationCode(this, "example", {});
    const tlsCertRequestVerification = new CertRequest(this, "verification_4", {
      private_key_pem: verification.privateKeyPem,
      subject: [
        {
          common_name: example.registrationCode,
        },
      ],
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tlsCertRequestVerification.overrideLogicalId("verification");
    const tlsLocallySignedCertVerification = new LocallySignedCert(
      this,
      "verification_5",
      {
        allowed_uses: ["key_encipherment", "digital_signature", "server_auth"],
        ca_cert_pem: tlsSelfSignedCertCa.certPem,
        ca_private_key_pem: ca.privateKeyPem,
        cert_request_pem: tlsCertRequestVerification.certRequestPem,
        validity_period_hours: 12,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tlsLocallySignedCertVerification.overrideLogicalId("verification");
    const awsIotCaCertificateExample = new IotCaCertificate(this, "example_6", {
      active: true,
      allowAutoRegistration: true,
      caCertificatePem: Token.asString(tlsSelfSignedCertCa.certPem),
      verificationCertificatePem: Token.asString(
        tlsLocallySignedCertVerification.certPem
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIotCaCertificateExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

* `active` - (Required)  Boolean flag to indicate if the certificate should be active for device authentication.
* `allowAutoRegistration` - (Required)  Boolean flag to indicate if the certificate should be active for device regisration.
* `caCertificatePem` - (Required)  PEM encoded CA certificate.
* `certificateMode` - (Optional)  The certificate mode in which the CA will be registered. Valida values: `DEFAULT` and `SNI_ONLY`. Default: `DEFAULT`.
* `registrationConfig` - (Optional) Information about the registration configuration. See below.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `verificationCertificatePem` - (Optional) PEM encoded verification certificate containing the common name of a registration code. Review
  [CreateVerificationCSR](https://docs.aws.amazon.com/iot/latest/developerguide/register-CA-cert.html). Reuired if `certificateMode` is `DEFAULT`.

### registration_config

* `roleArn` - (Optional) The ARN of the role.
* `templateBody` - (Optional) The template body.
* `templateName` - (Optional) The name of the provisioning template.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The internal ID assigned to this CA certificate.
* `arn` - The ARN of the created CA certificate.
* `customerVersion` - The customer version of the CA certificate.
* `generationId` - The generation ID of the CA certificate.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).
* `validity` - When the CA certificate is valid.
    * `notAfter` - The certificate is not valid after this date.
    * `notBefore` - The certificate is not valid before this date.

<!-- cache-key: cdktf-0.20.8 input-c5fc1f0a710ef5472f25b8e9639aa2a5bb22ff79e04926030c3f0710b353cd73 -->