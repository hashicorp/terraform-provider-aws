---
subcategory: "Verified Permissions"
layout: "aws"
page_title: "AWS: aws_verifiedpermissions_policy"
description: |-
  Terraform resource for managing an AWS Verified Permissions Policy.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_verifiedpermissions_policy

Terraform resource for managing an AWS Verified Permissions Policy.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VerifiedpermissionsPolicy } from "./.gen/providers/aws/verifiedpermissions-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new VerifiedpermissionsPolicy(this, "test", {
      definition: [
        {
          static: [
            {
              statement:
                'permit (principal, action == Action::\\"view\\", resource in Album:: \\"test_album\\");',
            },
          ],
        },
      ],
      policyStoreId: Token.asString(awsVerifiedpermissionsPolicyStoreTest.id),
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `policyStoreId` - (Required) The Policy Store ID of the policy store.
* `definition`- (Required) The definition of the policy. See [Definition](#definition) below.

### Definition

* `static` - (Optional) The static policy statement. See [Static](#static) below.
* `templateLinked` - (Optional) The template linked policy. See [Template Linked](#template-linked) below.

#### Static

* `description` - (Optional) The description of the static policy.
* `statement` - (Required) The statement of the static policy.

#### Template Linked

* `policyTemplateId` - (Required) The ID of the template.
* `principal` - (Optional) The principal of the template linked policy.
    * `entityId` - (Required) The entity ID of the principal.
    * `entityType` - (Required) The entity type of the principal.
* `resource` - (Optional) The resource of the template linked policy.
    * `entityId` - (Required) The entity ID of the resource.
    * `entityType` - (Required) The entity type of the resource.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `createdDate` - The date the policy was created.
* `policyId` - The Policy ID of the policy.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Verified Permissions Policy using the `policy_id,policy_store_id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VerifiedpermissionsPolicy } from "./.gen/providers/aws/verifiedpermissions-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    VerifiedpermissionsPolicy.generateConfigForImport(
      this,
      "example",
      "policy-id-12345678,policy-store-id-12345678"
    );
  }
}

```

Using `terraform import`, import Verified Permissions Policy using the `policy_id,policy_store_id`. For example:

```console
% terraform import aws_verifiedpermissions_policy.example policy-id-12345678,policy-store-id-12345678
```

<!-- cache-key: cdktf-0.20.1 input-0e65f5143b3ca9c6786ec43da5ff60b9aafdce80cdf90c763cbb9ac624a765aa -->