---
subcategory: "CodeDeploy"
layout: "aws"
page_title: "AWS: aws_codedeploy_deployment_config"
description: |-
  Provides a CodeDeploy deployment config.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_codedeploy_deployment_config

Provides a CodeDeploy deployment config for an application

## Example Usage

### Server Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CodedeployDeploymentConfig } from "./.gen/providers/aws/codedeploy-deployment-config";
import { CodedeployDeploymentGroup } from "./.gen/providers/aws/codedeploy-deployment-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const foo = new CodedeployDeploymentConfig(this, "foo", {
      deploymentConfigName: "test-deployment-config",
      minimumHealthyHosts: {
        type: "HOST_COUNT",
        value: 2,
      },
    });
    const awsCodedeployDeploymentGroupFoo = new CodedeployDeploymentGroup(
      this,
      "foo_1",
      {
        alarmConfiguration: {
          alarms: ["my-alarm-name"],
          enabled: true,
        },
        appName: fooApp.name,
        autoRollbackConfiguration: {
          enabled: true,
          events: ["DEPLOYMENT_FAILURE"],
        },
        deploymentConfigName: foo.id,
        deploymentGroupName: "bar",
        ec2TagFilter: [
          {
            key: "filterkey",
            type: "KEY_AND_VALUE",
            value: "filtervalue",
          },
        ],
        serviceRoleArn: fooRole.arn,
        triggerConfiguration: [
          {
            triggerEvents: ["DeploymentFailure"],
            triggerName: "foo-trigger",
            triggerTargetArn: "foo-topic-arn",
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCodedeployDeploymentGroupFoo.overrideLogicalId("foo");
  }
}

```

### Lambda Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CodedeployDeploymentConfig } from "./.gen/providers/aws/codedeploy-deployment-config";
import { CodedeployDeploymentGroup } from "./.gen/providers/aws/codedeploy-deployment-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const foo = new CodedeployDeploymentConfig(this, "foo", {
      computePlatform: "Lambda",
      deploymentConfigName: "test-deployment-config",
      trafficRoutingConfig: {
        timeBasedLinear: {
          interval: 10,
          percentage: 10,
        },
        type: "TimeBasedLinear",
      },
    });
    const awsCodedeployDeploymentGroupFoo = new CodedeployDeploymentGroup(
      this,
      "foo_1",
      {
        alarmConfiguration: {
          alarms: ["my-alarm-name"],
          enabled: true,
        },
        appName: fooApp.name,
        autoRollbackConfiguration: {
          enabled: true,
          events: ["DEPLOYMENT_STOP_ON_ALARM"],
        },
        deploymentConfigName: foo.id,
        deploymentGroupName: "bar",
        serviceRoleArn: fooRole.arn,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCodedeployDeploymentGroupFoo.overrideLogicalId("foo");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `deploymentConfigName` - (Required) The name of the deployment config.
* `computePlatform` - (Optional) The compute platform can be `Server`, `Lambda`, or `ECS`. Default is `Server`.
* `minimumHealthyHosts` - (Optional) A minimum_healthy_hosts block. Required for `Server` compute platform. Minimum Healthy Hosts are documented below.
* `trafficRoutingConfig` - (Optional) A traffic_routing_config block. Traffic Routing Config is documented below.
* `zonalConfig` - (Optional) A zonal_config block. Zonal Config is documented below.

The `minimumHealthyHosts` block supports the following:

* `type` - (Required) The type can either be `FLEET_PERCENT` or `HOST_COUNT`.
* `value` - (Required) The value when the type is `FLEET_PERCENT` represents the minimum number of healthy instances as
a percentage of the total number of instances in the deployment. If you specify FLEET_PERCENT, at the start of the
deployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances.
When the type is `HOST_COUNT`, the value represents the minimum number of healthy instances as an absolute value.

The `trafficRoutingConfig` block supports the following:

* `type` - (Optional) Type of traffic routing config. One of `TimeBasedCanary`, `TimeBasedLinear`, `AllAtOnce`.
* `timeBasedCanary` - (Optional) The time based canary configuration information. If `type` is `TimeBasedLinear`, use `timeBasedLinear` instead.
* `timeBasedLinear` - (Optional) The time based linear configuration information. If `type` is `TimeBasedCanary`, use `timeBasedCanary` instead.

The `timeBasedCanary` block supports the following:

* `interval` - (Optional) The number of minutes between the first and second traffic shifts of a `TimeBasedCanary` deployment.
* `percentage` - (Optional) The percentage of traffic to shift in the first increment of a `TimeBasedCanary` deployment.

The `timeBasedLinear` block supports the following:

* `interval` - (Optional) The number of minutes between each incremental traffic shift of a `TimeBasedLinear` deployment.
* `percentage` - (Optional) The percentage of traffic that is shifted at the start of each increment of a `TimeBasedLinear` deployment.

The `zonalConfig` block supports the following:

* `firstZoneMonitorDurationInSeconds` - (Optional) The period of time, in seconds, that CodeDeploy must wait after completing a deployment to the first Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the second Availability Zone. If you don't specify a value for `firstZoneMonitorDurationInSeconds`, then CodeDeploy uses the `monitorDurationInSeconds` value for the first Availability Zone.
* `minimumHealthyHostsPerZone` - (Optional) The number or percentage of instances that must remain available per Availability Zone during a deployment. If you don't specify a value under `minimumHealthyHostsPerZone`, then CodeDeploy uses a default value of 0 percent. This block is more documented below.
* `monitorDurationInSeconds` - (Optional) The period of time, in seconds, that CodeDeploy must wait after completing a deployment to an Availability Zone. CodeDeploy will wait this amount of time before starting a deployment to the next Availability Zone. If you don't specify a `monitorDurationInSeconds`, CodeDeploy starts deploying to the next Availability Zone immediately.

The `minimumHealthyHostsPerZone` block supports the following:

* `type` - (Required) The type can either be `FLEET_PERCENT` or `HOST_COUNT`.
* `value` - (Required) The value when the type is `FLEET_PERCENT` represents the minimum number of healthy instances as a percentage of the total number of instances in the Availability Zone during a deployment. If you specify FLEET_PERCENT, at the start of the deployment, AWS CodeDeploy converts the percentage to the equivalent number of instance and rounds up fractional instances. When the type is `HOST_COUNT`, the value represents the minimum number of healthy instances in the Availability Zone as an absolute value.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The ARN of the deployment config.
* `id` - The deployment group's config name.
* `deploymentConfigId` - The AWS Assigned deployment config id

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import CodeDeploy Deployment Configurations using the `deploymentConfigName`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CodedeployDeploymentConfig } from "./.gen/providers/aws/codedeploy-deployment-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    CodedeployDeploymentConfig.generateConfigForImport(
      this,
      "example",
      "my-deployment-config"
    );
  }
}

```

Using `terraform import`, import CodeDeploy Deployment Configurations using the `deploymentConfigName`. For example:

```console
% terraform import aws_codedeploy_deployment_config.example my-deployment-config
```

<!-- cache-key: cdktf-0.20.8 input-7683a24d45be8afb3fdb701aaf9093111f7bcd93063fb7f270dc2c81c0f1139e -->