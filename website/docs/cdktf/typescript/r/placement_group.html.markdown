---
subcategory: "EC2 (Elastic Compute Cloud)"
layout: "aws"
page_title: "AWS: aws_placement_group"
description: |-
  Provides an EC2 placement group.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_placement_group

Provides an EC2 placement group. Read more about placement groups
in [AWS Docs](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html).

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { PlacementGroup } from "./.gen/providers/aws/placement-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new PlacementGroup(this, "web", {
      name: "hunky-dory-pg",
      strategy: "cluster",
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The name of the placement group.
* `partitionCount` - (Optional) The number of partitions to create in the
  placement group.  Can only be specified when the `strategy` is set to
  `partition`.  Valid values are 1 - 7 (default is `2`).
* `spreadLevel` - (Optional) Determines how placement groups spread instances. Can only be used
   when the `strategy` is set to `spread`. Can be `host` or `rack`. `host` can only be used for Outpost placement groups. Defaults to `rack`.
* `strategy` - (Required) The placement strategy. Can be `cluster`, `partition` or `spread`.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of the placement group.
* `id` - The name of the placement group.
* `placementGroupId` - The ID of the placement group.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import placement groups using the `name`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { PlacementGroup } from "./.gen/providers/aws/placement-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    PlacementGroup.generateConfigForImport(
      this,
      "prodPg",
      "production-placement-group"
    );
  }
}

```

Using `terraform import`, import placement groups using the `name`. For example:

```console
% terraform import aws_placement_group.prod_pg production-placement-group
```

<!-- cache-key: cdktf-0.20.8 input-2db42e50344643d73d88a7291c495c78556f7f0f63349d8e602e23a0b1bdb180 -->