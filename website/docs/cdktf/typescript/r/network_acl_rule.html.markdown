---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_network_acl_rule"
description: |-
  Provides an network ACL Rule resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_network_acl_rule

Creates an entry (a rule) in a network ACL with the specified rule number.

~> **NOTE on Network ACLs and Network ACL Rules:** Terraform currently
provides both a standalone Network ACL Rule resource and a [Network ACL](network_acl.html) resource with rules
defined in-line. At this time you cannot use a Network ACL with in-line rules
in conjunction with any Network ACL Rule resources. Doing so will cause
a conflict of rule settings and will overwrite rules.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NetworkAcl } from "./.gen/providers/aws/network-acl";
import { NetworkAclRule } from "./.gen/providers/aws/network-acl-rule";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const bar = new NetworkAcl(this, "bar", {
      vpcId: foo.id,
    });
    const awsNetworkAclRuleBar = new NetworkAclRule(this, "bar_1", {
      cidrBlock: foo.cidrBlock,
      egress: false,
      fromPort: 22,
      networkAclId: bar.id,
      protocol: "tcp",
      ruleAction: "allow",
      ruleNumber: 200,
      toPort: 22,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNetworkAclRuleBar.overrideLogicalId("bar");
  }
}

```

~> **Note:** One of either `cidrBlock` or `ipv6CidrBlock` is required.

## Argument Reference

This resource supports the following arguments:

* `networkAclId` - (Required) The ID of the network ACL.
* `ruleNumber` - (Required) The rule number for the entry (for example, 100). ACL entries are processed in ascending order by rule number.
* `egress` - (Optional, bool) Indicates whether this is an egress rule (rule is applied to traffic leaving the subnet). Default `false`.
* `protocol` - (Required) The protocol. A value of -1 means all protocols.
* `ruleAction` - (Required) Indicates whether to allow or deny the traffic that matches the rule. Accepted values: `allow` | `deny`
* `cidrBlock` - (Optional) The network range to allow or deny, in CIDR notation (for example 172.16.0.0/24 ).
* `ipv6CidrBlock` - (Optional) The IPv6 CIDR block to allow or deny.
* `fromPort` - (Optional) The from port to match.
* `toPort` - (Optional) The to port to match.
* `icmpType` - (Optional) ICMP protocol: The ICMP type. Required if specifying ICMP for the protocolE.g., -1
* `icmpCode` - (Optional) ICMP protocol: The ICMP code. Required if specifying ICMP for the protocolE.g., -1

~> **NOTE:** If the value of `protocol` is `-1` or `all`, the `fromPort` and `toPort` values will be ignored and the rule will apply to all ports.

~> **NOTE:** If the value of `icmpType` is `-1` (which results in a wildcard ICMP type), the `icmpCode` must also be set to `-1` (wildcard ICMP code).

~> Note: For more information on ICMP types and codes, see here: https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the network ACL Rule

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import individual rules using `NETWORK_ACL_ID:RULE_NUMBER:PROTOCOL:EGRESS`, where `PROTOCOL` can be a decimal (such as "6") or string (such as "tcp") value. For example:

**NOTE:** If importing a rule previously provisioned by Terraform, the `PROTOCOL` must be the input value used at creation time. For more information on protocol numbers and keywords, see here: https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml.

Using the procotol's string value:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NetworkAclRule } from "./.gen/providers/aws/network-acl-rule";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    NetworkAclRule.generateConfigForImport(
      this,
      "myRule",
      "acl-7aaabd18:100:tcp:false"
    );
  }
}

```

Using the procotol's decimal value:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NetworkAclRule } from "./.gen/providers/aws/network-acl-rule";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    NetworkAclRule.generateConfigForImport(
      this,
      "myRule",
      "acl-7aaabd18:100:6:false"
    );
  }
}

```

**Using `terraform import` to import** individual rules using `NETWORK_ACL_ID:RULE_NUMBER:PROTOCOL:EGRESS`, where `PROTOCOL` can be a decimal (such as "6") or string (such as "tcp") value. For example:

Using the procotol's string value:

```console
% terraform import aws_network_acl_rule.my_rule acl-7aaabd18:100:tcp:false
```

Using the procotol's decimal value:

```console
% terraform import aws_network_acl_rule.my_rule acl-7aaabd18:100:6:false
```

<!-- cache-key: cdktf-0.20.8 input-0bee1d657a21ade598a9d4b01c7ed38ce1ada8aeab9c5dd0de56c1ba6dff131d -->