---
subcategory: "Lex V2 Models"
layout: "aws"
page_title: "AWS: aws_lexv2models_slot_type"
description: |-
  Terraform resource for managing an AWS Lex V2 Models Slot Type.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_lexv2models_slot_type

Terraform resource for managing an AWS Lex V2 Models Slot Type.

## Example Usage

### Basic Usage

```terraform
resource "aws_lexv2models_bot" "example" {
  name                        = "example"
  idle_session_ttl_in_seconds = 60
  role_arn                    = aws_iam_role.example.arn

  data_privacy {
    child_directed = true
  }
}

resource "aws_lexv2models_bot_locale" "example" {
  locale_id                        = "en_US"
  bot_id                           = aws_lexv2models_bot.example.id
  bot_version                      = "DRAFT"
  n_lu_intent_confidence_threshold = 0.7
}

resource "aws_lexv2models_bot_version" "example" {
  bot_id = aws_lexv2models_bot.example.id
  locale_specification = {
    (aws_lexv2models_bot_locale.example.locale_id) = {
      source_bot_version = "DRAFT"
    }
  }
}

resource "aws_lexv2models_slot_type" "example" {
  bot_id      = aws_lexv2models_bot.example.id
  bot_version = aws_lexv2models_bot_locale.example.bot_version
  name        = "example"
  locale_id   = aws_lexv2models_bot_locale.example.locale_id
}
```

### value_selection_setting Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Lexv2ModelsSlotType } from "./.gen/providers/aws/lexv2-models-slot-type";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new Lexv2ModelsSlotType(this, "example", {
      botId: Token.asString(awsLexv2ModelsBotExample.id),
      botVersion: Token.asString(awsLexv2ModelsBotLocaleExample.botVersion),
      localeId: Token.asString(awsLexv2ModelsBotLocaleExample.localeId),
      name: "example",
      slotTypeValues: [
        {
          sampleValue: [
            {
              value: "exampleValue",
            },
          ],
        },
      ],
      valueSelectionSetting: [
        {
          advancedRecognitionSetting: [
            {
              audioRecognitionStrategy: "UseSlotValuesAsCustomVocabulary",
            },
          ],
          resolutionStrategy: "OriginalValue",
        },
      ],
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `botId` - (Required) Identifier of the bot associated with this slot type.
* `botVersion` - (Required) Version of the bot associated with this slot type.
* `localeId` - (Required) Identifier of the language and locale where this slot type is used.
All of the bots, slot types, and slots used by the intent must have the same locale.
* `name` - (Required) Name of the slot type.

The following arguments are optional:

* `description` - (Optional) Description of the slot type.
* `compositeSlotTypeSetting` - (Optional) Specifications for a composite slot type.
See [`compositeSlotTypeSetting` argument reference](#composite_slot_type_setting-argument-reference) below.
* `externalSourceSetting` - (Optional) Type of external information used to create the slot type.
See [`externalSourceSetting` argument reference](#external_source_setting-argument-reference) below.
* `parentSlotTypeSignature` - (Optional) Built-in slot type used as a parent of this slot type.
When you define a parent slot type, the new slot type has the configuration of the parent slot type.
Only `AMAZON.AlphaNumeric` is supported.
* `slotTypeValues` - (Optional) List of SlotTypeValue objects that defines the values that the slot type can take.
Each value can have a list of synonyms, additional values that help train the machine learning model about the values that it resolves for a slot.
See [`slotTypeValues` argument reference](#slot_type_values-argument-reference) below.
* `valueSelectionSetting` - (Optional) Determines the strategy that Amazon Lex uses to select a value from the list of possible values.
See [`valueSelectionSetting` argument reference](#value_selection_setting-argument-reference) below.

### `compositeSlotTypeSetting` Argument Reference

* `subSlots` - (Optional) Sub slots in the composite slot.
See [`subSlots` argument reference](#sub_slots-argument-reference) below.

#### `subSlots` Argument Reference

* `name` - (Required) Name of a constituent sub slot inside a composite slot.
* `slotTypeId` - (Required) Unique identifier assigned to a slot type.
This refers to either a built-in slot type or the unique `slotTypeId` of a custom slot type.

### `externalSourceSetting` Argument Reference

*`grammarSlotTypeSetting` - (Optional) Settings required for a slot type based on a grammar that you provide.
See [`grammarSlotTypeSetting` argument reference](#grammar_slot_type_setting-argument-reference) below.

#### `grammarSlotTypeSetting` Argument Reference

* `source` - (Optional) Source of the grammar used to create the slot type.
See [`source` argument reference](#source-argument-reference) below.

##### `source` Argument Reference

* `s3BucketName` - (Required) Name of the Amazon S3 bucket that contains the grammar source.
* `s3ObjectKey` - (Required) Path to the grammar in the Amazon S3 bucket.
* `kmsKeyArn` - (Optional) KMS key required to decrypt the contents of the grammar, if any.

### `slotTypeValues` Argument Reference

* `sampleValue` - (Optional) Value of the slot type entry.
See [`sampleValue` argument reference](#sample_value-argument-reference) below.
* `synonyms` - (Optional) A list of additional values related to the slot type entry.
See [`synonyms` argument reference](#synonyms-argument-reference) below.

#### `sampleValue` Argument Reference

* `value` - (Required) Value that can be used for a slot type.

#### `synonyms` Argument Reference

* `value` - (Required) Value that can be used for a slot type.

### `valueSelectionSetting` Argument Reference

* `resolutionStrategy` - (Required) Determines the slot resolution strategy that Amazon Lex uses to return slot type values.
Valid values are `OriginalValue`, `TopResolution`, and `Concatenation`.
* `advancedRecognitionSetting` - (Optional) Provides settings that enable advanced recognition settings for slot values.
You can use this to enable using slot values as a custom vocabulary for recognizing user utterances.
See [`advancedRecognitionSetting` argument reference](#advanced_recognition_setting-argument-reference) below.
* `regexFilter` - (Optional) Used to validate the value of the slot.
See [`regexFilter` argument reference](#regexfilter-argument-reference) below.

#### `advancedRecognitionSetting` Argument Reference

* `audioRecognitionStrategy` - (Optional) Enables using the slot values as a custom vocabulary for recognizing user utterances.
Valid value is `UseSlotValuesAsCustomVocabulary`.

#### `regexFilter` Argument Reference

* `pattern` - (Required) A regular expression used to validate the value of a slot.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Comma-delimited string concatenating `botId`, `botVersion`, `localeId`, and `slotTypeId`.
* `slotTypeId` - Unique identifier for the slot type.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `update` - (Default `30m`)
* `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Lex V2 Models Slot Type using a comma-delimited string concatenating `botId`, `botVersion`, `localeId`, and `slotTypeId`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Lexv2ModelsSlotType } from "./.gen/providers/aws/lexv2-models-slot-type";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    Lexv2ModelsSlotType.generateConfigForImport(
      this,
      "example",
      "bot-1234,DRAFT,en_US,slot_type-id-12345678"
    );
  }
}

```

Using `terraform import`, import Lex V2 Models Slot Type using using a comma-delimited string concatenating `botId`, `botVersion`, `localeId`, and `slotTypeId`. For example:

```console
% terraform import aws_lexv2models_slot_type.example bot-1234,DRAFT,en_US,slot_type-id-12345678
```

<!-- cache-key: cdktf-0.20.8 input-df48b27c4e4585ae06dabeb5903193a3b43e575a64b68abb0d9175ccbbc92f0a -->