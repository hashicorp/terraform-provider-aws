---
subcategory: "Lambda"
layout: "aws"
page_title: "AWS: aws_lambda_function_recursion_config"
description: |-
  Manages an AWS Lambda Function Recursion Config.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_lambda_function_recursion_config

Manages an AWS Lambda Function Recursion Config. Use this resource to control how Lambda handles recursive function invocations to prevent infinite loops.

~> **Note:** Destruction of this resource will return the `recursiveLoop` configuration back to the default value of `Terminate`.

## Example Usage

### Allow Recursive Invocations

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunction } from "./.gen/providers/aws/lambda-function";
import { LambdaFunctionRecursionConfig } from "./.gen/providers/aws/lambda-function-recursion-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new LambdaFunction(this, "example", {
      filename: "function.zip",
      functionName: "recursive_processor",
      handler: "index.handler",
      role: lambdaRole.arn,
      runtime: "python3.12",
    });
    const awsLambdaFunctionRecursionConfigExample =
      new LambdaFunctionRecursionConfig(this, "example_1", {
        functionName: example.functionName,
        recursiveLoop: "Allow",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsLambdaFunctionRecursionConfigExample.overrideLogicalId("example");
  }
}

```

### Production Safety Configuration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunction } from "./.gen/providers/aws/lambda-function";
import { LambdaFunctionRecursionConfig } from "./.gen/providers/aws/lambda-function-recursion-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const productionProcessor = new LambdaFunction(
      this,
      "production_processor",
      {
        filename: "processor.zip",
        functionName: "production-data-processor",
        handler: "app.handler",
        role: lambdaRole.arn,
        runtime: "nodejs20.x",
        tags: {
          Environment: "production",
          Purpose: "data-processing",
        },
      }
    );
    new LambdaFunctionRecursionConfig(this, "example", {
      functionName: productionProcessor.functionName,
      recursiveLoop: "Terminate",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `functionName` - (Required) Name of the Lambda function.
* `recursiveLoop` - (Required) Lambda function recursion configuration. Valid values are `Allow` or `Terminate`.

The following arguments are optional:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Lambda Function Recursion Config using the `functionName`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionRecursionConfig } from "./.gen/providers/aws/lambda-function-recursion-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    LambdaFunctionRecursionConfig.generateConfigForImport(
      this,
      "example",
      "recursive_processor"
    );
  }
}

```

For backwards compatibility, the following legacy `terraform import` command is also supported:

```console
% terraform import aws_lambda_function_recursion_config.example recursive_processor
```

<!-- cache-key: cdktf-0.20.8 input-c055a547372b89f7e6feee755b0c6b76e092246a022ff8ad4772c73c86040cf3 -->