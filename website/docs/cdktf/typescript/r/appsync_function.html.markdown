---
subcategory: "AppSync"
layout: "aws"
page_title: "AWS: aws_appsync_function"
description: |-
  Provides an AppSync Function.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_appsync_function

Provides an AppSync Function.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppsyncDatasource } from "./.gen/providers/aws/appsync-datasource";
import { AppsyncFunction } from "./.gen/providers/aws/appsync-function";
import { AppsyncGraphqlApi } from "./.gen/providers/aws/appsync-graphql-api";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new AppsyncGraphqlApi(this, "example", {
      authenticationType: "API_KEY",
      name: "example",
      schema:
        "type Mutation {\n  putPost(id: ID!, title: String!): Post\n}\n\ntype Post {\n  id: ID!\n  title: String!\n}\n\ntype Query {\n  singlePost(id: ID!): Post\n}\n\nschema {\n  query: Query\n  mutation: Mutation\n}\n\n",
    });
    const awsAppsyncDatasourceExample = new AppsyncDatasource(
      this,
      "example_1",
      {
        apiId: example.id,
        httpConfig: {
          endpoint: "http://example.com",
        },
        name: "example",
        type: "HTTP",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAppsyncDatasourceExample.overrideLogicalId("example");
    const awsAppsyncFunctionExample = new AppsyncFunction(this, "example_2", {
      apiId: example.id,
      dataSource: Token.asString(awsAppsyncDatasourceExample.name),
      name: "example",
      requestMappingTemplate:
        '{\n    "version": "2018-05-29",\n    "method": "GET",\n    "resourcePath": "/",\n    "params":{\n        "headers": $utils.http.copyheaders($ctx.request.headers)\n    }\n}\n\n',
      responseMappingTemplate:
        "#if($ctx.result.statusCode == 200)\n    $ctx.result.body\n#else\n    $utils.appendError($ctx.result.body, $ctx.result.statusCode)\n#end\n\n",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAppsyncFunctionExample.overrideLogicalId("example");
  }
}

```

## Example Usage With Code

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppsyncFunction } from "./.gen/providers/aws/appsync-function";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AppsyncFunction(this, "example", {
      apiId: Token.asString(awsAppsyncGraphqlApiExample.id),
      code: Token.asString(Fn.file("some-code-dir")),
      dataSource: Token.asString(awsAppsyncDatasourceExample.name),
      name: "example",
      runtime: {
        name: "APPSYNC_JS",
        runtimeVersion: "1.0.0",
      },
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `apiId` - (Required) ID of the associated AppSync API.
* `code` - (Optional) The function code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
* `dataSource` - (Required) Function data source name.
* `maxBatchSize` - (Optional) Maximum batching size for a resolver. Valid values are between `0` and `2000`.
* `name` - (Required) Function name. The function name does not have to be unique.
* `requestMappingTemplate` - (Optional) Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
* `responseMappingTemplate` - (Optional) Function response mapping template.
* `description` - (Optional) Function description.
* `runtime` - (Optional) Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified. See [`runtime` Block](#runtime-block) for details.
* `syncConfig` - (Optional) Describes a Sync configuration for a resolver. See [`syncConfig` Block](#sync_config-block) for details.
* `functionVersion` - (Optional) Version of the request mapping template. Currently the supported value is `2018-05-29`. Does not apply when specifying `code`.

### `runtime` Block

The `runtime` configuration block supports the following arguments:

* `name` - (Optional) The name of the runtime to use. Currently, the only allowed value is `APPSYNC_JS`.
* `runtimeVersion` - (Optional) The version of the runtime to use. Currently, the only allowed version is `1.0.0`.

### `syncConfig` Block

The `syncConfig` configuration block supports the following arguments:

* `conflictDetection` - (Optional) Conflict Detection strategy to use. Valid values are `NONE` and `VERSION`.
* `conflictHandler` - (Optional) Conflict Resolution strategy to perform in the event of a conflict. Valid values are `NONE`, `OPTIMISTIC_CONCURRENCY`, `AUTOMERGE`, and `LAMBDA`.
* `lambdaConflictHandlerConfig` - (Optional) Lambda Conflict Handler Config when configuring `LAMBDA` as the Conflict Handler. See [`lambdaConflictHandlerConfig` Block](#lambda_conflict_handler_config-block) for details.

#### `lambdaConflictHandlerConfig` Block

The `lambdaConflictHandlerConfig` configuration block supports the following arguments:

* `lambdaConflictHandlerArn` - (Optional) ARN for the Lambda function to use as the Conflict Handler.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - API Function ID (Formatted as ApiId-FunctionId)
* `arn` - ARN of the Function object.
* `functionId` - Unique ID representing the Function object.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_appsync_function` using the AppSync API ID and Function ID separated by `-`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppsyncFunction } from "./.gen/providers/aws/appsync-function";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    AppsyncFunction.generateConfigForImport(this, "example", "xxxxx-yyyyy");
  }
}

```

Using `terraform import`, import `aws_appsync_function` using the AppSync API ID and Function ID separated by `-`. For example:

```console
% terraform import aws_appsync_function.example xxxxx-yyyyy
```

<!-- cache-key: cdktf-0.20.1 input-8a300575c15598cb9fb3033c9f121af555947649d923354ecc0b51630bf72444 -->