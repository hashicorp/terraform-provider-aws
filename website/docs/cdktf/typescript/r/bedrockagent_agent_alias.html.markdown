---
subcategory: "Bedrock Agents"
layout: "aws"
page_title: "AWS: aws_bedrockagent_agent_alias"
description: |-
  Terraform resource for managing an AWS Agents for Amazon Bedrock Agent Alias.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_bedrockagent_agent_alias

Terraform resource for managing an AWS Agents for Amazon Bedrock Agent Alias.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BedrockagentAgent } from "./.gen/providers/aws/bedrockagent-agent";
import { BedrockagentAgentAlias } from "./.gen/providers/aws/bedrockagent-agent-alias";
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { DataAwsPartition } from "./.gen/providers/aws/data-aws-partition";
import { DataAwsRegion } from "./.gen/providers/aws/data-aws-region";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicy } from "./.gen/providers/aws/iam-role-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const current = new DataAwsCallerIdentity(this, "current", {});
    const dataAwsPartitionCurrent = new DataAwsPartition(this, "current_1", {});
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsPartitionCurrent.overrideLogicalId("current");
    const dataAwsRegionCurrent = new DataAwsRegion(this, "current_2", {});
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsRegionCurrent.overrideLogicalId("current");
    const exampleAgentPermissions = new DataAwsIamPolicyDocument(
      this,
      "example_agent_permissions",
      {
        statement: [
          {
            actions: ["bedrock:InvokeModel"],
            resources: [
              "arn:${" +
                dataAwsPartitionCurrent.partition +
                "}:bedrock:${" +
                dataAwsRegionCurrent.name +
                "}::foundation-model/anthropic.claude-v2",
            ],
          },
        ],
      }
    );
    const exampleAgentTrust = new DataAwsIamPolicyDocument(
      this,
      "example_agent_trust",
      {
        statement: [
          {
            actions: ["sts:AssumeRole"],
            condition: [
              {
                test: "StringEquals",
                values: [Token.asString(current.accountId)],
                variable: "aws:SourceAccount",
              },
              {
                test: "ArnLike",
                values: [
                  "arn:${" +
                    dataAwsPartitionCurrent.partition +
                    "}:bedrock:${" +
                    dataAwsRegionCurrent.name +
                    "}:${" +
                    current.accountId +
                    "}:agent/*",
                ],
                variable: "AWS:SourceArn",
              },
            ],
            principals: [
              {
                identifiers: ["bedrock.amazonaws.com"],
                type: "Service",
              },
            ],
          },
        ],
      }
    );
    const example = new IamRole(this, "example", {
      assumeRolePolicy: Token.asString(exampleAgentTrust.json),
      namePrefix: "AmazonBedrockExecutionRoleForAgents_",
    });
    const awsIamRolePolicyExample = new IamRolePolicy(this, "example_6", {
      policy: Token.asString(exampleAgentPermissions.json),
      role: example.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyExample.overrideLogicalId("example");
    const awsBedrockagentAgentExample = new BedrockagentAgent(
      this,
      "example_7",
      {
        agentName: "my-agent-name",
        agentResourceRoleArn: example.arn,
        foundationModel: "anthropic.claude-v2",
        idle_ttl: 500,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsBedrockagentAgentExample.overrideLogicalId("example");
    const awsBedrockagentAgentAliasExample = new BedrockagentAgentAlias(
      this,
      "example_8",
      {
        agentAliasName: "my-agent-alias",
        agentId: Token.asString(awsBedrockagentAgentExample.agentId),
        description: "Test Alias",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsBedrockagentAgentAliasExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `agentAliasName` - (Required) Name of the alias.
* `agentId` - (Required, Forces new resource) Identifier of the agent to create an alias for.

The following arguments are optional:

* `description` - (Optional) Description of the alias.
* `routingConfiguration` - (Optional) Details about the routing configuration of the alias. See [`routingConfiguration` Block](#routing_configuration-block) for details.
* `tags` - (Optional) Map of tags assigned to the resource. If configured with a provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### `routingConfiguration` Block

The `routingConfiguration` configuration block supports the following arguments:

* `agentVersion` - (Optional) Version of the agent with which the alias is associated.
* `provisionedThroughput` - (Optional) ARN of the Provisioned Throughput assigned to the agent alias.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `agentAliasArn` - ARN of the alias.
* `agentAliasId` - Unique identifier of the alias.
* `id` - Alias ID and agent ID separated by `,`.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `5m`)
* `update` - (Default `5m`)
* `delete` - (Default `5m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Agents for Amazon Bedrock Agent Alias using the alias ID and the agent ID separated by `,`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BedrockagentAgentAlias } from "./.gen/providers/aws/bedrockagent-agent-alias";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    BedrockagentAgentAlias.generateConfigForImport(
      this,
      "example",
      "66IVY0GUTF,GGRRAED6JP"
    );
  }
}

```

Using `terraform import`, import Agents for Amazon Bedrock Agent Alias using the alias ID and the agent ID separated by `,`. For example:

```console
% terraform import aws_bedrockagent_agent_alias.example 66IVY0GUTF,GGRRAED6JP
```

<!-- cache-key: cdktf-0.20.1 input-ec9002dbf394ea30a92ebfbe0cd46c10a1224be5c43880fe491b2e709a8ed68e -->