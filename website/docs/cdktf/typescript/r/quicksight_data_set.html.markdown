---
subcategory: "QuickSight"
layout: "aws"
page_title: "AWS: aws_quicksight_data_set"
description: |-
  Manages a Resource QuickSight Data Set.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_quicksight_data_set

Resource for managing a QuickSight Data Set.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { QuicksightDataSet } from "./.gen/providers/aws/quicksight-data-set";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new QuicksightDataSet(this, "example", {
      dataSetId: "example-id",
      importMode: "SPICE",
      name: "example-name",
      physicalTableMap: [
        {
          physicalTableMapId: "example-id",
          s3Source: {
            dataSourceArn: Token.asString(awsQuicksightDataSourceExample.arn),
            inputColumns: [
              {
                name: "Column1",
                type: "STRING",
              },
            ],
            uploadSettings: {
              format: "JSON",
            },
          },
        },
      ],
    });
  }
}

```

### With Column Level Permission Rules

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { QuicksightDataSet } from "./.gen/providers/aws/quicksight-data-set";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new QuicksightDataSet(this, "example", {
      columnLevelPermissionRules: [
        {
          columnNames: ["Column1"],
          principals: [Token.asString(awsQuicksightUserExample.arn)],
        },
      ],
      dataSetId: "example-id",
      importMode: "SPICE",
      name: "example-name",
      physicalTableMap: [
        {
          physicalTableMapId: "example-id",
          s3Source: {
            dataSourceArn: Token.asString(awsQuicksightDataSourceExample.arn),
            inputColumns: [
              {
                name: "Column1",
                type: "STRING",
              },
            ],
            uploadSettings: {
              format: "JSON",
            },
          },
        },
      ],
    });
  }
}

```

### With Field Folders

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { QuicksightDataSet } from "./.gen/providers/aws/quicksight-data-set";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new QuicksightDataSet(this, "example", {
      dataSetId: "example-id",
      fieldFolders: [
        {
          columns: ["Column1"],
          description: "example description",
          fieldFoldersId: "example-id",
        },
      ],
      importMode: "SPICE",
      name: "example-name",
      physicalTableMap: [
        {
          physicalTableMapId: "example-id",
          s3Source: {
            dataSourceArn: Token.asString(awsQuicksightDataSourceExample.arn),
            inputColumns: [
              {
                name: "Column1",
                type: "STRING",
              },
            ],
            uploadSettings: {
              format: "JSON",
            },
          },
        },
      ],
    });
  }
}

```

### With Permissions

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { QuicksightDataSet } from "./.gen/providers/aws/quicksight-data-set";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new QuicksightDataSet(this, "example", {
      dataSetId: "example-id",
      importMode: "SPICE",
      name: "example-name",
      permissions: [
        {
          actions: [
            "quicksight:DescribeDataSet",
            "quicksight:DescribeDataSetPermissions",
            "quicksight:PassDataSet",
            "quicksight:DescribeIngestion",
            "quicksight:ListIngestions",
          ],
          principal: Token.asString(awsQuicksightUserExample.arn),
        },
      ],
      physicalTableMap: [
        {
          physicalTableMapId: "example-id",
          s3Source: {
            dataSourceArn: Token.asString(awsQuicksightDataSourceExample.arn),
            inputColumns: [
              {
                name: "Column1",
                type: "STRING",
              },
            ],
            uploadSettings: {
              format: "JSON",
            },
          },
        },
      ],
    });
  }
}

```

### With Row Level Permission Tag Configuration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { QuicksightDataSet } from "./.gen/providers/aws/quicksight-data-set";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new QuicksightDataSet(this, "example", {
      dataSetId: "example-id",
      importMode: "SPICE",
      name: "example-name",
      physicalTableMap: [
        {
          physicalTableMapId: "example-id",
          s3Source: {
            dataSourceArn: Token.asString(awsQuicksightDataSourceExample.arn),
            inputColumns: [
              {
                name: "Column1",
                type: "STRING",
              },
            ],
            uploadSettings: {
              format: "JSON",
            },
          },
        },
      ],
      rowLevelPermissionTagConfiguration: {
        status: "ENABLED",
        tagRules: [
          {
            columnName: "Column1",
            matchAllValue: "*",
            tagKey: "tagkey",
            tagMultiValueDelimiter: ",",
          },
        ],
      },
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `dataSetId` - (Required, Forces new resource) Identifier for the data set.
* `importMode` - (Required) Indicates whether you want to import the data into SPICE. Valid values are `SPICE` and `DIRECT_QUERY`.
* `name` - (Required) Display name for the dataset.
* `physicalTableMap` - (Optional) Declares the physical tables that are available in the underlying data sources. See [physical_table_map](#physical_table_map).

The following arguments are optional:

* `awsAccountId` - (Optional, Forces new resource) AWS account ID.
* `columnGroups` - (Optional) Groupings of columns that work together in certain Amazon QuickSight features. Currently, only geospatial hierarchy is supported. See [column_groups](#column_groups).
* `columnLevelPermissionRules` - (Optional) A set of 1 or more definitions of a [ColumnLevelPermissionRule](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ColumnLevelPermissionRule.html). See [column_level_permission_rules](#column_level_permission_rules).
* `dataSetUsageConfiguration` - (Optional) The usage configuration to apply to child datasets that reference this dataset as a source. See [data_set_usage_configuration](#data_set_usage_configuration).
* `fieldFolders` - (Optional) The folder that contains fields and nested subfolders for your dataset. See [field_folders](#field_folders).
* `logicalTableMap` - (Optional) Configures the combination and transformation of the data from the physical tables. Maximum of 1 entry. See [logical_table_map](#logical_table_map).
* `permissions` - (Optional) A set of resource permissions on the data source. Maximum of 64 items. See [permissions](#permissions).
* `rowLevelPermissionDataSet` - (Optional) The row-level security configuration for the data that you want to create. See [row_level_permission_data_set](#row_level_permission_data_set).
* `rowLevelPermissionTagConfiguration` - (Optional) The configuration of tags on a dataset to set row-level security. Row-level security tags are currently supported for anonymous embedding only. See [row_level_permission_tag_configuration](#row_level_permission_tag_configuration).
* `refreshProperties` - (Optional) The refresh properties for the data set. **NOTE**: Only valid when `importMode` is set to `SPICE`. See [refresh_properties](#refresh_properties).
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### physical_table_map

For a `physicalTableMap` item to be valid, only one of `customSql`, `relationalTable`, or `s3Source` should be configured.

* `physicalTableMapId` - (Required) Key of the physical table map.
* `customSql` - (Optional) A physical table type built from the results of the custom SQL query. See [custom_sql](#custom_sql).
* `relationalTable` - (Optional) A physical table type for relational data sources. See [relational_table](#relational_table).
* `s3Source` - (Optional) A physical table type for as S3 data source. See [s3_source](#s3_source).

### custom_sql

* `dataSourceArn` - (Required) ARN of the data source.
* `name` - (Required) Display name for the SQL query result.
* `sqlQuery` - (Required) SQL query.
* `columns` - (Optional) Column schema from the SQL query result set. See [columns](#columns).

### columns

* `name` - (Required) Name of this column in the underlying data source.
* `type` - (Required) Data type of the column.

### relational_table

* `dataSourceArn` - (Required) ARN of the data source.
* `inputColumns` - (Required) Column schema of the table. See [input_columns](#input_columns).
* `name` - (Required) Name of the relational table.
* `catalog` - (Optional) Catalog associated with the table.
* `schema` - (Optional) Schema name. This name applies to certain relational database engines.

### input_columns

* `name` - (Required) Name of this column in the underlying data source.
* `type` - (Required) Data type of the column.

### s3_source

* `dataSourceArn` - (Required) ARN of the data source.
* `inputColumns` - (Required) Column schema of the table. See [input_columns](#input_columns).
* `uploadSettings` - (Required) Information about the format for the S3 source file or files. See [upload_settings](#upload_settings).

### upload_settings

* `containsHeader` - (Optional) Whether the file has a header row, or the files each have a header row.
* `delimiter` - (Optional) Delimiter between values in the file.
* `format` - (Optional) File format. Valid values are `CSV`, `TSV`, `CLF`, `ELF`, `XLSX`, and `JSON`.
* `startFromRow` - (Optional) A row number to start reading data from.
* `textQualifier` - (Optional) Text qualifier. Valid values are `DOUBLE_QUOTE` and `SINGLE_QUOTE`.

### column_groups

* `geoSpatialColumnGroup` - (Optional) Geospatial column group that denotes a hierarchy. See [geo_spatial_column_group](#geo_spatial_column_group).

### geo_spatial_column_group

* `columns` - (Required) Columns in this hierarchy.
* `countryCode` - (Required) Country code. Valid values are `US`.
* `name` - (Required) A display name for the hierarchy.

### column_level_permission_rules

* `columnNames` - (Optional) An array of column names.
* `principals` - (Optional) An array of ARNs for Amazon QuickSight users or groups.

### data_set_usage_configuration

* `disableUseAsDirectQuerySource` - (Optional) Controls whether a child dataset of a direct query can use this dataset as a source.
* `disableUseAsImportedSource` - (Optional) Controls whether a child dataset that's stored in QuickSight can use this dataset as a source.

### field_folders

* `fieldFoldersId` - (Required) Key of the field folder map.
* `columns` - (Optional) An array of column names to add to the folder. A column can only be in one folder.
* `description` - (Optional) Field folder description.

### logical_table_map

* `alias` - (Required) A display name for the logical table.
* `logicalTableMapId` - (Required) Key of the logical table map.
* `dataTransforms` - (Optional) Transform operations that act on this logical table. For this structure to be valid, only one of the attributes can be non-null. See [data_transforms](#data_transforms).
* `source` - (Optional) Source of this logical table. See [source](#source).

### data_transforms

* `castColumnTypeOperation` - (Optional) A transform operation that casts a column to a different type. See [cast_column_type_operation](#cast_column_type_operation).
* `createColumnsOperation` - (Optional) An operation that creates calculated columns. Columns created in one such operation form a lexical closure. See [create_columns_operation](#create_columns_operation).
* `filterOperation` - (Optional) An operation that filters rows based on some condition. See [filter_operation](#filter_operation).
* `projectOperation` - (Optional) An operation that projects columns. Operations that come after a projection can only refer to projected columns. See [project_operation](#project_operation).
* `renameColumnOperation` - (Optional) An operation that renames a column. See [rename_column_operation](#rename_column_operation).
* `tagColumnOperation` - (Optional) An operation that tags a column with additional information. See [tag_column_operation](#tag_column_operation).
* `untagColumnOperation` - (Optional) A transform operation that removes tags associated with a column. See [untag_column_operation](#untag_column_operation).

### cast_column_type_operation

* `columnName` - (Required) Column name.
* `newColumnType` - (Required) New column data type. Valid values are `STRING`, `INTEGER`, `DECIMAL`, `DATETIME`.
* `format` - (Optional) When casting a column from string to datetime type, you can supply a string in a format supported by Amazon QuickSight to denote the source data format.

### create_columns_operation

* `columns` - (Required) Calculated columns to create. See [columns](#columns-1).

### columns

* `columnId` - (Required) A unique ID to identify a calculated column. During a dataset update, if the column ID of a calculated column matches that of an existing calculated column, Amazon QuickSight preserves the existing calculated column.
* `columnName` - (Required) Column name.
* `expression` - (Required) An expression that defines the calculated column.

### filter_operation

* `conditionExpression` - (Required) An expression that must evaluate to a Boolean value. Rows for which the expression evaluates to true are kept in the dataset.

### project_operation

* `projectedColumns` - (Required) Projected columns.

### rename_column_operation

* `columnName` - (Required) Column to be renamed.
* `newColumnName` - (Required) New name for the column.

### tag_column_operation

* `columnName` - (Required) Column name.
* `tags` - (Required) The dataset column tag, currently only used for geospatial type tagging. See [tags](#tags).

### tags

* `columnDescription` - (Optional) A description for a column. See [column_description](#column_description).
* `columnGeographicRole` - (Optional) A geospatial role for a column. Valid values are `COUNTRY`, `STATE`, `COUNTY`, `CITY`, `POSTCODE`, `LONGITUDE`, and `LATITUDE`.

### column_description

* `text` - (Optional) The text of a description for a column.

### untag_column_operation

* `columnName` - (Required) Column name.
* `tagNames` - (Required) The column tags to remove from this column.

### source

* `dataSetArn` - (Optional) ARN of the parent data set.
* `joinInstruction` - (Optional) Specifies the result of a join of two logical tables. See [join_instruction](#join_instruction).
* `physicalTableId` - (Optional) Physical table ID.

### join_instruction

* `leftOperand` - (Required) Operand on the left side of a join.
* `onClause` - (Required) Join instructions provided in the ON clause of a join.
* `rightOperand` - (Required) Operand on the right side of a join.
* `type` - (Required) Type of join. Valid values are `INNER`, `OUTER`, `LEFT`, and `RIGHT`.
* `leftJoinKeyProperties` - (Optional) Join key properties of the left operand. See [left_join_key_properties](#left_join_key_properties).
* `rightJoinKeyProperties` - (Optional) Join key properties of the right operand. See [right_join_key_properties](#right_join_key_properties).

### left_join_key_properties

* `uniqueKey` - (Optional) A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.

### right_join_key_properties

* `uniqueKey` - (Optional) A value that indicates that a row in a table is uniquely identified by the columns in a join key. This is used by Amazon QuickSight to optimize query performance.

### permissions

* `actions` - (Required) List of IAM actions to grant or revoke permissions on.
* `principal` - (Required) ARN of the principal. See the [ResourcePermission documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_ResourcePermission.html) for the applicable ARN values.

### row_level_permission_data_set

* `arn` - (Required) ARN of the dataset that contains permissions for RLS.
* `permissionPolicy` - (Required) Type of permissions to use when interpreting the permissions for RLS. Valid values are `GRANT_ACCESS` and `DENY_ACCESS`.
* `formatVersion` - (Optional) User or group rules associated with the dataset that contains permissions for RLS.
* `namespace` - (Optional) Namespace associated with the dataset that contains permissions for RLS.
* `status` - (Optional) Status of the row-level security permission dataset. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.

### row_level_permission_tag_configuration

* `tagRules` - (Required) A set of rules associated with row-level security, such as the tag names and columns that they are assigned to. See [tag_rules](#tag_rules).
* `status` - (Optional) The status of row-level security tags. If enabled, the status is `ENABLED`. If disabled, the status is `DISABLED`.

### refresh_properties

* `refreshConfiguration` - (Required) The refresh configuration for the data set. See [refresh_configuration](#refresh_configuration).

### refresh_configuration

* `incrementalRefresh` - (Required) The incremental refresh for the data set. See [incremental_refresh](#incremental_refresh).

### incremental_refresh

* `lookbackWindow` - (Required) The lookback window setup for an incremental refresh configuration. See [lookback_window](#lookback_window).

### lookback_window

* `columnName` - (Required) The name of the lookback window column.
* `size` - (Required) The lookback window column size.
* `sizeUnit` - (Required) The size unit that is used for the lookback window column. Valid values for this structure are `HOUR`, `DAY`, and `WEEK`.

### tag_rules

* `columnName` - (Required) Column name that a tag key is assigned to.
* `tagKey` - (Required) Unique key for a tag.
* `matchAllValue` - (Optional) A string that you want to use to filter by all the values in a column in the dataset and don’t want to list the values one by one.
* `tagMultiValueDelimiter` - (Optional) A string that you want to use to delimit the values when you pass the values at run time.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of the data set.
* `id` - A comma-delimited string joining AWS account ID and data set ID.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import a QuickSight Data Set using the AWS account ID and data set ID separated by a comma (`,`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { QuicksightDataSet } from "./.gen/providers/aws/quicksight-data-set";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    QuicksightDataSet.generateConfigForImport(
      this,
      "example",
      "123456789012,example-id"
    );
  }
}

```

Using `terraform import`, import a QuickSight Data Set using the AWS account ID and data set ID separated by a comma (`,`). For example:

```console
% terraform import aws_quicksight_data_set.example 123456789012,example-id
```

<!-- cache-key: cdktf-0.20.1 input-ae2449dfd5efc39b58e023c817af1212bcd0cdfe28e4860659d5e073de156ebc -->