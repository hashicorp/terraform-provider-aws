---
subcategory: "EventBridge"
layout: "aws"
page_title: "AWS: aws_cloudwatch_event_bus"
description: |-
  Provides an EventBridge event bus resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cloudwatch_event_bus

Provides an EventBridge event bus resource.

~> **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.

## Example Usage

### Basic Usages

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchEventBus } from "./.gen/providers/aws/cloudwatch-event-bus";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new CloudwatchEventBus(this, "messenger", {
      name: "chat-messages",
    });
  }
}

```

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchEventBus } from "./.gen/providers/aws/cloudwatch-event-bus";
import { DataAwsCloudwatchEventSource } from "./.gen/providers/aws/data-aws-cloudwatch-event-source";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const examplepartner = new DataAwsCloudwatchEventSource(
      this,
      "examplepartner",
      {
        namePrefix: "aws.partner/examplepartner.com",
      }
    );
    const awsCloudwatchEventBusExamplepartner = new CloudwatchEventBus(
      this,
      "examplepartner_1",
      {
        description: "Event bus for example partner events",
        eventSourceName: Token.asString(examplepartner.name),
        name: Token.asString(examplepartner.name),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCloudwatchEventBusExamplepartner.overrideLogicalId("examplepartner");
  }
}

```

### Logging to CloudWatch Logs, S3, and Data Firehose

See [Configuring logs for Amazon EventBridge event buses](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-bus-logs.html) for more details.

#### Required Resources

* EventBridge Event Bus with `logConfig` configured
* Log destinations:

    * CloudWatch Logs log group
    * S3 bucket
    * Data Firehose delivery stream

* Resource-based policy or tagging for the service-linked role:

    * CloudWatch Logs log group - `aws_cloudwatch_log_resource_policy` to allow `delivery.logs.amazonaws.com` to put logs into the log group
    * S3 bucket - `aws_s3_bucket_policy` to allow `delivery.logs.amazonaws.com` to put logs into the bucket
    * Data Firehose delivery stream - tagging the delivery stream with `LogDeliveryEnabled = "true"` to allow the service-linked role `AWSServiceRoleForLogDelivery` to deliver logs

* CloudWatch Logs Delivery:

    * `aws_cloudwatch_log_delivery_source` for each log type (INFO, ERROR, TRACE)
    * `aws_cloudwatch_log_delivery_destination` for the log destination (S3 bucket, CloudWatch Logs log group, or Data Firehose delivery stream)
    * `aws_cloudwatch_log_delivery` to link each log typeâ€™s delivery source to the delivery destination

#### Example Usage

The following example demonstrates how to set up logging for an EventBridge event bus to all three destinations: CloudWatch Logs, S3, and Data Firehose.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchEventBus } from "./.gen/providers/aws/cloudwatch-event-bus";
import { CloudwatchLogDelivery } from "./.gen/providers/aws/cloudwatch-log-delivery";
import { CloudwatchLogDeliveryDestination } from "./.gen/providers/aws/cloudwatch-log-delivery-destination";
import { CloudwatchLogDeliverySource } from "./.gen/providers/aws/cloudwatch-log-delivery-source";
import { CloudwatchLogGroup } from "./.gen/providers/aws/cloudwatch-log-group";
import { CloudwatchLogResourcePolicy } from "./.gen/providers/aws/cloudwatch-log-resource-policy";
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { KinesisFirehoseDeliveryStream } from "./.gen/providers/aws/kinesis-firehose-delivery-stream";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketPolicy } from "./.gen/providers/aws/s3-bucket-policy";
interface MyConfig {
  destination: any;
  name: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    const example = new CloudwatchEventBus(this, "example", {
      logConfig: {
        includeDetail: "FULL",
        level: "TRACE",
      },
      name: "example-event-bus",
    });
    const errorLogs = new CloudwatchLogDeliverySource(this, "error_logs", {
      logType: "ERROR_LOGS",
      name: "EventBusSource-${" + example.name + "}-ERROR_LOGS",
      resourceArn: example.arn,
    });
    const infoLogs = new CloudwatchLogDeliverySource(this, "info_logs", {
      logType: "INFO_LOGS",
      name: "EventBusSource-${" + example.name + "}-INFO_LOGS",
      resourceArn: example.arn,
    });
    const traceLogs = new CloudwatchLogDeliverySource(this, "trace_logs", {
      logType: "TRACE_LOGS",
      name: "EventBusSource-${" + example.name + "}-TRACE_LOGS",
      resourceArn: example.arn,
    });
    const eventBusLogs = new CloudwatchLogGroup(this, "event_bus_logs", {
      name: "/aws/vendedlogs/events/event-bus/${" + example.name + "}",
    });
    const cloudfrontLogs = new KinesisFirehoseDeliveryStream(
      this,
      "cloudfront_logs",
      {
        tags: {
          LogDeliveryEnabled: "true",
        },
        destination: config.destination,
        name: config.name,
      }
    );
    const awsS3BucketExample = new S3Bucket(this, "example_6", {
      bucket: "example-event-bus-logs",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3BucketExample.overrideLogicalId("example");
    const current = new DataAwsCallerIdentity(this, "current", {});
    const bucket = new DataAwsIamPolicyDocument(this, "bucket", {
      statement: [
        {
          actions: ["s3:PutObject"],
          condition: [
            {
              test: "StringEquals",
              values: ["bucket-owner-full-control"],
              variable: "s3:x-amz-acl",
            },
            {
              test: "StringEquals",
              values: [Token.asString(current.accountId)],
              variable: "aws:SourceAccount",
            },
            {
              test: "ArnLike",
              values: [infoLogs.arn, errorLogs.arn, traceLogs.arn],
              variable: "aws:SourceArn",
            },
          ],
          effect: "Allow",
          principals: [
            {
              identifiers: ["delivery.logs.amazonaws.com"],
              type: "Service",
            },
          ],
          resources: [
            "${" +
              awsS3BucketExample.arn +
              "}/AWSLogs/${" +
              current.accountId +
              "}/EventBusLogs/*",
          ],
        },
      ],
    });
    const cwlogs = new DataAwsIamPolicyDocument(this, "cwlogs", {
      statement: [
        {
          actions: ["logs:CreateLogStream", "logs:PutLogEvents"],
          condition: [
            {
              test: "StringEquals",
              values: [Token.asString(current.accountId)],
              variable: "aws:SourceAccount",
            },
            {
              test: "ArnLike",
              values: [infoLogs.arn, errorLogs.arn, traceLogs.arn],
              variable: "aws:SourceArn",
            },
          ],
          effect: "Allow",
          principals: [
            {
              identifiers: ["delivery.logs.amazonaws.com"],
              type: "Service",
            },
          ],
          resources: ["${" + eventBusLogs.arn + "}:log-stream:*"],
        },
      ],
    });
    const awsCloudwatchLogDeliveryDestinationCwlogs =
      new CloudwatchLogDeliveryDestination(this, "cwlogs_10", {
        deliveryDestinationConfiguration: [
          {
            destinationResourceArn: eventBusLogs.arn,
          },
        ],
        name: "EventsDeliveryDestination-${" + example.name + "}-CWLogs",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCloudwatchLogDeliveryDestinationCwlogs.overrideLogicalId("cwlogs");
    const firehose = new CloudwatchLogDeliveryDestination(this, "firehose", {
      deliveryDestinationConfiguration: [
        {
          destinationResourceArn: cloudfrontLogs.arn,
        },
      ],
      name: "EventsDeliveryDestination-${" + example.name + "}-Firehose",
    });
    const s3 = new CloudwatchLogDeliveryDestination(this, "s3", {
      deliveryDestinationConfiguration: [
        {
          destinationResourceArn: Token.asString(awsS3BucketExample.arn),
        },
      ],
      name: "EventsDeliveryDestination-${" + example.name + "}-S3",
    });
    const awsCloudwatchLogResourcePolicyExample =
      new CloudwatchLogResourcePolicy(this, "example_13", {
        policyDocument: Token.asString(cwlogs.json),
        policyName: "AWSLogDeliveryWrite-${" + example.name + "}",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCloudwatchLogResourcePolicyExample.overrideLogicalId("example");
    const awsS3BucketPolicyExample = new S3BucketPolicy(this, "example_14", {
      bucket: Token.asString(awsS3BucketExample.bucket),
      policy: Token.asString(bucket.json),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3BucketPolicyExample.overrideLogicalId("example");
    const s3InfoLogs = new CloudwatchLogDelivery(this, "s3_info_logs", {
      deliveryDestinationArn: s3.arn,
      deliverySourceName: infoLogs.name,
    });
    const cwlogsInfoLogs = new CloudwatchLogDelivery(this, "cwlogs_info_logs", {
      deliveryDestinationArn: Token.asString(
        awsCloudwatchLogDeliveryDestinationCwlogs.arn
      ),
      deliverySourceName: infoLogs.name,
      dependsOn: [s3InfoLogs],
    });
    const firehoseInfoLogs = new CloudwatchLogDelivery(
      this,
      "firehose_info_logs",
      {
        deliveryDestinationArn: firehose.arn,
        deliverySourceName: infoLogs.name,
        dependsOn: [cwlogsInfoLogs],
      }
    );
    const s3ErrorLogs = new CloudwatchLogDelivery(this, "s3_error_logs", {
      deliveryDestinationArn: s3.arn,
      deliverySourceName: errorLogs.name,
      dependsOn: [s3InfoLogs],
    });
    const s3TraceLogs = new CloudwatchLogDelivery(this, "s3_trace_logs", {
      deliveryDestinationArn: s3.arn,
      deliverySourceName: traceLogs.name,
      dependsOn: [s3ErrorLogs],
    });
    const cwlogsErrorLogs = new CloudwatchLogDelivery(
      this,
      "cwlogs_error_logs",
      {
        deliveryDestinationArn: Token.asString(
          awsCloudwatchLogDeliveryDestinationCwlogs.arn
        ),
        deliverySourceName: errorLogs.name,
        dependsOn: [s3ErrorLogs, cwlogsInfoLogs],
      }
    );
    const cwlogsTraceLogs = new CloudwatchLogDelivery(
      this,
      "cwlogs_trace_logs",
      {
        deliveryDestinationArn: Token.asString(
          awsCloudwatchLogDeliveryDestinationCwlogs.arn
        ),
        deliverySourceName: traceLogs.name,
        dependsOn: [s3TraceLogs, cwlogsErrorLogs],
      }
    );
    const firehoseErrorLogs = new CloudwatchLogDelivery(
      this,
      "firehose_error_logs",
      {
        deliveryDestinationArn: firehose.arn,
        deliverySourceName: errorLogs.name,
        dependsOn: [cwlogsErrorLogs, firehoseInfoLogs],
      }
    );
    new CloudwatchLogDelivery(this, "firehose_trace_logs", {
      deliveryDestinationArn: firehose.arn,
      deliverySourceName: traceLogs.name,
      dependsOn: [cwlogsTraceLogs, firehoseErrorLogs],
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
The following arguments are required:

* `name` - (Required) Name of the new event bus. The names of custom event buses can't contain the / character. To create a partner event bus, ensure that the `name` matches the `eventSourceName`.

The following arguments are optional:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `deadLetterConfig` - (Optional) Configuration details of the Amazon SQS queue for EventBridge to use as a dead-letter queue (DLQ). This block supports the following arguments:
    * `arn` - (Optional) The ARN of the SQS queue specified as the target for the dead-letter queue.
* `description` - (Optional) Event bus description.
* `eventSourceName` - (Optional) Partner event source that the new event bus will be matched with. Must match `name`.
* `kmsKeyIdentifier` - (Optional) Identifier of the AWS KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt events on this event bus. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN.
* `logConfig` - (Optional) Block for logging configuration settings for the event bus.
    * `includeDetail` - (Optional) Whether EventBridge include detailed event information in the records it generates. Valid values are `NONE` and `FULL`.
    * `level` - (Optional) Level of logging detail to include. Valid values are `OFF`, `ERROR`, `INFO`, and `TRACE`.
* `tags` - (Optional) Map of tags assigned to the resource. If configured with a provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the event bus.
* `id` - Name of the event bus.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import EventBridge event buses using the `name` (which can also be a partner event source name). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchEventBus } from "./.gen/providers/aws/cloudwatch-event-bus";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    CloudwatchEventBus.generateConfigForImport(
      this,
      "messenger",
      "chat-messages"
    );
  }
}

```

Using `terraform import`, import EventBridge event buses using the name of the event bus (which can also be a partner event source name). For example:

```console
% terraform import aws_cloudwatch_event_bus.messenger chat-messages
```

<!-- cache-key: cdktf-0.20.8 input-6a14bd7d7f255755ef60997e6a45fb2c4123248750103e6ba40ec79eef1338ca -->