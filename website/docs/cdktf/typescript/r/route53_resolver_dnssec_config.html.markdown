---
subcategory: "Route 53 Resolver"
layout: "aws"
page_title: "AWS: aws_route53_resolver_dnssec_config"
description: |-
  Provides a Route 53 Resolver DNSSEC config resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_route53_resolver_dnssec_config

Provides a Route 53 Resolver DNSSEC config resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Route53ResolverDnssecConfig } from "./.gen/providers/aws/route53-resolver-dnssec-config";
import { Vpc } from "./.gen/providers/aws/vpc";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new Vpc(this, "example", {
      cidrBlock: "10.0.0.0/16",
      enableDnsHostnames: true,
      enableDnsSupport: true,
    });
    const awsRoute53ResolverDnssecConfigExample =
      new Route53ResolverDnssecConfig(this, "example_1", {
        resourceId: example.id,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRoute53ResolverDnssecConfigExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `resourceId` - (Required) The ID of the virtual private cloud (VPC) that you're updating the DNSSEC validation status for.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The ARN for a configuration for DNSSEC validation.
* `id` - The ID for a configuration for DNSSEC validation.
* `ownerId` - The owner account ID of the virtual private cloud (VPC) for a configuration for DNSSEC validation.
* `validationStatus` - The validation status for a DNSSEC configuration. The status can be one of the following: `ENABLING`, `ENABLED`, `DISABLING` and `DISABLED`.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import  Route 53 Resolver DNSSEC configs using the Route 53 Resolver DNSSEC config ID. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Route53ResolverDnssecConfig } from "./.gen/providers/aws/route53-resolver-dnssec-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    Route53ResolverDnssecConfig.generateConfigForImport(
      this,
      "example",
      "rdsc-be1866ecc1683e95"
    );
  }
}

```

Using `terraform import`, import  Route 53 Resolver DNSSEC configs using the Route 53 Resolver DNSSEC config ID. For example:

```console
% terraform import aws_route53_resolver_dnssec_config.example rdsc-be1866ecc1683e95
```

<!-- cache-key: cdktf-0.20.8 input-25355a87d3de9c2a770f20c93030966e085ecfc0cf8a7652e10a4089dab21b5d -->