---
subcategory: "ECR (Elastic Container Registry)"
layout: "aws"
page_title: "AWS: aws_ecr_repository_creation_template"
description: |-
  Provides an Elastic Container Registry Repository Creation Template.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ecr_repository_creation_template

Provides an Elastic Container Registry Repository Creation Template.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { EcrRepositoryCreationTemplate } from "./.gen/providers/aws/ecr-repository-creation-template";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DataAwsIamPolicyDocument(this, "example", {
      statement: [
        {
          actions: [
            "ecr:GetDownloadUrlForLayer",
            "ecr:BatchGetImage",
            "ecr:BatchCheckLayerAvailability",
            "ecr:PutImage",
            "ecr:InitiateLayerUpload",
            "ecr:UploadLayerPart",
            "ecr:CompleteLayerUpload",
            "ecr:DescribeRepositories",
            "ecr:GetRepositoryPolicy",
            "ecr:ListImages",
            "ecr:DeleteRepository",
            "ecr:BatchDeleteImage",
            "ecr:SetRepositoryPolicy",
            "ecr:DeleteRepositoryPolicy",
          ],
          effect: "Allow",
          principals: [
            {
              identifiers: ["123456789012"],
              type: "AWS",
            },
          ],
          sid: "new policy",
        },
      ],
    });
    const awsEcrRepositoryCreationTemplateExample =
      new EcrRepositoryCreationTemplate(this, "example_1", {
        appliedFor: ["PULL_THROUGH_CACHE"],
        customRoleArn: "arn:aws:iam::123456789012:role/example",
        description: "An example template",
        encryptionConfiguration: [
          {
            encryptionType: "AES256",
          },
        ],
        imageTagMutability: "IMMUTABLE",
        lifecyclePolicy:
          '{\n  "rules": [\n    {\n      "rulePriority": 1,\n      "description": "Expire images older than 14 days",\n      "selection": {\n        "tagStatus": "untagged",\n        "countType": "sinceImagePushed",\n        "countUnit": "days",\n        "countNumber": 14\n      },\n      "action": {\n        "type": "expire"\n      }\n    }\n  ]\n}\n\n',
        prefix: "example",
        repositoryPolicy: Token.asString(example.json),
        resourceTags: {
          Foo: "Bar",
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsEcrRepositoryCreationTemplateExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `prefix` - (Required, Forces new resource) The repository name prefix to match against.
* `appliedFor` - (Required) Which features this template applies to. Must contain one or more of `PULL_THROUGH_CACHE` or `REPLICATION`.
* `customRoleArn` - (Optional) A custom IAM role to use for repository creation. Required if using repository tags or KMS encryption.
* `description` - (Optional) The description for this template.
* `encryptionConfiguration` - (Optional) Encryption configuration for any created repositories. See [below for schema](#encryption_configuration).
* `imageTagMutability` - (Optional) The tag mutability setting for any created repositories. Must be one of: `MUTABLE` or `IMMUTABLE`. Defaults to `MUTABLE`.
* `lifecyclePolicy` - (Optional) The lifecycle policy document to apply to any created repositories. See more details about [Policy Parameters](http://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html#lifecycle_policy_parameters) in the official AWS docs. Consider using the [`aws_ecr_lifecycle_policy_document` data_source](/docs/providers/aws/d/ecr_lifecycle_policy_document.html) to generate/manage the JSON document used for the `lifecyclePolicy` argument.
* `repositoryPolicy` - (Optional) The registry policy document to apply to any created repositories. This is a JSON formatted string. For more information about building IAM policy documents with Terraform, see the [AWS IAM Policy Document Guide](https://learn.hashicorp.com/terraform/aws/iam-policy).
* `resourceTags` - (Optional) A map of tags to assign to any created repositories.

### encryption_configuration

* `encryptionType` - (Optional) The encryption type to use for any created repositories. Valid values are `AES256` or `KMS`. Defaults to `AES256`.
* `kmsKey` - (Optional) The ARN of the KMS key to use when `encryptionType` is `KMS`. If not specified, uses the default AWS managed key for ECR.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `registryId` - The registry ID the repository creation template applies to.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ECR Repository Creation Templates using the `prefix`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EcrRepositoryCreationTemplate } from "./.gen/providers/aws/ecr-repository-creation-template";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    EcrRepositoryCreationTemplate.generateConfigForImport(
      this,
      "example",
      "example"
    );
  }
}

```

Using `terraform import`, import the ECR Repository Creating Templates using the `prefix`. For example:

```console
% terraform import aws_ecr_repository_creation_template.example example
```

<!-- cache-key: cdktf-0.20.1 input-62aa6306b475e690ba9b92a748d682c61ada6515f552c32c8ec364a7d1180a7e -->