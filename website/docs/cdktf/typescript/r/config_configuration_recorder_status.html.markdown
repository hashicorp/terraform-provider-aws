---
subcategory: "Config"
layout: "aws"
page_title: "AWS: aws_config_configuration_recorder_status"
description: |-
  Manages status of an AWS Config Configuration Recorder.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_config_configuration_recorder_status

Manages status (recording / stopped) of an AWS Config Configuration Recorder.

~> **Note:** Starting Configuration Recorder requires a [Delivery Channel](/docs/providers/aws/r/config_delivery_channel.html) to be present. Use of `dependsOn` (as shown below) is recommended to avoid race conditions.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConfigConfigurationRecorder } from "./.gen/providers/aws/config-configuration-recorder";
import { ConfigConfigurationRecorderStatus } from "./.gen/providers/aws/config-configuration-recorder-status";
import { ConfigDeliveryChannel } from "./.gen/providers/aws/config-delivery-channel";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicy } from "./.gen/providers/aws/iam-role-policy";
import { IamRolePolicyAttachment } from "./.gen/providers/aws/iam-role-policy-attachment";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const b = new S3Bucket(this, "b", {
      bucket: "awsconfig-example",
    });
    const assumeRole = new DataAwsIamPolicyDocument(this, "assume_role", {
      statement: [
        {
          actions: ["sts:AssumeRole"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["config.amazonaws.com"],
              type: "Service",
            },
          ],
        },
      ],
    });
    const p = new DataAwsIamPolicyDocument(this, "p", {
      statement: [
        {
          actions: ["s3:*"],
          effect: "Allow",
          resources: [b.arn, "${" + b.arn + "}/*"],
        },
      ],
    });
    const foo = new ConfigDeliveryChannel(this, "foo", {
      name: "example",
      s3BucketName: b.bucket,
    });
    const r = new IamRole(this, "r", {
      assumeRolePolicy: Token.asString(assumeRole.json),
      name: "example-awsconfig",
    });
    const awsIamRolePolicyP = new IamRolePolicy(this, "p_5", {
      name: "awsconfig-example",
      policy: Token.asString(p.json),
      role: r.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyP.overrideLogicalId("p");
    new IamRolePolicyAttachment(this, "a", {
      policyArn: "arn:aws:iam::aws:policy/service-role/AWS_ConfigRole",
      role: r.name,
    });
    const awsConfigConfigurationRecorderFoo = new ConfigConfigurationRecorder(
      this,
      "foo_7",
      {
        name: "example",
        roleArn: r.arn,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsConfigConfigurationRecorderFoo.overrideLogicalId("foo");
    const awsConfigConfigurationRecorderStatusFoo =
      new ConfigConfigurationRecorderStatus(this, "foo_8", {
        dependsOn: [foo],
        isEnabled: true,
        name: Token.asString(awsConfigConfigurationRecorderFoo.name),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsConfigConfigurationRecorderStatusFoo.overrideLogicalId("foo");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The name of the recorder
* `isEnabled` - (Required) Whether the configuration recorder should be enabled or disabled.

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Configuration Recorder Status using the name of the Configuration Recorder. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConfigConfigurationRecorderStatus } from "./.gen/providers/aws/config-configuration-recorder-status";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ConfigConfigurationRecorderStatus.generateConfigForImport(
      this,
      "foo",
      "example"
    );
  }
}

```

Using `terraform import`, import Configuration Recorder Status using the name of the Configuration Recorder. For example:

```console
% terraform import aws_config_configuration_recorder_status.foo example
```

<!-- cache-key: cdktf-0.20.8 input-eff5be1ca06224bd56323b786df4a302b3a7bde4963a5efe48e7bee409360bcf -->