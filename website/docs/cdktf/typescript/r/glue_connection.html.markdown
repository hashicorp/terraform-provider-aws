---
subcategory: "Glue"
layout: "aws"
page_title: "AWS: aws_glue_connection"
description: |-
  Provides an Glue Connection resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_glue_connection

Provides a Glue Connection resource.

## Example Usage

### Non-VPC Connection

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueConnection } from "./.gen/providers/aws/glue-connection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new GlueConnection(this, "example", {
      connectionProperties: {
        JDBC_CONNECTION_URL: "jdbc:mysql://example.com/exampledatabase",
        PASSWORD: "examplepassword",
        USERNAME: "exampleusername",
      },
      name: "example",
    });
  }
}

```

### Non-VPC Connection with secret manager reference

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsSecretsmanagerSecret } from "./.gen/providers/aws/data-aws-secretsmanager-secret";
import { GlueConnection } from "./.gen/providers/aws/glue-connection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DataAwsSecretsmanagerSecret(this, "example", {
      name: "example-secret",
    });
    const awsGlueConnectionExample = new GlueConnection(this, "example_1", {
      connectionProperties: {
        JDBC_CONNECTION_URL: "jdbc:mysql://example.com/exampledatabase",
        SECRET_ID: Token.asString(example.name),
      },
      name: "example",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsGlueConnectionExample.overrideLogicalId("example");
  }
}

```

### VPC Connection

For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/populate-add-connection.html#connection-JDBC-VPC).

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueConnection } from "./.gen/providers/aws/glue-connection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new GlueConnection(this, "example", {
      connectionProperties: {
        JDBC_CONNECTION_URL:
          "jdbc:mysql://${" +
          awsRdsClusterExample.endpoint +
          "}/exampledatabase",
        PASSWORD: "examplepassword",
        USERNAME: "exampleusername",
      },
      name: "example",
      physicalConnectionRequirements: {
        availabilityZone: Token.asString(awsSubnetExample.availabilityZone),
        securityGroupIdList: [Token.asString(awsSecurityGroupExample.id)],
        subnetId: Token.asString(awsSubnetExample.id),
      },
    });
  }
}

```

### Connection using a custom connector

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsSecretsmanagerSecret } from "./.gen/providers/aws/data-aws-secretsmanager-secret";
import { GlueConnection } from "./.gen/providers/aws/glue-connection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example1 = new GlueConnection(this, "example1", {
      connectionProperties: {
        CONNECTION_TYPE: "Jdbc",
        CONNECTOR_CLASS_NAME: "net.snowflake.client.jdbc.SnowflakeDriver",
        CONNECTOR_URL: "s3://example/snowflake-jdbc.jar",
        JDBC_CONNECTION_URL:
          '[[\\"default=jdbc:snowflake://example.com/?user=$${user}&password=$${password}\\"],\\",\\"]',
      },
      connectionType: "CUSTOM",
      matchCriteria: ["template-connection"],
      name: "example1",
    });
    const example = new DataAwsSecretsmanagerSecret(this, "example", {
      name: "example-secret",
    });
    new GlueConnection(this, "example2", {
      connectionProperties: {
        CONNECTION_TYPE: "Jdbc",
        CONNECTOR_CLASS_NAME: "net.snowflake.client.jdbc.SnowflakeDriver",
        CONNECTOR_URL: "s3://example/snowflake-jdbc.jar",
        JDBC_CONNECTION_URL:
          "jdbc:snowflake://example.com/?user=$${user}&password=$${password}",
        SECRET_ID: Token.asString(example.name),
      },
      connectionType: "CUSTOM",
      matchCriteria: ["Connection", example1.name],
      name: "example2",
    });
  }
}

```

### Azure Cosmos Connection

For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html#connection-properties-azurecosmos).

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueConnection } from "./.gen/providers/aws/glue-connection";
import { SecretsmanagerSecret } from "./.gen/providers/aws/secretsmanager-secret";
import { SecretsmanagerSecretVersion } from "./.gen/providers/aws/secretsmanager-secret-version";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new SecretsmanagerSecret(this, "example", {
      name: "example-secret",
    });
    const awsSecretsmanagerSecretVersionExample =
      new SecretsmanagerSecretVersion(this, "example_1", {
        secretId: example.id,
        secretString: Token.asString(
          Fn.jsonencode({
            password: "examplepassword",
            username: "exampleusername",
          })
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSecretsmanagerSecretVersionExample.overrideLogicalId("example");
    const awsGlueConnectionExample = new GlueConnection(this, "example_2", {
      connectionProperties: {
        SparkProperties: Token.asString(
          Fn.jsonencode({
            "spark.cosmos.accountEndpoint":
              "https://exampledbaccount.documents.azure.com:443/",
            secretId: example.name,
          })
        ),
      },
      connectionType: "AZURECOSMOS",
      name: "example",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsGlueConnectionExample.overrideLogicalId("example");
  }
}

```

### Azure SQL Connection

For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html#connection-properties-azuresql).

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueConnection } from "./.gen/providers/aws/glue-connection";
import { SecretsmanagerSecret } from "./.gen/providers/aws/secretsmanager-secret";
import { SecretsmanagerSecretVersion } from "./.gen/providers/aws/secretsmanager-secret-version";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new SecretsmanagerSecret(this, "example", {
      name: "example-secret",
    });
    const awsSecretsmanagerSecretVersionExample =
      new SecretsmanagerSecretVersion(this, "example_1", {
        secretId: example.id,
        secretString: Token.asString(
          Fn.jsonencode({
            password: "examplepassword",
            username: "exampleusername",
          })
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSecretsmanagerSecretVersionExample.overrideLogicalId("example");
    const awsGlueConnectionExample = new GlueConnection(this, "example_2", {
      connectionProperties: {
        SparkProperties: Token.asString(
          Fn.jsonencode({
            secretId: example.name,
            url: "jdbc:sqlserver:exampledbserver.database.windows.net:1433;database=exampledatabase",
          })
        ),
      },
      connectionType: "AZURECOSMOS",
      name: "example",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsGlueConnectionExample.overrideLogicalId("example");
  }
}

```

### Google BigQuery Connection

For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html#connection-properties-bigquery).

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueConnection } from "./.gen/providers/aws/glue-connection";
import { SecretsmanagerSecret } from "./.gen/providers/aws/secretsmanager-secret";
import { SecretsmanagerSecretVersion } from "./.gen/providers/aws/secretsmanager-secret-version";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new SecretsmanagerSecret(this, "example", {
      name: "example-secret",
    });
    const awsSecretsmanagerSecretVersionExample =
      new SecretsmanagerSecretVersion(this, "example_1", {
        secretId: example.id,
        secretString: Token.asString(
          Fn.jsonencode({
            credentials: Fn.base64encode(
              '{\n        "type": "service_account",\n        "project_id": "example-project",\n        "private_key_id": "example-key",\n        "private_key": "-----BEGIN RSA PRIVATE KEY-----\\nREDACTED\\n-----END RSA PRIVATE KEY-----",\n        "client_email": "example-project@appspot.gserviceaccount.com",\n        "client_id": example-client",\n        "auth_uri": "https://accounts.google.com/o/oauth2/auth",\n        "token_uri": "https://oauth2.googleapis.com/token",\n        "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",\n        "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/example-project%%40appspot.gserviceaccount.com",\n        "universe_domain": "googleapis.com"\n      }\n'
            ),
          })
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSecretsmanagerSecretVersionExample.overrideLogicalId("example");
    const awsGlueConnectionExample = new GlueConnection(this, "example_2", {
      connectionProperties: {
        SparkProperties: Token.asString(
          Fn.jsonencode({
            secretId: example.name,
          })
        ),
      },
      connectionType: "BIGQUERY",
      name: "example",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsGlueConnectionExample.overrideLogicalId("example");
  }
}

```

### OpenSearch Service Connection

For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html#connection-properties-opensearch).

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueConnection } from "./.gen/providers/aws/glue-connection";
import { SecretsmanagerSecret } from "./.gen/providers/aws/secretsmanager-secret";
import { SecretsmanagerSecretVersion } from "./.gen/providers/aws/secretsmanager-secret-version";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new SecretsmanagerSecret(this, "example", {
      name: "example-secret",
    });
    const awsSecretsmanagerSecretVersionExample =
      new SecretsmanagerSecretVersion(this, "example_1", {
        secretId: example.id,
        secretString: Token.asString(
          Fn.jsonencode({
            "opensearch.net.http.auth.pass": "examplepassword",
            "opensearch.net.http.auth.user": "exampleusername",
          })
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSecretsmanagerSecretVersionExample.overrideLogicalId("example");
    const awsGlueConnectionExample = new GlueConnection(this, "example_2", {
      connectionProperties: {
        SparkProperties: Token.asString(
          Fn.jsonencode({
            "opensearch.aws.sigv4.enabled": "true",
            "opensearch.aws.sigv4.region": "us-east-1",
            "opensearch.nodes":
              "https://search-exampledomain-ixlmh4jieahrau3bfebcgp8cnm.us-east-1.es.amazonaws.com",
            "opensearch.nodes.wan.only": "true",
            "opensearch.port": "443",
            secretId: example.name,
          })
        ),
      },
      connectionType: "OPENSEARCH",
      name: "example",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsGlueConnectionExample.overrideLogicalId("example");
  }
}

```

### Snowflake Connection

For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html#connection-properties-snowflake).

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueConnection } from "./.gen/providers/aws/glue-connection";
import { SecretsmanagerSecret } from "./.gen/providers/aws/secretsmanager-secret";
import { SecretsmanagerSecretVersion } from "./.gen/providers/aws/secretsmanager-secret-version";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new SecretsmanagerSecret(this, "example", {
      name: "example-secret",
    });
    const awsSecretsmanagerSecretVersionExample =
      new SecretsmanagerSecretVersion(this, "example_1", {
        secretId: example.id,
        secretString: Token.asString(
          Fn.jsonencode({
            sfPassword: "examplepassword",
            sfUser: "exampleusername",
          })
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSecretsmanagerSecretVersionExample.overrideLogicalId("example");
    const awsGlueConnectionExample = new GlueConnection(this, "example_2", {
      connectionProperties: {
        SparkProperties: Token.asString(
          Fn.jsonencode({
            secretId: example.name,
            sfRole: "EXAMPLEETLROLE",
            sfUrl: "exampleorg-exampleconnection.snowflakecomputing.com",
          })
        ),
      },
      connectionType: "SNOWFLAKE",
      name: "example",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsGlueConnectionExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `name` – (Required) Name of the connection.

The following arguments are optional:

* `catalogId` – (Optional) ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.
* `connectionProperties` – (Optional) Map of key-value pairs used as parameters for this connection. For more information, see the [AWS Documentation](https://docs.aws.amazon.com/glue/latest/dg/connection-properties.html).

  **Note:** Some connection types require the `SparkProperties` property with a JSON document that contains the actual connection properties. For specific examples, refer to [Example Usage](#example-usage).
* `connectionType` – (Optional) Type of the connection. Valid values: `AZURECOSMOS`, `AZURESQL`, `BIGQUERY`, `CUSTOM`, `JDBC`, `KAFKA`, `MARKETPLACE`, `MONGODB`, `NETWORK`, `OPENSEARCH`, `SNOWFLAKE`. Defaults to `JDBC`.
* `description` – (Optional) Description of the connection.
* `matchCriteria` – (Optional) List of criteria that can be used in selecting this connection.
* `physicalConnectionRequirements` - (Optional) Map of physical connection requirements, such as VPC and SecurityGroup. See [`physicalConnectionRequirements` Block](#physical_connection_requirements-block) for details.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### `physicalConnectionRequirements` Block

The `physicalConnectionRequirements` configuration block supports the following arguments:

* `availabilityZone` - (Optional) The availability zone of the connection. This field is redundant and implied by `subnetId`, but is currently an api requirement.
* `securityGroupIdList` - (Optional) The security group ID list used by the connection.
* `subnetId` - (Optional) The subnet ID used by the connection.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the Glue Connection.
* `id` - Catalog ID and name of the connection.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Glue Connections using the `CATALOG-ID` (AWS account ID if not custom) and `NAME`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueConnection } from "./.gen/providers/aws/glue-connection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    GlueConnection.generateConfigForImport(
      this,
      "myConnection",
      "123456789012:MyConnection"
    );
  }
}

```

Using `terraform import`, import Glue Connections using the `CATALOG-ID` (AWS account ID if not custom) and `NAME`. For example:

```console
% terraform import aws_glue_connection.MyConnection 123456789012:MyConnection
```

<!-- cache-key: cdktf-0.20.1 input-826e64708cf66167c1205fd9ae58e8643711303814714f361928aeaba83190c2 -->