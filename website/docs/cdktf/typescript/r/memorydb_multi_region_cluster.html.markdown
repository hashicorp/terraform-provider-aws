---
subcategory: "MemoryDB"
layout: "aws"
page_title: "AWS: aws_memorydb_multi_region_cluster"
description: |-
  Provides a MemoryDB Multi Region Cluster.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_memorydb_multi_region_cluster

Provides a MemoryDB Multi Region Cluster.

More information about MemoryDB can be found in the [Developer Guide](https://docs.aws.amazon.com/memorydb/latest/devguide/what-is-memorydb-for-redis.html).

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { MemorydbCluster } from "./.gen/providers/aws/memorydb-cluster";
import { MemorydbMultiRegionCluster } from "./.gen/providers/aws/memorydb-multi-region-cluster";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new MemorydbMultiRegionCluster(this, "example", {
      multiRegionClusterNameSuffix: "example",
      nodeType: "db.r7g.xlarge",
    });
    const awsMemorydbClusterExample = new MemorydbCluster(this, "example_1", {
      aclName: Token.asString(awsMemorydbAclExample.id),
      autoMinorVersionUpgrade: false,
      multiRegionClusterName: example.multiRegionClusterName,
      name: "example",
      nodeType: "db.t4g.small",
      numShards: 2,
      securityGroupIds: [Token.asString(awsSecurityGroupExample.id)],
      snapshotRetentionLimit: 7,
      subnetGroupName: Token.asString(awsMemorydbSubnetGroupExample.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsMemorydbClusterExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `multiRegionClusterNameSuffix` - (Required, Forces new resource) A suffix to be added to the multi-region cluster name. An AWS generated prefix is automatically applied to the multi-region cluster name when it is created.
* `nodeType` - (Required) The node type to be used for the multi-region cluster.

The following arguments are optional:

* `description` - (Optional) description for the multi-region cluster.
* `engine` - (Optional) The name of the engine to be used for the multi-region cluster. Valid values are `redis` and `valkey`.
* `engineVersion` - (Optional) The version of the engine to be used for the multi-region cluster. Downgrades are not supported.
* `multiRegionParameterGroupName` - (Optional) The name of the multi-region parameter group to be associated with the cluster.
* `numShards` - (Optional) The number of shards for the multi-region cluster.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `tlsEnabled` - (Optional, Forces new resource) A flag to enable in-transit encryption on the cluster.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The ARN of the multi-region cluster.
* `multiRegionClusterName` - The name of the multi-region cluster.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `120m`)
- `update` - (Default `120m`)
- `delete` - (Default `120m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import a cluster using the `multiRegionClusterName`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { MemorydbMultiRegionCluster } from "./.gen/providers/aws/memorydb-multi-region-cluster";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    MemorydbMultiRegionCluster.generateConfigForImport(
      this,
      "example",
      "virxk-example"
    );
  }
}

```

Using `terraform import`, import a cluster using the `multiRegionClusterName`. For example:

```console
% terraform import aws_memorydb_multi_region_cluster.example virxk-example
```

<!-- cache-key: cdktf-0.20.8 input-3799d623bd517cf7fe1d19d5d069731caf039b655ec0685864b5961287492184 -->