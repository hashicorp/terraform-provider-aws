---
subcategory: "VPN (Site-to-Site)"
layout: "aws"
page_title: "AWS: aws_customer_gateway"
description: |-
  Provides a customer gateway inside a VPC. These objects can be
  connected to VPN gateways via VPN connections, and allow you to
  establish tunnels between your network and the VPC.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_customer_gateway

Provides a customer gateway inside a VPC. These objects can be connected to VPN gateways via VPN connections, and allow you to establish tunnels between your network and the VPC.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CustomerGateway } from "./.gen/providers/aws/customer-gateway";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new CustomerGateway(this, "main", {
      bgpAsn: Token.asString(65000),
      ipAddress: "172.83.124.10",
      tags: {
        Name: "main-customer-gateway",
      },
      type: "ipsec.1",
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `bgpAsn` - (Optional, Forces new resource) The gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN). Valid values are from  `1` to `2147483647`. Conflicts with `bgpAsnExtended`.
* `bgpAsnExtended` - (Optional, Forces new resource) The gateway's Border Gateway Protocol (BGP) Autonomous System Number (ASN). Valid values are from  `2147483648` to `4294967295` Conflicts with `bgpAsn`.
* `certificateArn` - (Optional) The Amazon Resource Name (ARN) for the customer gateway certificate.
* `deviceName` - (Optional) A name for the customer gateway device.
* `ipAddress` - (Optional) The IPv4 address for the customer gateway device's outside interface.
* `type` - (Required) The type of customer gateway. The only type AWS
  supports at this time is "ipsec.1".
* `tags` - (Optional) Tags to apply to the gateway. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The amazon-assigned ID of the gateway.
* `arn` - The ARN of the customer gateway.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Customer Gateways using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CustomerGateway } from "./.gen/providers/aws/customer-gateway";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    CustomerGateway.generateConfigForImport(this, "main", "cgw-b4dc3961");
  }
}

```

Using `terraform import`, import Customer Gateways using the `id`. For example:

```console
% terraform import aws_customer_gateway.main cgw-b4dc3961
```

<!-- cache-key: cdktf-0.20.1 input-307f6d74eba03e018eb74b5a5dd43419005726131327845a42a10924c9765f9d -->