---
subcategory: "IAM (Identity & Access Management)"
layout: "aws"
page_title: "AWS: aws_iam_policy_attachment"
description: |-
  Attaches a Managed IAM Policy to user(s), role(s), and/or group(s)
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_iam_policy_attachment

Attaches a Managed IAM Policy to user(s), role(s), and/or group(s)

!> **WARNING:** The aws_iam_policy_attachment resource creates **exclusive** attachments of IAM policies. Across the entire AWS account, all of the users/roles/groups to which a single policy is attached must be declared by a single aws_iam_policy_attachment resource. This means that even any users/roles/groups that have the attached policy via any other mechanism (including other Terraform resources) will have that attached policy revoked by this resource. Consider `aws_iam_role_policy_attachment`, `aws_iam_user_policy_attachment`, or `aws_iam_group_policy_attachment` instead. These resources do not enforce exclusive attachment of an IAM policy.

~> **NOTE:** The usage of this resource conflicts with the `aws_iam_group_policy_attachment`, `aws_iam_role_policy_attachment`, and `aws_iam_user_policy_attachment` resources and will permanently show a difference if both are defined.

~> **NOTE:** For a given role, this resource is incompatible with using the [`aws_iam_role` resource](/docs/providers/aws/r/iam_role.html) `managedPolicyArns` argument. When using that argument and this resource, both will attempt to manage the role's managed policy attachments and Terraform will show a permanent difference.

~> **NOTE:** To ensure Terraform correctly manages dependencies during updates, use a reference to the IAM resource when defining the `policyArn` for `aws_iam_policy_attachment`, rather than constructing the ARN directly. For example, use `policy_arn = aws_iam_policy.example.arn` instead of `policy_arn = "arn:aws:iam::${data.aws_caller_identity.current.account_id}:policy/Example"`. Failing to do so may lead to errors like `DeleteConflict: Cannot delete a policy attached to entities` or `NoSuchEntity`.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamGroup } from "./.gen/providers/aws/iam-group";
import { IamPolicy } from "./.gen/providers/aws/iam-policy";
import { IamPolicyAttachment } from "./.gen/providers/aws/iam-policy-attachment";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamUser } from "./.gen/providers/aws/iam-user";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const group = new IamGroup(this, "group", {
      name: "test-group",
    });
    const user = new IamUser(this, "user", {
      name: "test-user",
    });
    const assumeRole = new DataAwsIamPolicyDocument(this, "assume_role", {
      statement: [
        {
          actions: ["sts:AssumeRole"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["ec2.amazonaws.com"],
              type: "Service",
            },
          ],
        },
      ],
    });
    const policy = new DataAwsIamPolicyDocument(this, "policy", {
      statement: [
        {
          actions: ["ec2:Describe*"],
          effect: "Allow",
          resources: ["*"],
        },
      ],
    });
    const awsIamPolicyPolicy = new IamPolicy(this, "policy_4", {
      description: "A test policy",
      name: "test-policy",
      policy: Token.asString(policy.json),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamPolicyPolicy.overrideLogicalId("policy");
    const role = new IamRole(this, "role", {
      assumeRolePolicy: Token.asString(assumeRole.json),
      name: "test-role",
    });
    new IamPolicyAttachment(this, "test-attach", {
      groups: [group.name],
      name: "test-attachment",
      policyArn: Token.asString(awsIamPolicyPolicy.arn),
      roles: [role.name],
      users: [user.name],
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name`    (Required) - Name of the attachment. This cannot be an empty string.
* `users`   (Optional) - User(s) the policy should be applied to.
* `roles`   (Optional) - Role(s) the policy should be applied to.
* `groups`  (Optional) - Group(s) the policy should be applied to.
* `policyArn`  (Required) - ARN of the policy you want to apply. Typically this should be a reference to the ARN of another resource to ensure dependency ordering, such as `aws_iam_policy.example.arn`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Policy's ID.
* `name` - Name of the attachment.

<!-- cache-key: cdktf-0.20.1 input-38a98afa37b4bd05f0bd04f37583a500995213ef0322cf937ef548c6397b6391 -->