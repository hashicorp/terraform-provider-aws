---
subcategory: "Config"
layout: "aws"
page_title: "AWS: aws_config_configuration_recorder"
description: |-
  Provides an AWS Config Configuration Recorder.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_config_configuration_recorder

Provides an AWS Config Configuration Recorder. Please note that this resource **does not start** the created recorder automatically.

~> **Note:** _Starting_ the Configuration Recorder requires a [delivery channel](/docs/providers/aws/r/config_delivery_channel.html) (while delivery channel creation requires Configuration Recorder). This is why [`aws_config_configuration_recorder_status`](/docs/providers/aws/r/config_configuration_recorder_status.html) is a separate resource.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConfigConfigurationRecorder } from "./.gen/providers/aws/config-configuration-recorder";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const assumeRole = new DataAwsIamPolicyDocument(this, "assume_role", {
      statement: [
        {
          actions: ["sts:AssumeRole"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["config.amazonaws.com"],
              type: "Service",
            },
          ],
        },
      ],
    });
    const r = new IamRole(this, "r", {
      assumeRolePolicy: Token.asString(assumeRole.json),
      name: "awsconfig-example",
    });
    new ConfigConfigurationRecorder(this, "foo", {
      name: "example",
      roleArn: r.arn,
    });
  }
}

```

### Exclude Resources Types Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConfigConfigurationRecorder } from "./.gen/providers/aws/config-configuration-recorder";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ConfigConfigurationRecorder(this, "foo", {
      name: "example",
      recordingGroup: {
        allSupported: false,
        exclusionByResourceTypes: [
          {
            resourceTypes: ["AWS::EC2::Instance"],
          },
        ],
        recordingStrategy: [
          {
            useOnly: "EXCLUSION_BY_RESOURCE_TYPES",
          },
        ],
      },
      roleArn: r.arn,
    });
  }
}

```

### Periodic Recording

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConfigConfigurationRecorder } from "./.gen/providers/aws/config-configuration-recorder";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ConfigConfigurationRecorder(this, "foo", {
      name: "example",
      recordingGroup: {
        allSupported: false,
        includeGlobalResourceTypes: false,
        resourceTypes: ["AWS::EC2::Instance", "AWS::EC2::NetworkInterface"],
      },
      recordingMode: {
        recordingFrequency: "CONTINUOUS",
        recordingModeOverride: {
          description: "Only record EC2 network interfaces daily",
          recordingFrequency: "DAILY",
          resourceTypes: ["AWS::EC2::NetworkInterface"],
        },
      },
      roleArn: r.arn,
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Optional) The name of the recorder. Defaults to `default`. Changing it recreates the resource.
* `roleArn` - (Required) Amazon Resource Name (ARN) of the IAM role. Used to make read or write requests to the delivery channel and to describe the AWS resources associated with the account. See [AWS Docs](http://docs.aws.amazon.com/config/latest/developerguide/iamrole-permissions.html) for more details.
* `recordingGroup` - (Optional) Recording group - see below.
* `recordingMode` - (Optional) Recording mode - see below.

### recording_group Configuration Block

* `allSupported` - (Optional) Specifies whether AWS Config records configuration changes for every supported type of regional resource (which includes any new type that will become supported in the future). Conflicts with `resourceTypes`. Defaults to `true`.
* `exclusionByResourceTypes` - (Optional) An object that specifies how AWS Config excludes resource types from being recorded by the configuration recorder.To use this option, you must set the useOnly field of RecordingStrategy to `EXCLUSION_BY_RESOURCE_TYPES` Requires `all_supported = false`. Conflicts with `resourceTypes`.
* `includeGlobalResourceTypes` - (Optional) Specifies whether AWS Config includes all supported types of _global resources_ with the resources that it records. Requires `all_supported = true`. Conflicts with `resourceTypes`.
* `recordingStrategy` - (Optional) Recording Strategy. Detailed below.
* `resourceTypes` - (Optional) A list that specifies the types of AWS resources for which AWS Config records configuration changes (for example, `AWS::EC2::Instance` or `AWS::CloudTrail::Trail`). See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types. In order to use this attribute, `allSupported` must be set to false.

#### exclusion_by_resource_types Configuration Block

* `resourceTypes` - (Optional) A list that specifies the types of AWS resources for which AWS Config excludes records configuration changes. See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types.

#### recording_strategy Configuration Block

* ` use_only` - (Optional) The recording strategy for the configuration recorder. See [relevant part of AWS Docs](https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingStrategy.html)

### recording_mode Configuration Block

* `recordingFrequency` - (Required) Default reecording frequency. `CONTINUOUS` or `DAILY`.
* `recordingModeOverride` - (Optional) Recording mode overrides. Detailed below.

#### recording_mode_override Configuration Block

* `description` - (Optional) A description you provide of the override.
* `resourceTypes` - (Required) A list that specifies the types of AWS resources for which the override applies to.  See [restrictions in the AWS Docs](https://docs.aws.amazon.com/config/latest/APIReference/API_RecordingModeOverride.html)
* `recordingFrequency` - (Required) The recording frequency for the resources in the override block. `CONTINUOUS` or `DAILY`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Name of the recorder

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Configuration Recorder using the name. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConfigConfigurationRecorder } from "./.gen/providers/aws/config-configuration-recorder";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ConfigConfigurationRecorder.generateConfigForImport(this, "foo", "example");
  }
}

```

Using `terraform import`, import Configuration Recorder using the name. For example:

```console
% terraform import aws_config_configuration_recorder.foo example
```

<!-- cache-key: cdktf-0.20.8 input-abb2a30c6aaa0f7b0debfcd2ded1ca9be070019688f41914c9c15ae47a17cbc7 -->