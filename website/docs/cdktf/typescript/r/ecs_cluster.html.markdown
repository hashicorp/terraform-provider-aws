---
subcategory: "ECS (Elastic Container)"
layout: "aws"
page_title: "AWS: aws_ecs_cluster"
description: |-
  Provides an ECS cluster.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ecs_cluster

Provides an ECS cluster.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EcsCluster } from "./.gen/providers/aws/ecs-cluster";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new EcsCluster(this, "foo", {
      name: "white-hart",
      setting: [
        {
          name: "containerInsights",
          value: "enabled",
        },
      ],
    });
  }
}

```

### Execute Command Configuration with Override Logging

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchLogGroup } from "./.gen/providers/aws/cloudwatch-log-group";
import { EcsCluster } from "./.gen/providers/aws/ecs-cluster";
import { KmsKey } from "./.gen/providers/aws/kms-key";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new CloudwatchLogGroup(this, "example", {
      name: "example",
    });
    const awsKmsKeyExample = new KmsKey(this, "example_1", {
      deletionWindowInDays: 7,
      description: "example",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsKmsKeyExample.overrideLogicalId("example");
    new EcsCluster(this, "test", {
      configuration: {
        executeCommandConfiguration: {
          kmsKeyId: Token.asString(awsKmsKeyExample.arn),
          logConfiguration: {
            cloudWatchEncryptionEnabled: true,
            cloudWatchLogGroupName: example.name,
          },
          logging: "OVERRIDE",
        },
      },
      name: "example",
    });
  }
}

```

### Fargate Ephemeral Storage Encryption with Customer-Managed KMS Key

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { EcsCluster } from "./.gen/providers/aws/ecs-cluster";
import { KmsKey } from "./.gen/providers/aws/kms-key";
import { KmsKeyPolicy } from "./.gen/providers/aws/kms-key-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new KmsKey(this, "example", {
      deletionWindowInDays: 7,
      description: "example",
    });
    const current = new DataAwsCallerIdentity(this, "current", {});
    const awsKmsKeyPolicyExample = new KmsKeyPolicy(this, "example_2", {
      keyId: example.id,
      policy: Token.asString(
        Fn.jsonencode({
          Id: "ECSClusterFargatePolicy",
          Statement: [
            {
              Action: "kms:*",
              Effect: "Allow",
              Principal: {
                AWS: "*",
              },
              Resource: "*",
              Sid: "Enable IAM User Permissions",
            },
            {
              Action: ["kms:GenerateDataKeyWithoutPlaintext"],
              Condition: {
                StringEquals: {
                  "kms:EncryptionContext:aws:ecs:clusterAccount": [
                    current.accountId,
                  ],
                  "kms:EncryptionContext:aws:ecs:clusterName": ["example"],
                },
              },
              Effect: "Allow",
              Principal: {
                Service: "fargate.amazonaws.com",
              },
              Resource: "*",
              Sid: "Allow generate data key access for Fargate tasks.",
            },
            {
              Action: ["kms:CreateGrant"],
              Condition: {
                "ForAllValues:StringEquals": {
                  "kms:GrantOperations": ["Decrypt"],
                },
                StringEquals: {
                  "kms:EncryptionContext:aws:ecs:clusterAccount": [
                    current.accountId,
                  ],
                  "kms:EncryptionContext:aws:ecs:clusterName": ["example"],
                },
              },
              Effect: "Allow",
              Principal: {
                Service: "fargate.amazonaws.com",
              },
              Resource: "*",
              Sid: "Allow grant creation permission for Fargate tasks.",
            },
          ],
          Version: "2012-10-17",
        })
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsKmsKeyPolicyExample.overrideLogicalId("example");
    new EcsCluster(this, "test", {
      configuration: {
        managedStorageConfiguration: {
          fargateEphemeralStorageKmsKeyId: example.id,
        },
      },
      dependsOn: [awsKmsKeyPolicyExample],
      name: "example",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `name` - (Required) Name of the cluster (up to 255 letters, numbers, hyphens, and underscores)

The following arguments are optional:

* `configuration` - (Optional) Execute command configuration for the cluster. See [`configueration` Block](#configuration-block) for details.
* `serviceConnectDefaults` - (Optional) Default Service Connect namespace. See [`serviceConnectDefaults` Block](#service_connect_defaults-block) for details.
* `setting` - (Optional) Configuration block(s) with cluster settings. For example, this can be used to enable CloudWatch Container Insights for a cluster. See [`setting` Block](#setting-block) for details.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### `configuration` Block

The `configuration` configuration block supports the following arguments:

* `executeCommandConfiguration` - (Optional) Details of the execute command configuration. See [`executeCommandConfiguration` Block](#execute_command_configuration-block) for details.
* `managedStorageConfiguration` - (Optional) Details of the managed storage configuration. See [`managedStorageConfiguration` Block](#managed_storage_configuration-block) for details.

### `executeCommandConfiguration` Block

The `executeCommandConfiguration` configuration block supports the following arguments:

* `kmsKeyId` - (Optional) AWS Key Management Service key ID to encrypt the data between the local client and the container.
* `logConfiguration` - (Optional) Log configuration for the results of the execute command actions. Required when `logging` is `OVERRIDE`. See [`logConfiguration` Block](#log_configuration-block) for details.
* `logging` - (Optional) Log setting to use for redirecting logs for your execute command results. Valid values: `NONE`, `DEFAULT`, `OVERRIDE`.

#### `logConfiguration` Block

The `logConfiguration` configuration block supports the following arguments:

* `cloudWatchEncryptionEnabled` - (Optional) Whether to enable encryption on the CloudWatch logs. If not specified, encryption will be disabled.
* `cloudWatchLogGroupName` - (Optional) The name of the CloudWatch log group to send logs to.
* `s3BucketName` - (Optional) Name of the S3 bucket to send logs to.
* `s3BucketEncryptionEnabled` - (Optional) Whether to enable encryption on the logs sent to S3. If not specified, encryption will be disabled.
* `s3KeyPrefix` - (Optional) Optional folder in the S3 bucket to place logs in.

### `managedStorageConfiguration` Block

The `managedStorageConfiguration` configuration block supports the following arguments:

* `fargateEphemeralStorageKmsKeyId` - (Optional) AWS Key Management Service key ID for the Fargate ephemeral storage.
* `kmsKeyId` - (Optional) AWS Key Management Service key ID to encrypt the managed storage.

### `serviceConnectDefaults` Block

The `serviceConnectDefaults` configuration block supports the following arguments:

* `namespace` - (Required) ARN of the [`aws_service_discovery_http_namespace`](/docs/providers/aws/r/service_discovery_http_namespace.html) that's used when you create a service and don't specify a Service Connect configuration.

### `setting` Block

The `setting` configuration block supports the following arguments:

* `name` - (Required) Name of the setting to manage. Valid values: `containerInsights`.
* `value` -  (Required) Value to assign to the setting. Valid values: `enabled`, `disabled`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN that identifies the cluster.
* `id` - ARN that identifies the cluster.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ECS clusters using the cluster name. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EcsCluster } from "./.gen/providers/aws/ecs-cluster";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    EcsCluster.generateConfigForImport(this, "stateless", "stateless-app");
  }
}

```

Using `terraform import`, import ECS clusters using the cluster name. For example:

```console
% terraform import aws_ecs_cluster.stateless stateless-app
```

<!-- cache-key: cdktf-0.20.1 input-ce3c6b13fb8b84480df8276839643d2e4ad1fc669627b6f56ea0c5da6604c507 -->