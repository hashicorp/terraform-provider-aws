---
subcategory: "Security Hub"
layout: "aws"
page_title: "AWS: aws_securityhub_organization_configuration"
description: |-
  Manages the Security Hub Organization Configuration
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_securityhub_organization_configuration

Manages the Security Hub Organization Configuration.

~> **NOTE:** This resource requires an [`aws_securityhub_organization_admin_account`](/docs/providers/aws/r/securityhub_organization_admin_account.html) to be configured (not necessarily with Terraform). More information about managing Security Hub in an organization can be found in the [Managing administrator and member accounts](https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-accounts.html) documentation.

~> **NOTE:** In order to set the `configurationType` to `CENTRAL`, the delegated admin must be a member account of the organization and not the management account. Central configuration also requires an [`aws_securityhub_finding_aggregator`](/docs/providers/aws/r/securityhub_finding_aggregator.html) to be configured.

~> **NOTE:** This is an advanced Terraform resource. Terraform will automatically assume management of the Security Hub Organization Configuration without import and perform no actions on removal from the Terraform configuration.

~> **NOTE:** Deleting this resource resets security hub to a local organization configuration with auto enable false.

## Example Usage

### Local Configuration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { OrganizationsOrganization } from "./.gen/providers/aws/organizations-organization";
import { SecurityhubOrganizationAdminAccount } from "./.gen/providers/aws/securityhub-organization-admin-account";
import { SecurityhubOrganizationConfiguration } from "./.gen/providers/aws/securityhub-organization-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new OrganizationsOrganization(this, "example", {
      awsServiceAccessPrincipals: ["securityhub.amazonaws.com"],
      featureSet: "ALL",
    });
    const awsSecurityhubOrganizationAdminAccountExample =
      new SecurityhubOrganizationAdminAccount(this, "example_1", {
        adminAccountId: "123456789012",
        dependsOn: [example],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSecurityhubOrganizationAdminAccountExample.overrideLogicalId("example");
    const awsSecurityhubOrganizationConfigurationExample =
      new SecurityhubOrganizationConfiguration(this, "example_2", {
        autoEnable: true,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSecurityhubOrganizationConfigurationExample.overrideLogicalId("example");
  }
}

```

### Central Configuration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SecurityhubFindingAggregator } from "./.gen/providers/aws/securityhub-finding-aggregator";
import { SecurityhubOrganizationAdminAccount } from "./.gen/providers/aws/securityhub-organization-admin-account";
import { SecurityhubOrganizationConfiguration } from "./.gen/providers/aws/securityhub-organization-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new SecurityhubOrganizationAdminAccount(this, "example", {
      adminAccountId: "123456789012",
      dependsOn: [awsOrganizationsOrganizationExample],
    });
    const awsSecurityhubFindingAggregatorExample =
      new SecurityhubFindingAggregator(this, "example_1", {
        dependsOn: [example],
        linkingMode: "ALL_REGIONS",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSecurityhubFindingAggregatorExample.overrideLogicalId("example");
    const awsSecurityhubOrganizationConfigurationExample =
      new SecurityhubOrganizationConfiguration(this, "example_2", {
        autoEnable: false,
        autoEnableStandards: "NONE",
        dependsOn: [awsSecurityhubFindingAggregatorExample],
        organization_configuration: [
          {
            configuration_type: "CENTRAL",
          },
        ],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSecurityhubOrganizationConfigurationExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `autoEnable` - (Required) Whether to automatically enable Security Hub for new accounts in the organization.
* `autoEnableStandards` - (Optional) Whether to automatically enable Security Hub default standards for new member accounts in the organization. By default, this parameter is equal to `DEFAULT`, and new member accounts are automatically enabled with default Security Hub standards. To opt out of enabling default standards for new member accounts, set this parameter equal to `NONE`.
* `organization_configuration` - (Optional) Provides information about the way an organization is configured in Security Hub.

`organization_configuration` supports the following:

* `configurationType` - (Required) Indicates whether the organization uses local or central configuration. If using central configuration, `autoEnable` must be set to `false` and `autoEnableStandards` set to `NONE`. More information can be found in the [documentation for central configuration](https://docs.aws.amazon.com/securityhub/latest/userguide/central-configuration-intro.html). Valid values: `LOCAL`, `CENTRAL`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - AWS Account ID.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `180s`)
* `update` - (Default `180s`)
* `delete` - (Default `180s`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import an existing Security Hub enabled account using the AWS account ID. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SecurityhubOrganizationConfiguration } from "./.gen/providers/aws/securityhub-organization-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    SecurityhubOrganizationConfiguration.generateConfigForImport(
      this,
      "example",
      "123456789012"
    );
  }
}

```

Using `terraform import`, import an existing Security Hub enabled account using the AWS account ID. For example:

```console
% terraform import aws_securityhub_organization_configuration.example 123456789012
```

<!-- cache-key: cdktf-0.20.1 input-2fbc3368dfe1e813d4004abb851ef466468b7d2bea02a2126eea8fae74ad5485 -->