---
subcategory: "ECS (Elastic Container)"
layout: "aws"
page_title: "AWS: aws_ecs_task_definition"
description: |-
  Manages a revision of an ECS task definition.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ecs_task_definition

Manages a revision of an ECS task definition to be used in `aws_ecs_service`.

## Example Usage

### Basic Example

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EcsTaskDefinition } from "./.gen/providers/aws/ecs-task-definition";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new EcsTaskDefinition(this, "service", {
      containerDefinitions: Token.asString(
        Fn.jsonencode([
          {
            cpu: 10,
            essential: true,
            image: "service-first",
            memory: 512,
            name: "first",
            portMappings: [
              {
                containerPort: 80,
                hostPort: 80,
              },
            ],
          },
          {
            cpu: 10,
            essential: true,
            image: "service-second",
            memory: 256,
            name: "second",
            portMappings: [
              {
                containerPort: 443,
                hostPort: 443,
              },
            ],
          },
        ])
      ),
      family: "service",
      placementConstraints: [
        {
          expression:
            "attribute:ecs.availability-zone in [us-west-2a, us-west-2b]",
          type: "memberOf",
        },
      ],
      volume: [
        {
          hostPath: "/ecs/service-storage",
          name: "service-storage",
        },
      ],
    });
  }
}

```

### With AppMesh Proxy

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EcsTaskDefinition } from "./.gen/providers/aws/ecs-task-definition";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new EcsTaskDefinition(this, "service", {
      containerDefinitions: Token.asString(
        Fn.file("task-definitions/service.json")
      ),
      family: "service",
      proxyConfiguration: {
        containerName: "applicationContainerName",
        properties: {
          AppPorts: "8080",
          EgressIgnoredIPs: "169.254.170.2,169.254.169.254",
          IgnoredUID: "1337",
          ProxyEgressPort: Token.asString(15001),
          ProxyIngressPort: Token.asString(15000),
        },
        type: "APPMESH",
      },
    });
  }
}

```

### Example Using `dockerVolumeConfiguration`

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EcsTaskDefinition } from "./.gen/providers/aws/ecs-task-definition";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new EcsTaskDefinition(this, "service", {
      containerDefinitions: Token.asString(
        Fn.file("task-definitions/service.json")
      ),
      family: "service",
      volume: [
        {
          dockerVolumeConfiguration: {
            autoprovision: true,
            driver: "local",
            driverOpts: {
              device: "${" + fs.dnsName + "}:/",
              o:
                "addr=${" +
                fs.dnsName +
                "},rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport",
              type: "nfs",
            },
            scope: "shared",
          },
          name: "service-storage",
        },
      ],
    });
  }
}

```

### Example Using `efsVolumeConfiguration`

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EcsTaskDefinition } from "./.gen/providers/aws/ecs-task-definition";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new EcsTaskDefinition(this, "service", {
      containerDefinitions: Token.asString(
        Fn.file("task-definitions/service.json")
      ),
      family: "service",
      volume: [
        {
          efsVolumeConfiguration: {
            authorizationConfig: {
              accessPointId: test.id,
              iam: "ENABLED",
            },
            fileSystemId: fs.id,
            rootDirectory: "/opt/data",
            transitEncryption: "ENABLED",
            transitEncryptionPort: 2999,
          },
          name: "service-storage",
        },
      ],
    });
  }
}

```

### Example Using `fsxWindowsFileServerVolumeConfiguration`

```terraform
resource "aws_ecs_task_definition" "service" {
  family                = "service"
  container_definitions = file("task-definitions/service.json")

  volume {
    name = "service-storage"

    fsx_windows_file_server_volume_configuration {
      file_system_id = aws_fsx_windows_file_system.test.id
      root_directory = "\\data"

      authorization_config {
        credentials_parameter = aws_secretsmanager_secret_version.test.arn
        domain                = aws_directory_service_directory.test.name
      }
    }
  }
}

resource "aws_secretsmanager_secret_version" "test" {
  secret_id     = aws_secretsmanager_secret.test.id
  secret_string = jsonencode({ username : "admin", password : aws_directory_service_directory.test.password })
}
```

### Example Using `containerDefinitions` and `inferenceAccelerator`

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EcsTaskDefinition } from "./.gen/providers/aws/ecs-task-definition";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new EcsTaskDefinition(this, "test", {
      containerDefinitions:
        '[\n  {\n    "cpu": 10,\n    "command": ["sleep", "10"],\n    "entryPoint": ["/"],\n    "environment": [\n      {"name": "VARNAME", "value": "VARVAL"}\n    ],\n    "essential": true,\n    "image": "jenkins",\n    "memory": 128,\n    "name": "jenkins",\n    "portMappings": [\n      {\n        "containerPort": 80,\n        "hostPort": 8080\n      }\n    ],\n        "resourceRequirements":[\n            {\n                "type":"InferenceAccelerator",\n                "value":"device_1"\n            }\n        ]\n  }\n]\n\n',
      family: "test",
      inferenceAccelerator: [
        {
          deviceName: "device_1",
          deviceType: "eia1.medium",
        },
      ],
    });
  }
}

```

### Example Using `runtimePlatform` and `fargate`

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EcsTaskDefinition } from "./.gen/providers/aws/ecs-task-definition";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new EcsTaskDefinition(this, "test", {
      containerDefinitions:
        '[\n  {\n    "name": "iis",\n    "image": "mcr.microsoft.com/windows/servercore/iis",\n    "cpu": 1024,\n    "memory": 2048,\n    "essential": true\n  }\n]\n\n',
      cpu: Token.asString(1024),
      family: "test",
      memory: Token.asString(2048),
      networkMode: "awsvpc",
      requiresCompatibilities: ["FARGATE"],
      runtimePlatform: {
        cpuArchitecture: "X86_64",
        operatingSystemFamily: "WINDOWS_SERVER_2019_CORE",
      },
    });
  }
}

```

## Argument Reference

~> **NOTE:** Proper escaping is required for JSON field values containing quotes (`"`) such as `environment` values. If directly setting the JSON, they should be escaped as `\"` in the JSON,  e.g., `"value": "I \"love\" escaped quotes"`. If using a Terraform variable value, they should be escaped as `\\\"` in the variable, e.g., `value = "I \\\"love\\\" escaped quotes"` in the variable and `"value": "${var.myvariable}"` in the JSON.

The following arguments are required:

* `containerDefinitions` - (Required) A list of valid [container definitions](http://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_ContainerDefinition.html) provided as a single valid JSON document. Please note that you should only provide values that are part of the container definition document. For a detailed description of what parameters are available, see the [Task Definition Parameters](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html) section from the official [Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide).
* `family` - (Required) A unique name for your task definition.

The following arguments are optional:

* `cpu` - (Optional) Number of cpu units used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
* `executionRoleArn` - (Optional) ARN of the task execution role that the Amazon ECS container agent and the Docker daemon can assume.
* `inferenceAccelerator` - (Optional) Configuration block(s) with Inference Accelerators settings. [Detailed below.](#inference_accelerator)
* `ipcMode` - (Optional) IPC resource namespace to be used for the containers in the task The valid values are `host`, `task`, and `none`.
* `memory` - (Optional) Amount (in MiB) of memory used by the task. If the `requiresCompatibilities` is `FARGATE` this field is required.
* `networkMode` - (Optional) Docker networking mode to use for the containers in the task. Valid values are `none`, `bridge`, `awsvpc`, and `host`.
* `runtimePlatform` - (Optional) Configuration block for [runtime_platform](#runtime_platform) that containers in your task may use.
* `pidMode` - (Optional) Process namespace to use for the containers in the task. The valid values are `host` and `task`.
* `placementConstraints` - (Optional) Configuration block for rules that are taken into consideration during task placement. Maximum number of `placementConstraints` is `10`. [Detailed below](#placement_constraints).
* `proxyConfiguration` - (Optional) Configuration block for the App Mesh proxy. [Detailed below.](#proxy_configuration)
* `ephemeralStorage` - (Optional)  The amount of ephemeral storage to allocate for the task. This parameter is used to expand the total amount of ephemeral storage available, beyond the default amount, for tasks hosted on AWS Fargate. See [Ephemeral Storage](#ephemeral_storage).
* `requiresCompatibilities` - (Optional) Set of launch types required by the task. The valid values are `EC2` and `FARGATE`.
* `skipDestroy` - (Optional) Whether to retain the old revision when the resource is destroyed or replacement is necessary. Default is `false`.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `taskRoleArn` - (Optional) ARN of IAM role that allows your Amazon ECS container task to make calls to other AWS services.
* `trackLatest` - (Optional) Whether should track latest `ACTIVE` task definition on AWS or the one created with the resource stored in state. Default is `false`. Useful in the event the task definition is modified outside of this resource.
* `volume` - (Optional) Configuration block for [volumes](#volume) that containers in your task may use. Detailed below.

### volume

* `dockerVolumeConfiguration` - (Optional) Configuration block to configure a [docker volume](#docker_volume_configuration). Detailed below.
* `efsVolumeConfiguration` - (Optional) Configuration block for an [EFS volume](#efs_volume_configuration). Detailed below.
* `fsxWindowsFileServerVolumeConfiguration` - (Optional) Configuration block for an [FSX Windows File Server volume](#fsx_windows_file_server_volume_configuration). Detailed below.
* `hostPath` - (Optional) Path on the host container instance that is presented to the container. If not set, ECS will create a nonpersistent data volume that starts empty and is deleted after the task has finished.
* `configureAtLaunch` - (Optional) Whether the volume should be configured at launch time. This is used to create Amazon EBS volumes for standalone tasks or tasks created as part of a service. Each task definition revision may only have one volume configured at launch in the volume configuration.
* `name` - (Required) Name of the volume. This name is referenced in the `sourceVolume`
parameter of container definition in the `mountPoints` section.

### docker_volume_configuration

For more information, see [Specifying a Docker volume in your Task Definition Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/docker-volumes.html#specify-volume-config)

* `autoprovision` - (Optional) If this value is `true`, the Docker volume is created if it does not already exist. *Note*: This field is only used if the scope is `shared`.
* `driverOpts` - (Optional) Map of Docker driver specific options.
* `driver` - (Optional) Docker volume driver to use. The driver value must match the driver name provided by Docker because it is used for task placement.
* `labels` - (Optional) Map of custom metadata to add to your Docker volume.
* `scope` - (Optional) Scope for the Docker volume, which determines its lifecycle, either `task` or `shared`.  Docker volumes that are scoped to a `task` are automatically provisioned when the task starts and destroyed when the task stops. Docker volumes that are scoped as `shared` persist after the task stops.

### efs_volume_configuration

For more information, see [Specifying an EFS volume in your Task Definition Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/efs-volumes.html#specify-efs-config)

* `fileSystemId` - (Required) ID of the EFS File System.
* `rootDirectory` - (Optional) Directory within the Amazon EFS file system to mount as the root directory inside the host. If this parameter is omitted, the root of the Amazon EFS volume will be used. Specifying / will have the same effect as omitting this parameter. This argument is ignored when using `authorizationConfig`.
* `transitEncryption` - (Optional) Whether or not to enable encryption for Amazon EFS data in transit between the Amazon ECS host and the Amazon EFS server. Transit encryption must be enabled if Amazon EFS IAM authorization is used. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.
* `transitEncryptionPort` - (Optional) Port to use for transit encryption. If you do not specify a transit encryption port, it will use the port selection strategy that the Amazon EFS mount helper uses.
* `authorizationConfig` - (Optional) Configuration block for [authorization](#authorization_config) for the Amazon EFS file system. Detailed below.

### runtime_platform

* `operatingSystemFamily` - (Optional) If the `requiresCompatibilities` is `FARGATE` this field is required; must be set to a valid option from the [operating system family in the runtime platform](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform) setting
* `cpuArchitecture` - (Optional) Must be set to either `X86_64` or `ARM64`; see [cpu architecture](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#runtime-platform)

#### authorization_config

* `accessPointId` - (Optional) Access point ID to use. If an access point is specified, the root directory value will be relative to the directory set for the access point. If specified, transit encryption must be enabled in the EFSVolumeConfiguration.
* `iam` - (Optional) Whether or not to use the Amazon ECS task IAM role defined in a task definition when mounting the Amazon EFS file system. If enabled, transit encryption must be enabled in the EFSVolumeConfiguration. Valid values: `ENABLED`, `DISABLED`. If this parameter is omitted, the default value of `DISABLED` is used.

### fsx_windows_file_server_volume_configuration

For more information, see [Specifying an FSX Windows File Server volume in your Task Definition Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/tutorial-wfsx-volumes.html)

* `fileSystemId` - (Required) The Amazon FSx for Windows File Server file system ID to use.
* `rootDirectory` - (Required) The directory within the Amazon FSx for Windows File Server file system to mount as the root directory inside the host.
* `authorizationConfig` - (Required) Configuration block for [authorization](#authorization_config) for the Amazon FSx for Windows File Server file system detailed below.

#### authorization_config

* `credentialsParameter` - (Required) The authorization credential option to use. The authorization credential options can be provided using either the Amazon Resource Name (ARN) of an AWS Secrets Manager secret or AWS Systems Manager Parameter Store parameter. The ARNs refer to the stored credentials.
* `domain` - (Required) A fully qualified domain name hosted by an AWS Directory Service Managed Microsoft AD (Active Directory) or self-hosted AD on Amazon EC2.

### placement_constraints

* `expression` -  (Optional) Cluster Query Language expression to apply to the constraint. For more information, see [Cluster Query Language in the Amazon EC2 Container Service Developer Guide](http://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-query-language.html).
* `type` - (Required) Type of constraint. Use `memberOf` to restrict selection to a group of valid candidates. Note that `distinctInstance` is not supported in task definitions.

### proxy_configuration

* `containerName` - (Required) Name of the container that will serve as the App Mesh proxy.
* `properties` - (Required) Set of network configuration parameters to provide the Container Network Interface (CNI) plugin, specified a key-value mapping.
* `type` - (Optional) Proxy type. The default value is `APPMESH`. The only supported value is `APPMESH`.

### ephemeral_storage

* `sizeInGib` - (Required) The total amount, in GiB, of ephemeral storage to set for the task. The minimum supported value is `21` GiB and the maximum supported value is `200` GiB.

### inference_accelerator

* `deviceName` - (Required) Elastic Inference accelerator device name. The deviceName must also be referenced in a container definition as a ResourceRequirement.
* `deviceType` - (Required) Elastic Inference accelerator type to use.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Full ARN of the Task Definition (including both `family` and `revision`).
* `arnWithoutRevision` - ARN of the Task Definition with the trailing `revision` removed. This may be useful for situations where the latest task definition is always desired. If a revision isn't specified, the latest ACTIVE revision is used. See the [AWS documentation](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_StartTask.html#ECS-StartTask-request-taskDefinition) for details.
* `revision` - Revision of the task in a particular family.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ECS Task Definitions using their ARNs. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EcsTaskDefinition } from "./.gen/providers/aws/ecs-task-definition";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    EcsTaskDefinition.generateConfigForImport(
      this,
      "example",
      "arn:aws:ecs:us-east-1:012345678910:task-definition/mytaskfamily:123"
    );
  }
}

```

Using `terraform import`, import ECS Task Definitions using their ARNs. For example:

```console
% terraform import aws_ecs_task_definition.example arn:aws:ecs:us-east-1:012345678910:task-definition/mytaskfamily:123
```

<!-- cache-key: cdktf-0.20.1 input-153332ff5446243fdd9c8653d58b4f49ca2b46d04ccd98e913cf20787414b12a -->