---
subcategory: "RDS (Relational Database)"
layout: "aws"
page_title: "AWS: aws_db_proxy_target"
description: |-
  Provides an RDS DB proxy target resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_db_proxy_target

Provides an RDS DB proxy target resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DbProxy } from "./.gen/providers/aws/db-proxy";
import { DbProxyDefaultTargetGroup } from "./.gen/providers/aws/db-proxy-default-target-group";
import { DbProxyTarget } from "./.gen/providers/aws/db-proxy-target";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DbProxy(this, "example", {
      auth: [
        {
          authScheme: "SECRETS",
          description: "example",
          iamAuth: "DISABLED",
          secretArn: Token.asString(awsSecretsmanagerSecretExample.arn),
        },
      ],
      debugLogging: false,
      engineFamily: "MYSQL",
      idleClientTimeout: 1800,
      name: "example",
      requireTls: true,
      roleArn: Token.asString(awsIamRoleExample.arn),
      tags: {
        Key: "value",
        Name: "example",
      },
      vpcSecurityGroupIds: [Token.asString(awsSecurityGroupExample.id)],
      vpcSubnetIds: [Token.asString(awsSubnetExample.id)],
    });
    const awsDbProxyDefaultTargetGroupExample = new DbProxyDefaultTargetGroup(
      this,
      "example_1",
      {
        connectionPoolConfig: {
          connectionBorrowTimeout: 120,
          initQuery: "SET x=1, y=2",
          maxConnectionsPercent: 100,
          maxIdleConnectionsPercent: 50,
          sessionPinningFilters: ["EXCLUDE_VARIABLE_SETS"],
        },
        dbProxyName: example.name,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDbProxyDefaultTargetGroupExample.overrideLogicalId("example");
    const awsDbProxyTargetExample = new DbProxyTarget(this, "example_2", {
      dbInstanceIdentifier: Token.asString(awsDbInstanceExample.identifier),
      dbProxyName: example.name,
      targetGroupName: Token.asString(awsDbProxyDefaultTargetGroupExample.name),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDbProxyTargetExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `dbProxyName` - (Required, Forces new resource) The name of the DB proxy.
* `targetGroupName` - (Required, Forces new resource) The name of the target group.
* `dbInstanceIdentifier` - (Optional, Forces new resource) DB instance identifier.
* `dbClusterIdentifier` - (Optional, Forces new resource) DB cluster identifier.

**NOTE:** Either `dbInstanceIdentifier` or `dbClusterIdentifier` should be specified and both should not be specified together

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `endpoint` - Hostname for the target RDS DB Instance. Only returned for `RDS_INSTANCE` type.
* `id` - Identifier of  `dbProxyName`, `targetGroupName`, target type (e.g., `RDS_INSTANCE` or `TRACKED_CLUSTER`), and resource identifier separated by forward slashes (`/`).
* `port` - Port for the target RDS DB Instance or Aurora DB Cluster.
* `rdsResourceId` - Identifier representing the DB Instance or DB Cluster target.
* `targetArn` - Amazon Resource Name (ARN) for the DB instance or DB cluster. Currently not returned by the RDS API.
* `trackedClusterId` - DB Cluster identifier for the DB Instance target. Not returned unless manually importing an `RDS_INSTANCE` target that is part of a DB Cluster.
* `type` - Type of targetE.g., `RDS_INSTANCE` or `TRACKED_CLUSTER`

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import RDS DB Proxy Targets using the `dbProxyName`, `targetGroupName`, target type (such as `RDS_INSTANCE` or `TRACKED_CLUSTER`), and resource identifier separated by forward slashes (`/`). For example:

Instances:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DbProxyTarget } from "./.gen/providers/aws/db-proxy-target";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DbProxyTarget.generateConfigForImport(
      this,
      "example",
      "example-proxy/default/RDS_INSTANCE/example-instance"
    );
  }
}

```

Provisioned Clusters:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DbProxyTarget } from "./.gen/providers/aws/db-proxy-target";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DbProxyTarget.generateConfigForImport(
      this,
      "example",
      "example-proxy/default/TRACKED_CLUSTER/example-cluster"
    );
  }
}

```

**Using `terraform import` to import** RDS DB Proxy Targets using the `dbProxyName`, `targetGroupName`, target type (such as `RDS_INSTANCE` or `TRACKED_CLUSTER`), and resource identifier separated by forward slashes (`/`). For example:

Instances:

```console
% terraform import aws_db_proxy_target.example example-proxy/default/RDS_INSTANCE/example-instance
```

Provisioned Clusters:

```console
% terraform import aws_db_proxy_target.example example-proxy/default/TRACKED_CLUSTER/example-cluster
```

<!-- cache-key: cdktf-0.20.8 input-7434cf3969d924cf4dd540c487f947d3059ac1146283da81333dc7dd742fe6ae -->