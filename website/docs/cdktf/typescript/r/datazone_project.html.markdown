---
subcategory: "DataZone"
layout: "aws"
page_title: "AWS: aws_datazone_project"
description: |-
  Terraform resource for managing an Amazon DataZone Project.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_datazone_project

Terraform resource for managing an AWS DataZone Project.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DatazoneProject } from "./.gen/providers/aws/datazone-project";
interface MyConfig {
  domainIdentifier: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new DatazoneProject(this, "test", {
      description: "desc",
      domain_id: awsDatazoneDomainTest.id,
      glossaryTerms: ["2N8w6XJCwZf"],
      name: "name",
      skipDeletionCheck: true,
      domainIdentifier: config.domainIdentifier,
    });
  }
}

```

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DatazoneProject } from "./.gen/providers/aws/datazone-project";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new DatazoneProject(this, "test", {
      domainIdentifier: Token.asString(awsDatazoneDomainTest.id),
      name: "name",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `domainIdentifier` - (Required) Identifier of domain which the project is part of. Must follow the regex of ^dzd[-_][a-zA-Z0-9_-]{1,36}$.
* `name` - (Required) Name of the project. Must follow the regex of ^[\w -]+$. and have a length of at most 64.

The following arguments are optional:

* `skipDeletionCheck` - (Optional) Optional flag to delete all child entities within the project.
* `description` - (Optional) Description of project.
* `glossaryTerms` - (Optional) List of glossary terms that can be used in the project. The list cannot be empty or include over 20 values. Each value must follow the regex of [a-zA-Z0-9_-]{1,36}$.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `createdBy` - Creator of the project.
* `domainId` - Id of the project's DataZone domain.
* `id` - Id of the project.
* `name` - Name of the project.
* `createdAt` - Timestamp of when the project was made.
* `description` - Description of the project.
* `failureReasons` - List of error messages if operation cannot be completed.
* `glossaryTerms` - Business glossary terms that can be used in the project.
* `lastUpdatedAt` - Timestamp of when the project was last updated.
* `projectStatus` -  Enum that conveys state of project. Can be ACTIVE, DELETING, or DELETE_FAILED.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `10m`)
* `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import DataZone Project using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DatazoneProject } from "./.gen/providers/aws/datazone-project";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DatazoneProject.generateConfigForImport(this, "example", "projectid123");
  }
}

```

Using `terraform import`, import DataZone Project using the `id`. For example:

```console
% terraform import aws_datazone_project.example projectid123
```

<!-- cache-key: cdktf-0.20.1 input-b1915e94278794719f1112d68bd5da3cb56f4c6321d788ef7acf81ce24be9e41 -->