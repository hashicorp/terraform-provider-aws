---
subcategory: "EKS (Elastic Kubernetes)"
layout: "aws"
page_title: "AWS: aws_eks_pod_identity_association"
description: |-
  Terraform resource for managing an AWS EKS (Elastic Kubernetes) Pod Identity Association.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_eks_pod_identity_association

Terraform resource for managing an AWS EKS (Elastic Kubernetes) Pod Identity Association.

Creates an EKS Pod Identity association between a service account in an Amazon EKS cluster and an IAM role with EKS Pod Identity. Use EKS Pod Identity to give temporary IAM credentials to pods and the credentials are rotated automatically.

Amazon EKS Pod Identity associations provide the ability to manage credentials for your applications, similar to the way that EC2 instance profiles provide credentials to Amazon EC2 instances.

If a pod uses a service account that has an association, Amazon EKS sets environment variables in the containers of the pod. The environment variables configure the Amazon Web Services SDKs, including the Command Line Interface, to use the EKS Pod Identity credentials.

Pod Identity is a simpler method than IAM roles for service accounts, as this method doesnâ€™t use OIDC identity providers. Additionally, you can configure a role for Pod Identity once, and reuse it across clusters.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { EksPodIdentityAssociation } from "./.gen/providers/aws/eks-pod-identity-association";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicyAttachment } from "./.gen/providers/aws/iam-role-policy-attachment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const assumeRole = new DataAwsIamPolicyDocument(this, "assume_role", {
      statement: [
        {
          actions: ["sts:AssumeRole", "sts:TagSession"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["pods.eks.amazonaws.com"],
              type: "Service",
            },
          ],
        },
      ],
    });
    const example = new IamRole(this, "example", {
      assumeRolePolicy: Token.asString(assumeRole.json),
      name: "eks-pod-identity-example",
    });
    new IamRolePolicyAttachment(this, "example_s3", {
      policyArn: "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
      role: example.name,
    });
    const awsEksPodIdentityAssociationExample = new EksPodIdentityAssociation(
      this,
      "example_3",
      {
        clusterName: Token.asString(awsEksClusterExample.name),
        namespace: "example",
        roleArn: example.arn,
        serviceAccount: "example-sa",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsEksPodIdentityAssociationExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `clusterName` - (Required) The name of the cluster to create the association in.
* `namespace` - (Required) The name of the Kubernetes namespace inside the cluster to create the association in. The service account and the pods that use the service account must be in this namespace.
* `roleArn` - (Required) The Amazon Resource Name (ARN) of the IAM role to associate with the service account. The EKS Pod Identity agent manages credentials to assume this role for applications in the containers in the pods that use this service account.
* `serviceAccount` - (Required) The name of the Kubernetes service account inside the cluster to associate the IAM credentials with.

The following arguments are optional:

* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `associationArn` - The Amazon Resource Name (ARN) of the association.
* `associationId` - The ID of the association.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import EKS (Elastic Kubernetes) Pod Identity Association using the `clusterName` and `associationId` separated by a comma (`,`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EksPodIdentityAssociation } from "./.gen/providers/aws/eks-pod-identity-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    EksPodIdentityAssociation.generateConfigForImport(
      this,
      "example",
      "example,a-12345678"
    );
  }
}

```

Using `terraform import`, import EKS (Elastic Kubernetes) Pod Identity Association using the `clusterName` and `associationId` separated by a comma (`,`). For example:

```console
% terraform import aws_eks_pod_identity_association.example example,a-12345678
```

<!-- cache-key: cdktf-0.20.8 input-9067c06270d943e524beb400f69d69abd7c769f992d72bfd5bafff1e7b1db7b2 -->