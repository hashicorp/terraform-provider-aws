---
subcategory: "AppStream 2.0"
layout: "aws"
page_title: "AWS: aws_appstream_user"
description: |-
  Provides an AppStream user
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_appstream_user

Provides an AppStream user.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppstreamUser } from "./.gen/providers/aws/appstream-user";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AppstreamUser(this, "example", {
      authenticationType: "USERPOOL",
      firstName: "FIRST NAME",
      lastName: "LAST NAME",
      userName: "EMAIL",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `authenticationType` - (Required) Authentication type for the user. You must specify USERPOOL. Valid values: `API`, `SAML`, `USERPOOL`
* `userName` - (Required) Email address of the user.

The following arguments are optional:

* `enabled` - (Optional) Whether the user in the user pool is enabled.
* `firstName` - (Optional) First name, or given name, of the user.
* `lastName` - (Optional) Last name, or surname, of the user.
* `sendEmailNotification` - (Optional) Send an email notification.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the appstream user.
* `createdTime` - Date and time, in UTC and extended RFC 3339 format, when the user was created.
* `id` - Unique ID of the appstream user.
* `status` - Status of the user in the user pool.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_appstream_user` using the `userName` and `authenticationType` separated by a slash (`/`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppstreamUser } from "./.gen/providers/aws/appstream-user";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    AppstreamUser.generateConfigForImport(
      this,
      "example",
      "UserName/AuthenticationType"
    );
  }
}

```

Using `terraform import`, import `aws_appstream_user` using the `userName` and `authenticationType` separated by a slash (`/`). For example:

```console
% terraform import aws_appstream_user.example UserName/AuthenticationType
```

<!-- cache-key: cdktf-0.20.8 input-0ae35608b7c30b00bd83bdb13090e3e240414ae668bedb32d7e62c4aff37c502 -->