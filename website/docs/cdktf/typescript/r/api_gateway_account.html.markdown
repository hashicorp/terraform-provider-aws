---
subcategory: "API Gateway"
layout: "aws"
page_title: "AWS: aws_api_gateway_account"
description: |-
  Provides a settings of an API Gateway Account.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_api_gateway_account

Provides a settings of an API Gateway Account. Settings is applied region-wide per `provider` block.

-> **Note:** As there is no API method for deleting account settings or resetting it to defaults, destroying this resource will keep your account settings intact

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ApiGatewayAccount } from "./.gen/providers/aws/api-gateway-account";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicy } from "./.gen/providers/aws/iam-role-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const assumeRole = new DataAwsIamPolicyDocument(this, "assume_role", {
      statement: [
        {
          actions: ["sts:AssumeRole"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["apigateway.amazonaws.com"],
              type: "Service",
            },
          ],
        },
      ],
    });
    const cloudwatch = new DataAwsIamPolicyDocument(this, "cloudwatch", {
      statement: [
        {
          actions: [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogGroups",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "logs:GetLogEvents",
            "logs:FilterLogEvents",
          ],
          effect: "Allow",
          resources: ["*"],
        },
      ],
    });
    const awsIamRoleCloudwatch = new IamRole(this, "cloudwatch_2", {
      assumeRolePolicy: Token.asString(assumeRole.json),
      name: "api_gateway_cloudwatch_global",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRoleCloudwatch.overrideLogicalId("cloudwatch");
    const awsIamRolePolicyCloudwatch = new IamRolePolicy(this, "cloudwatch_3", {
      name: "default",
      policy: Token.asString(cloudwatch.json),
      role: Token.asString(awsIamRoleCloudwatch.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyCloudwatch.overrideLogicalId("cloudwatch");
    new ApiGatewayAccount(this, "demo", {
      cloudwatchRoleArn: Token.asString(awsIamRoleCloudwatch.arn),
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `cloudwatchRoleArn` - (Optional) ARN of an IAM role for CloudWatch (to allow logging & monitoring). See more [in AWS Docs](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-stage-settings.html#how-to-stage-settings-console). Logging & monitoring can be enabled/disabled and otherwise tuned on the API Gateway Stage level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `apiKeyVersion` - The version of the API keys used for the account.
* `throttleSettings` - Account-Level throttle settings. See exported fields below.
* `features` - A list of features supported for the account.

`throttleSettings` block exports the following:

* `burstLimit` - Absolute maximum number of times API Gateway allows the API to be called per second (RPS).
* `rateLimit` - Number of times API Gateway allows the API to be called per second on average (RPS).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import API Gateway Accounts using the word `api-gateway-account`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ApiGatewayAccount } from "./.gen/providers/aws/api-gateway-account";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ApiGatewayAccount.generateConfigForImport(
      this,
      "demo",
      "api-gateway-account"
    );
  }
}

```

Using `terraform import`, import API Gateway Accounts using the word `api-gateway-account`. For example:

```console
% terraform import aws_api_gateway_account.demo api-gateway-account
```

<!-- cache-key: cdktf-0.20.8 input-2c3031685ea1cacb5723c6c52399155d732bc5bb2d7fcfa71a3cc55a2bf24db5 -->