---
subcategory: "CodeDeploy"
layout: "aws"
page_title: "AWS: aws_codedeploy_app"
description: |-
  Provides a CodeDeploy application.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_codedeploy_app

Provides a CodeDeploy application to be used as a basis for deployments

## Example Usage

### ECS Application

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CodedeployApp } from "./.gen/providers/aws/codedeploy-app";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new CodedeployApp(this, "example", {
      computePlatform: "ECS",
      name: "example",
    });
  }
}

```

### Lambda Application

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CodedeployApp } from "./.gen/providers/aws/codedeploy-app";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new CodedeployApp(this, "example", {
      computePlatform: "Lambda",
      name: "example",
    });
  }
}

```

### Server Application

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CodedeployApp } from "./.gen/providers/aws/codedeploy-app";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new CodedeployApp(this, "example", {
      computePlatform: "Server",
      name: "example",
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The name of the application.
* `computePlatform` - (Optional) The compute platform can either be `ECS`, `Lambda`, or `Server`. Default is `Server`.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The ARN of the CodeDeploy application.
* `applicationId` - The application ID.
* `id` - Amazon's assigned ID for the application.
* `name` - The application's name.
* `githubAccountName` - The name for a connection to a GitHub account.
* `linkedToGithub` - Whether the user has authenticated with GitHub for the specified application.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import CodeDeploy Applications using the `name`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CodedeployApp } from "./.gen/providers/aws/codedeploy-app";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    CodedeployApp.generateConfigForImport(this, "example", "my-application");
  }
}

```

Using `terraform import`, import CodeDeploy Applications using the `name`. For example:

```console
% terraform import aws_codedeploy_app.example my-application
```

<!-- cache-key: cdktf-0.20.8 input-00b9fbbd35972d7215984367937bb47e7c6439d5c41831dac0b563a419c59962 -->