---
subcategory: "CloudFront"
layout: "aws"
page_title: "AWS: aws_cloudfront_origin_access_identity"
description: |-
  Provides a CloudFront origin access identity.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cloudfront_origin_access_identity

Creates an Amazon CloudFront origin access identity.

For information about CloudFront distributions, see the
[Amazon CloudFront Developer Guide][1]. For more information on generating
origin access identities, see
[Using an Origin Access Identity to Restrict Access to Your Amazon S3 Content][2].

## Example Usage

The following example below creates a CloudFront origin access identity.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudfrontOriginAccessIdentity } from "./.gen/providers/aws/cloudfront-origin-access-identity";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new CloudfrontOriginAccessIdentity(this, "example", {
      comment: "Some comment",
    });
  }
}

```

## Argument Reference

* `comment` (Optional) - An optional comment for the origin access identity.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The identifier for the distribution. For example: `EDFDVBD632BHDS5`.
* `callerReference` - Internal value used by CloudFront to allow future
   updates to the origin access identity.
* `cloudfrontAccessIdentityPath` - A shortcut to the full path for the
   origin access identity to use in CloudFront, see below.
* `etag` - The current version of the origin access identity's information.
   For example: `E2QWRUHAPOMQZL`.
* `iamArn` - A pre-generated ARN for use in S3 bucket policies (see below).
   Example: `arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity
   E2QWRUHAPOMQZL`.
* `s3CanonicalUserId` - The Amazon S3 canonical user ID for the origin
   access identity, which you use when giving the origin access identity read
   permission to an object in Amazon S3.

## Using With CloudFront

Normally, when referencing an origin access identity in CloudFront, you need to
prefix the ID with the `origin-access-identity/cloudfront/` special path.
The `cloudfrontAccessIdentityPath` allows this to be circumvented.
The below snippet demonstrates use with the `s3OriginConfig` structure for the
[`aws_cloudfront_distribution`][3] resource:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudfrontDistribution } from "./.gen/providers/aws/cloudfront-distribution";
interface MyConfig {
  domainName: any;
  originId: any;
  defaultCacheBehavior: any;
  enabled: any;
  restrictions: any;
  viewerCertificate: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new CloudfrontDistribution(this, "example", {
      origin: [
        {
          s3OriginConfig: {
            originAccessIdentity: Token.asString(
              awsCloudfrontOriginAccessIdentityExample.cloudfrontAccessIdentityPath
            ),
          },
          domainName: config.domainName,
          originId: config.originId,
        },
      ],
      defaultCacheBehavior: config.defaultCacheBehavior,
      enabled: config.enabled,
      restrictions: config.restrictions,
      viewerCertificate: config.viewerCertificate,
    });
  }
}

```

### Updating your bucket policy

Note that the AWS API may translate the `s3CanonicalUserId` `CanonicalUser`
principal into an `AWS` IAM ARN principal when supplied in an
[`aws_s3_bucket`][4] bucket policy, causing spurious diffs in Terraform. If
you see this behavior, use the `iamArn` instead:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { S3BucketPolicy } from "./.gen/providers/aws/s3-bucket-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const s3Policy = new DataAwsIamPolicyDocument(this, "s3_policy", {
      statement: [
        {
          actions: ["s3:GetObject"],
          principals: [
            {
              identifiers: [example.iamArn],
              type: "AWS",
            },
          ],
          resources: ["${" + awsS3BucketExample.arn + "}/*"],
        },
      ],
    });
    new S3BucketPolicy(this, "example", {
      bucket: Token.asString(awsS3BucketExample.id),
      policy: Token.asString(s3Policy.json),
    });
  }
}

```

[1]: http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Introduction.html
[2]: http://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html
[3]: /docs/providers/aws/r/cloudfront_distribution.html
[4]: /docs/providers/aws/r/s3_bucket.html

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Cloudfront Origin Access Identities using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudfrontOriginAccessIdentity } from "./.gen/providers/aws/cloudfront-origin-access-identity";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    CloudfrontOriginAccessIdentity.generateConfigForImport(
      this,
      "originAccess",
      "E74FTE3AEXAMPLE"
    );
  }
}

```

Using `terraform import`, import Cloudfront Origin Access Identities using the `id`. For example:

```console
% terraform import aws_cloudfront_origin_access_identity.origin_access E74FTE3AEXAMPLE
```

<!-- cache-key: cdktf-0.20.1 input-c8db3d8043e295b534d10a38305c84400f283c41376e39cd1df56d209827b719 -->