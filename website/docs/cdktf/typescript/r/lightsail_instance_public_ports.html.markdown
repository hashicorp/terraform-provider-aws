---
subcategory: "Lightsail"
layout: "aws"
page_title: "AWS: aws_lightsail_instance_public_ports"
description: |-
  Manages public ports for a Lightsail instance.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_lightsail_instance_public_ports

Manages public ports for a Lightsail instance. Use this resource to open ports for a specific Amazon Lightsail instance and specify the IP addresses allowed to connect to the instance through the ports and the protocol.

-> See [What is Amazon Lightsail?](https://lightsail.aws.amazon.com/ls/docs/getting-started/article/what-is-amazon-lightsail) for more information.

~> **Note:** Lightsail is currently only supported in a limited number of AWS Regions, please see ["Regions and Availability Zones in Amazon Lightsail"](https://lightsail.aws.amazon.com/ls/docs/overview/article/understanding-regions-and-availability-zones-in-amazon-lightsail) for more details.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsAvailabilityZones } from "./.gen/providers/aws/data-aws-availability-zones";
import { LightsailInstance } from "./.gen/providers/aws/lightsail-instance";
import { LightsailInstancePublicPorts } from "./.gen/providers/aws/lightsail-instance-public-ports";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const available = new DataAwsAvailabilityZones(this, "available", {
      filter: [
        {
          name: "opt-in-status",
          values: ["opt-in-not-required"],
        },
      ],
      state: "available",
    });
    const example = new LightsailInstance(this, "example", {
      availabilityZone: Token.asString(Fn.lookupNested(available.names, ["0"])),
      blueprintId: "amazon_linux_2",
      bundleId: "nano_3_0",
      name: "example-instance",
    });
    const awsLightsailInstancePublicPortsExample =
      new LightsailInstancePublicPorts(this, "example_2", {
        instanceName: example.name,
        portInfo: [
          {
            fromPort: 80,
            protocol: "tcp",
            toPort: 80,
          },
          {
            cidrs: ["192.168.1.0/24"],
            fromPort: 443,
            protocol: "tcp",
            toPort: 443,
          },
        ],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsLightsailInstancePublicPortsExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `instanceName` - (Required) Name of the instance for which to open ports.
* `portInfo` - (Required) Descriptor of the ports to open for the specified instance. AWS closes all currently open ports that are not included in this argument. See [`portInfo` Block](#port_info-block) for details.

The following arguments are optional:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).

### `portInfo` Block

The `portInfo` configuration block supports the following arguments:

* `fromPort` - (Required) First port in a range of open ports on an instance. See [PortInfo](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_PortInfo.html) for details.
* `protocol` - (Required) IP protocol name. Valid values: `tcp`, `all`, `udp`, `icmp`, `icmpv6`. See [PortInfo](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_PortInfo.html) for details.
* `toPort` - (Required) Last port in a range of open ports on an instance. See [PortInfo](https://docs.aws.amazon.com/lightsail/2016-11-28/api-reference/API_PortInfo.html) for details.
* `cidrListAliases` - (Optional) Set of CIDR aliases that define access for a preconfigured range of IP addresses.
* `cidrs` - (Optional) Set of IPv4 addresses or ranges of IPv4 addresses (in CIDR notation) that are allowed to connect to an instance through the ports, and the protocol.
* `ipv6Cidrs` - (Optional) Set of IPv6 addresses or ranges of IPv6 addresses (in CIDR notation) that are allowed to connect to an instance through the ports, and the protocol.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - ID of the resource.

<!-- cache-key: cdktf-0.20.8 input-47c52b5d7b027e1958dd8588863cc656925b7c03b56544e46eb0fd14bf5cd761 -->