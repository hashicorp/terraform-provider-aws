---
subcategory: "Athena"
layout: "aws"
page_title: "AWS: aws_athena_workgroup"
description: |-
  Manages an Athena Workgroup.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_athena_workgroup

Provides an Athena Workgroup.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AthenaWorkgroup } from "./.gen/providers/aws/athena-workgroup";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AthenaWorkgroup(this, "example", {
      configuration: {
        enforceWorkgroupConfiguration: true,
        publishCloudwatchMetricsEnabled: true,
        resultConfiguration: {
          encryptionConfiguration: {
            encryptionOption: "SSE_KMS",
            kmsKeyArn: Token.asString(awsKmsKeyExample.arn),
          },
          outputLocation: "s3://${" + awsS3BucketExample.bucket + "}/output/",
        },
      },
      name: "example",
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) Name of the workgroup.
* `configuration` - (Optional) Configuration block with various settings for the workgroup. Documented below.
* `description` - (Optional) Description of the workgroup.
* `state` - (Optional) State of the workgroup. Valid values are `DISABLED` or `ENABLED`. Defaults to `ENABLED`.
* `tags` - (Optional) Key-value map of resource tags for the workgroup. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `forceDestroy` - (Optional) Option to delete the workgroup and its contents even if the workgroup contains any named queries.

### Configuration

* `bytesScannedCutoffPerQuery` - (Optional) Integer for the upper data usage limit (cutoff) for the amount of bytes a single query in a workgroup is allowed to scan. Must be at least `10485760`.
* `enforceWorkgroupConfiguration` - (Optional) Boolean whether the settings for the workgroup override client-side settings. For more information, see [Workgroup Settings Override Client-Side Settings](https://docs.aws.amazon.com/athena/latest/ug/workgroups-settings-override.html). Defaults to `true`.
* `engineVersion` - (Optional) Configuration block for the Athena Engine Versioning. For more information, see [Athena Engine Versioning](https://docs.aws.amazon.com/athena/latest/ug/engine-versions.html). See [Engine Version](#engine-version) below.
* `executionRole` - (Optional) Role used in a notebook session for accessing the user's resources.
* `publishCloudwatchMetricsEnabled` - (Optional) Boolean whether Amazon CloudWatch metrics are enabled for the workgroup. Defaults to `true`.
* `resultConfiguration` - (Optional) Configuration block with result settings. See [Result Configuration](#result-configuration) below.
* `requesterPaysEnabled` - (Optional) If set to true , allows members assigned to a workgroup to reference Amazon S3 Requester Pays buckets in queries. If set to false , workgroup members cannot query data from Requester Pays buckets, and queries that retrieve data from Requester Pays buckets cause an error. The default is false . For more information about Requester Pays buckets, see [Requester Pays Buckets](https://docs.aws.amazon.com/AmazonS3/latest/dev/RequesterPaysBuckets.html) in the Amazon Simple Storage Service Developer Guide.

#### Engine Version

* `selectedEngineVersion` - (Optional) Requested engine version. Defaults to `AUTO`.

#### Result Configuration

* `encryptionConfiguration` - (Optional) Configuration block with encryption settings. See [Encryption Configuration](#encryption-configuration) below.
* `aclConfiguration` - (Optional) That an Amazon S3 canned ACL should be set to control ownership of stored query results. See [ACL Configuration](#acl-configuration) below.
* `expectedBucketOwner` - (Optional) AWS account ID that you expect to be the owner of the Amazon S3 bucket.
* `outputLocation` - (Optional) Location in Amazon S3 where your query results are stored, such as `s3://path/to/query/bucket/`. For more information, see [Queries and Query Result Files](https://docs.aws.amazon.com/athena/latest/ug/querying.html).

##### ACL Configuration

* `s3AclOption` - (Required) Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is `BUCKET_OWNER_FULL_CONTROL`.

##### Encryption Configuration

* `encryptionOption` - (Required) Whether Amazon S3 server-side encryption with Amazon S3-managed keys (`SSE_S3`), server-side encryption with KMS-managed keys (`SSE_KMS`), or client-side encryption with KMS-managed keys (`CSE_KMS`) is used. If a query runs in a workgroup and the workgroup overrides client-side settings, then the workgroup's setting for encryption is used. It specifies whether query results must be encrypted, for all queries that run in this workgroup.
* `kmsKeyArn` - (Optional) For `SSE_KMS` and `CSE_KMS`, this is the KMS key ARN.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the workgroup
* `configuration` - Configuration block with various settings for the workgroup
    * `engineVersion` - Configuration block for the Athena Engine Versioning
        * `effectiveEngineVersion` -  The engine version on which the query runs. If `selectedEngineVersion` is set to `AUTO`, the effective engine version is chosen by Athena.
* `id` - Workgroup name
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Athena Workgroups using their name. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AthenaWorkgroup } from "./.gen/providers/aws/athena-workgroup";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    AthenaWorkgroup.generateConfigForImport(this, "example", "example");
  }
}

```

Using `terraform import`, import Athena Workgroups using their name. For example:

```console
% terraform import aws_athena_workgroup.example example
```

<!-- cache-key: cdktf-0.20.8 input-c130731e53530304eb8b07566132f6c077365dfdbf8f6396690cec4300991bd4 -->