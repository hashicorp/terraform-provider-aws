---
subcategory: "Auto Scaling"
layout: "aws"
page_title: "AWS: aws_autoscaling_group_tag"
description: |-
  Manages an individual Autoscaling Group tag
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_autoscaling_group_tag

Manages an individual Autoscaling Group (ASG) tag. This resource should only be used in cases where ASGs are created outside Terraform (e.g., ASGs implicitly created by EKS Node Groups).

~> **NOTE:** This tagging resource should not be combined with the Terraform resource for managing the parent resource. For example, using `aws_autoscaling_group` and `aws_autoscaling_group_tag` to manage tags of the same ASG will cause a perpetual difference where the `aws_autoscaling_group` resource will try to remove the tag being added by the `aws_autoscaling_group_tag` resource.

~> **NOTE:** This tagging resource does not use the [provider `ignoreTags` configuration](/docs/providers/aws/index.html#ignore_tags).

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformIterator, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AutoscalingGroupTagA } from "./.gen/providers/aws/autoscaling-group-tag";
import { EksNodeGroup } from "./.gen/providers/aws/eks-node-group";
interface MyConfig {
  nodeRoleArn: any;
  scalingConfig: any;
  subnetIds: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const exampleForEachIterator = TerraformIterator.fromList(
      Token.asAny(
        Fn.toset(
          "${[ for asg in ${" +
            Fn.flatten(
              "${[ for resources in ${" +
                awsEksNodeGroupExample.resources +
                "} : resources.autoscaling_groups]}"
            ) +
            "} : asg.name]}"
        )
      )
    );
    new AutoscalingGroupTagA(this, "example", {
      autoscalingGroupName: Token.asString(exampleForEachIterator.value),
      tag: {
        key: "k8s.io/cluster-autoscaler/node-template/label/eks.amazonaws.com/capacityType",
        propagateAtLaunch: false,
        value: "SPOT",
      },
      forEach: exampleForEachIterator,
    });
    const awsEksNodeGroupExample = new EksNodeGroup(this, "example_1", {
      clusterName: "example",
      nodeGroupName: "example",
      nodeRoleArn: config.nodeRoleArn,
      scalingConfig: config.scalingConfig,
      subnetIds: config.subnetIds,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsEksNodeGroupExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `autoscalingGroupName` - (Required) Name of the Autoscaling Group to apply the tag to.
* `tag` - (Required) Tag to create. The `tag` block is documented below.

The `tag` block supports the following arguments:

* `key` - (Required) Tag name.
* `value` - (Required) Tag value.
* `propagateAtLaunch` - (Required) Whether to propagate the tags to instances launched by the ASG.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - ASG name and key, separated by a comma (`,`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_autoscaling_group_tag` using the ASG name and key, separated by a comma (`,`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AutoscalingGroupTagA } from "./.gen/providers/aws/autoscaling-group-tag";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    AutoscalingGroupTagA.generateConfigForImport(
      this,
      "example",
      "asg-example,k8s.io/cluster-autoscaler/node-template/label/eks.amazonaws.com/capacityType"
    );
  }
}

```

Using `terraform import`, import `aws_autoscaling_group_tag` using the ASG name and key, separated by a comma (`,`). For example:

```console
% terraform import aws_autoscaling_group_tag.example asg-example,k8s.io/cluster-autoscaler/node-template/label/eks.amazonaws.com/capacityType
```

<!-- cache-key: cdktf-0.20.8 input-6d03164dc8f7802d7fed35fe5527ff2cb206eef4734529984f76a9f8bdd4520e -->