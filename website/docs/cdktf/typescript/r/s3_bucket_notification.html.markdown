---
subcategory: "S3 (Simple Storage)"
layout: "aws"
page_title: "AWS: aws_s3_bucket_notification"
description: |-
  Manages a S3 Bucket Notification Configuration
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_s3_bucket_notification

Manages a S3 Bucket Notification Configuration. For additional information, see the [Configuring S3 Event Notifications section in the Amazon S3 Developer Guide](https://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html).

~> **NOTE:** S3 Buckets only support a single notification configuration resource. Declaring multiple `aws_s3_bucket_notification` resources to the same S3 Bucket will cause a perpetual difference in configuration. This resource will overwrite any existing event notifications configured for the S3 bucket it's associated with. See the example "Trigger multiple Lambda functions" for an option of how to configure multiple triggers within this resource.

-> This resource cannot be used with S3 directory buckets.

## Example Usage

### Add notification configuration to SNS Topic

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketNotification } from "./.gen/providers/aws/s3-bucket-notification";
import { SnsTopic } from "./.gen/providers/aws/sns-topic";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const bucket = new S3Bucket(this, "bucket", {
      bucket: "your-bucket-name",
    });
    const topic = new DataAwsIamPolicyDocument(this, "topic", {
      statement: [
        {
          actions: ["SNS:Publish"],
          condition: [
            {
              test: "ArnLike",
              values: [bucket.arn],
              variable: "aws:SourceArn",
            },
          ],
          effect: "Allow",
          principals: [
            {
              identifiers: ["s3.amazonaws.com"],
              type: "Service",
            },
          ],
          resources: ["arn:aws:sns:*:*:s3-event-notification-topic"],
        },
      ],
    });
    const awsSnsTopicTopic = new SnsTopic(this, "topic_2", {
      name: "s3-event-notification-topic",
      policy: Token.asString(topic.json),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSnsTopicTopic.overrideLogicalId("topic");
    new S3BucketNotification(this, "bucket_notification", {
      bucket: bucket.id,
      topic: [
        {
          events: ["s3:ObjectCreated:*"],
          filterSuffix: ".log",
          topicArn: Token.asString(awsSnsTopicTopic.arn),
        },
      ],
    });
  }
}

```

### Add notification configuration to SQS Queue

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketNotification } from "./.gen/providers/aws/s3-bucket-notification";
import { SqsQueue } from "./.gen/providers/aws/sqs-queue";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const bucket = new S3Bucket(this, "bucket", {
      bucket: "your-bucket-name",
    });
    const queue = new DataAwsIamPolicyDocument(this, "queue", {
      statement: [
        {
          actions: ["sqs:SendMessage"],
          condition: [
            {
              test: "ArnEquals",
              values: [bucket.arn],
              variable: "aws:SourceArn",
            },
          ],
          effect: "Allow",
          principals: [
            {
              identifiers: ["*"],
              type: "*",
            },
          ],
          resources: ["arn:aws:sqs:*:*:s3-event-notification-queue"],
        },
      ],
    });
    const awsSqsQueueQueue = new SqsQueue(this, "queue_2", {
      name: "s3-event-notification-queue",
      policy: Token.asString(queue.json),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSqsQueueQueue.overrideLogicalId("queue");
    new S3BucketNotification(this, "bucket_notification", {
      bucket: bucket.id,
      queue: [
        {
          events: ["s3:ObjectCreated:*"],
          filterSuffix: ".log",
          queueArn: Token.asString(awsSqsQueueQueue.arn),
        },
      ],
    });
  }
}

```

### Add notification configuration to Lambda Function

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { LambdaFunction } from "./.gen/providers/aws/lambda-function";
import { LambdaPermission } from "./.gen/providers/aws/lambda-permission";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketNotification } from "./.gen/providers/aws/s3-bucket-notification";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const bucket = new S3Bucket(this, "bucket", {
      bucket: "your-bucket-name",
    });
    const assumeRole = new DataAwsIamPolicyDocument(this, "assume_role", {
      statement: [
        {
          actions: ["sts:AssumeRole"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["lambda.amazonaws.com"],
              type: "Service",
            },
          ],
        },
      ],
    });
    const iamForLambda = new IamRole(this, "iam_for_lambda", {
      assumeRolePolicy: Token.asString(assumeRole.json),
      name: "iam_for_lambda",
    });
    const func = new LambdaFunction(this, "func", {
      filename: "your-function.zip",
      functionName: "example_lambda_name",
      handler: "exports.example",
      role: iamForLambda.arn,
      runtime: "go1.x",
    });
    const allowBucket = new LambdaPermission(this, "allow_bucket", {
      action: "lambda:InvokeFunction",
      functionName: func.arn,
      principal: "s3.amazonaws.com",
      sourceArn: bucket.arn,
      statementId: "AllowExecutionFromS3Bucket",
    });
    new S3BucketNotification(this, "bucket_notification", {
      bucket: bucket.id,
      dependsOn: [allowBucket],
      lambdaFunction: [
        {
          events: ["s3:ObjectCreated:*"],
          filterPrefix: "AWSLogs/",
          filterSuffix: ".log",
          lambdaFunctionArn: func.arn,
        },
      ],
    });
  }
}

```

### Trigger multiple Lambda functions

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { LambdaFunction } from "./.gen/providers/aws/lambda-function";
import { LambdaPermission } from "./.gen/providers/aws/lambda-permission";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketNotification } from "./.gen/providers/aws/s3-bucket-notification";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const bucket = new S3Bucket(this, "bucket", {
      bucket: "your-bucket-name",
    });
    const assumeRole = new DataAwsIamPolicyDocument(this, "assume_role", {
      statement: [
        {
          actions: ["sts:AssumeRole"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["lambda.amazonaws.com"],
              type: "Service",
            },
          ],
        },
      ],
    });
    const iamForLambda = new IamRole(this, "iam_for_lambda", {
      assumeRolePolicy: Token.asString(assumeRole.json),
      name: "iam_for_lambda",
    });
    const func1 = new LambdaFunction(this, "func1", {
      filename: "your-function1.zip",
      functionName: "example_lambda_name1",
      handler: "exports.example",
      role: iamForLambda.arn,
      runtime: "go1.x",
    });
    const func2 = new LambdaFunction(this, "func2", {
      filename: "your-function2.zip",
      functionName: "example_lambda_name2",
      handler: "exports.example",
      role: iamForLambda.arn,
    });
    const allowBucket1 = new LambdaPermission(this, "allow_bucket1", {
      action: "lambda:InvokeFunction",
      functionName: func1.arn,
      principal: "s3.amazonaws.com",
      sourceArn: bucket.arn,
      statementId: "AllowExecutionFromS3Bucket1",
    });
    const allowBucket2 = new LambdaPermission(this, "allow_bucket2", {
      action: "lambda:InvokeFunction",
      functionName: func2.arn,
      principal: "s3.amazonaws.com",
      sourceArn: bucket.arn,
      statementId: "AllowExecutionFromS3Bucket2",
    });
    new S3BucketNotification(this, "bucket_notification", {
      bucket: bucket.id,
      dependsOn: [allowBucket1, allowBucket2],
      lambdaFunction: [
        {
          events: ["s3:ObjectCreated:*"],
          filterPrefix: "AWSLogs/",
          filterSuffix: ".log",
          lambdaFunctionArn: func1.arn,
        },
        {
          events: ["s3:ObjectCreated:*"],
          filterPrefix: "OtherLogs/",
          filterSuffix: ".log",
          lambdaFunctionArn: func2.arn,
        },
      ],
    });
  }
}

```

### Add multiple notification configurations to SQS Queue

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketNotification } from "./.gen/providers/aws/s3-bucket-notification";
import { SqsQueue } from "./.gen/providers/aws/sqs-queue";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const bucket = new S3Bucket(this, "bucket", {
      bucket: "your-bucket-name",
    });
    const queue = new DataAwsIamPolicyDocument(this, "queue", {
      statement: [
        {
          actions: ["sqs:SendMessage"],
          condition: [
            {
              test: "ArnEquals",
              values: [bucket.arn],
              variable: "aws:SourceArn",
            },
          ],
          effect: "Allow",
          principals: [
            {
              identifiers: ["*"],
              type: "*",
            },
          ],
          resources: ["arn:aws:sqs:*:*:s3-event-notification-queue"],
        },
      ],
    });
    const awsSqsQueueQueue = new SqsQueue(this, "queue_2", {
      name: "s3-event-notification-queue",
      policy: Token.asString(queue.json),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSqsQueueQueue.overrideLogicalId("queue");
    new S3BucketNotification(this, "bucket_notification", {
      bucket: bucket.id,
      queue: [
        {
          events: ["s3:ObjectCreated:*"],
          filterPrefix: "images/",
          id: "image-upload-event",
          queueArn: Token.asString(awsSqsQueueQueue.arn),
        },
        {
          events: ["s3:ObjectCreated:*"],
          filterPrefix: "videos/",
          id: "video-upload-event",
          queueArn: Token.asString(awsSqsQueueQueue.arn),
        },
      ],
    });
  }
}

```

For Terraform's [JSON syntax](https://www.terraform.io/docs/configuration/syntax.html), use an array instead of defining the `queue` key twice.

```json
{
	"bucket": "${aws_s3_bucket.bucket.id}",
	"queue": [
		{
			"id": "image-upload-event",
			"queue_arn": "${aws_sqs_queue.queue.arn}",
			"events": ["s3:ObjectCreated:*"],
			"filter_prefix": "images/"
		},
		{
			"id": "video-upload-event",
			"queue_arn": "${aws_sqs_queue.queue.arn}",
			"events": ["s3:ObjectCreated:*"],
			"filter_prefix": "videos/"
		}
	]
}
```

### Emit events to EventBridge

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketNotification } from "./.gen/providers/aws/s3-bucket-notification";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const bucket = new S3Bucket(this, "bucket", {
      bucket: "your-bucket-name",
    });
    new S3BucketNotification(this, "bucket_notification", {
      bucket: bucket.id,
      eventbridge: true,
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `bucket` - (Required) Name of the bucket for notification configuration.

The following arguments are optional:

* `eventbridge` - (Optional) Whether to enable Amazon EventBridge notifications. Defaults to `false`.
* `lambdaFunction` - (Optional, Multiple) Used to configure notifications to a Lambda Function. See below.
* `queue` - (Optional) Notification configuration to SQS Queue. See below.
* `topic` - (Optional) Notification configuration to SNS Topic. See below.

### `lambdaFunction`

* `events` - (Required) [Event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
* `filterPrefix` - (Optional) Object key name prefix.
* `filterSuffix` - (Optional) Object key name suffix.
* `id` - (Optional) Unique identifier for each of the notification configurations.
* `lambdaFunctionArn` - (Required) Lambda function ARN.

### `queue`

* `events` - (Required) Specifies [event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
* `filterPrefix` - (Optional) Object key name prefix.
* `filterSuffix` - (Optional) Object key name suffix.
* `id` - (Optional) Unique identifier for each of the notification configurations.
* `queueArn` - (Required) SQS queue ARN.

### `topic`

* `events` - (Required) [Event](http://docs.aws.amazon.com/AmazonS3/latest/dev/NotificationHowTo.html#notification-how-to-event-types-and-destinations) for which to send notifications.
* `filterPrefix` - (Optional) Object key name prefix.
* `filterSuffix` - (Optional) Object key name suffix.
* `id` - (Optional) Unique identifier for each of the notification configurations.
* `topicArn` - (Required) SNS topic ARN.

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import S3 bucket notification using the `bucket`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { S3BucketNotification } from "./.gen/providers/aws/s3-bucket-notification";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    S3BucketNotification.generateConfigForImport(
      this,
      "bucketNotification",
      "bucket-name"
    );
  }
}

```

Using `terraform import`, import S3 bucket notification using the `bucket`. For example:

```console
% terraform import aws_s3_bucket_notification.bucket_notification bucket-name
```

<!-- cache-key: cdktf-0.20.1 input-ffc8a3d834243776f095d91cbf1034f45496ca04ecab5cc652f8eef56b45e134 -->