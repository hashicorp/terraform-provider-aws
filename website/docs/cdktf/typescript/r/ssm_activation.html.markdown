---
subcategory: "SSM (Systems Manager)"
layout: "aws"
page_title: "AWS: aws_ssm_activation"
description: |-
  Registers an on-premises server or virtual machine with Amazon EC2 so that it can be managed using Run Command.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ssm_activation

Registers an on-premises server or virtual machine with Amazon EC2 so that it can be managed using Run Command.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicyAttachment } from "./.gen/providers/aws/iam-role-policy-attachment";
import { SsmActivation } from "./.gen/providers/aws/ssm-activation";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const assumeRole = new DataAwsIamPolicyDocument(this, "assume_role", {
      statement: [
        {
          actions: ["sts:AssumeRole"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["ssm.amazonaws.com"],
              type: "Service",
            },
          ],
        },
      ],
    });
    const testRole = new IamRole(this, "test_role", {
      assumeRolePolicy: Token.asString(assumeRole.json),
      name: "test_role",
    });
    const testAttach = new IamRolePolicyAttachment(this, "test_attach", {
      policyArn: "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore",
      role: testRole.name,
    });
    new SsmActivation(this, "foo", {
      dependsOn: [testAttach],
      description: "Test",
      iamRole: testRole.id,
      name: "test_ssm_activation",
      registrationLimit: Token.asNumber("5"),
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Optional) The default name of the registered managed instance.
* `description` - (Optional) The description of the resource that you want to register.
* `expirationDate` - (Optional) UTC timestamp in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) by which this activation request should expire. The default value is 24 hours from resource creation time. Terraform will only perform drift detection of its value when present in a configuration.
* `iamRole` - (Required) The IAM Role to attach to the managed instance.
* `registrationLimit` - (Optional) The maximum number of managed instances you want to register. The default value is 1 instance.
* `tags` - (Optional) A map of tags to assign to the object. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The activation ID.
* `activationCode` - The code the system generates when it processes the activation.
* `name` - The default name of the registered managed instance.
* `description` - The description of the resource that was registered.
* `expired` - If the current activation has expired.
* `expirationDate` - The date by which this activation request should expire. The default value is 24 hours.
* `iamRole` - The IAM Role attached to the managed instance.
* `registrationLimit` - The maximum number of managed instances you want to be registered. The default value is 1 instance.
* `registrationCount` - The number of managed instances that are currently registered using this activation.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import AWS SSM Activation using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SsmActivation } from "./.gen/providers/aws/ssm-activation";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    SsmActivation.generateConfigForImport(
      this,
      "example",
      "e488f2f6-e686-4afb-8a04-ef6dfEXAMPLE"
    );
  }
}

```

Using `terraform import`, import AWS SSM Activation using the `id`. For example:

```console
% terraform import aws_ssm_activation.example e488f2f6-e686-4afb-8a04-ef6dfEXAMPLE
```

-> **Note:** The `activationCode` attribute cannot be imported.

<!-- cache-key: cdktf-0.20.8 input-e0dcbe52e67919de9e8b8b10107faae656e18b0e36f4833aba51256613ff37fd -->