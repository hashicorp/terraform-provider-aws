---
subcategory: "CodeStar Connections"
layout: "aws"
page_title: "AWS: aws_codestarconnections_connection"
description: |-
  Provides a CodeStar Connection
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_codestarconnections_connection

Provides a CodeStar Connection.

~> **NOTE:** The `aws_codestarconnections_connection` resource is created in the state `PENDING`. Authentication with the connection provider must be completed in the AWS Console. See the [AWS documentation](https://docs.aws.amazon.com/dtconsole/latest/userguide/connections-update.html) for details.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Codepipeline } from "./.gen/providers/aws/codepipeline";
import { CodestarconnectionsConnection } from "./.gen/providers/aws/codestarconnections-connection";
interface MyConfig {
  location: any;
  type: any;
  category: any;
  name: any;
  owner: any;
  provider: any;
  version: any;
  category1: any;
  name1: any;
  owner1: any;
  provider1: any;
  version1: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    const example = new CodestarconnectionsConnection(this, "example", {
      name: "example-connection",
      providerType: "Bitbucket",
    });
    const awsCodepipelineExample = new Codepipeline(this, "example_1", {
      artifactStore: [
        {
          location: config.location,
          type: config.type,
        },
      ],
      name: "tf-test-pipeline",
      roleArn: codepipelineRole.arn,
      stage: [
        {
          action: [
            {
              category: "Source",
              configuration: {
                BranchName: "main",
                ConnectionArn: example.arn,
                FullRepositoryId: "my-organization/test",
              },
              name: "Source",
              outputArtifacts: ["source_output"],
              owner: "AWS",
              provider: "CodeStarSourceConnection",
              version: "1",
            },
          ],
          name: "Source",
        },
        {
          action: [
            {
              category: config.category,
              name: config.name,
              owner: config.owner,
              provider: config.provider,
              version: config.version,
            },
          ],
          name: "Build",
        },
        {
          action: [
            {
              category: config.category1,
              name: config.name1,
              owner: config.owner1,
              provider: config.provider1,
              version: config.version1,
            },
          ],
          name: "Deploy",
        },
      ],
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCodepipelineExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The name of the connection to be created. The name must be unique in the calling AWS account. Changing `name` will create a new resource.
* `providerType` - (Optional) The name of the external provider where your third-party code repository is configured. Valid values are `Bitbucket`, `GitHub`, `GitHubEnterpriseServer`, `GitLab` or `GitLabSelfManaged`. Changing `providerType` will create a new resource. Conflicts with `hostArn`
* `hostArn` - (Optional) The Amazon Resource Name (ARN) of the host associated with the connection. Conflicts with `providerType`
* `tags` - (Optional) Map of key-value resource tags to associate with the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The codestar connection ARN.
* `arn` - The codestar connection ARN.
* `connectionStatus` - The codestar connection status. Possible values are `PENDING`, `AVAILABLE` and `ERROR`.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import CodeStar connections using the ARN. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CodestarconnectionsConnection } from "./.gen/providers/aws/codestarconnections-connection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    CodestarconnectionsConnection.generateConfigForImport(
      this,
      "testConnection",
      "arn:aws:codestar-connections:us-west-1:0123456789:connection/79d4d357-a2ee-41e4-b350-2fe39ae59448"
    );
  }
}

```

Using `terraform import`, import CodeStar connections using the ARN. For example:

```console
% terraform import aws_codestarconnections_connection.test-connection arn:aws:codestar-connections:us-west-1:0123456789:connection/79d4d357-a2ee-41e4-b350-2fe39ae59448
```

<!-- cache-key: cdktf-0.20.8 input-c7edc69e0a0834cde9145e05c5690abc2c043a0afe10ce6f00227d267e2b851a -->