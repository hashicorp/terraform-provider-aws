---
subcategory: "Roles Anywhere"
layout: "aws"
page_title: "AWS: aws_rolesanywhere_trust_anchor"
description: |-
  Provides a Roles Anywhere Trust Anchor resource
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_rolesanywhere_trust_anchor

Terraform resource for managing a Roles Anywhere Trust Anchor.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AcmpcaCertificate } from "./.gen/providers/aws/acmpca-certificate";
import { AcmpcaCertificateAuthority } from "./.gen/providers/aws/acmpca-certificate-authority";
import { AcmpcaCertificateAuthorityCertificate } from "./.gen/providers/aws/acmpca-certificate-authority-certificate";
import { DataAwsPartition } from "./.gen/providers/aws/data-aws-partition";
import { RolesanywhereTrustAnchor } from "./.gen/providers/aws/rolesanywhere-trust-anchor";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new AcmpcaCertificateAuthority(this, "example", {
      certificateAuthorityConfiguration: {
        keyAlgorithm: "RSA_4096",
        signingAlgorithm: "SHA512WITHRSA",
        subject: {
          commonName: "example.com",
        },
      },
      permanentDeletionTimeInDays: 7,
      type: "ROOT",
    });
    const awsAcmpcaCertificateAuthorityCertificateExample =
      new AcmpcaCertificateAuthorityCertificate(this, "example_1", {
        certificate: Token.asString(awsAcmpcaCertificateExample.certificate),
        certificateAuthorityArn: example.arn,
        certificateChain: Token.asString(
          awsAcmpcaCertificateExample.certificateChain
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAcmpcaCertificateAuthorityCertificateExample.overrideLogicalId(
      "example"
    );
    new RolesanywhereTrustAnchor(this, "test", {
      dependsOn: [awsAcmpcaCertificateAuthorityCertificateExample],
      name: "example",
      source: {
        sourceData: {
          acmPcaArn: example.arn,
        },
        sourceType: "AWS_ACM_PCA",
      },
    });
    const current = new DataAwsPartition(this, "current", {});
    const awsAcmpcaCertificateTest = new AcmpcaCertificate(this, "test_4", {
      certificateAuthorityArn: example.arn,
      certificateSigningRequest: example.certificateSigningRequest,
      signingAlgorithm: "SHA512WITHRSA",
      templateArn:
        "arn:${" +
        current.partition +
        "}:acm-pca:::template/RootCACertificate/V1",
      validity: {
        type: "YEARS",
        value: Token.asString(1),
      },
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAcmpcaCertificateTest.overrideLogicalId("test");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `enabled` - (Optional) Whether or not the Trust Anchor should be enabled.
* `name` - (Required) The name of the Trust Anchor.
* `source` - (Required) The source of trust, documented below
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### Nested Blocks

#### `source`

* `sourceData` - (Required) The data denoting the source of trust, documented below
* `sourceType` - (Required) The type of the source of trust. Must be either `AWS_ACM_PCA` or `CERTIFICATE_BUNDLE`.

#### `sourceData`

* `acmPcaArn` - (Optional, required when `sourceType` is `AWS_ACM_PCA`) The ARN of an ACM Private Certificate Authority.
* `x509CertificateData` - (Optional, required when `sourceType` is `CERTIFICATE_BUNDLE`)

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of the Trust Anchor
* `id` - The Trust Anchor ID.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_rolesanywhere_trust_anchor` using its `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { RolesanywhereTrustAnchor } from "./.gen/providers/aws/rolesanywhere-trust-anchor";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    RolesanywhereTrustAnchor.generateConfigForImport(
      this,
      "example",
      "92b2fbbb-984d-41a3-a765-e3cbdb69ebb1"
    );
  }
}

```

Using `terraform import`, import `aws_rolesanywhere_trust_anchor` using its `id`. For example:

```console
% terraform import aws_rolesanywhere_trust_anchor.example 92b2fbbb-984d-41a3-a765-e3cbdb69ebb1
```

<!-- cache-key: cdktf-0.20.8 input-89d8cc3f15e0773b9fe438113eea5ac563a091c5c19d681db300ed32379fb0a0 -->