---
subcategory: "Oracle Database@AWS"
layout: "AWS: aws_odb_network"
page_title: "AWS: aws_odb_network"
description: |-
  Terraform resource for managing odb network of an Oracle Database@AWS.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_odb_network

Terraform resource for managing odb Network resource in AWS for Oracle Database@AWS.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { OdbNetwork } from "./.gen/providers/aws/odb-network";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new OdbNetwork(this, "example", {
      availabilityZoneId: "use1-az6",
      backupSubnetCidr: "10.2.1.0/24",
      clientSubnetCidr: "10.2.0.0/24",
      displayName: "odb-my-net",
      s3Access: "DISABLED",
      tags: {
        env: "dev",
      },
      zeroEtlAccess: "DISABLED",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `displayName` - (Required) The user-friendly name for the odb network. Changing this will force terraform to create a new resource.
* `availabilityZoneId` - (Required) The AZ ID of the AZ where the ODB network is located. Changing this will force terraform to create new resource.
* `clientSubnetCidr` - (Required) The CIDR notation for the network resource. Changing this will force terraform to create new resource.
* `backupSubnetCidr` - (Required) The CIDR range of the backup subnet for the ODB network. Changing this will force terraform to create new resource.
* `s3Access` - (Required) Specifies the configuration for Amazon S3 access from the ODB network.
* `zeroEtlAccess` - (Required) Specifies the configuration for Zero-ETL access from the ODB network.

The following arguments are optional:

* `customDomainName` - (Optional) The name of the custom domain that the network is located. Custom_domain_name and default_dns_prefix both can't be given. Changing this will force terraform to create new resource.
* `availabilityZone` - (Optional) The name of the Availability Zone (AZ) where the odb network is located. Changing this will force terraform to create new resource. Make sure availability_zone maps correctly with availability_zone_id.
* `s3PolicyDocument` - (Optional) Specifies the endpoint policy for Amazon S3 access from the ODB network.
* `defaultDnsPrefix` - (Optional) The default DNS prefix for the network resource. Changing this will force terraform to create new resource. Changing this will force terraform to create new resource.
* `tags` - (Optional) A map of tags to assign to the exadata infrastructure. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Unique identifier of the odb network resource.
* `arn` - Amazon Resource Name (ARN) of the odb network resource.
* `ociDnsForwardingConfigs` - The number of storage servers requested for the Exadata infrastructure.
* `peeredCidrs` - The list of CIDR ranges from the peered VPC that are allowed access to the ODB network. Please refer odb network peering documentation.
* `ociNetworkAnchorId` - The unique identifier of the OCI network anchor for the ODB network.
* `ociNetworkAnchorUrl` -The URL of the OCI network anchor for the ODB network.
* `ociResourceAnchorName` - The name of the OCI resource anchor for the ODB network.
* `ociVcnId` - The unique identifier  Oracle Cloud ID (OCID) of the OCI VCN for the ODB network.
* `ociVcnUrl` - The URL of the OCI VCN for the ODB network.
* `percentProgress` - The amount of progress made on the current operation on the ODB network, expressed as a percentage.
* `managedServices` - The name of the OCI resource anchor for the Exadata infrastructure.
* `status` - The status of the network resource.
* `statusReason` - Additional information about the current status of the ODB network.
* `createdAt` - The date and time when the ODB network was created.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `24h`)
* `update` - (Default `24h`)
* `delete` - (Default `24h`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import OpenSearch Ingestion Pipeline using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { OdbNetwork } from "./.gen/providers/aws/odb-network";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    OdbNetwork.generateConfigForImport(this, "example", "example");
  }
}

```

Using `terraform import`, import Odb Network using the `id`. For example:

```console
% terraform import aws_odb_network.example example
```

<!-- cache-key: cdktf-0.20.8 input-28c2ab696d3eec1f621103d215ebc0c4e0b8c98b64f2e3ffe613a0a09f5d91fa -->