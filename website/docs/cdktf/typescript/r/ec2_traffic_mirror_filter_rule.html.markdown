---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_ec2_traffic_mirror_filter_rule"
description: |-
  Provides an Traffic mirror filter rule
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ec2_traffic_mirror_filter_rule

Provides an Traffic mirror filter rule.  
Read [limits and considerations](https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-considerations.html) for traffic mirroring

## Example Usage

To create a basic traffic mirror session

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Ec2TrafficMirrorFilter } from "./.gen/providers/aws/ec2-traffic-mirror-filter";
import { Ec2TrafficMirrorFilterRule } from "./.gen/providers/aws/ec2-traffic-mirror-filter-rule";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const filter = new Ec2TrafficMirrorFilter(this, "filter", {
      description: "traffic mirror filter - terraform example",
      networkServices: ["amazon-dns"],
    });
    new Ec2TrafficMirrorFilterRule(this, "rulein", {
      description: "test rule",
      destinationCidrBlock: "10.0.0.0/8",
      destinationPortRange: {
        fromPort: 22,
        toPort: 53,
      },
      protocol: 6,
      ruleAction: "accept",
      ruleNumber: 1,
      sourceCidrBlock: "10.0.0.0/8",
      sourcePortRange: {
        fromPort: 0,
        toPort: 10,
      },
      trafficDirection: "ingress",
      trafficMirrorFilterId: filter.id,
    });
    new Ec2TrafficMirrorFilterRule(this, "ruleout", {
      description: "test rule",
      destinationCidrBlock: "10.0.0.0/8",
      ruleAction: "accept",
      ruleNumber: 1,
      sourceCidrBlock: "10.0.0.0/8",
      trafficDirection: "egress",
      trafficMirrorFilterId: filter.id,
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `description` - (Optional) Description of the traffic mirror filter rule.
* `trafficMirrorFilterId`  - (Required) ID of the traffic mirror filter to which this rule should be added
* `destinationCidrBlock` - (Required) Destination CIDR block to assign to the Traffic Mirror rule.
* `destinationPortRange` - (Optional) Destination port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
* `protocol` - (Optional) Protocol number, for example 17 (UDP), to assign to the Traffic Mirror rule. For information about the protocol value, see [Protocol Numbers](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml) on the Internet Assigned Numbers Authority (IANA) website.
* `ruleAction` - (Required) Action to take (accept | reject) on the filtered traffic. Valid values are `accept` and `reject`
* `ruleNumber` - (Required) Number of the Traffic Mirror rule. This number must be unique for each Traffic Mirror rule in a given direction. The rules are processed in ascending order by rule number.
* `sourceCidrBlock` - (Required) Source CIDR block to assign to the Traffic Mirror rule.
* `sourcePortRange` - (Optional) Source port range. Supported only when the protocol is set to TCP(6) or UDP(17). See Traffic mirror port range documented below
* `trafficDirection` - (Required) Direction of traffic to be captured. Valid values are `ingress` and `egress`

Traffic mirror port range support following attributes:

* `fromPort` - (Optional) Starting port of the range
* `toPort` - (Optional) Ending port of the range

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the traffic mirror filter rule.
* `id` - Name of the traffic mirror filter rule.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import traffic mirror rules using the `trafficMirrorFilterId` and `id` separated by `:`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Ec2TrafficMirrorFilterRule } from "./.gen/providers/aws/ec2-traffic-mirror-filter-rule";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    Ec2TrafficMirrorFilterRule.generateConfigForImport(
      this,
      "rule",
      "tmf-0fbb93ddf38198f64:tmfr-05a458f06445d0aee"
    );
  }
}

```

Using `terraform import`, import traffic mirror rules using the `trafficMirrorFilterId` and `id` separated by `:`. For example:

```console
% terraform import aws_ec2_traffic_mirror_filter_rule.rule tmf-0fbb93ddf38198f64:tmfr-05a458f06445d0aee
```

<!-- cache-key: cdktf-0.20.8 input-ee8ae70ab3b42d0c264494b7dc21ff8f9e48c2c41596a2bf47513cd2380b21c6 -->