---
subcategory: "RDS (Relational Database)"
layout: "aws"
page_title: "AWS: aws_rds_export_task"
description: |-
  Terraform resource for managing an AWS RDS (Relational Database) Export Task.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_rds_export_task

Terraform resource for managing an AWS RDS (Relational Database) Export Task.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { RdsExportTask } from "./.gen/providers/aws/rds-export-task";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new RdsExportTask(this, "example", {
      exportTaskIdentifier: "example",
      iamRoleArn: Token.asString(awsIamRoleExample.arn),
      kmsKeyId: Token.asString(awsKmsKeyExample.arn),
      s3BucketName: Token.asString(awsS3BucketExample.id),
      sourceArn: Token.asString(awsDbSnapshotExample.dbSnapshotArn),
    });
  }
}

```

### Complete Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { DbInstance } from "./.gen/providers/aws/db-instance";
import { DbSnapshot } from "./.gen/providers/aws/db-snapshot";
import { IamPolicy } from "./.gen/providers/aws/iam-policy";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicyAttachment } from "./.gen/providers/aws/iam-role-policy-attachment";
import { KmsKey } from "./.gen/providers/aws/kms-key";
import { RdsExportTask } from "./.gen/providers/aws/rds-export-task";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketAcl } from "./.gen/providers/aws/s3-bucket-acl";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DbInstance(this, "example", {
      allocatedStorage: 10,
      dbName: "test",
      engine: "mysql",
      engineVersion: "5.7",
      identifier: "example",
      instanceClass: "db.t3.micro",
      parameterGroupName: "default.mysql5.7",
      password: "foobarbaz",
      skipFinalSnapshot: true,
      username: "foo",
    });
    const awsDbSnapshotExample = new DbSnapshot(this, "example_1", {
      dbInstanceIdentifier: example.identifier,
      dbSnapshotIdentifier: "example",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDbSnapshotExample.overrideLogicalId("example");
    const awsIamRoleExample = new IamRole(this, "example_2", {
      assumeRolePolicy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: "sts:AssumeRole",
              Effect: "Allow",
              Principal: {
                Service: "export.rds.amazonaws.com",
              },
              Sid: "",
            },
          ],
          Version: "2012-10-17",
        })
      ),
      name: "example",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRoleExample.overrideLogicalId("example");
    const awsKmsKeyExample = new KmsKey(this, "example_3", {
      deletionWindowInDays: 10,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsKmsKeyExample.overrideLogicalId("example");
    const awsS3BucketExample = new S3Bucket(this, "example_4", {
      bucket: "example",
      forceDestroy: true,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3BucketExample.overrideLogicalId("example");
    const awsS3BucketAclExample = new S3BucketAcl(this, "example_5", {
      acl: "private",
      bucket: Token.asString(awsS3BucketExample.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3BucketAclExample.overrideLogicalId("example");
    const dataAwsIamPolicyDocumentExample = new DataAwsIamPolicyDocument(
      this,
      "example_6",
      {
        statement: [
          {
            actions: ["s3:ListAllMyBuckets"],
            resources: ["*"],
          },
          {
            actions: ["s3:GetBucketLocation", "s3:ListBucket"],
            resources: [Token.asString(awsS3BucketExample.arn)],
          },
          {
            actions: ["s3:GetObject", "s3:PutObject", "s3:DeleteObject"],
            resources: ["${" + awsS3BucketExample.arn + "}/*"],
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsIamPolicyDocumentExample.overrideLogicalId("example");
    const awsIamPolicyExample = new IamPolicy(this, "example_7", {
      name: "example",
      policy: Token.asString(dataAwsIamPolicyDocumentExample.json),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamPolicyExample.overrideLogicalId("example");
    const awsIamRolePolicyAttachmentExample = new IamRolePolicyAttachment(
      this,
      "example_8",
      {
        policyArn: Token.asString(awsIamPolicyExample.arn),
        role: Token.asString(awsIamRoleExample.name),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyAttachmentExample.overrideLogicalId("example");
    const awsRdsExportTaskExample = new RdsExportTask(this, "example_9", {
      exportOnly: ["database"],
      exportTaskIdentifier: "example",
      iamRoleArn: Token.asString(awsIamRoleExample.arn),
      kmsKeyId: Token.asString(awsKmsKeyExample.arn),
      s3BucketName: Token.asString(awsS3BucketExample.id),
      s3Prefix: "my_prefix/example",
      sourceArn: Token.asString(awsDbSnapshotExample.dbSnapshotArn),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRdsExportTaskExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `exportTaskIdentifier` - (Required) Unique identifier for the snapshot export task.
* `iamRoleArn` - (Required) ARN of the IAM role to use for writing to the Amazon S3 bucket.
* `kmsKeyId` - (Required) ID of the Amazon Web Services KMS key to use to encrypt the snapshot.
* `s3BucketName` - (Required) Name of the Amazon S3 bucket to export the snapshot to.
* `sourceArn` - (Required) Amazon Resource Name (ARN) of the snapshot to export.

The following arguments are optional:

* `exportOnly` - (Optional) Data to be exported from the snapshot. If this parameter is not provided, all the snapshot data is exported. Valid values are documented in the [AWS StartExportTask API documentation](https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_StartExportTask.html#API_StartExportTask_RequestParameters).
* `s3Prefix` - (Optional) Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `failureCause` - Reason the export failed, if it failed.
* `id` - Unique identifier for the snapshot export task (same value as `exportTaskIdentifier`).
* `percentProgress` - Progress of the snapshot export task as a percentage.
* `snapshotTime` - Time that the snapshot was created.
* `sourceType` - Type of source for the export.
* `status` - Status of the export task.
* `taskEndTime` - Time that the snapshot export task completed.
* `taskStartTime` - Time that the snapshot export task started.
* `warningMessage` - Warning about the snapshot export task, if any.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import a RDS (Relational Database) Export Task using the `exportTaskIdentifier`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { RdsExportTask } from "./.gen/providers/aws/rds-export-task";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    RdsExportTask.generateConfigForImport(this, "example", "example");
  }
}

```

Using `terraform import`, import a RDS (Relational Database) Export Task using the `exportTaskIdentifier`. For example:

```console
% terraform import aws_rds_export_task.example example
```

<!-- cache-key: cdktf-0.20.8 input-85f7fbc39b14c8bc604a74daa69a5c20b76d661a4af3a134d17931198e7cd32a -->