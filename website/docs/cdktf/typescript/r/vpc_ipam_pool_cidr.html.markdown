---
subcategory: "VPC IPAM (IP Address Manager)"
layout: "aws"
page_title: "AWS: aws_vpc_ipam_pool_cidr"
description: |-
  Provisions a CIDR from an IPAM address pool.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_vpc_ipam_pool_cidr

Provisions a CIDR from an IPAM address pool.

~> **NOTE:** Provisioning Public IPv4 or Public IPv6 require [steps outside the scope of this resource](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-byoip.html#prepare-for-byoip). The resource accepts `message` and `signature` as part of the `cidrAuthorizationContext` attribute but those must be generated ahead of time. Public IPv6 CIDRs that are provisioned into a Pool with `publicly_advertisable = true` and all public IPv4 CIDRs also require creating a Route Origin Authorization (ROA) object in your Regional Internet Registry (RIR).

~> **NOTE:** In order to deprovision CIDRs all Allocations must be released. Allocations created by a VPC take up to 30 minutes to be released. However, for IPAM to properly manage the removal of allocation records created by VPCs and other resources, you must [grant it permissions](https://docs.aws.amazon.com/vpc/latest/ipam/choose-single-user-or-orgs-ipam.html) in
either a single account or organizationally. If you are unable to deprovision a cidr after waiting over 30 minutes, you may be missing the Service Linked Role.

## Example Usage

Basic usage:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsRegion } from "./.gen/providers/aws/data-aws-region";
import { VpcIpam } from "./.gen/providers/aws/vpc-ipam";
import { VpcIpamPool } from "./.gen/providers/aws/vpc-ipam-pool";
import { VpcIpamPoolCidr } from "./.gen/providers/aws/vpc-ipam-pool-cidr";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const current = new DataAwsRegion(this, "current", {});
    const example = new VpcIpam(this, "example", {
      operatingRegions: [
        {
          regionName: Token.asString(current.name),
        },
      ],
    });
    const awsVpcIpamPoolExample = new VpcIpamPool(this, "example_2", {
      addressFamily: "ipv4",
      ipamScopeId: example.privateDefaultScopeId,
      locale: Token.asString(current.name),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcIpamPoolExample.overrideLogicalId("example");
    const awsVpcIpamPoolCidrExample = new VpcIpamPoolCidr(this, "example_3", {
      cidr: "172.20.0.0/16",
      ipamPoolId: Token.asString(awsVpcIpamPoolExample.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcIpamPoolCidrExample.overrideLogicalId("example");
  }
}

```

Provision Public IPv6 Pool CIDRs:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsRegion } from "./.gen/providers/aws/data-aws-region";
import { VpcIpam } from "./.gen/providers/aws/vpc-ipam";
import { VpcIpamPool } from "./.gen/providers/aws/vpc-ipam-pool";
import { VpcIpamPoolCidr } from "./.gen/providers/aws/vpc-ipam-pool-cidr";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const current = new DataAwsRegion(this, "current", {});
    const example = new VpcIpam(this, "example", {
      operatingRegions: [
        {
          regionName: Token.asString(current.name),
        },
      ],
    });
    const ipv6TestPublic = new VpcIpamPool(this, "ipv6_test_public", {
      addressFamily: "ipv6",
      awsService: "ec2",
      description: "public ipv6",
      ipamScopeId: example.publicDefaultScopeId,
      locale: "us-east-1",
      publicIpSource: "amazon",
      publiclyAdvertisable: false,
    });
    const awsVpcIpamPoolCidrIpv6TestPublic = new VpcIpamPoolCidr(
      this,
      "ipv6_test_public_3",
      {
        ipamPoolId: ipv6TestPublic.id,
        netmaskLength: 52,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcIpamPoolCidrIpv6TestPublic.overrideLogicalId("ipv6_test_public");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `cidr` - (Optional) The CIDR you want to assign to the pool. Conflicts with `netmaskLength`.
* `cidrAuthorizationContext` - (Optional) A signed document that proves that you are authorized to bring the specified IP address range to Amazon using BYOIP. This is not stored in the state file. See [cidr_authorization_context](#cidr_authorization_context) for more information.
* `ipamPoolId` - (Required) The ID of the pool to which you want to assign a CIDR.
* `netmaskLength` - (Optional) If provided, the cidr provisioned into the specified pool will be the next available cidr given this declared netmask length. Conflicts with `cidr`.

### cidr_authorization_context

* `message` - (Optional) The plain-text authorization message for the prefix and account.
* `signature` - (Optional) The signed authorization message for the prefix and account.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the IPAM Pool Cidr concatenated with the IPAM Pool ID.
* `ipamPoolCidrId` - The unique ID generated by AWS for the pool cidr. Typically this is the resource `id` but this attribute was added to the API calls after the fact and is therefore not used as the terraform resource id.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import IPAMs using the `<cidr>_<ipam-pool-id>`. For example:

**NOTE:** Do not use the IPAM Pool Cidr ID as this was introduced after the resource already existed.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VpcIpamPoolCidr } from "./.gen/providers/aws/vpc-ipam-pool-cidr";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    VpcIpamPoolCidr.generateConfigForImport(
      this,
      "example",
      "172.20.0.0/24_ipam-pool-0e634f5a1517cccdc"
    );
  }
}

```

Using `terraform import`, import IPAMs using the `<cidr>_<ipam-pool-id>`. For example:

**NOTE:** Do not use the IPAM Pool Cidr ID as this was introduced after the resource already existed.

```console
% terraform import aws_vpc_ipam_pool_cidr.example 172.20.0.0/24_ipam-pool-0e634f5a1517cccdc
```

<!-- cache-key: cdktf-0.20.8 input-9510d76ea7d66c26049583f9c5d435912df190bc1c3c78f5fda73a13a93912cc -->