---
subcategory: "OpsWorks"
layout: "aws"
page_title: "AWS: aws_opsworks_application"
description: |-
  Provides an OpsWorks application resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_opsworks_application

Provides an OpsWorks application resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { OpsworksApplication } from "./.gen/providers/aws/opsworks-application";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new OpsworksApplication(this, "foo-app", {
      appSource: [
        {
          revision: "master",
          type: "git",
          url: "https://github.com/example.git",
        },
      ],
      autoBundleOnDeploy: Token.asString(true),
      description: "This is a Rails application",
      documentRoot: "public",
      domains: ["example.com", "sub.example.com"],
      enableSsl: true,
      environment: [
        {
          key: "key",
          secure: false,
          value: "value",
        },
      ],
      name: "foobar application",
      railsEnv: "staging",
      shortName: "foobar",
      sslConfiguration: [
        {
          certificate: Token.asString(Fn.file("./foobar.crt")),
          privateKey: Token.asString(Fn.file("./foobar.key")),
        },
      ],
      stackId: main.id,
      type: "rails",
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) A human-readable name for the application.
* `shortName` - (Required) A short, machine-readable name for the application. This can only be defined on resource creation and ignored on resource update.
* `stackId` - (Required) ID of the stack the application will belong to.
* `type` - (Required) Opsworks application type. One of `aws-flow-ruby`, `java`, `rails`, `php`, `nodejs`, `static` or `other`.
* `description` - (Optional) A description of the app.
* `environment` - (Optional) Object to define environment variables.  Object is described below.
* `enableSsl` - (Optional) Whether to enable SSL for the app. This must be set in order to let `ssl_configuration.private_key`, `ssl_configuration.certificate` and `ssl_configuration.chain` take effect.
* `sslConfiguration` - (Optional) The SSL configuration of the app. Object is described below.
* `appSource` - (Optional) SCM configuration of the app as described below.
* `dataSourceArn` - (Optional) The data source's ARN.
* `dataSourceType` - (Optional) The data source's type one of `AutoSelectOpsworksMysqlInstance`, `OpsworksMysqlInstance`, or `RdsDbInstance`.
* `dataSourceDatabaseName` - (Optional) The database name.
* `domains` -  (Optional) A list of virtual host alias.
* `documentRoot` - (Optional) Subfolder for the document root for application of type `rails`.
* `autoBundleOnDeploy` - (Optional) Run bundle install when deploying for application of type `rails`.
* `railsEnv` - (Required if `type` = `rails`) The name of the Rails environment for application of type `rails`.
* `awsFlowRubySettings` - (Optional) Specify activity and workflow workers for your app using the aws-flow gem.

An `appSource` block supports the following arguments (can only be defined once per resource):

* `type` - (Required) The type of source to use. For example, "archive".
* `url` - (Required) The URL where the app resource can be found.
* `username` - (Optional) Username to use when authenticating to the source.
* `password` - (Optional) Password to use when authenticating to the source. Terraform cannot perform drift detection of this configuration.
* `sshKey` - (Optional) SSH key to use when authenticating to the source. Terraform cannot perform drift detection of this configuration.
* `revision` - (Optional) For sources that are version-aware, the revision to use.

An `environment` block supports the following arguments:

* `key` - (Required) Variable name.
* `value` - (Required) Variable value.
* `secure` - (Optional) Set visibility of the variable value to `true` or `false`.

A `sslConfiguration` block supports the following arguments (can only be defined once per resource):

* `privateKey` - (Required) The private key; the contents of the certificate's domain.key file.
* `certificate` - (Required) The contents of the certificate's domain.crt file.
* `chain` - (Optional)  Can be used to specify an intermediate certificate authority key or client authentication.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The id of the application.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Opsworks Application using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { OpsworksApplication } from "./.gen/providers/aws/opsworks-application";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    OpsworksApplication.generateConfigForImport(this, "test", "<id>");
  }
}

```

Using `terraform import`, import Opsworks Application using the `id`. For example:

```console
% terraform import aws_opsworks_application.test <id>
```

<!-- cache-key: cdktf-0.20.8 input-4eedaae0cb4e4e8acfb36a8488b25242904e757fb2ce525f27f16d8958622f8a -->