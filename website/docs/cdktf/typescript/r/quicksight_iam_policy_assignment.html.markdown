---
subcategory: "QuickSight"
layout: "aws"
page_title: "AWS: aws_quicksight_iam_policy_assignment"
description: |-
  Terraform resource for managing an AWS QuickSight IAM Policy Assignment.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_quicksight_iam_policy_assignment

Terraform resource for managing an AWS QuickSight IAM Policy Assignment.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { QuicksightIamPolicyAssignment } from "./.gen/providers/aws/quicksight-iam-policy-assignment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new QuicksightIamPolicyAssignment(this, "example", {
      assignmentName: "example",
      assignmentStatus: "ENABLED",
      identities: [
        {
          user: [Token.asString(awsQuicksightUserExample.userName)],
        },
      ],
      policyArn: Token.asString(awsIamPolicyExample.arn),
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `assignmentName` - (Required) Name of the assignment.
* `assignmentStatus` - (Required) Status of the assignment. Valid values are `ENABLED`, `DISABLED`, and `DRAFT`.

The following arguments are optional:

* `awsAccountId` - (Optional) AWS account ID.
* `identities` - (Optional) Amazon QuickSight users, groups, or both to assign the policy to. See [`identities` block](#identities-block).
* `namespace` - (Optional) Namespace that contains the assignment. Defaults to `default`.
* `policyArn` - (Optional) ARN of the IAM policy to apply to the Amazon QuickSight users and groups specified in this assignment.

### `identities` block

* `group` - (Optional) Array of Quicksight group names to assign the policy to.
* `user` - (Optional) Array of Quicksight user names to assign the policy to.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `assignmentId` - Assignment ID.
* `id` - A comma-delimited string joining AWS account ID, namespace, and assignment name.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import QuickSight IAM Policy Assignment using the AWS account ID, namespace, and assignment name separated by commas (`,`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { QuicksightIamPolicyAssignment } from "./.gen/providers/aws/quicksight-iam-policy-assignment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    QuicksightIamPolicyAssignment.generateConfigForImport(
      this,
      "example",
      "123456789012,default,example"
    );
  }
}

```

Using `terraform import`, import QuickSight IAM Policy Assignment using the AWS account ID, namespace, and assignment name separated by commas (`,`). For example:

```console
% terraform import aws_quicksight_iam_policy_assignment.example 123456789012,default,example
```

<!-- cache-key: cdktf-0.20.8 input-97b3c767d8dd342d64374f0ab17a8d1552269f5e1150cc154507923f2000338e -->