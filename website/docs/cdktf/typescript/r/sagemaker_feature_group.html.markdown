---
subcategory: "SageMaker"
layout: "aws"
page_title: "AWS: aws_sagemaker_feature_group"
description: |-
  Provides a SageMaker Feature Group resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_sagemaker_feature_group

Provides a SageMaker Feature Group resource.

## Example Usage

Basic usage:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SagemakerFeatureGroup } from "./.gen/providers/aws/sagemaker-feature-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new SagemakerFeatureGroup(this, "example", {
      eventTimeFeatureName: "example",
      featureDefinition: [
        {
          featureName: "example",
          featureType: "String",
        },
      ],
      featureGroupName: "example",
      onlineStoreConfig: {
        enableOnlineStore: true,
      },
      recordIdentifierFeatureName: "example",
      roleArn: test.arn,
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `featureGroupName` - (Required) The name of the Feature Group. The name must be unique within an AWS Region in an AWS account.
* `recordIdentifierFeatureName` - (Required) The name of the Feature whose value uniquely identifies a Record defined in the Feature Store. Only the latest record per identifier value will be stored in the Online Store.
* `eventTimeFeatureName` - (Required) The name of the feature that stores the EventTime of a Record in a Feature Group.
* `description` (Optional) - A free-form description of a Feature Group.
* `roleArn` (Required) - The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the Offline Store if an `offlineStoreConfig` is provided.
* `featureDefinition` (Optional) - A list of Feature names and types. See [Feature Definition](#feature-definition) Below.
* `offlineStoreConfig` (Optional) - The Offline Feature Store Configuration. See [Offline Store Config](#offline-store-config) Below.
* `onlineStoreConfig` (Optional) - The Online Feature Store Configuration. See [Online Store Config](#online-store-config) Below.
* `tags` - (Optional) Map of resource tags for the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### Feature Definition

* `featureName` - (Required) The name of a feature. `featureName` cannot be any of the following: `is_deleted`, `write_time`, `api_invocation_time`.
* `featureType` - (Required) The value type of a feature. Valid values are `Integral`, `Fractional`, or `String`.

### Offline Store Config

* `enableOnlineStore` - (Optional) Set to `true` to disable the automatic creation of an AWS Glue table when configuring an OfflineStore.
* `s3StorageConfig` - (Required) The Amazon Simple Storage (Amazon S3) location of OfflineStore. See [S3 Storage Config](#s3-storage-config) Below.
* `dataCatalogConfig` - (Optional) The meta data of the Glue table that is autogenerated when an OfflineStore is created. See [Data Catalog Config](#data-catalog-config) Below.
* `tableFormat` - (Optional) Format for the offline store table. Supported formats are `Glue` (Default) and Apache `Iceberg` (https://iceberg.apache.org/).

### Online Store Config

* `disableGlueTableCreation` - (Optional) Set to `true` to turn Online Store On.
* `securityConfig` - (Required) Security config for at-rest encryption of your OnlineStore. See [Security Config](#security-config) Below.
* `storageType` - (Optional) Option for different tiers of low latency storage for real-time data retrieval. Valid values are `Standard`, or `InMemory`.
* `ttlDuration` - (Optional) Time to live duration, where the record is hard deleted after the expiration time is reached; ExpiresAt = EventTime + TtlDuration.. See [TTl Duration](#ttl-duration) Below.

#### S3 Storage Config

* `kmsKeyId` - (Optional) The AWS Key Management Service (KMS) key ID of the key used to encrypt any objects written into the OfflineStore S3 location.
* `s3Uri` - (Required) The S3 URI, or location in Amazon S3, of OfflineStore.
* `resolvedOutputS3Uri` - (Optional) The S3 path where offline records are written.

#### Data Catalog Config

* `catalog` - (Optional) The name of the Glue table catalog.
* `database` - (Optional) The name of the Glue table database.
* `tableName` - (Optional) The name of the Glue table.

#### Security Config

* `kmsKeyId` - (Optional) The ID of the AWS Key Management Service (AWS KMS) key that SageMaker Feature Store uses to encrypt the Amazon S3 objects at rest using Amazon S3 server-side encryption.

#### TTl Duration

* `unit` - (Optional) TtlDuration time unit. Valid values are `Seconds`, `Minutes`, `Hours`, `Days`, or `Weeks`.
* `value` - (Optional) TtlDuration time value.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `name` - The name of the Feature Group.
* `arn` - The Amazon Resource Name (ARN) assigned by AWS to this feature_group.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Feature Groups using the `name`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SagemakerFeatureGroup } from "./.gen/providers/aws/sagemaker-feature-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    SagemakerFeatureGroup.generateConfigForImport(
      this,
      "testFeatureGroup",
      "feature_group-foo"
    );
  }
}

```

Using `terraform import`, import Feature Groups using the `name`. For example:

```console
% terraform import aws_sagemaker_feature_group.test_feature_group feature_group-foo
```

<!-- cache-key: cdktf-0.20.8 input-3be94431d796f9b9ec09230c1283d4f41ae089366185d32e9b6f25a4d055142c -->