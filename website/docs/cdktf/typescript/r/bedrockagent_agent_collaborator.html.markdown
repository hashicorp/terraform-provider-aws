---
subcategory: "Bedrock Agents"
layout: "aws"
page_title: "AWS: aws_bedrockagent_agent_collaborator"
description: |-
  Terraform resource for managing an AWS Bedrock Agents Agent Collaborator.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_bedrockagent_agent_collaborator

Terraform resource for managing an AWS Bedrock Agents Agent Collaborator.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BedrockagentAgent } from "./.gen/providers/aws/bedrockagent-agent";
import { BedrockagentAgentAlias } from "./.gen/providers/aws/bedrockagent-agent-alias";
import { BedrockagentAgentCollaborator } from "./.gen/providers/aws/bedrockagent-agent-collaborator";
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { DataAwsPartition } from "./.gen/providers/aws/data-aws-partition";
import { DataAwsRegion } from "./.gen/providers/aws/data-aws-region";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicy } from "./.gen/providers/aws/iam-role-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const current = new DataAwsCallerIdentity(this, "current", {});
    const dataAwsPartitionCurrent = new DataAwsPartition(this, "current_1", {});
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsPartitionCurrent.overrideLogicalId("current");
    const dataAwsRegionCurrent = new DataAwsRegion(this, "current_2", {});
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsRegionCurrent.overrideLogicalId("current");
    const exampleAgentPermissions = new DataAwsIamPolicyDocument(
      this,
      "example_agent_permissions",
      {
        statement: [
          {
            actions: ["bedrock:InvokeModel"],
            resources: [
              "arn:${" +
                dataAwsPartitionCurrent.partition +
                "}:bedrock:${" +
                dataAwsRegionCurrent.name +
                "}::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0",
            ],
          },
          {
            actions: ["bedrock:GetAgentAlias", "bedrock:InvokeAgent"],
            resources: [
              "arn:${" +
                currentAgent.partition +
                "}:bedrock:${" +
                dataAwsRegionCurrent.name +
                "}:${" +
                current.accountId +
                "}:agent/*",
              "arn:${" +
                currentAgent.partition +
                "}:bedrock:${" +
                dataAwsRegionCurrent.name +
                "}:${" +
                current.accountId +
                "}:agent-alias/*",
            ],
          },
        ],
      }
    );
    const exampleAgentTrust = new DataAwsIamPolicyDocument(
      this,
      "example_agent_trust",
      {
        statement: [
          {
            actions: ["sts:AssumeRole"],
            condition: [
              {
                test: "StringEquals",
                values: [Token.asString(current.accountId)],
                variable: "aws:SourceAccount",
              },
              {
                test: "ArnLike",
                values: [
                  "arn:${" +
                    dataAwsPartitionCurrent.partition +
                    "}:bedrock:${" +
                    dataAwsRegionCurrent.name +
                    "}:${" +
                    current.accountId +
                    "}:agent/*",
                ],
                variable: "AWS:SourceArn",
              },
            ],
            principals: [
              {
                identifiers: ["bedrock.amazonaws.com"],
                type: "Service",
              },
            ],
          },
        ],
      }
    );
    const example = new IamRole(this, "example", {
      assumeRolePolicy: Token.asString(exampleAgentTrust.json),
      namePrefix: "AmazonBedrockExecutionRoleForAgents_",
    });
    const awsIamRolePolicyExample = new IamRolePolicy(this, "example_6", {
      policy: Token.asString(exampleAgentPermissions.json),
      role: example.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyExample.overrideLogicalId("example");
    const exampleCollaborator = new BedrockagentAgent(
      this,
      "example_collaborator",
      {
        agentName: "my-agent-collaborator",
        agentResourceRoleArn: example.arn,
        foundationModel: "anthropic.claude-3-5-sonnet-20241022-v2:0",
        idleSessionTtlInSeconds: 500,
        instruction: "do what the supervisor tells you to do",
      }
    );
    const exampleSupervisor = new BedrockagentAgent(
      this,
      "example_supervisor",
      {
        agentCollaboration: "SUPERVISOR",
        agentName: "my-agent-supervisor",
        agentResourceRoleArn: example.arn,
        foundationModel: "anthropic.claude-3-5-sonnet-20241022-v2:0",
        idleSessionTtlInSeconds: 500,
        instruction: "tell the sub agent what to do",
        prepareAgent: false,
      }
    );
    const awsBedrockagentAgentAliasExample = new BedrockagentAgentAlias(
      this,
      "example_9",
      {
        agentAliasName: "my-agent-alias",
        agentId: exampleCollaborator.agentId,
        description: "Test Alias",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsBedrockagentAgentAliasExample.overrideLogicalId("example");
    const awsBedrockagentAgentCollaboratorExample =
      new BedrockagentAgentCollaborator(this, "example_10", {
        agentDescriptor: [
          {
            aliasArn: Token.asString(
              awsBedrockagentAgentAliasExample.agentAliasArn
            ),
          },
        ],
        agentId: exampleSupervisor.agentId,
        collaborationInstruction: "tell the other agent what to do",
        collaboratorName: "my-collab-example",
        relayConversationHistory: "TO_COLLABORATOR",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsBedrockagentAgentCollaboratorExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `agentId` - (Required) ID if the agent to associate the collaborator.
* `collaborationInstruction` - (Required) Instruction to give the collaborator.
* `collbaorator_name` - (Required) Name of this collaborator.

The following arguments are optional:

* `prepareAgent` (Optional) Whether to prepare the agent after creation or modification. Defaults to `true`.
* `relayConversationHistory` - (Optional) Configure relaying the history to the collaborator.

### `agentDescriptor` Block

The `agentDescriptor` configuration block supports the following arguments:

* `aliasArn` - (Required) ARN of the Alias of an Agent to use as the collaborator.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `collaboratorId` - ID of the Agent Collaborator.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `5m`)
* `update` - (Default `5m`)
* `delete` - (Default `5m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Bedrock Agents Agent Collaborator using a comma-delimited string combining `agentId`, `agentVersion`, and `collaboratorId`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BedrockagentAgentCollaborator } from "./.gen/providers/aws/bedrockagent-agent-collaborator";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    BedrockagentAgentCollaborator.generateConfigForImport(
      this,
      "example",
      "9LSJO0BFI8,DRAFT,AG3TN4RQIY"
    );
  }
}

```

Using `terraform import`, import Bedrock Agents Agent Collaborator using a comma-delimited string combining `agentId`, `agentVersion`, and `collaboratorId`. For example:

```console
% terraform import aws_bedrockagent_agent_collaborator.example 9LSJO0BFI8,DRAFT,AG3TN4RQIY
```

<!-- cache-key: cdktf-0.20.8 input-57b5c6c247e36a0f4260a7906aa72d93e72a760ebb81f8f6f75a7cd3ed0e6c52 -->