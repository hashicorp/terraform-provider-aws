---
subcategory: "Lambda"
layout: "aws"
page_title: "AWS: aws_lambda_alias"
description: |-
  Manages an AWS Lambda Alias.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_lambda_alias

Manages an AWS Lambda Alias. Use this resource to create an alias that points to a specific Lambda function version for traffic management and deployment strategies.

For information about Lambda and how to use it, see [What is AWS Lambda?](http://docs.aws.amazon.com/lambda/latest/dg/welcome.html). For information about function aliases, see [CreateAlias](http://docs.aws.amazon.com/lambda/latest/dg/API_CreateAlias.html) and [AliasRoutingConfiguration](https://docs.aws.amazon.com/lambda/latest/dg/API_AliasRoutingConfiguration.html) in the API docs.

## Example Usage

### Basic Alias

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaAlias } from "./.gen/providers/aws/lambda-alias";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LambdaAlias(this, "example", {
      description: "Production environment alias",
      functionName: Token.asString(awsLambdaFunctionExample.arn),
      functionVersion: "1",
      name: "production",
    });
  }
}

```

### Alias with Traffic Splitting

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaAlias } from "./.gen/providers/aws/lambda-alias";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LambdaAlias(this, "example", {
      description: "Staging environment with traffic splitting",
      functionName: Token.asString(awsLambdaFunctionExample.functionName),
      functionVersion: "2",
      name: "staging",
      routingConfig: {
        additionalVersionWeights: {
          1: 0.1,
          3: 0.2,
        },
      },
    });
  }
}

```

### Blue-Green Deployment Alias

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaAlias } from "./.gen/providers/aws/lambda-alias";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LambdaAlias(this, "example", {
      description: "Live traffic with gradual rollout to new version",
      functionName: Token.asString(awsLambdaFunctionExample.functionName),
      functionVersion: "5",
      name: "live",
      routingConfig: {
        additionalVersionWeights: {
          6: 0.05,
        },
      },
    });
  }
}

```

### Development Alias

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaAlias } from "./.gen/providers/aws/lambda-alias";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LambdaAlias(this, "example", {
      description: "Development environment - always points to latest",
      functionName: Token.asString(awsLambdaFunctionExample.functionName),
      functionVersion: "$LATEST",
      name: "dev",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `functionName` - (Required) Name or ARN of the Lambda function.
* `functionVersion` - (Required) Lambda function version for which you are creating the alias. Pattern: `(\$LATEST|[0-9]+)`.
* `name` - (Required) Name for the alias. Pattern: `(?!^[0-9]+$)([a-zA-Z0-9-_]+)`.

The following arguments are optional:

* `description` - (Optional) Description of the alias.
* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `routingConfig` - (Optional) Lambda alias' route configuration settings. [See below](#routing_config-configuration-block).

### routing_config Configuration Block

* `additionalVersionWeights` - (Optional) Map that defines the proportion of events that should be sent to different versions of a Lambda function.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN identifying your Lambda function alias.
* `invokeArn` - ARN to be used for invoking Lambda Function from API Gateway - to be used in [`aws_api_gateway_integration`](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_integration)'s `uri`.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Lambda Function Aliases using the `function_name/alias`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaAlias } from "./.gen/providers/aws/lambda-alias";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    LambdaAlias.generateConfigForImport(this, "example", "example/production");
  }
}

```

For backwards compatibility, the following legacy `terraform import` command is also supported:

```console
% terraform import aws_lambda_alias.example example/production
```

<!-- cache-key: cdktf-0.20.8 input-62e4d99ac8cde5d2e410c69aa9e84b0e682e8a768a63f324544ac36c596ab9f7 -->