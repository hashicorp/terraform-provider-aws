---
subcategory: "Athena"
layout: "aws"
page_title: "AWS: aws_athena_data_catalog"
description: |-
  Provides an Athena data catalog.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_athena_data_catalog

Provides an Athena data catalog.

More information about Athena and Athena data catalogs can be found in the [Athena User Guide](https://docs.aws.amazon.com/athena/latest/ug/what-is.html).

-> **Tip:** for a more detailed explanation on the usage of `parameters`, see the [DataCatalog API documentation](https://docs.aws.amazon.com/athena/latest/APIReference/API_DataCatalog.html)

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AthenaDataCatalog } from "./.gen/providers/aws/athena-data-catalog";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AthenaDataCatalog(this, "example", {
      description: "Example Athena data catalog",
      name: "athena-data-catalog",
      parameters: {
        function:
          "arn:aws:lambda:eu-central-1:123456789012:function:not-important-lambda-function",
      },
      tags: {
        Name: "example-athena-data-catalog",
      },
      type: "LAMBDA",
    });
  }
}

```

### Hive based Data Catalog

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AthenaDataCatalog } from "./.gen/providers/aws/athena-data-catalog";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AthenaDataCatalog(this, "example", {
      description: "Hive based Data Catalog",
      name: "hive-data-catalog",
      parameters: {
        "metadata-function":
          "arn:aws:lambda:eu-central-1:123456789012:function:not-important-lambda-function",
      },
      type: "HIVE",
    });
  }
}

```

### Glue based Data Catalog

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AthenaDataCatalog } from "./.gen/providers/aws/athena-data-catalog";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AthenaDataCatalog(this, "example", {
      description: "Glue based Data Catalog",
      name: "glue-data-catalog",
      parameters: {
        "catalog-id": "123456789012",
      },
      type: "GLUE",
    });
  }
}

```

### Lambda based Data Catalog

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AthenaDataCatalog } from "./.gen/providers/aws/athena-data-catalog";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AthenaDataCatalog(this, "example", {
      description: "Lambda based Data Catalog",
      name: "lambda-data-catalog",
      parameters: {
        "metadata-function":
          "arn:aws:lambda:eu-central-1:123456789012:function:not-important-lambda-function-1",
        "record-function":
          "arn:aws:lambda:eu-central-1:123456789012:function:not-important-lambda-function-2",
      },
      type: "LAMBDA",
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

- `name` - (Required) Name of the data catalog. The catalog name must be unique for the AWS account and can use a maximum of 128 alphanumeric, underscore, at sign, or hyphen characters.
- `type` - (Required) Type of data catalog: `LAMBDA` for a federated catalog, `GLUE` for AWS Glue Catalog, or `HIVE` for an external hive metastore.
- `parameters` - (Required) Key value pairs that specifies the Lambda function or functions to use for the data catalog. The mapping used depends on the catalog type.
- `description` - (Required) Description of the data catalog.
- `tags` - (Optional) Map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

- `id` - Name of the data catalog.
- `arn` - ARN of the data catalog.
- `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import data catalogs using their `name`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AthenaDataCatalog } from "./.gen/providers/aws/athena-data-catalog";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    AthenaDataCatalog.generateConfigForImport(
      this,
      "example",
      "example-data-catalog"
    );
  }
}

```

Using `terraform import`, import data catalogs using their `name`. For example:

```console
% terraform import aws_athena_data_catalog.example example-data-catalog
```

<!-- cache-key: cdktf-0.20.8 input-ca384d0d131eb64581ab0b3c036a49902737674d63de3f2960c9f3aa9b8f446f -->