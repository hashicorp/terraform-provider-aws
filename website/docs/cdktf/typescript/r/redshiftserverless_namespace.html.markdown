---
subcategory: "Redshift Serverless"
layout: "aws"
page_title: "AWS: aws_redshiftserverless_namespace"
description: |-
  Provides a Redshift Serverless Namespace resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_redshiftserverless_namespace

Creates a new Amazon Redshift Serverless Namespace.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { RedshiftserverlessNamespace } from "./.gen/providers/aws/redshiftserverless-namespace";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new RedshiftserverlessNamespace(this, "example", {
      namespaceName: "concurrency-scaling",
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `adminPasswordSecretKmsKeyId` - (Optional) ID of the KMS key used to encrypt the namespace's admin credentials secret.
* `adminUserPassword` - (Optional) The password of the administrator for the first database created in the namespace.
  Conflicts with `manageAdminPassword`.
* `adminUsername` - (Optional) The username of the administrator for the first database created in the namespace.
* `dbName` - (Optional) The name of the first database created in the namespace.
* `defaultIamRoleArn` - (Optional) The Amazon Resource Name (ARN) of the IAM role to set as a default in the namespace. When specifying `defaultIamRoleArn`, it also must be part of `iamRoles`.
* `iamRoles` - (Optional) A list of IAM roles to associate with the namespace.
* `kmsKeyId` - (Optional) The ARN of the Amazon Web Services Key Management Service key used to encrypt your data.
* `logExports` - (Optional) The types of logs the namespace can export. Available export types are `userlog`, `connectionlog`, and `useractivitylog`.
* `namespaceName` - (Required) The name of the namespace.
* `manageAdminPassword` - (Optional) Whether to use AWS SecretManager to manage namespace's admin credentials.
  Conflicts with `adminUserPassword`.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of the Redshift Serverless Namespace.
* `id` - The Redshift Namespace Name.
* `namespaceId` - The Redshift Namespace ID.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Redshift Serverless Namespaces using the `namespaceName`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { RedshiftserverlessNamespace } from "./.gen/providers/aws/redshiftserverless-namespace";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    RedshiftserverlessNamespace.generateConfigForImport(
      this,
      "example",
      "example"
    );
  }
}

```

Using `terraform import`, import Redshift Serverless Namespaces using the `namespaceName`. For example:

```console
% terraform import aws_redshiftserverless_namespace.example example
```

<!-- cache-key: cdktf-0.20.1 input-8d0f329acb579c9de6ce6c6afe0ed3c4d9e31fd6288ff616419eeab5e656c8db -->