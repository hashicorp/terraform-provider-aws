---
subcategory: "Direct Connect"
layout: "aws"
page_title: "AWS: aws_dx_hosted_transit_virtual_interface_accepter"
description: |-
  Provides a resource to manage the accepter's side of a Direct Connect hosted transit virtual interface.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_dx_hosted_transit_virtual_interface_accepter

Provides a resource to manage the accepter's side of a Direct Connect hosted transit virtual interface.
This resource accepts ownership of a transit virtual interface created by another AWS account.

-> **NOTE:** AWS allows a Direct Connect hosted transit virtual interface to be deleted from either the allocator's or accepter's side. However, Terraform only allows the Direct Connect hosted transit virtual interface to be deleted from the allocator's side by removing the corresponding `aws_dx_hosted_transit_virtual_interface` resource from your configuration. Removing a `aws_dx_hosted_transit_virtual_interface_accepter` resource from your configuration will remove it from your statefile and management, **but will not delete the Direct Connect virtual interface.**

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { DxGateway } from "./.gen/providers/aws/dx-gateway";
import { DxHostedTransitVirtualInterface } from "./.gen/providers/aws/dx-hosted-transit-virtual-interface";
import { DxHostedTransitVirtualInterfaceAccepter } from "./.gen/providers/aws/dx-hosted-transit-virtual-interface-accepter";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {});
    const accepter = new AwsProvider(this, "aws_1", {
      alias: "accepter",
    });
    const example = new DxGateway(this, "example", {
      amazonSideAsn: Token.asString(64512),
      name: "tf-dxg-example",
      provider: accepter,
    });
    const dataAwsCallerIdentityAccepter = new DataAwsCallerIdentity(
      this,
      "accepter",
      {
        provider: accepter,
      }
    );
    const creator = new DxHostedTransitVirtualInterface(this, "creator", {
      addressFamily: "ipv4",
      bgpAsn: 65352,
      connectionId: "dxcon-zzzzzzzz",
      dependsOn: [example],
      name: "tf-transit-vif-example",
      ownerAccountId: Token.asString(dataAwsCallerIdentityAccepter.accountId),
      vlan: 4094,
    });
    const awsDxHostedTransitVirtualInterfaceAccepterAccepter =
      new DxHostedTransitVirtualInterfaceAccepter(this, "accepter_5", {
        dxGatewayId: example.id,
        provider: accepter,
        tags: {
          Side: "Accepter",
        },
        virtualInterfaceId: creator.id,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDxHostedTransitVirtualInterfaceAccepterAccepter.overrideLogicalId(
      "accepter"
    );
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `dxGatewayId` - (Required) The ID of the [Direct Connect gateway](dx_gateway.html) to which to connect the virtual interface.
* `virtualInterfaceId` - (Required) The ID of the Direct Connect virtual interface to accept.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the virtual interface.
* `arn` - The ARN of the virtual interface.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `10m`)
- `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Direct Connect hosted transit virtual interfaces using the VIF `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DxHostedTransitVirtualInterfaceAccepter } from "./.gen/providers/aws/dx-hosted-transit-virtual-interface-accepter";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DxHostedTransitVirtualInterfaceAccepter.generateConfigForImport(
      this,
      "test",
      "dxvif-33cc44dd"
    );
  }
}

```

Using `terraform import`, import Direct Connect hosted transit virtual interfaces using the VIF `id`. For example:

```console
% terraform import aws_dx_hosted_transit_virtual_interface_accepter.test dxvif-33cc44dd
```

<!-- cache-key: cdktf-0.20.8 input-11153e84fd4c6aad81c1acf38c978286aaac606a6d4e54cc6058708bc8cb04ba -->