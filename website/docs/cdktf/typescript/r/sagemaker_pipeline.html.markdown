---
subcategory: "SageMaker"
layout: "aws"
page_title: "AWS: aws_sagemaker_pipeline"
description: |-
  Provides a SageMaker Pipeline resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_sagemaker_pipeline

Provides a SageMaker Pipeline resource.

## Example Usage

### Basic usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SagemakerPipeline } from "./.gen/providers/aws/sagemaker-pipeline";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new SagemakerPipeline(this, "example", {
      pipelineDefinition: Token.asString(
        Fn.jsonencode({
          Steps: [
            {
              Arguments: {
                ErrorMessage: "test",
              },
              Name: "Test",
              Type: "Fail",
            },
          ],
          Version: "2020-12-01",
        })
      ),
      pipelineDisplayName: "example",
      pipelineName: "example",
      roleArn: Token.asString(awsIamRoleExample.arn),
    });
  }
}

```

## Argument Reference

The following arguments are supported:

* `pipelineName` - (Required) The name of the pipeline.
* `pipelineDescription` - (Optional) A description of the pipeline.
* `pipelineDisplayName` - (Required) The display name of the pipeline.
* `pipelineDefinition` - (Optional) The [JSON pipeline definition](https://aws-sagemaker-mlops.github.io/sagemaker-model-building-pipeline-definition-JSON-schema/) of the pipeline.
* `pipelineDefinitionS3Location` - (Optional) The location of the pipeline definition stored in Amazon S3. If specified, SageMaker will retrieve the pipeline definition from this location. see [Pipeline Definition S3 Location](#pipeline-definition-s3-location) details below.
* `roleArn` - (Required) The ARN of the IAM role the pipeline will execute as.
* `parallelismConfiguration` - (Optional) This is the configuration that controls the parallelism of the pipeline. If specified, it applies to all runs of this pipeline by default. see [Parallelism Configuration](#parallelism-configuration) details below.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### Parallelism Configuration

* `maxParallelExecutionSteps` - (Required) The max number of steps that can be executed in parallel.

### Pipeline Definition S3 Location

* `bucket` - (Required) Name of the S3 bucket.
* `objectKey` - (Required) The object key (or key name) uniquely identifies the object in an S3 bucket.
* `versionId` - (Optional) Version Id of the pipeline definition file. If not specified, Amazon SageMaker will retrieve the latest version.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The name of the Pipeline.
* `arn` - The Amazon Resource Name (ARN) assigned by AWS to this Pipeline.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import pipelines using the `pipelineName`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SagemakerPipeline } from "./.gen/providers/aws/sagemaker-pipeline";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    SagemakerPipeline.generateConfigForImport(this, "testPipeline", "pipeline");
  }
}

```

Using `terraform import`, import pipelines using the `pipelineName`. For example:

```console
% terraform import aws_sagemaker_pipeline.test_pipeline pipeline
```

<!-- cache-key: cdktf-0.20.1 input-d7d9406278252084fb1f7bd6ecb65a54d0e41065c5781c72cd26376e6a26ee56 -->