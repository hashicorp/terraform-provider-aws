---
subcategory: "IAM (Identity & Access Management)"
layout: "aws"
page_title: "AWS: aws_iam_role_policy_attachments_exclusive"
description: |-
  Terraform resource for maintaining exclusive management of managed IAM policies assigned to an AWS IAM (Identity & Access Management) role.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_iam_role_policy_attachments_exclusive

Terraform resource for maintaining exclusive management of managed IAM policies assigned to an AWS IAM (Identity & Access Management) role.

!> This resource takes exclusive ownership over managed IAM policies attached to a role. This includes removal of managed IAM policies which are not explicitly configured. To prevent persistent drift, ensure any `aws_iam_role_policy_attachment` resources managed alongside this resource are included in the `policyArns` argument.

~> Destruction of this resource means Terraform will no longer manage reconciliation of the configured policy attachments. It **will not** detach the configured policies from the role.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamRolePolicyAttachmentsExclusive } from "./.gen/providers/aws/iam-role-policy-attachments-exclusive";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new IamRolePolicyAttachmentsExclusive(this, "example", {
      policyArns: [Token.asString(awsIamPolicyExample.arn)],
      roleName: Token.asString(awsIamRoleExample.name),
    });
  }
}

```

### Disallow Managed IAM Policies

To automatically remove any configured managed IAM policies, set the `policyArns` argument to an empty list.

~> This will not **prevent** managed IAM policies from being assigned to a role via Terraform (or any other interface). This resource enables bringing managed IAM policy assignments into a configured state, however, this reconciliation happens only when `apply` is proactively run.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamRolePolicyAttachmentsExclusive } from "./.gen/providers/aws/iam-role-policy-attachments-exclusive";
interface MyConfig {
  policyArns: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new IamRolePolicyAttachmentsExclusive(this, "example", {
      policyArns: config.policyArns,
      roleName: Token.asString(awsIamRoleExample.name),
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `roleName` - (Required) IAM role name.
* `policyArns` - (Required) A list of managed IAM policy ARNs to be attached to the role. Policies attached to this role but not configured in this argument will be removed.

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to exclusively manage managed IAM policy assignments using the `roleName`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamRolePolicyAttachmentsExclusive } from "./.gen/providers/aws/iam-role-policy-attachments-exclusive";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    IamRolePolicyAttachmentsExclusive.generateConfigForImport(
      this,
      "example",
      "MyRole"
    );
  }
}

```

Using `terraform import`, import exclusive management of managed IAM policy assignments using the `roleName`. For example:

```console
% terraform import aws_iam_role_policy_attachments_exclusive.example MyRole
```

<!-- cache-key: cdktf-0.20.8 input-a5135068b3db13ffd9ddb9c5d59bfaf90f37d8a8fb32da3763ab1f2e150bbe1f -->