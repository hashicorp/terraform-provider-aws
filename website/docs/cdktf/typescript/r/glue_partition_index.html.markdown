---
subcategory: "Glue"
layout: "aws"
page_title: "AWS: aws_glue_partition_index"
description: |-
  Provides a Glue Partition Index.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_glue_partition_index

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueCatalogDatabase } from "./.gen/providers/aws/glue-catalog-database";
import { GlueCatalogTable } from "./.gen/providers/aws/glue-catalog-table";
import { GluePartitionIndex } from "./.gen/providers/aws/glue-partition-index";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new GlueCatalogDatabase(this, "example", {
      name: "example",
    });
    const awsGlueCatalogTableExample = new GlueCatalogTable(this, "example_1", {
      databaseName: example.name,
      name: "example",
      owner: "my_owner",
      parameters: {
        param1: "param1_val",
      },
      partitionKeys: [
        {
          comment: "my_column_1_comment",
          name: "my_column_1",
          type: "int",
        },
        {
          comment: "my_column_2_comment",
          name: "my_column_2",
          type: "string",
        },
      ],
      retention: 1,
      storageDescriptor: {
        bucketColumns: ["bucket_column_1"],
        columns: [
          {
            comment: "my_column1_comment",
            name: "my_column_1",
            type: "int",
          },
          {
            comment: "my_column2_comment",
            name: "my_column_2",
            type: "string",
          },
        ],
        compressed: false,
        inputFormat: "SequenceFileInputFormat",
        location: "my_location",
        numberOfBuckets: 1,
        outputFormat: "SequenceFileInputFormat",
        parameters: {
          param1: "param1_val",
        },
        serDeInfo: {
          name: "ser_de_name",
          parameters: {
            param1: "param_val_1",
          },
          serializationLibrary:
            "org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe",
        },
        skewedInfo: {
          skewedColumnNames: ["my_column_1"],
          skewedColumnValueLocationMaps: {
            my_column_1: "my_column_1_val_loc_map",
          },
          skewedColumnValues: ["skewed_val_1"],
        },
        sortColumns: [
          {
            column: "my_column_1",
            sortOrder: 1,
          },
        ],
        storedAsSubDirectories: false,
      },
      tableType: "VIRTUAL_VIEW",
      viewExpandedText: "view_expanded_text_1",
      viewOriginalText: "view_original_text_1",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsGlueCatalogTableExample.overrideLogicalId("example");
    const awsGluePartitionIndexExample = new GluePartitionIndex(
      this,
      "example_2",
      {
        databaseName: example.name,
        partitionIndex: {
          indexName: "example",
          keys: ["my_column_1", "my_column_2"],
        },
        tableName: Token.asString(awsGlueCatalogTableExample.name),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsGluePartitionIndexExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `tableName` - (Required) Name of the table. For Hive compatibility, this must be entirely lowercase.
* `databaseName` - (Required) Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
* `partitionIndex` - (Required) Configuration block for a partition index. See [`partitionIndex`](#partition_index) below.
* `catalogId` - (Optional) The catalog ID where the table resides.

### partition_index

* `indexName` - (Required) Name of the partition index.
* `keys` - (Required) Keys for the partition index.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Catalog ID, Database name, table name, and index name.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `10m`)
* `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Glue Partition Indexes using the catalog ID (usually AWS account ID), database name, table name, and index name. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GluePartitionIndex } from "./.gen/providers/aws/glue-partition-index";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    GluePartitionIndex.generateConfigForImport(
      this,
      "example",
      "123456789012:MyDatabase:MyTable:index-name"
    );
  }
}

```

Using `terraform import`, import Glue Partition Indexes using the catalog ID (usually AWS account ID), database name, table name, and index name. For example:

```console
% terraform import aws_glue_partition_index.example 123456789012:MyDatabase:MyTable:index-name
```

<!-- cache-key: cdktf-0.20.8 input-2c1eca414462f36b306c6c36d0f8b45e95a67975829b6e6678f2b74c1376628b -->