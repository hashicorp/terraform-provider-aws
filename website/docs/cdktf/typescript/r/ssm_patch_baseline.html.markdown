---
subcategory: "SSM (Systems Manager)"
layout: "aws"
page_title: "AWS: aws_ssm_patch_baseline"
description: |-
  Provides an SSM Patch Baseline resource
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ssm_patch_baseline

Provides an SSM Patch Baseline resource.

~> **NOTE on Patch Baselines:** The `approvedPatches` and `approvalRule` are
both marked as optional fields, but the Patch Baseline requires that at least one
of them is specified.

## Example Usage

### Basic Usage

Using `approvedPatches` only.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SsmPatchBaseline } from "./.gen/providers/aws/ssm-patch-baseline";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new SsmPatchBaseline(this, "production", {
      approvedPatches: ["KB123456"],
      name: "patch-baseline",
    });
  }
}

```

### Advanced Usage, specifying patch filters

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SsmPatchBaseline } from "./.gen/providers/aws/ssm-patch-baseline";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new SsmPatchBaseline(this, "production", {
      approvalRule: [
        {
          approveAfterDays: 7,
          complianceLevel: "HIGH",
          patchFilter: [
            {
              key: "PRODUCT",
              values: ["WindowsServer2016"],
            },
            {
              key: "CLASSIFICATION",
              values: ["CriticalUpdates", "SecurityUpdates", "Updates"],
            },
            {
              key: "MSRC_SEVERITY",
              values: ["Critical", "Important", "Moderate"],
            },
          ],
        },
        {
          approveAfterDays: 7,
          patchFilter: [
            {
              key: "PRODUCT",
              values: ["WindowsServer2012"],
            },
          ],
        },
      ],
      approvedPatches: ["KB123456", "KB456789"],
      description: "Patch Baseline Description",
      globalFilter: [
        {
          key: "PRODUCT",
          values: ["WindowsServer2008"],
        },
        {
          key: "CLASSIFICATION",
          values: ["ServicePacks"],
        },
        {
          key: "MSRC_SEVERITY",
          values: ["Low"],
        },
      ],
      name: "patch-baseline",
      rejectedPatches: ["KB987654"],
    });
  }
}

```

### Advanced usage, specifying Microsoft application and Windows patch rules

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SsmPatchBaseline } from "./.gen/providers/aws/ssm-patch-baseline";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new SsmPatchBaseline(this, "windows_os_apps", {
      approvalRule: [
        {
          approveAfterDays: 7,
          patchFilter: [
            {
              key: "CLASSIFICATION",
              values: ["CriticalUpdates", "SecurityUpdates"],
            },
            {
              key: "MSRC_SEVERITY",
              values: ["Critical", "Important"],
            },
          ],
        },
        {
          approveAfterDays: 7,
          patchFilter: [
            {
              key: "PATCH_SET",
              values: ["APPLICATION"],
            },
            {
              key: "PRODUCT",
              values: ["Office 2013", "Office 2016"],
            },
          ],
        },
      ],
      description: "Patch both Windows and Microsoft apps",
      name: "WindowsOSAndMicrosoftApps",
      operatingSystem: "WINDOWS",
    });
  }
}

```

### Advanced usage, specifying alternate patch source repository

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SsmPatchBaseline } from "./.gen/providers/aws/ssm-patch-baseline";
interface MyConfig {
  patchFilter: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new SsmPatchBaseline(this, "al_2017_09", {
      approvalRule: [
        {
          patchFilter: config.patchFilter,
        },
      ],
      description: "My patch repository for Amazon Linux 2017.09",
      name: "Amazon-Linux-2017.09",
      operatingSystem: "AMAZON_LINUX",
      source: [
        {
          configuration:
            "[amzn-main]\nname=amzn-main-Base\nmirrorlist=http://repo./$awsregion./$awsdomain//$releasever/main/mirror.list\nmirrorlist_expire=300\nmetadata_expire=300\npriority=10\nfailovermethod=priority\nfastestmirror_enabled=0\ngpgcheck=1\ngpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-amazon-ga\nenabled=1\nretries=3\ntimeout=5\nreport_instanceid=yes\n\n",
          name: "My-AL2017.09",
          products: ["AmazonLinux2017.09"],
        },
      ],
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `name` - (Required) Name of the patch baseline.

The following arguments are optional:

* `approvalRule` - (Optional) Set of rules used to include patches in the baseline. Up to 10 approval rules can be specified. See [`approvalRule`](#approval_rule-block) below.
* `approvedPatchesComplianceLevel` - (Optional) Compliance level for approved patches. This means that if an approved patch is reported as missing, this is the severity of the compliance violation. Valid values are `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, `UNSPECIFIED`. The default value is `UNSPECIFIED`.
* `approvedPatchesEnableNonSecurity` - (Optional) Whether the list of approved patches includes non-security updates that should be applied to the instances. Applies to Linux instances only.
* `approvedPatches` - (Optional) List of explicitly approved patches for the baseline. Cannot be specified with `approvalRule`.
* `description` - (Optional) Description of the patch baseline.
* `globalFilter` - (Optional) Set of global filters used to exclude patches from the baseline. Up to 4 global filters can be specified using Key/Value pairs. Valid Keys are `PRODUCT`, `CLASSIFICATION`, `MSRC_SEVERITY`, and `PATCH_ID`.
* `operatingSystem` - (Optional) Operating system the patch baseline applies to. Valid values are `ALMA_LINUX`, `AMAZON_LINUX`, `AMAZON_LINUX_2`, `AMAZON_LINUX_2022`, `AMAZON_LINUX_2023`, `CENTOS`, `DEBIAN`, `MACOS`, `ORACLE_LINUX`, `RASPBIAN`, `REDHAT_ENTERPRISE_LINUX`, `ROCKY_LINUX`, `SUSE`, `UBUNTU`, and `WINDOWS`. The default value is `WINDOWS`.
* `rejectedPatchesAction` - (Optional) Action for Patch Manager to take on patches included in the `rejectedPatches` list. Valid values are `ALLOW_AS_DEPENDENCY` and `BLOCK`.
* `rejectedPatches` - (Optional) List of rejected patches.
* `source` - (Optional) Configuration block with alternate sources for patches. Applies to Linux instances only. See [`source`](#source-block) below.
* `tags` - (Optional) Map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### `approvalRule` Block

The `approvalRule` block supports:

* `approveAfterDays` - (Optional) Number of days after the release date of each patch matched by the rule the patch is marked as approved in the patch baseline. Valid Range: 0 to 360. Conflicts with `approveUntilDate`.
* `approveUntilDate` - (Optional) Cutoff date for auto approval of released patches. Any patches released on or before this date are installed automatically. Date is formatted as `YYYY-MM-DD`. Conflicts with `approveAfterDays`
* `complianceLevel` - (Optional) Compliance level for patches approved by this rule. Valid values are `CRITICAL`, `HIGH`, `MEDIUM`, `LOW`, `INFORMATIONAL`, and `UNSPECIFIED`. The default value is `UNSPECIFIED`.
* `enableNonSecurity` - (Optional) Boolean enabling the application of non-security updates. The default value is `false`. Valid for Linux instances only.
* `patchFilter` - (Required) Patch filter group that defines the criteria for the rule. Up to 5 patch filters can be specified per approval rule using Key/Value pairs. Valid combinations of these Keys and the `operatingSystem` value can be found in the [SSM DescribePatchProperties API Reference](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_DescribePatchProperties.html). Valid Values are exact values for the patch property given as the key, or a wildcard `*`, which matches all values. `PATCH_SET` defaults to `OS` if unspecified

### `source` Block

The `source` block supports:

* `configuration` - (Required) Value of the yum repo configuration. For information about other options available for your yum repository configuration, see the [`dnf.conf` documentation](https://man7.org/linux/man-pages/man5/dnf.conf.5.html)
* `name` - (Required) Name specified to identify the patch source.
* `products` - (Required) Specific operating system versions a patch repository applies to, such as `"Ubuntu16.04"`, `"AmazonLinux2016.09"`, `"RedhatEnterpriseLinux7.2"` or `"Suse12.7"`. For lists of supported product values, see [PatchFilter](https://docs.aws.amazon.com/systems-manager/latest/APIReference/API_PatchFilter.html).

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the baseline.
* `id` - ID of the baseline.
* `json` - JSON definition of the baseline.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import SSM Patch Baselines using their baseline ID. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SsmPatchBaseline } from "./.gen/providers/aws/ssm-patch-baseline";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    SsmPatchBaseline.generateConfigForImport(this, "example", "pb-12345678");
  }
}

```

Using `terraform import`, import SSM Patch Baselines using their baseline ID. For example:

```console
% terraform import aws_ssm_patch_baseline.example pb-12345678
```

<!-- cache-key: cdktf-0.20.8 input-d90cddc19e640746352069e28b90513d24cc39745f4e804b35c6c7f4eebc1dbe -->