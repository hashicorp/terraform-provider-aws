---
subcategory: "ELB Classic"
layout: "aws"
page_title: "AWS: aws_lb_ssl_negotiation_policy"
description: |-
  Provides a load balancer SSL negotiation policy, which allows an ELB to control which ciphers and protocols are supported during SSL negotiations between a client and a load balancer.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_lb_ssl_negotiation_policy

Provides a load balancer SSL negotiation policy, which allows an ELB to control the ciphers and protocols that are supported during SSL negotiations between a client and a load balancer.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Elb } from "./.gen/providers/aws/elb";
import { LbSslNegotiationPolicy } from "./.gen/providers/aws/lb-ssl-negotiation-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const lb = new Elb(this, "lb", {
      availabilityZones: ["us-east-1a"],
      listener: [
        {
          instancePort: 8000,
          instanceProtocol: "https",
          lbPort: 443,
          lbProtocol: "https",
          sslCertificateId:
            "arn:aws:iam::123456789012:server-certificate/certName",
        },
      ],
      name: "test-lb",
    });
    new LbSslNegotiationPolicy(this, "foo", {
      attribute: [
        {
          name: "Protocol-TLSv1",
          value: "false",
        },
        {
          name: "Protocol-TLSv1.1",
          value: "false",
        },
        {
          name: "Protocol-TLSv1.2",
          value: "true",
        },
        {
          name: "Server-Defined-Cipher-Order",
          value: "true",
        },
        {
          name: "ECDHE-RSA-AES128-GCM-SHA256",
          value: "true",
        },
        {
          name: "AES128-GCM-SHA256",
          value: "true",
        },
        {
          name: "EDH-RSA-DES-CBC3-SHA",
          value: "false",
        },
      ],
      lbPort: 443,
      loadBalancer: lb.id,
      name: "foo-policy",
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The name of the SSL negotiation policy.
* `loadBalancer` - (Required) The load balancer to which the policy
  should be attached.
* `lbPort` - (Required) The load balancer port to which the policy
  should be applied. This must be an active listener on the load
balancer.
* `attribute` - (Optional) An SSL Negotiation policy attribute. Each has two properties:
    * `name` - The name of the attribute
    * `value` - The value of the attribute
* `triggers` - (Optional) Map of arbitrary keys and values that, when changed, will trigger a redeployment. To force a redeployment without changing these keys/values, use the [`terraform taint` command](https://www.terraform.io/docs/commands/taint.html).

To set your attributes, please see the [AWS Elastic Load Balancing Developer Guide](http://docs.aws.amazon.com/ElasticLoadBalancing/latest/DeveloperGuide/elb-security-policy-table.html) for a listing of the supported SSL protocols, SSL options, and SSL ciphers.

~> **NOTE:** The AWS documentation references Server Order Preference, which the AWS Elastic Load Balancing API refers to as `Server-Defined-Cipher-Order`. If you wish to set Server Order Preference, use this value instead.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the policy.
* `name` - The name of the stickiness policy.
* `loadBalancer` - The load balancer to which the policy is attached.
* `lbPort` - The load balancer port to which the policy is applied.
* `attribute` - The SSL Negotiation policy attributes.

<!-- cache-key: cdktf-0.20.8 input-594ecbf0ae1086664299c0bd8eab81534e805963be3a73733449f7041f731403 -->