---
subcategory: "ACM (Certificate Manager)"
layout: "aws"
page_title: "AWS: aws_acm_certificate_validation"
description: |-
  Waits for and checks successful validation of an ACM certificate.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_acm_certificate_validation

This resource represents a successful validation of an ACM certificate in concert
with other resources.

Most commonly, this resource is used together with [`aws_route53_record`](route53_record.html) and
[`aws_acm_certificate`](acm_certificate.html) to request a DNS validated certificate,
deploy the required validation records and wait for validation to complete.

~> **WARNING:** This resource implements a part of the validation workflow. It does not represent a real-world entity in AWS, therefore changing or deleting this resource on its own has no immediate effect.

## Example Usage

### DNS Validation with Route 53

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformIterator, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AcmCertificate } from "./.gen/providers/aws/acm-certificate";
import { AcmCertificateValidation } from "./.gen/providers/aws/acm-certificate-validation";
import { DataAwsRoute53Zone } from "./.gen/providers/aws/data-aws-route53-zone";
import { LbListener } from "./.gen/providers/aws/lb-listener";
import { Route53Record } from "./.gen/providers/aws/route53-record";
interface MyConfig {
  defaultAction: any;
  loadBalancerArn: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    const example = new AcmCertificate(this, "example", {
      domainName: "example.com",
      validationMethod: "DNS",
    });
    const dataAwsRoute53ZoneExample = new DataAwsRoute53Zone(
      this,
      "example_1",
      {
        name: "example.com",
        privateZone: false,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsRoute53ZoneExample.overrideLogicalId("example");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const exampleForEachIterator = TerraformIterator.fromList(
      Token.asAny(
        "${{ for dvo in ${" +
          example.domainValidationOptions +
          "} : dvo.domain_name => {\n      name   = dvo.resource_record_name\n      record = dvo.resource_record_value\n      type   = dvo.resource_record_type\n    }}}"
      )
    );
    const awsRoute53RecordExample = new Route53Record(this, "example_2", {
      allowOverwrite: true,
      name: Token.asString(
        Fn.lookupNested(exampleForEachIterator.value, ["name"])
      ),
      records: [
        Token.asString(
          Fn.lookupNested(exampleForEachIterator.value, ["record"])
        ),
      ],
      ttl: 60,
      type: Token.asString(
        Fn.lookupNested(exampleForEachIterator.value, ["type"])
      ),
      zoneId: Token.asString(dataAwsRoute53ZoneExample.zoneId),
      forEach: exampleForEachIterator,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRoute53RecordExample.overrideLogicalId("example");
    const awsAcmCertificateValidationExample = new AcmCertificateValidation(
      this,
      "example_3",
      {
        certificateArn: example.arn,
        validationRecordFqdns: Token.asList(
          "${[ for record in ${" +
            awsRoute53RecordExample.fqn +
            "} : record.fqdn]}"
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAcmCertificateValidationExample.overrideLogicalId("example");
    const awsLbListenerExample = new LbListener(this, "example_4", {
      certificateArn: Token.asString(
        awsAcmCertificateValidationExample.certificateArn
      ),
      defaultAction: config.defaultAction,
      loadBalancerArn: config.loadBalancerArn,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsLbListenerExample.overrideLogicalId("example");
  }
}

```

### Alternative Domains DNS Validation with Route 53

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformIterator, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AcmCertificate } from "./.gen/providers/aws/acm-certificate";
import { AcmCertificateValidation } from "./.gen/providers/aws/acm-certificate-validation";
import { DataAwsRoute53Zone } from "./.gen/providers/aws/data-aws-route53-zone";
import { LbListener } from "./.gen/providers/aws/lb-listener";
import { Route53Record } from "./.gen/providers/aws/route53-record";
interface MyConfig {
  defaultAction: any;
  loadBalancerArn: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    const example = new AcmCertificate(this, "example", {
      domainName: "example.com",
      subjectAlternativeNames: ["www.example.com", "example.org"],
      validationMethod: "DNS",
    });
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const exampleForEachIterator = TerraformIterator.fromList(
      Token.asAny(
        "${{ for dvo in ${" +
          example.domainValidationOptions +
          '} : dvo.domain_name => {\n      name    = dvo.resource_record_name\n      record  = dvo.resource_record_value\n      type    = dvo.resource_record_type\n      zone_id = dvo.domain_name == "example.org" ? data.aws_route53_zone.example_org.zone_id : data.aws_route53_zone.example_com.zone_id\n    }}}'
      )
    );
    const awsRoute53RecordExample = new Route53Record(this, "example_1", {
      allowOverwrite: true,
      name: Token.asString(
        Fn.lookupNested(exampleForEachIterator.value, ["name"])
      ),
      records: [
        Token.asString(
          Fn.lookupNested(exampleForEachIterator.value, ["record"])
        ),
      ],
      ttl: 60,
      type: Token.asString(
        Fn.lookupNested(exampleForEachIterator.value, ["type"])
      ),
      zoneId: Token.asString(
        Fn.lookupNested(exampleForEachIterator.value, ["zone_id"])
      ),
      forEach: exampleForEachIterator,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRoute53RecordExample.overrideLogicalId("example");
    new DataAwsRoute53Zone(this, "example_com", {
      name: "example.com",
      privateZone: false,
    });
    new DataAwsRoute53Zone(this, "example_org", {
      name: "example.org",
      privateZone: false,
    });
    const awsAcmCertificateValidationExample = new AcmCertificateValidation(
      this,
      "example_4",
      {
        certificateArn: example.arn,
        validationRecordFqdns: Token.asList(
          "${[ for record in ${" +
            awsRoute53RecordExample.fqn +
            "} : record.fqdn]}"
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAcmCertificateValidationExample.overrideLogicalId("example");
    const awsLbListenerExample = new LbListener(this, "example_5", {
      certificateArn: Token.asString(
        awsAcmCertificateValidationExample.certificateArn
      ),
      defaultAction: config.defaultAction,
      loadBalancerArn: config.loadBalancerArn,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsLbListenerExample.overrideLogicalId("example");
  }
}

```

### Email Validation

In this situation, the resource is simply a waiter for manual email approval of ACM certificates.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AcmCertificate } from "./.gen/providers/aws/acm-certificate";
import { AcmCertificateValidation } from "./.gen/providers/aws/acm-certificate-validation";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new AcmCertificate(this, "example", {
      domainName: "example.com",
      validationMethod: "EMAIL",
    });
    const awsAcmCertificateValidationExample = new AcmCertificateValidation(
      this,
      "example_1",
      {
        certificateArn: example.arn,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAcmCertificateValidationExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `certificateArn` - (Required) ARN of the certificate that is being validated.
* `validationRecordFqdns` - (Optional) List of FQDNs that implement the validation. Only valid for DNS validation method ACM certificates. If this is set, the resource can implement additional sanity checks and has an explicit dependency on the resource that is implementing the validation

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Time at which the certificate was issued

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `75m`)

<!-- cache-key: cdktf-0.20.8 input-bd8c04ee824aa9ba9e41a615796c1554d255a22e9d0a9dd833af77b9c40bb301 -->