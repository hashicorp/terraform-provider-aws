---
subcategory: "EBS (EC2)"
layout: "aws"
page_title: "AWS: aws_ebs_snapshot"
description: |-
  Provides an elastic block storage snapshot resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ebs_snapshot

Creates a Snapshot of an EBS Volume.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EbsSnapshot } from "./.gen/providers/aws/ebs-snapshot";
import { EbsVolume } from "./.gen/providers/aws/ebs-volume";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new EbsVolume(this, "example", {
      availabilityZone: "us-west-2a",
      size: 40,
      tags: {
        Name: "HelloWorld",
      },
    });
    new EbsSnapshot(this, "example_snapshot", {
      tags: {
        Name: "HelloWorld_snap",
      },
      volumeId: example.id,
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `volumeId` - (Required) The Volume ID of which to make a snapshot.
* `description` - (Optional) A description of what the snapshot is.
* `outpostArn` - (Optional) The Amazon Resource Name (ARN) of the Outpost on which to create a local snapshot.
* `storageTier` - (Optional) The name of the storage tier. Valid values are `archive` and `standard`. Default value is `standard`.
* `permanentRestore` - (Optional) Indicates whether to permanently restore an archived snapshot.
* `temporaryRestoreDays` - (Optional) Specifies the number of days for which to temporarily restore an archived snapshot. Required for temporary restores only. The snapshot will be automatically re-archived after this period.
* `tags` - (Optional) A map of tags to assign to the snapshot. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of the EBS Snapshot.
* `id` - The snapshot ID (e.g., snap-59fcb34e).
* `ownerId` - The AWS account ID of the EBS snapshot owner.
* `ownerAlias` - Value from an Amazon-maintained list (`amazon`, `aws-marketplace`, `microsoft`) of snapshot owners.
* `encrypted` - Whether the snapshot is encrypted.
* `volumeSize` - The size of the drive in GiBs.
* `kmsKeyId` - The ARN for the KMS encryption key.
* `dataEncryptionKeyId` - The data encryption key identifier for the snapshot.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `10m`)
- `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import EBS Snapshot using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EbsSnapshot } from "./.gen/providers/aws/ebs-snapshot";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    EbsSnapshot.generateConfigForImport(this, "id", "snap-049df61146c4d7901");
  }
}

```

Using `terraform import`, import EBS Snapshot using the `id`. For example:

```console
% terraform import aws_ebs_snapshot.id snap-049df61146c4d7901
```

<!-- cache-key: cdktf-0.20.8 input-1e7edd88fa309f9a2fbc01f16873ff7d886c948a085d015d286894010821fe01 -->