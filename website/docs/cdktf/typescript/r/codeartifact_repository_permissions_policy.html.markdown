---
subcategory: "CodeArtifact"
layout: "aws"
page_title: "AWS: aws_codeartifact_repository_permissions_policy"
description: |-
  Provides a CodeArtifact Repository Permissions Policy resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_codeartifact_repository_permissions_policy

Provides a CodeArtifact Repostory Permissions Policy Resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CodeartifactDomain } from "./.gen/providers/aws/codeartifact-domain";
import { CodeartifactRepository } from "./.gen/providers/aws/codeartifact-repository";
import { CodeartifactRepositoryPermissionsPolicy } from "./.gen/providers/aws/codeartifact-repository-permissions-policy";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { KmsKey } from "./.gen/providers/aws/kms-key";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new KmsKey(this, "example", {
      description: "domain key",
    });
    const awsCodeartifactDomainExample = new CodeartifactDomain(
      this,
      "example_1",
      {
        domain: "example",
        encryptionKey: example.arn,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCodeartifactDomainExample.overrideLogicalId("example");
    const awsCodeartifactRepositoryExample = new CodeartifactRepository(
      this,
      "example_2",
      {
        domain: Token.asString(awsCodeartifactDomainExample.domain),
        repository: "example",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCodeartifactRepositoryExample.overrideLogicalId("example");
    const dataAwsIamPolicyDocumentExample = new DataAwsIamPolicyDocument(
      this,
      "example_3",
      {
        statement: [
          {
            actions: ["codeartifact:ReadFromRepository"],
            effect: "Allow",
            principals: [
              {
                identifiers: ["*"],
                type: "*",
              },
            ],
            resources: [Token.asString(awsCodeartifactRepositoryExample.arn)],
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsIamPolicyDocumentExample.overrideLogicalId("example");
    const awsCodeartifactRepositoryPermissionsPolicyExample =
      new CodeartifactRepositoryPermissionsPolicy(this, "example_4", {
        domain: Token.asString(awsCodeartifactDomainExample.domain),
        policyDocument: Token.asString(dataAwsIamPolicyDocumentExample.json),
        repository: Token.asString(awsCodeartifactRepositoryExample.repository),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCodeartifactRepositoryPermissionsPolicyExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `repository` - (Required) The name of the repository to set the resource policy on.
* `domain` - (Required) The name of the domain on which to set the resource policy.
* `policyDocument` - (Required) A JSON policy string to be set as the access control resource policy on the provided domain.
* `domainOwner` - (Optional) The account number of the AWS account that owns the domain.
* `policyRevision` - (Optional) The current revision of the resource policy to be set. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ARN of the resource associated with the resource policy.
* `resourceArn` - The ARN of the resource associated with the resource policy.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import CodeArtifact Repository Permissions Policies using the CodeArtifact Repository ARN. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CodeartifactRepositoryPermissionsPolicy } from "./.gen/providers/aws/codeartifact-repository-permissions-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    CodeartifactRepositoryPermissionsPolicy.generateConfigForImport(
      this,
      "example",
      "arn:aws:codeartifact:us-west-2:012345678912:repository/tf-acc-test-6968272603913957763/tf-acc-test-6968272603913957763"
    );
  }
}

```

Using `terraform import`, import CodeArtifact Repository Permissions Policies using the CodeArtifact Repository ARN. For example:

```console
% terraform import aws_codeartifact_repository_permissions_policy.example arn:aws:codeartifact:us-west-2:012345678912:repository/tf-acc-test-6968272603913957763/tf-acc-test-6968272603913957763
```

<!-- cache-key: cdktf-0.20.8 input-2609ffac94d64cc0a79333020641c78ce36e999d6d8358e8f31df4a0ce52ddb0 -->