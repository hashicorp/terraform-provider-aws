---
subcategory: "RDS (Relational Database)"
layout: "aws"
page_title: "AWS: aws_db_cluster_snapshot"
description: |-
  Manages an RDS database cluster snapshot.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_db_cluster_snapshot

Manages an RDS database cluster snapshot for Aurora clusters. For managing RDS database instance snapshots, see the [`aws_db_snapshot` resource](/docs/providers/aws/r/db_snapshot.html).

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DbClusterSnapshot } from "./.gen/providers/aws/db-cluster-snapshot";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new DbClusterSnapshot(this, "example", {
      dbClusterIdentifier: Token.asString(awsRdsClusterExample.id),
      dbClusterSnapshotIdentifier: "resourcetestsnapshot1234",
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `dbClusterIdentifier` - (Required) The DB Cluster Identifier from which to take the snapshot.
* `dbClusterSnapshotIdentifier` - (Required) The Identifier for the snapshot.
* `sharedAccounts` - (Optional) List of AWS Account ids to share snapshot with, use `all` to make snaphot public.
* `tags` - (Optional) A map of tags to assign to the DB cluster. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `allocatedStorage` - Allocated storage size in gigabytes (GB).
* `availabilityZones` - List of EC2 Availability Zones that instances in the DB cluster snapshot can be restored in.
* `dbClusterSnapshotArn` - The Amazon Resource Name (ARN) for the DB Cluster Snapshot.
* `engine` - Name of the database engine.
* `engineVersion` - Version of the database engine for this DB cluster snapshot.
* `kmsKeyId` - If storage_encrypted is true, the AWS KMS key identifier for the encrypted DB cluster snapshot.
* `licenseModel` - License model information for the restored DB cluster.
* `port` - Port that the DB cluster was listening on at the time of the snapshot.

* `source_db_cluster_snapshot_identifier` - DB Cluster Snapshot ARN that the DB Cluster Snapshot was copied from. It only has value in case of cross customer or cross region copy.
* `storageEncrypted` - Whether the DB cluster snapshot is encrypted.
* `status` - The status of this DB Cluster Snapshot.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).
* `vpcId` - The VPC ID associated with the DB cluster snapshot.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `20m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_db_cluster_snapshot` using the cluster snapshot identifier. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DbClusterSnapshot } from "./.gen/providers/aws/db-cluster-snapshot";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DbClusterSnapshot.generateConfigForImport(
      this,
      "example",
      "my-cluster-snapshot"
    );
  }
}

```

Using `terraform import`, import `aws_db_cluster_snapshot` using the cluster snapshot identifier. For example:

```console
% terraform import aws_db_cluster_snapshot.example my-cluster-snapshot
```

<!-- cache-key: cdktf-0.20.1 input-045a88e8d45fb91c8f6bdd2ec66e16ba6b0181babf91868a0b18c493913fc802 -->