---
subcategory: "Route 53 Resolver"
layout: "aws"
page_title: "AWS: aws_route53_resolver_config"
description: |-
  Provides a Route 53 Resolver config resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_route53_resolver_config

Provides a Route 53 Resolver config resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Route53ResolverConfig } from "./.gen/providers/aws/route53-resolver-config";
import { Vpc } from "./.gen/providers/aws/vpc";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new Vpc(this, "example", {
      cidrBlock: "10.0.0.0/16",
      enableDnsHostnames: true,
      enableDnsSupport: true,
    });
    const awsRoute53ResolverConfigExample = new Route53ResolverConfig(
      this,
      "example_1",
      {
        autodefinedReverseFlag: "DISABLE",
        resourceId: example.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRoute53ResolverConfigExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `resourceId` - (Required) The ID of the VPC that the configuration is for.
* `autodefinedReverseFlag` - (Required) Indicates whether or not the Resolver will create autodefined rules for reverse DNS lookups. Valid values: `ENABLE`, `DISABLE`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the resolver configuration.
* `ownerId` - The AWS account ID of the owner of the VPC that this resolver configuration applies to.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Route 53 Resolver configs using the Route 53 Resolver config ID. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Route53ResolverConfig } from "./.gen/providers/aws/route53-resolver-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    Route53ResolverConfig.generateConfigForImport(
      this,
      "example",
      "rslvr-rc-715aa20c73a23da7"
    );
  }
}

```

Using `terraform import`, import Route 53 Resolver configs using the Route 53 Resolver config ID. For example:

```console
% terraform import aws_route53_resolver_config.example rslvr-rc-715aa20c73a23da7
```

<!-- cache-key: cdktf-0.20.8 input-9e9ab64717f5492816cdea672c9253b6943b2cad6b967b971fcb44194acec4cf -->