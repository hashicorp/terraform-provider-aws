---
subcategory: "Security Hub"
layout: "aws"
page_title: "AWS: aws_securityhub_configuration_policy"
description: |-
  Provides a resource to manage Security Hub configuration policy
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_securityhub_configuration_policy

Manages Security Hub configuration policy

~> **NOTE:** This resource requires [`aws_securityhub_organization_configuration`](/docs/providers/aws/r/securityhub_organization_admin_account.html) to be configured of type `CENTRAL`. More information about Security Hub central configuration and configuration policies can be found in the [How Security Hub configuration policies work](https://docs.aws.amazon.com/securityhub/latest/userguide/configuration-policies-overview.html) documentation.

## Example Usage

### Default standards enabled

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SecurityhubConfigurationPolicy } from "./.gen/providers/aws/securityhub-configuration-policy";
import { SecurityhubFindingAggregator } from "./.gen/providers/aws/securityhub-finding-aggregator";
import { SecurityhubOrganizationConfiguration } from "./.gen/providers/aws/securityhub-organization-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new SecurityhubFindingAggregator(this, "example", {
      linkingMode: "ALL_REGIONS",
    });
    const awsSecurityhubOrganizationConfigurationExample =
      new SecurityhubOrganizationConfiguration(this, "example_1", {
        autoEnable: false,
        autoEnableStandards: "NONE",
        dependsOn: [example],
        organizationConfiguration: {
          configurationType: "CENTRAL",
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSecurityhubOrganizationConfigurationExample.overrideLogicalId("example");
    const awsSecurityhubConfigurationPolicyExample =
      new SecurityhubConfigurationPolicy(this, "example_2", {
        configurationPolicy: {
          enabledStandardArns: [
            "arn:aws:securityhub:us-east-1::standards/aws-foundational-security-best-practices/v/1.0.0",
            "arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0",
          ],
          securityControlsConfiguration: {
            disabledControlIdentifiers: [],
          },
          serviceEnabled: true,
        },
        dependsOn: [awsSecurityhubOrganizationConfigurationExample],
        description: "This is an example configuration policy",
        name: "Example",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSecurityhubConfigurationPolicyExample.overrideLogicalId("example");
  }
}

```

### Disabled Policy

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SecurityhubConfigurationPolicy } from "./.gen/providers/aws/securityhub-configuration-policy";
interface MyConfig {
  enabledStandardArns: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new SecurityhubConfigurationPolicy(this, "disabled", {
      configurationPolicy: {
        serviceEnabled: false,
        enabledStandardArns: config.enabledStandardArns,
      },
      dependsOn: [example],
      description: "This is an example of disabled configuration policy",
      name: "Disabled",
    });
  }
}

```

### Custom Control Configuration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SecurityhubConfigurationPolicy } from "./.gen/providers/aws/securityhub-configuration-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new SecurityhubConfigurationPolicy(this, "disabled", {
      configurationPolicy: {
        enabledStandardArns: [
          "arn:aws:securityhub:us-east-1::standards/aws-foundational-security-best-practices/v/1.0.0",
          "arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0",
        ],
        securityControlsConfiguration: {
          enabledControlIdentifiers: ["APIGateway.1", "IAM.7"],
          securityControlCustomParameter: [
            {
              parameter: [
                {
                  enum: {
                    value: "INFO",
                  },
                  name: "loggingLevel",
                  valueType: "CUSTOM",
                },
              ],
              securityControlId: "APIGateway.1",
            },
            {
              parameter: [
                {
                  bool: {
                    value: false,
                  },
                  name: "RequireLowercaseCharacters",
                  valueType: "CUSTOM",
                },
                {
                  int: {
                    value: 60,
                  },
                  name: "MaxPasswordAge",
                  valueType: "CUSTOM",
                },
              ],
              securityControlId: "IAM.7",
            },
          ],
        },
        serviceEnabled: true,
      },
      dependsOn: [example],
      description:
        "This is an example of configuration policy with custom control settings",
      name: "Custom Controls",
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `configurationPolicy` - (Required) Defines how Security Hub is configured. See [below](#configuration_policy).
* `description` - (Optional) The description of the configuration policy.
* `name` - (Required) The name of the configuration policy.

### configuration_policy

The `configurationPolicy` block supports the following:

* `enabledStandardArns` - (Optional) A list that defines which security standards are enabled in the configuration policy. It must be defined if `serviceEnabled` is set to true.
* `securityControlsConfiguration` - (Optional) Defines which security controls are enabled in the configuration policy and any customizations to parameters affecting them. See [below](#security_controls_configuration).
* `serviceEnabled` - (Required) Indicates whether Security Hub is enabled in the policy.

### security_controls_configuration

The `securityControlsConfiguration` block supports the following:

* `disabledControlIdentifiers` - (Optional) A list of security controls that are disabled in the configuration policy Security Hub enables all other controls (including newly released controls) other than the listed controls. Conflicts with `enabledControlIdentifiers`.
* `enabledControlIdentifiers` - (Optional) A list of security controls that are enabled in the configuration policy. Security Hub disables all other controls (including newly released controls) other than the listed controls. Conflicts with `disabledControlIdentifiers`.
* `securityControlCustomParameter` - (Optional) A list of control parameter customizations that are included in a configuration policy. Include multiple blocks to define multiple control custom parameters. See [below](#security_control_custom_parameter).

### security_control_custom_parameter

The `securityControlCustomParameter` block supports the following:

* `parameter` - (Required) An object that specifies parameter values for a control in a configuration policy. See [below](#parameter).
* `securityControlId` - (Required) The ID of the security control. For more information see the [Security Hub controls reference] documentation.

### parameter

The `parameter` block supports the following:

* `name`: (Required) The name of the control parameter. For more information see the [Security Hub controls reference] documentation.
* `valueType`: (Required) Identifies whether a control parameter uses a custom user-defined value or subscribes to the default Security Hub behavior. Valid values: `DEFAULT`, `CUSTOM`.
* `bool`: (Optional) The bool `value` for a Boolean-typed Security Hub Control Parameter.
* `double`: (Optional) The float `value` for a Double-typed Security Hub Control Parameter.
* `enum`: (Optional) The string `value` for a Enum-typed Security Hub Control Parameter.
* `enumList`: (Optional) The string list `value` for a EnumList-typed Security Hub Control Parameter.
* `int`: (Optional) The int `value` for a Int-typed Security Hub Control Parameter.
* `intList`: (Optional) The int list `value` for a IntList-typed Security Hub Control Parameter.
* `intList`: (Optional) The int list `value` for a IntList-typed Security Hub Control Parameter.
* `string`: (Optional) The string `value` for a String-typed Security Hub Control Parameter.
* `stringList`: (Optional) The string list `value` for a StringList-typed Security Hub Control Parameter.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` -  The UUID of the configuration policy.
* `arn ` - The ARN of the configuration policy.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import an existing Security Hub configuration policy using the universally unique identifier (UUID) of the policy. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SecurityhubConfigurationPolicy } from "./.gen/providers/aws/securityhub-configuration-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    SecurityhubConfigurationPolicy.generateConfigForImport(
      this,
      "example",
      "00000000-1111-2222-3333-444444444444"
    );
  }
}

```

Using `terraform import`, import an existing Security Hub enabled account using the universally unique identifier (UUID) of the policy. For example:

```console
% terraform import aws_securityhub_configuration_policy.example "00000000-1111-2222-3333-444444444444"
```

<!-- cache-key: cdktf-0.20.1 input-721ffba1ee84815bfddcee09500eede2e0b1933a072787923a97146e5d21cdc2 -->