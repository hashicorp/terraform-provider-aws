---
subcategory: "Payment Cryptography Control Plane"
layout: "aws"
page_title: "AWS: aws_paymentcryptography_key"
description: |-
  Terraform resource for managing an AWS Payment Cryptography Control Plane Key.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_paymentcryptography_key

Terraform resource for managing an AWS Payment Cryptography Control Plane Key.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { PaymentcryptographyKey } from "./.gen/providers/aws/paymentcryptography-key";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new PaymentcryptographyKey(this, "test", {
      exportable: true,
      keyAttributes: [
        {
          keyAlgorithm: "TDES_3KEY",
          keyClass: "SYMMETRIC_KEY",
          keyModesOfUse: [
            {
              decrypt: true,
              encrypt: true,
              unwrap: true,
              wrap: true,
            },
          ],
          keyUsage: "TR31_P0_PIN_ENCRYPTION_KEY",
        },
      ],
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `exportable` - (Required) Whether the key is exportable from the service.
* `keyAttributes` - (Required) Role of the key, the algorithm it supports, and the cryptographic operations allowed with the key.

The following arguments are optional:

* `enabled` - (Optional) Whether to enable the key.
* `keyCheckValueAlgorithm` - (Optional) Algorithm that AWS Payment Cryptography uses to calculate the key check value (KCV).
* `tags` - (Optional) Map of tags assigned to the WorkSpaces Connection Alias. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### key_attributes

The following arguments are required:

* `keyAlgorithm` - (Required) Key algorithm to be use during creation of an AWS Payment Cryptography key.
* `keyClass` - (Required) Type of AWS Payment Cryptography key to create.
* `keyModesOfUse`- (Required) List of cryptographic operations that you can perform using the key.
* `keyUsage` - (Required) Cryptographic usage of an AWS Payment Cryptography key as defined in section A.5.2 of the TR-31 spec.

### key_modes_of_use

The following arguments are optional:

* `decrypt` - (Optional) Whether an AWS Payment Cryptography key can be used to decrypt data.
* `deriveKey` - (Optional) Whether an AWS Payment Cryptography key can be used to derive new keys.
* `encrypt` - (Optional) Whether an AWS Payment Cryptography key can be used to encrypt data.
* `generate` - (Optional) Whether an AWS Payment Cryptography key can be used to generate and verify other card and PIN verification keys.
* `noRestrictions` - (Optional) Whether an AWS Payment Cryptography key has no special restrictions other than the restrictions implied by KeyUsage.
* `sign` - (Optional) Whether an AWS Payment Cryptography key can be used for signing.
* `unwrap` - (Optional) Whether an AWS Payment Cryptography key can be used to unwrap other keys.
* `verify` - (Optional) Whether an AWS Payment Cryptography key can be used to verify signatures.
* `wrap` - (Optional) Whether an AWS Payment Cryptography key can be used to wrap other keys.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the key.
* `keyCheckValue` - Key check value (KCV) is used to check if all parties holding a given key have the same key or to detect that a key has changed.
* `keyOrigin` - Source of the key material.
* `keyState` - State of key that is being created or deleted.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `update` - (Default `30m`)
* `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Payment Cryptography Control Plane Key using the `arn:aws:payment-cryptography:us-east-1:123456789012:key/qtbojf64yshyvyzf`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { PaymentcryptographyKey } from "./.gen/providers/aws/paymentcryptography-key";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    PaymentcryptographyKey.generateConfigForImport(
      this,
      "example",
      "arn:aws:payment-cryptography:us-east-1:123456789012:key/qtbojf64yshyvyzf"
    );
  }
}

```

Using `terraform import`, import Payment Cryptography Control Plane Key using the `arn:aws:payment-cryptography:us-east-1:123456789012:key/qtbojf64yshyvyzf`. For example:

```console
% terraform import aws_paymentcryptography_key.example arn:aws:payment-cryptography:us-east-1:123456789012:key/qtbojf64yshyvyzf
```

<!-- cache-key: cdktf-0.20.1 input-b5c55e78824f5c938bd7193d8d118d0a6fd452542fa086135e7091b318adc200 -->