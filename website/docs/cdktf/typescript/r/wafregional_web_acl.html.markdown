---
subcategory: "WAF Classic Regional"
layout: "aws"
page_title: "AWS: aws_wafregional_web_acl"
description: |-
  Provides a AWS WAF Regional web access control group (ACL) resource for use with ALB.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_wafregional_web_acl

Provides a WAF Regional Web ACL Resource for use with Application Load Balancer.

## Example Usage

### Regular Rule

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { WafregionalIpset } from "./.gen/providers/aws/wafregional-ipset";
import { WafregionalRule } from "./.gen/providers/aws/wafregional-rule";
import { WafregionalWebAcl } from "./.gen/providers/aws/wafregional-web-acl";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const ipset = new WafregionalIpset(this, "ipset", {
      ipSetDescriptor: [
        {
          type: "IPV4",
          value: "192.0.7.0/24",
        },
      ],
      name: "tfIPSet",
    });
    const wafrule = new WafregionalRule(this, "wafrule", {
      metricName: "tfWAFRule",
      name: "tfWAFRule",
      predicate: [
        {
          dataId: ipset.id,
          negated: false,
          type: "IPMatch",
        },
      ],
    });
    new WafregionalWebAcl(this, "wafacl", {
      defaultAction: {
        type: "ALLOW",
      },
      metricName: "tfWebACL",
      name: "tfWebACL",
      rule: [
        {
          action: {
            type: "BLOCK",
          },
          priority: 1,
          ruleId: wafrule.id,
          type: "REGULAR",
        },
      ],
    });
  }
}

```

### Group Rule

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { WafregionalWebAcl } from "./.gen/providers/aws/wafregional-web-acl";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new WafregionalWebAcl(this, "example", {
      defaultAction: {
        type: "ALLOW",
      },
      metricName: "example",
      name: "example",
      rule: [
        {
          overrideAction: {
            type: "NONE",
          },
          priority: 1,
          ruleId: Token.asString(awsWafregionalRuleGroupExample.id),
          type: "GROUP",
        },
      ],
    });
  }
}

```

### Logging

~> *NOTE:* The Kinesis Firehose Delivery Stream name must begin with `aws-waf-logs-`. See the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/logging.html) for more information about enabling WAF logging.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { WafregionalWebAcl } from "./.gen/providers/aws/wafregional-web-acl";
interface MyConfig {
  defaultAction: any;
  metricName: any;
  name: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new WafregionalWebAcl(this, "example", {
      loggingConfiguration: {
        logDestination: Token.asString(
          awsKinesisFirehoseDeliveryStreamExample.arn
        ),
        redactedFields: {
          fieldToMatch: [
            {
              type: "URI",
            },
            {
              data: "referer",
              type: "HEADER",
            },
          ],
        },
      },
      defaultAction: config.defaultAction,
      metricName: config.metricName,
      name: config.name,
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `defaultAction` - (Required) The action that you want AWS WAF Regional to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL.
* `metricName` - (Required) The name or description for the Amazon CloudWatch metric of this web ACL.
* `name` - (Required) The name or description of the web ACL.
* `loggingConfiguration` - (Optional) Configuration block to enable WAF logging. Detailed below.
* `rule` - (Optional) Set of configuration blocks containing rules for the web ACL. Detailed below.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### `defaultAction` Configuration Block

* `type` - (Required) Specifies how you want AWS WAF Regional to respond to requests that match the settings in a ruleE.g., `ALLOW`, `BLOCK` or `COUNT`

### `loggingConfiguration` Configuration Block

* `logDestination` - (Required) Amazon Resource Name (ARN) of Kinesis Firehose Delivery Stream
* `redactedFields` - (Optional) Configuration block containing parts of the request that you want redacted from the logs. Detailed below.

#### `redactedFields` Configuration Block

* `fieldToMatch` - (Required) Set of configuration blocks for fields to redact. Detailed below.

##### `fieldToMatch` Configuration Block

-> Additional information about this configuration can be found in the [AWS WAF Regional API Reference](https://docs.aws.amazon.com/waf/latest/APIReference/API_regional_FieldToMatch.html).

* `data` - (Optional) When the value of `type` is `HEADER`, enter the name of the header that you want the WAF to search, for example, `User-Agent` or `Referer`. If the value of `type` is any other value, omit `data`.
* `type` - (Required) The part of the web request that you want AWS WAF to search for a specified stringE.g., `HEADER` or `METHOD`

### `rule` Configuration Block

-> Additional information about this configuration can be found in the [AWS WAF Regional API Reference](https://docs.aws.amazon.com/waf/latest/APIReference/API_regional_ActivatedRule.html).

* `priority` - (Required) Specifies the order in which the rules in a WebACL are evaluated.
  Rules with a lower value are evaluated before rules with a higher value.
* `ruleId` - (Required) ID of the associated WAF (Regional) rule (e.g., [`aws_wafregional_rule`](/docs/providers/aws/r/wafregional_rule.html)). WAF (Global) rules cannot be used.
* `action` - (Optional) Configuration block of the action that CloudFront or AWS WAF takes when a web request matches the conditions in the rule.  Not used if `type` is `GROUP`. Detailed below.
* `overrideAction` - (Optional) Configuration block of the override the action that a group requests CloudFront or AWS WAF takes when a web request matches the conditions in the rule.  Only used if `type` is `GROUP`. Detailed below.
* `type` - (Optional) The rule type, either `REGULAR`, as defined by [Rule](http://docs.aws.amazon.com/waf/latest/APIReference/API_Rule.html), `RATE_BASED`, as defined by [RateBasedRule](http://docs.aws.amazon.com/waf/latest/APIReference/API_RateBasedRule.html), or `GROUP`, as defined by [RuleGroup](https://docs.aws.amazon.com/waf/latest/APIReference/API_RuleGroup.html). The default is REGULAR. If you add a RATE_BASED rule, you need to set `type` as `RATE_BASED`. If you add a GROUP rule, you need to set `type` as `GROUP`.

#### `action` / `overrideAction` Configuration Block

* `type` - (Required) Specifies how you want AWS WAF Regional to respond to requests that match the settings in a rule. Valid values for `action` are `ALLOW`, `BLOCK` or `COUNT`. Valid values for `overrideAction` are `COUNT` and `NONE`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of the WAF Regional WebACL.
* `id` - The ID of the WAF Regional WebACL.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import WAF Regional Web ACL using the id. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { WafregionalWebAcl } from "./.gen/providers/aws/wafregional-web-acl";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    WafregionalWebAcl.generateConfigForImport(
      this,
      "wafacl",
      "a1b2c3d4-d5f6-7777-8888-9999aaaabbbbcccc"
    );
  }
}

```

Using `terraform import`, import WAF Regional Web ACL using the id. For example:

```console
% terraform import aws_wafregional_web_acl.wafacl a1b2c3d4-d5f6-7777-8888-9999aaaabbbbcccc
```

<!-- cache-key: cdktf-0.20.8 input-becb283a0bf3a66968d3b5835eb6a5ff193e490c6ee5cb1289a6144e0f32490f -->