---
subcategory: "RDS (Relational Database)"
layout: "aws"
page_title: "AWS: aws_rds_custom_db_engine_version"
description: |-
  Provides an custom engine version (CEV) resource for Amazon RDS Custom.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_rds_custom_db_engine_version

Provides an custom engine version (CEV) resource for Amazon RDS Custom. For additional information, see [Working with CEVs for RDS Custom for Oracle](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.html) and [Working with CEVs for RDS Custom for SQL Server](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev-sqlserver.html) in the the [RDS User Guide](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Welcome.html).

## Example Usage

### RDS Custom for Oracle Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { KmsKey } from "./.gen/providers/aws/kms-key";
import { RdsCustomDbEngineVersion } from "./.gen/providers/aws/rds-custom-db-engine-version";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new KmsKey(this, "example", {
      description: "KMS symmetric key for RDS Custom for Oracle",
    });
    const awsRdsCustomDbEngineVersionExample = new RdsCustomDbEngineVersion(
      this,
      "example_1",
      {
        databaseInstallationFilesS3BucketName: "DOC-EXAMPLE-BUCKET",
        databaseInstallationFilesS3Prefix: "1915_GI/",
        engine: "custom-oracle-ee-cdb",
        engineVersion: "19.cdb_cev1",
        kmsKeyId: example.arn,
        manifest:
          '  {\n\t"databaseInstallationFileNames":["V982063-01.zip"]\n  }\n\n',
        tags: {
          Key: "value",
          Name: "example",
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRdsCustomDbEngineVersionExample.overrideLogicalId("example");
  }
}

```

### RDS Custom for Oracle External Manifest Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { KmsKey } from "./.gen/providers/aws/kms-key";
import { RdsCustomDbEngineVersion } from "./.gen/providers/aws/rds-custom-db-engine-version";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new KmsKey(this, "example", {
      description: "KMS symmetric key for RDS Custom for Oracle",
    });
    const awsRdsCustomDbEngineVersionExample = new RdsCustomDbEngineVersion(
      this,
      "example_1",
      {
        databaseInstallationFilesS3BucketName: "DOC-EXAMPLE-BUCKET",
        databaseInstallationFilesS3Prefix: "1915_GI/",
        engine: "custom-oracle-ee-cdb",
        engineVersion: "19.cdb_cev1",
        filename: "manifest_1915_GI.json",
        kmsKeyId: example.arn,
        manifestHash: Token.asString(Fn.filebase64sha256(json)),
        tags: {
          Key: "value",
          Name: "example",
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRdsCustomDbEngineVersionExample.overrideLogicalId("example");
  }
}

```

### RDS Custom for SQL Server Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { RdsCustomDbEngineVersion } from "./.gen/providers/aws/rds-custom-db-engine-version";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new RdsCustomDbEngineVersion(this, "test", {
      engine: "custom-sqlserver-se",
      engineVersion: "15.00.4249.2.cev-1",
      sourceImageId: "ami-0aa12345678a12ab1",
    });
  }
}

```

### RDS Custom for SQL Server Usage with AMI from another region

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AmiCopy } from "./.gen/providers/aws/ami-copy";
import { RdsCustomDbEngineVersion } from "./.gen/providers/aws/rds-custom-db-engine-version";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new AmiCopy(this, "example", {
      description: "A copy of ami-xxxxxxxx",
      name: "sqlserver-se-2019-15.00.4249.2",
      sourceAmiId: "ami-xxxxxxxx",
      sourceAmiRegion: "us-east-1",
    });
    new RdsCustomDbEngineVersion(this, "test", {
      engine: "custom-sqlserver-se",
      engineVersion: "15.00.4249.2.cev-1",
      sourceImageId: example.id,
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `databaseInstallationFilesS3BucketName` - (Required) The name of the Amazon S3 bucket that contains the database installation files.
* `databaseInstallationFilesS3Prefix` - (Required) The prefix for the Amazon S3 bucket that contains the database installation files.
* `description` - (Optional) The description of the CEV.
* `engine` - (Required) The name of the database engine. Valid values are `custom-oracle*`, `custom-sqlserver*`.
* `engineVersion` - (Required) The version of the database engine.
* `filename` - (Optional) The name of the manifest file within the local filesystem. Conflicts with `manifest`.
* `kmsKeyId` - (Optional) The ARN of the AWS KMS key that is used to encrypt the database installation files. Required for RDS Custom for Oracle.
* `manifest` - (Optional) The manifest file, in JSON format, that contains the list of database installation files. Conflicts with `filename`.
* `manifestHash` - (Optional) Used to trigger updates. Must be set to a base64-encoded SHA256 hash of the manifest source specified with `filename`. The usual way to set this is filebase64sha256("manifest.json") where "manifest.json" is the local filename of the manifest source.
* `status` - (Optional) The status of the CEV. Valid values are `available`, `inactive`, `inactive-except-restore`.
* `sourceImageId` - (Optional) The ID of the AMI to create the CEV from. Required for RDS Custom for SQL Server. For RDS Custom for Oracle, you can specify an AMI ID that was used in a different Oracle CEV.
* `tags` - (Optional) A mapping of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The Amazon Resource Name (ARN) for the custom engine version.
* `createTime` - The date and time that the CEV was created.
* `dbParameterGroupFamily` - The name of the DB parameter group family for the CEV.
* `imageId` - The ID of the AMI that was created with the CEV.
* `majorEngineVersion` - The major version of the database engine.
* `manifestComputed` - The returned manifest file, in JSON format, service generated and often different from input `manifest`.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `240m`)
- `update` - (Default `10m`)
- `delete` - (Default `60m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import custom engine versions for Amazon RDS custom using the `engine` and `engineVersion` separated by a colon (`:`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { RdsCustomDbEngineVersion } from "./.gen/providers/aws/rds-custom-db-engine-version";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    RdsCustomDbEngineVersion.generateConfigForImport(
      this,
      "example",
      "custom-oracle-ee-cdb:19.cdb_cev1"
    );
  }
}

```

Using `terraform import`, import custom engine versions for Amazon RDS custom using the `engine` and `engineVersion` separated by a colon (`:`). For example:

```console
% terraform import aws_rds_custom_db_engine_version.example custom-oracle-ee-cdb:19.cdb_cev1
```

<!-- cache-key: cdktf-0.20.8 input-dae41bd3880415fe2e096d70a45f580b6bfa6f14fe785ee0edae92bb5abec604 -->