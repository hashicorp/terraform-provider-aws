---
subcategory: "Elemental MediaLive"
layout: "aws"
page_title: "AWS: aws_medialive_multiplex"
description: |-
  Terraform resource for managing an AWS MediaLive Multiplex.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_medialive_multiplex

Terraform resource for managing an AWS MediaLive Multiplex.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsAvailabilityZones } from "./.gen/providers/aws/data-aws-availability-zones";
import { MedialiveMultiplex } from "./.gen/providers/aws/medialive-multiplex";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const available = new DataAwsAvailabilityZones(this, "available", {
      state: "available",
    });
    new MedialiveMultiplex(this, "example", {
      availabilityZones: [
        Token.asString(Fn.lookupNested(available.names, ["0"])),
        Token.asString(Fn.lookupNested(available.names, ["1"])),
      ],
      multiplexSettings: {
        maximumVideoBufferDelayMilliseconds: 1000,
        transportStreamBitrate: 1000000,
        transportStreamId: 1,
        transportStreamReservedBitrate: 1,
      },
      name: "example-multiplex-changed",
      startMultiplex: true,
      tags: {
        tag1: "value1",
      },
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `availabilityZones` - (Required) A list of availability zones. You must specify exactly two.
* `multiplexSettings`- (Required) Multiplex settings. See [Multiplex Settings](#multiplex-settings) for more details.
* `name` - (Required) name of Multiplex.

The following arguments are optional:

* `startMultiplex` - (Optional) Whether to start the Multiplex. Defaults to `false`.
* `tags` - (Optional) A map of tags to assign to the Multiplex. If configured with a provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### Multiplex Settings

* `transportStreamBitrate` - (Required) Transport stream bit rate.
* `transportStreamId` - (Required) Unique ID for each multiplex.
* `transportStreamReservedBitrate` - (Optional) Transport stream reserved bit rate.
* `maximumVideoBufferDelayMilliseconds` - (Optional) Maximum video buffer delay.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the Multiplex.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `update` - (Default `30m`)
* `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import MediaLive Multiplex using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { MedialiveMultiplex } from "./.gen/providers/aws/medialive-multiplex";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    MedialiveMultiplex.generateConfigForImport(this, "example", "12345678");
  }
}

```

Using `terraform import`, import MediaLive Multiplex using the `id`. For example:

```console
% terraform import aws_medialive_multiplex.example 12345678
```

<!-- cache-key: cdktf-0.20.8 input-ef0b0248360f7c92f3d75bdb422730873d3e865bff521828049e013dc339473a -->