---
subcategory: "Config"
layout: "aws"
page_title: "AWS: aws_config_config_rule"
description: |-
  Provides an AWS Config Rule.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_config_config_rule

Provides an AWS Config Rule.

~> **Note:** Config Rule requires an existing [Configuration Recorder](/docs/providers/aws/r/config_configuration_recorder.html) to be present. Use of `dependsOn` is recommended (as shown below) to avoid race conditions.

## Example Usage

### AWS Managed Rules

AWS managed rules can be used by setting the source owner to `AWS` and the source identifier to the name of the managed rule. More information about AWS managed rules can be found in the [AWS Config Developer Guide](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html).

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConfigConfigRule } from "./.gen/providers/aws/config-config-rule";
import { ConfigConfigurationRecorder } from "./.gen/providers/aws/config-configuration-recorder";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicy } from "./.gen/providers/aws/iam-role-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const assumeRole = new DataAwsIamPolicyDocument(this, "assume_role", {
      statement: [
        {
          actions: ["sts:AssumeRole"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["config.amazonaws.com"],
              type: "Service",
            },
          ],
        },
      ],
    });
    const p = new DataAwsIamPolicyDocument(this, "p", {
      statement: [
        {
          actions: ["config:Put*"],
          effect: "Allow",
          resources: ["*"],
        },
      ],
    });
    const r = new IamRole(this, "r", {
      assumeRolePolicy: Token.asString(assumeRole.json),
      name: "my-awsconfig-role",
    });
    const awsIamRolePolicyP = new IamRolePolicy(this, "p_3", {
      name: "my-awsconfig-policy",
      policy: Token.asString(p.json),
      role: r.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyP.overrideLogicalId("p");
    const foo = new ConfigConfigurationRecorder(this, "foo", {
      name: "example",
      roleArn: r.arn,
    });
    const awsConfigConfigRuleR = new ConfigConfigRule(this, "r_5", {
      dependsOn: [foo],
      name: "example",
      source: {
        owner: "AWS",
        sourceIdentifier: "S3_BUCKET_VERSIONING_ENABLED",
      },
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsConfigConfigRuleR.overrideLogicalId("r");
  }
}

```

### Custom Rules

Custom rules can be used by setting the source owner to `CUSTOM_LAMBDA` and the source identifier to the Amazon Resource Name (ARN) of the Lambda Function. The AWS Config service must have permissions to invoke the Lambda Function, e.g., via the [`aws_lambda_permission` resource](/docs/providers/aws/r/lambda_permission.html). More information about custom rules can be found in the [AWS Config Developer Guide](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules.html).

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConfigConfigRule } from "./.gen/providers/aws/config-config-rule";
import { ConfigConfigurationRecorder } from "./.gen/providers/aws/config-configuration-recorder";
import { LambdaFunction } from "./.gen/providers/aws/lambda-function";
import { LambdaPermission } from "./.gen/providers/aws/lambda-permission";
interface MyConfig {
  roleArn: any;
  functionName: any;
  role: any;
  name: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    const example = new ConfigConfigurationRecorder(this, "example", {
      roleArn: config.roleArn,
    });
    const awsLambdaFunctionExample = new LambdaFunction(this, "example_1", {
      functionName: config.functionName,
      role: config.role,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsLambdaFunctionExample.overrideLogicalId("example");
    const awsLambdaPermissionExample = new LambdaPermission(this, "example_2", {
      action: "lambda:InvokeFunction",
      functionName: Token.asString(awsLambdaFunctionExample.arn),
      principal: "config.amazonaws.com",
      statementId: "AllowExecutionFromConfig",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsLambdaPermissionExample.overrideLogicalId("example");
    const awsConfigConfigRuleExample = new ConfigConfigRule(this, "example_3", {
      dependsOn: [example, awsLambdaPermissionExample],
      source: {
        owner: "CUSTOM_LAMBDA",
        sourceIdentifier: Token.asString(awsLambdaFunctionExample.arn),
      },
      name: config.name,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsConfigConfigRuleExample.overrideLogicalId("example");
  }
}

```

### Custom Policies

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConfigConfigRule } from "./.gen/providers/aws/config-config-rule";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ConfigConfigRule(this, "example", {
      name: "example",
      source: {
        customPolicyDetails: {
          policyRuntime: "guard-2.x.x",
          policyText:
            '\t  rule tableisactive when\n\t\t  resourceType == "AWS::DynamoDB::Table" {\n\t\t  configuration.tableStatus == [\'ACTIVE\']\n\t  }\n\t  \n\t  rule checkcompliance when\n\t\t  resourceType == "AWS::DynamoDB::Table"\n\t\t  tableisactive {\n\t\t\t  supplementaryConfiguration.ContinuousBackupsDescription.pointInTimeRecoveryDescription.pointInTimeRecoveryStatus == "ENABLED"\n\t  }\n\n',
        },
        owner: "CUSTOM_POLICY",
        sourceDetail: [
          {
            messageType: "ConfigurationItemChangeNotification",
          },
        ],
      },
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The name of the rule
* `description` - (Optional) Description of the rule
* `evaluationMode` - (Optional) The modes the Config rule can be evaluated in. See [Evaluation Mode](#evaluation-mode) for more details.
* `inputParameters` - (Optional) A string in JSON format that is passed to the AWS Config rule Lambda function.
* `maximumExecutionFrequency` - (Optional) The maximum frequency with which AWS Config runs evaluations for a rule.
* `scope` - (Optional) Scope defines which resources can trigger an evaluation for the rule. See [Scope](#scope) Below.
* `source` - (Required) Source specifies the rule owner, the rule identifier, and the notifications that cause the function to evaluate your AWS resources. See [Source](#source) Below.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### Evaluation Mode

* `mode` - (Optional) The mode of an evaluation.

### Scope

Defines which resources can trigger an evaluation for the rule.
If you do not specify a scope, evaluations are triggered when any resource in the recording group changes.

* `complianceResourceId` - (Optional) The IDs of the only AWS resource that you want to trigger an evaluation for the rule. If you specify a resource ID, you must specify one resource type for `complianceResourceTypes`.
* `complianceResourceTypes` - (Optional) A list of resource types of only those AWS resources that you want to trigger an evaluation for the ruleE.g., `AWS::EC2::Instance`. You can only specify one type if you also specify a resource ID for `complianceResourceId`. See [relevant part of AWS Docs](http://docs.aws.amazon.com/config/latest/APIReference/API_ResourceIdentifier.html#config-Type-ResourceIdentifier-resourceType) for available types.
* `tagKey` - (Optional, Required if `tagValue` is specified) The tag key that is applied to only those AWS resources that you want you want to trigger an evaluation for the rule.
* `tagValue` - (Optional) The tag value applied to only those AWS resources that you want to trigger an evaluation for the rule.

### Source

Provides the rule owner (AWS or customer), the rule identifier, and the notifications that cause the function to evaluate your AWS resources.

* `owner` - (Required) Indicates whether AWS or the customer owns and manages the AWS Config rule. Valid values are `AWS`, `CUSTOM_LAMBDA` or `CUSTOM_POLICY`. For more information about managed rules, see the [AWS Config Managed Rules documentation](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html). For more information about custom rules, see the [AWS Config Custom Rules documentation](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_develop-rules.html). Custom Lambda Functions require permissions to allow the AWS Config service to invoke them, e.g., via the [`aws_lambda_permission` resource](/docs/providers/aws/r/lambda_permission.html).
* `sourceIdentifier` - (Optional) For AWS Config managed rules, a predefined identifier, e.g `IAM_PASSWORD_POLICY`. For custom Lambda rules, the identifier is the ARN of the Lambda Function, such as `arn:aws:lambda:us-east-1:123456789012:function:custom_rule_name` or the [`arn` attribute of the `aws_lambda_function` resource](/docs/providers/aws/r/lambda_function.html#arn).
* `sourceDetail` - (Optional) Provides the source and type of the event that causes AWS Config to evaluate your AWS resources. Only valid if `owner` is `CUSTOM_LAMBDA` or `CUSTOM_POLICY`. See [Source Detail](#source-detail) Below.
* `customPolicyDetails` - (Optional) Provides the runtime system, policy definition, and whether debug logging is enabled. Required when owner is set to `CUSTOM_POLICY`. See [Custom Policy Details](#custom-policy-details) Below.

#### Source Detail

* `eventSource` - (Optional) The source of the event, such as an AWS service, that triggers AWS Config to evaluate your AWSresources. This defaults to `aws.config` and is the only valid value.
* `maximumExecutionFrequency` - (Optional) The frequency that you want AWS Config to run evaluations for a rule that istriggered periodically. If specified, requires `messageType` to be `ScheduledNotification`.
* `messageType` - (Optional) The type of notification that triggers AWS Config to run an evaluation for a rule. You canspecify the following notification types:
    * `ConfigurationItemChangeNotification` - Triggers an evaluation when AWS Config delivers a configuration item as a result of a resource change.
    * `OversizedConfigurationItemChangeNotification` - Triggers an evaluation when AWS Config delivers an oversized configuration item. AWS Config may generate this notification type when a resource changes and the notification exceeds the maximum size allowed by Amazon SNS.
    * `ScheduledNotification` - Triggers a periodic evaluation at the frequency specified for `maximumExecutionFrequency`.
    * `ConfigurationSnapshotDeliveryCompleted` - Triggers a periodic evaluation when AWS Config delivers a configuration snapshot.

#### Custom Policy Details

* `enableDebugLogDelivery` - (Optional) The boolean expression for enabling debug logging for your Config Custom Policy rule. The default value is `false`.
* `policyRuntime` - (Required) The runtime system for your Config Custom Policy rule. Guard is a policy-as-code language that allows you to write policies that are enforced by Config Custom Policy rules. For more information about Guard, see the [Guard GitHub Repository](https://github.com/aws-cloudformation/cloudformation-guard).
* `policyText` - (Required) The policy definition containing the logic for your Config Custom Policy rule.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The ARN of the config rule
* `ruleId` - The ID of the config rule
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Config Rule using the name. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConfigConfigRule } from "./.gen/providers/aws/config-config-rule";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ConfigConfigRule.generateConfigForImport(this, "foo", "example");
  }
}

```

Using `terraform import`, import Config Rule using the name. For example:

```console
% terraform import aws_config_config_rule.foo example
```

<!-- cache-key: cdktf-0.20.8 input-9ac26380148d2369865bffa65da57a4227e4ff006488392c0ed315476f1af9e4 -->