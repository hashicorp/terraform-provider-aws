---
subcategory: "Athena"
layout: "aws"
page_title: "AWS: aws_athena_database"
description: |-
  Provides an Athena database.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_athena_database

Provides an Athena database.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AthenaDatabase } from "./.gen/providers/aws/athena-database";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new S3Bucket(this, "example", {
      bucket: "example",
    });
    const awsAthenaDatabaseExample = new AthenaDatabase(this, "example_1", {
      bucket: example.id,
      name: "database_name",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAthenaDatabaseExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `bucket` - (Required) Name of S3 bucket to save the results of the query execution.
* `name` - (Required) Name of the database to create.
* `aclConfiguration` - (Optional) That an Amazon S3 canned ACL should be set to control ownership of stored query results. See [ACL Configuration](#acl-configuration) below.
* `comment` - (Optional) Description of the database.
* `encryptionConfiguration` - (Optional) Encryption key block AWS Athena uses to decrypt the data in S3, such as an AWS Key Management Service (AWS KMS) key. See [Encryption Configuration](#encryption-configuration) below.
* `expectedBucketOwner` - (Optional) AWS account ID that you expect to be the owner of the Amazon S3 bucket.
* `forceDestroy` - (Optional, Default: false) Boolean that indicates all tables should be deleted from the database so that the database can be destroyed without error. The tables are *not* recoverable.
* `properties` - (Optional) Key-value map of custom metadata properties for the database definition.

### ACL Configuration

* `s3AclOption` - (Required) Amazon S3 canned ACL that Athena should specify when storing query results. Valid value is `BUCKET_OWNER_FULL_CONTROL`.

~> **NOTE:** When Athena queries are executed, result files may be created in the specified bucket. Consider using `forceDestroy` on the bucket too in order to avoid any problems when destroying the bucket.  

### Encryption Configuration

* `encryptionOption` - (Required) Type of key; one of `SSE_S3`, `SSE_KMS`, `CSE_KMS`
* `kmsKey` - (Optional) KMS key ARN or ID; required for key types `SSE_KMS` and `CSE_KMS`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Database name

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Athena Databases using their name. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AthenaDatabase } from "./.gen/providers/aws/athena-database";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    AthenaDatabase.generateConfigForImport(this, "example", "example");
  }
}

```

Using `terraform import`, import Athena Databases using their name. For example:

```console
% terraform import aws_athena_database.example example
```

Certain resource arguments, like `encryptionConfiguration` and `bucket`, do not have an API method for reading the information after creation. If the argument is set in the Terraform configuration on an imported resource, Terraform will always show a difference. To workaround this behavior, either omit the argument from the Terraform configuration or use [`ignore_changes`](https://www.terraform.io/docs/configuration/meta-arguments/lifecycle.html#ignore_changes) to hide the difference. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AthenaDatabase } from "./.gen/providers/aws/athena-database";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AthenaDatabase(this, "example", {
      bucket: Token.asString(awsS3BucketExample.id),
      lifecycle: {
        ignoreChanges: [bucket],
      },
      name: "database_name",
    });
  }
}

```

<!-- cache-key: cdktf-0.20.8 input-189ae35c915899617823f1aa58e52b808e9d89a93ad41348d3b67590fd2c7244 -->