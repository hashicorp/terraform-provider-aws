---
subcategory: "Cognito IDP (Identity Provider)"
layout: "aws"
page_title: "AWS: aws_cognito_user_pool_ui_customization"
description: |-
  Provides a Cognito User Pool UI Customization resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cognito_user_pool_ui_customization

Provides a Cognito User Pool UI Customization resource.

~> **Note:** To use this resource, the user pool must have a domain associated with it. For more information, see the Amazon Cognito Developer Guide on [Customizing the Built-in Sign-In and Sign-up Webpages](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-app-ui-customization.html).

## Example Usage

### UI customization settings for a single client

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CognitoUserPool } from "./.gen/providers/aws/cognito-user-pool";
import { CognitoUserPoolClient } from "./.gen/providers/aws/cognito-user-pool-client";
import { CognitoUserPoolDomain } from "./.gen/providers/aws/cognito-user-pool-domain";
import { CognitoUserPoolUiCustomization } from "./.gen/providers/aws/cognito-user-pool-ui-customization";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new CognitoUserPool(this, "example", {
      name: "example",
    });
    const awsCognitoUserPoolClientExample = new CognitoUserPoolClient(
      this,
      "example_1",
      {
        name: "example",
        userPoolId: example.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCognitoUserPoolClientExample.overrideLogicalId("example");
    const awsCognitoUserPoolDomainExample = new CognitoUserPoolDomain(
      this,
      "example_2",
      {
        domain: "example",
        userPoolId: example.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCognitoUserPoolDomainExample.overrideLogicalId("example");
    const awsCognitoUserPoolUiCustomizationExample =
      new CognitoUserPoolUiCustomization(this, "example_3", {
        clientId: Token.asString(awsCognitoUserPoolClientExample.id),
        css: ".label-customizable {font-weight: 400;}",
        imageFile: Token.asString(Fn.filebase64("logo.png")),
        userPoolId: Token.asString(awsCognitoUserPoolDomainExample.userPoolId),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCognitoUserPoolUiCustomizationExample.overrideLogicalId("example");
  }
}

```

### UI customization settings for all clients

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CognitoUserPool } from "./.gen/providers/aws/cognito-user-pool";
import { CognitoUserPoolDomain } from "./.gen/providers/aws/cognito-user-pool-domain";
import { CognitoUserPoolUiCustomization } from "./.gen/providers/aws/cognito-user-pool-ui-customization";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new CognitoUserPool(this, "example", {
      name: "example",
    });
    const awsCognitoUserPoolDomainExample = new CognitoUserPoolDomain(
      this,
      "example_1",
      {
        domain: "example",
        userPoolId: example.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCognitoUserPoolDomainExample.overrideLogicalId("example");
    const awsCognitoUserPoolUiCustomizationExample =
      new CognitoUserPoolUiCustomization(this, "example_2", {
        css: ".label-customizable {font-weight: 400;}",
        imageFile: Token.asString(Fn.filebase64("logo.png")),
        userPoolId: Token.asString(awsCognitoUserPoolDomainExample.userPoolId),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCognitoUserPoolUiCustomizationExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `clientId` (Optional) The client ID for the client app. Defaults to `ALL`. If `ALL` is specified, the `css` and/or `imageFile` settings will be used for every client that has no UI customization set previously.
* `css` (Optional) - The CSS values in the UI customization, provided as a String. At least one of `css` or `imageFile` is required.
* `imageFile` (Optional) - The uploaded logo image for the UI customization, provided as a base64-encoded String. Drift detection is not possible for this argument. At least one of `css` or `imageFile` is required.
* `userPoolId` (Required) - The user pool ID for the user pool.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `creationDate` - The creation date in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) for the UI customization.
* `cssVersion` - The CSS version number.
* `imageUrl` - The logo image URL for the UI customization.
* `lastModifiedDate` - The last-modified date in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) for the UI customization.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Cognito User Pool UI Customizations using the `userPoolId` and `clientId` separated by `,`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CognitoUserPoolUiCustomization } from "./.gen/providers/aws/cognito-user-pool-ui-customization";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    CognitoUserPoolUiCustomization.generateConfigForImport(
      this,
      "example",
      "us-west-2_ZCTarbt5C,12bu4fuk3mlgqa2rtrujgp6egq"
    );
  }
}

```

Using `terraform import`, import Cognito User Pool UI Customizations using the `userPoolId` and `clientId` separated by `,`. For example:

```console
% terraform import aws_cognito_user_pool_ui_customization.example us-west-2_ZCTarbt5C,12bu4fuk3mlgqa2rtrujgp6egq
```

<!-- cache-key: cdktf-0.20.8 input-bf4b70b595c743ddb747623355c0d273cc993578aa1b9483b75e196d7e5ca18c -->