---
subcategory: "Glue"
layout: "aws"
page_title: "AWS: aws_glue_classifier"
description: |-
  Provides an Glue Classifier resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_glue_classifier

Provides a Glue Classifier resource.

~> **NOTE:** It is only valid to create one type of classifier (CSV, grok, JSON, or XML). Changing classifier types will recreate the classifier.

## Example Usage

### CSV Classifier

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueClassifier } from "./.gen/providers/aws/glue-classifier";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new GlueClassifier(this, "example", {
      csvClassifier: {
        allowSingleColumn: false,
        containsHeader: "PRESENT",
        delimiter: ",",
        disableValueTrimming: false,
        header: ["example1", "example2"],
        quoteSymbol: "'",
      },
      name: "example",
    });
  }
}

```

### Grok Classifier

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueClassifier } from "./.gen/providers/aws/glue-classifier";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new GlueClassifier(this, "example", {
      grokClassifier: {
        classification: "example",
        grokPattern: "example",
      },
      name: "example",
    });
  }
}

```

### JSON Classifier

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueClassifier } from "./.gen/providers/aws/glue-classifier";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new GlueClassifier(this, "example", {
      jsonClassifier: {
        jsonPath: "example",
      },
      name: "example",
    });
  }
}

```

### XML Classifier

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueClassifier } from "./.gen/providers/aws/glue-classifier";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new GlueClassifier(this, "example", {
      name: "example",
      xmlClassifier: {
        classification: "example",
        rowTag: "example",
      },
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `csvClassifier` - (Optional) A classifier for CSV content. Defined below.
* `grokClassifier` – (Optional) A classifier that uses grok patterns. Defined below.
* `jsonClassifier` – (Optional) A classifier for JSON content. Defined below.
* `name` – (Required) The name of the classifier.
* `xmlClassifier` – (Optional) A classifier for XML content. Defined below.

### csv_classifier

* `allowSingleColumn` - (Optional) Enables the processing of files that contain only one column.
* `containsHeader` - (Optional) Indicates whether the CSV file contains a header. This can be one of "ABSENT", "PRESENT", or "UNKNOWN".
* `customDatatypeConfigured` - (Optional) Enables the custom datatype to be configured.
* `customDatatypes` - (Optional) A list of supported custom datatypes. Valid values are `BINARY`, `BOOLEAN`, `DATE`, `DECIMAL`, `DOUBLE`, `FLOAT`, `INT`, `LONG`, `SHORT`, `STRING`, `TIMESTAMP`.
* `delimiter` - (Optional) The delimiter used in the CSV to separate columns.
* `disableValueTrimming` - (Optional) Specifies whether to trim column values.
* `header` - (Optional) A list of strings representing column names.
* `quoteSymbol` - (Optional) A custom symbol to denote what combines content into a single column value. It must be different from the column delimiter.
* `serde` – (Optional) The SerDe for processing CSV. Valid values are `OpenCSVSerDe`, `LazySimpleSerDe`, `None`.

### grok_classifier

* `classification` - (Required) An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.
* `customPatterns` - (Optional) Custom grok patterns used by this classifier.
* `grokPattern` - (Required) The grok pattern used by this classifier.

### json_classifier

* `jsonPath` - (Required) A `JsonPath` string defining the JSON data for the classifier to classify. AWS Glue supports a subset of `JsonPath`, as described in [Writing JsonPath Custom Classifiers](https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json).

### xml_classifier

* `classification` - (Required) An identifier of the data format that the classifier matches.
* `rowTag` - (Required) The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by `/>`). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, `<row item_a="A" item_b="B"></row>` is okay, but `<row item_a="A" item_b="B" />` is not).

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Name of the classifier

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Glue Classifiers using their name. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueClassifier } from "./.gen/providers/aws/glue-classifier";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    GlueClassifier.generateConfigForImport(
      this,
      "myClassifier",
      "MyClassifier"
    );
  }
}

```

Using `terraform import`, import Glue Classifiers using their name. For example:

```console
% terraform import aws_glue_classifier.MyClassifier MyClassifier
```

<!-- cache-key: cdktf-0.20.1 input-0aaa3383882d9c380ab9a6852627ccb29d90099f2e4ea7fa62eb9008043a9e56 -->