---
subcategory: "EC2 Image Builder"
layout: "aws"
page_title: "AWS: aws_imagebuilder_image_recipe"
description: |-
    Manage an Image Builder Image Recipe
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_imagebuilder_image_recipe

Manages an Image Builder Image Recipe.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ImagebuilderImageRecipe } from "./.gen/providers/aws/imagebuilder-image-recipe";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ImagebuilderImageRecipe(this, "example", {
      blockDeviceMapping: [
        {
          deviceName: "/dev/xvdb",
          ebs: {
            deleteOnTermination: Token.asString(true),
            volumeSize: 100,
            volumeType: "gp2",
          },
        },
      ],
      component: [
        {
          componentArn: Token.asString(awsImagebuilderComponentExample.arn),
          parameter: [
            {
              name: "Parameter1",
              value: "Value1",
            },
            {
              name: "Parameter2",
              value: "Value2",
            },
          ],
        },
      ],
      name: "example",
      parentImage:
        "arn:${" +
        current.partition +
        "}:imagebuilder:${" +
        dataAwsRegionCurrent.name +
        "}:aws:image/amazon-linux-2-x86/x.x.x",
      version: "1.0.0",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `component` - (Required) Ordered configuration block(s) with components for the image recipe. Detailed below.
* `name` - (Required) Name of the image recipe.
* `parentImage` - (Required) The image recipe uses this image as a base from which to build your customized image. The value can be the base image ARN or an AMI ID.
* `version` - (Required) The semantic version of the image recipe, which specifies the version in the following format, with numeric values in each position to indicate a specific version: major.minor.patch. For example: 1.0.0.

The following attributes are optional:

* `blockDeviceMapping` - (Optional) Configuration block(s) with block device mappings for the image recipe. Detailed below.
* `description` - (Optional) Description of the image recipe.
* `systemsManagerAgent` - (Optional) Configuration block for the Systems Manager Agent installed by default by Image Builder. Detailed below.
* `tags` - (Optional) Key-value map of resource tags for the image recipe. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `userDataBase64` - (Optional) Base64 encoded user data. Use this to provide commands or a command script to run when you launch your build instance.
* `workingDirectory` - (Optional) The working directory to be used during build and test workflows.

### `blockDeviceMapping`

* `deviceName` - (Optional) Name of the device. For example, `/dev/sda` or `/dev/xvdb`.
* `ebs` - (Optional) Configuration block with Elastic Block Storage (EBS) block device mapping settings. Detailed below.
* `noDevice` - (Optional) Set to `true` to remove a mapping from the parent image.
* `virtualName` - (Optional) Virtual device name. For example, `ephemeral0`. Instance store volumes are numbered starting from 0.

#### `ebs`

* `deleteOnTermination` - (Optional) Whether to delete the volume on termination. Defaults to unset, which is the value inherited from the parent image.
* `encrypted` - (Optional) Whether to encrypt the volume. Defaults to unset, which is the value inherited from the parent image.
* `iops` - (Optional) Number of Input/Output (I/O) operations per second to provision for an `io1` or `io2` volume.
* `kmsKeyId` - (Optional) Amazon Resource Name (ARN) of the Key Management Service (KMS) Key for encryption.
* `snapshotId` - (Optional) Identifier of the EC2 Volume Snapshot.
* `throughput` - (Optional) For GP3 volumes only. The throughput in MiB/s that the volume supports.
* `volumeSize` - (Optional) Size of the volume, in GiB.
* `volumeType` - (Optional) Type of the volume. For example, `gp2` or `io2`.

### `component`

* `componentArn` - (Required) Amazon Resource Name (ARN) of the Image Builder Component to associate.
* `parameter` - (Optional) Configuration block(s) for parameters to configure the component. Detailed below.

### `parameter`

* `name` - (Required) The name of the component parameter.
* `value` - (Required) The value for the named component parameter.

### `systemsManagerAgent`

* `uninstallAfterBuild` - (Required) Whether to remove the Systems Manager Agent after the image has been built.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of the image recipe.
* `dateCreated` - Date the image recipe was created.
* `owner` - Owner of the image recipe.
* `platform` - Platform of the image recipe.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_imagebuilder_image_recipe` resources using the Amazon Resource Name (ARN). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ImagebuilderImageRecipe } from "./.gen/providers/aws/imagebuilder-image-recipe";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ImagebuilderImageRecipe.generateConfigForImport(
      this,
      "example",
      "arn:aws:imagebuilder:us-east-1:123456789012:image-recipe/example/1.0.0"
    );
  }
}

```

Using `terraform import`, import `aws_imagebuilder_image_recipe` resources using the Amazon Resource Name (ARN). For example:

```console
% terraform import aws_imagebuilder_image_recipe.example arn:aws:imagebuilder:us-east-1:123456789012:image-recipe/example/1.0.0
```

<!-- cache-key: cdktf-0.20.8 input-5c68a92766e8729ebe8138c639c093f6b2479c7c3af7d16e31729c541c482134 -->