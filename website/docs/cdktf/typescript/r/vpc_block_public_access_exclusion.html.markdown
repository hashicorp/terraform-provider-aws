---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_vpc_block_public_access_exclusion"
description: |-
  Terraform resource for managing an exception to the AWS VPC (Virtual Private Cloud) Block Public Access Exclusion.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_vpc_block_public_access_exclusion

Terraform resource for managing an AWS EC2 (Elastic Compute Cloud) VPC Block Public Access Exclusion.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Vpc } from "./.gen/providers/aws/vpc";
import { VpcBlockPublicAccessExclusion } from "./.gen/providers/aws/vpc-block-public-access-exclusion";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new Vpc(this, "test", {
      cidrBlock: "10.1.0.0/16",
    });
    const awsVpcBlockPublicAccessExclusionTest =
      new VpcBlockPublicAccessExclusion(this, "test_1", {
        internetGatewayExclusionMode: "allow-bidirectional",
        vpcId: test.id,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcBlockPublicAccessExclusionTest.overrideLogicalId("test");
  }
}

```

### Usage with subnet id

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Subnet } from "./.gen/providers/aws/subnet";
import { Vpc } from "./.gen/providers/aws/vpc";
import { VpcBlockPublicAccessExclusion } from "./.gen/providers/aws/vpc-block-public-access-exclusion";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new Vpc(this, "test", {
      cidrBlock: "10.1.0.0/16",
    });
    const awsSubnetTest = new Subnet(this, "test_1", {
      cidrBlock: "10.1.1.0/24",
      vpcId: test.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSubnetTest.overrideLogicalId("test");
    const awsVpcBlockPublicAccessExclusionTest =
      new VpcBlockPublicAccessExclusion(this, "test_2", {
        internetGatewayExclusionMode: "allow-egress",
        subnetId: Token.asString(awsSubnetTest.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcBlockPublicAccessExclusionTest.overrideLogicalId("test");
  }
}

```

## Argument Reference

The following arguments are required:

* `internetGatewayExclusionMode` - (Required) Mode of exclusion from Block Public Access. The allowed values are `allow-egress` and `allow-bidirectional`.

The following arguments are optional:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `vpcId` - (Optional) Id of the VPC to which this exclusion applies. Either this or the subnet_id needs to be provided.
* `subnetId` - (Optional) Id of the subnet to which this exclusion applies. Either this or the vpc_id needs to be provided.
* `tags` - (Optional) A map of tags to assign to the exclusion. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the VPC Block Public Access Exclusion.
* `resourceArn` - The Amazon Resource Name (ARN) the excluded resource.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `update` - (Default `30m`)
* `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import VPC Block Public Access Exclusion using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VpcBlockPublicAccessExclusion } from "./.gen/providers/aws/vpc-block-public-access-exclusion";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    VpcBlockPublicAccessExclusion.generateConfigForImport(
      this,
      "example",
      "vpcbpa-exclude-1234abcd"
    );
  }
}

```

Using `terraform import`, import EC2 (Elastic Compute Cloud) VPC Block Public Access Exclusion using the `id`. For example:

```console
% terraform import aws_vpc_block_public_access_exclusion.example vpcbpa-exclude-1234abcd
```

<!-- cache-key: cdktf-0.20.8 input-3b0c043913a1757991a0bdc1d3e2e1158d81293470b33a9306f5167cabb4a183 -->