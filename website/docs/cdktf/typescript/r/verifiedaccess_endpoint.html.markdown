---
subcategory: "Verified Access"
layout: "aws"
page_title: "AWS: aws_verifiedaccess_endpoint"
description: |-
  Terraform resource for managing a Verified Access Endpoint.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_verifiedaccess_endpoint

Terraform resource for managing an AWS EC2 (Elastic Compute Cloud) Verified Access Endpoint.

## Example Usage

### ALB Example

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VerifiedaccessEndpoint } from "./.gen/providers/aws/verifiedaccess-endpoint";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new VerifiedaccessEndpoint(this, "example", {
      applicationDomain: "example.com",
      attachmentType: "vpc",
      description: "example",
      domainCertificateArn: Token.asString(awsAcmCertificateExample.arn),
      endpointDomainPrefix: "example",
      endpointType: "load-balancer",
      loadBalancerOptions: {
        loadBalancerArn: Token.asString(awsLbExample.arn),
        port: 443,
        protocol: "https",
        subnetIds: Token.asList(
          "${[ for subnet in ${" + public.fqn + "} : subnet.id]}"
        ),
      },
      securityGroupIds: [Token.asString(awsSecurityGroupExample.id)],
      verifiedAccessGroupId: Token.asString(awsVerifiedaccessGroupExample.id),
    });
  }
}

```

### Network Interface Example

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VerifiedaccessEndpoint } from "./.gen/providers/aws/verifiedaccess-endpoint";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new VerifiedaccessEndpoint(this, "example", {
      applicationDomain: "example.com",
      attachmentType: "vpc",
      description: "example",
      domainCertificateArn: Token.asString(awsAcmCertificateExample.arn),
      endpointDomainPrefix: "example",
      endpointType: "network-interface",
      networkInterfaceOptions: {
        networkInterfaceId: Token.asString(awsNetworkInterfaceExample.id),
        port: 443,
        protocol: "https",
      },
      securityGroupIds: [Token.asString(awsSecurityGroupExample.id)],
      verifiedAccessGroupId: Token.asString(awsVerifiedaccessGroupExample.id),
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `applicationDomain` - (Required) The DNS name for users to reach your application.
* `attachmentType` - (Required) The type of attachment. Currently, only `vpc` is supported.
* `domainCertificateArn` - (Required) - The ARN of the public TLS/SSL certificate in AWS Certificate Manager to associate with the endpoint. The CN in the certificate must match the DNS name your end users will use to reach your application.
* `endpointDomainPrefix` - (Required) - A custom identifier that is prepended to the DNS name that is generated for the endpoint.
* `endpointType` - (Required) - The type of Verified Access endpoint to create. Currently `load-balancer` or `network-interface` are supported.
* `verifiedAccessGroupId` (Required) - The ID of the Verified Access group to associate the endpoint with.

The following arguments are optional:

* `description` - (Optional) A description for the Verified Access endpoint.
* `sseSpecification` - (Optional) The options in use for server side encryption.
* `loadBalancerOptions` - (Optional) The load balancer details. This parameter is required if the endpoint type is `load-balancer`.
* `networkInterfaceOptions` - (Optional) The network interface details. This parameter is required if the endpoint type is `network-interface`.
* `policyDocument` - (Optional) The policy document that is associated with this resource.
* `securityGroupIds` - (Optional) List of the the security groups IDs to associate with the Verified Access endpoint.
* `tags` - (Optional) Key-value tags for the Verified Access Endpoint. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `deviceValidationDomain` - Returned if endpoint has a device trust provider attached.
* `endpointDomain` - A DNS name that is generated for the endpoint.
* `id` - The ID of the AWS Verified Access endpoint.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `60m`)
* `update` - (Default `180m`)
* `delete` - (Default `90m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Verified Access Instances using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VerifiedaccessEndpoint } from "./.gen/providers/aws/verifiedaccess-endpoint";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    VerifiedaccessEndpoint.generateConfigForImport(
      this,
      "example",
      "vae-8012925589"
    );
  }
}

```

Using `terraform import`, import Verified Access Instances using the  `id`. For example:

```console
% terraform import aws_verifiedaccess_endpoint.example vae-8012925589
```

<!-- cache-key: cdktf-0.20.8 input-3815c2cd47cd9adefd7c315589462eaa0b8f5cc0f56864c56da8d6b16cd2f17c -->