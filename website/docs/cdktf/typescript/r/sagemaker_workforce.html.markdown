---
subcategory: "SageMaker"
layout: "aws"
page_title: "AWS: aws_sagemaker_workforce"
description: |-
  Provides a SageMaker Workforce resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_sagemaker_workforce

Provides a SageMaker Workforce resource.

## Example Usage

### Cognito Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CognitoUserPool } from "./.gen/providers/aws/cognito-user-pool";
import { CognitoUserPoolClient } from "./.gen/providers/aws/cognito-user-pool-client";
import { CognitoUserPoolDomain } from "./.gen/providers/aws/cognito-user-pool-domain";
import { SagemakerWorkforce } from "./.gen/providers/aws/sagemaker-workforce";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new CognitoUserPool(this, "example", {
      name: "example",
    });
    const awsCognitoUserPoolClientExample = new CognitoUserPoolClient(
      this,
      "example_1",
      {
        generateSecret: true,
        name: "example",
        userPoolId: example.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCognitoUserPoolClientExample.overrideLogicalId("example");
    const awsCognitoUserPoolDomainExample = new CognitoUserPoolDomain(
      this,
      "example_2",
      {
        domain: "example",
        userPoolId: example.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCognitoUserPoolDomainExample.overrideLogicalId("example");
    const awsSagemakerWorkforceExample = new SagemakerWorkforce(
      this,
      "example_3",
      {
        cognitoConfig: {
          clientId: Token.asString(awsCognitoUserPoolClientExample.id),
          userPool: Token.asString(awsCognitoUserPoolDomainExample.userPoolId),
        },
        workforceName: "example",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSagemakerWorkforceExample.overrideLogicalId("example");
  }
}

```

### Oidc Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SagemakerWorkforce } from "./.gen/providers/aws/sagemaker-workforce";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new SagemakerWorkforce(this, "example", {
      oidcConfig: {
        authorizationEndpoint: "https://example.com",
        clientId: "example",
        clientSecret: "example",
        issuer: "https://example.com",
        jwksUri: "https://example.com",
        logoutEndpoint: "https://example.com",
        tokenEndpoint: "https://example.com",
        userInfoEndpoint: "https://example.com",
      },
      workforceName: "example",
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `workforceName` - (Required) The name of the Workforce (must be unique).
* `cognitoConfig` - (Optional) Use this parameter to configure an Amazon Cognito private workforce. A single Cognito workforce is created using and corresponds to a single Amazon Cognito user pool. Conflicts with `oidcConfig`. see [Cognito Config](#cognito-config) details below.
* `oidcConfig` - (Optional) Use this parameter to configure a private workforce using your own OIDC Identity Provider. Conflicts with `cognitoConfig`. see [OIDC Config](#oidc-config) details below.
* `sourceIpConfig` - (Optional) A list of IP address ranges Used to create an allow list of IP addresses for a private workforce. By default, a workforce isn't restricted to specific IP addresses. see [Source Ip Config](#source-ip-config) details below.
* `workforceVpcConfig` - (Optional) configure a workforce using VPC. see [Workforce VPC Config](#workforce-vpc-config) details below.

### Cognito Config

* `clientId` - (Required) The client ID for your Amazon Cognito user pool.
* `userPool` - (Required) ID for your Amazon Cognito user pool.

### Oidc Config

* `authenticationRequestExtraParams` - (Optional) A string to string map of identifiers specific to the custom identity provider (IdP) being used.
* `authorizationEndpoint` - (Required) The OIDC IdP authorization endpoint used to configure your private workforce.
* `clientId` - (Required) The OIDC IdP client ID used to configure your private workforce.
* `clientSecret` - (Required) The OIDC IdP client secret used to configure your private workforce.
* `issuer` - (Required) The OIDC IdP issuer used to configure your private workforce.
* `jwksUri` - (Required) The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private workforce.
* `logoutEndpoint` - (Required) The OIDC IdP logout endpoint used to configure your private workforce.
* `scope` - (Optional) An array of string identifiers used to refer to the specific pieces of user data or claims that the client application wants to access.
* `tokenEndpoint` - (Required) The OIDC IdP token endpoint used to configure your private workforce.
* `userInfoEndpoint` - (Required) The OIDC IdP user information endpoint used to configure your private workforce.

### Source Ip Config

* `cidrs` - (Required) A list of up to 10 CIDR values.

### Workforce VPC Config

* `securityGroupIds` - (Optional) The VPC security group IDs. The security groups must be for the same VPC as specified in the subnet.
* `subnets` - (Optional) The ID of the subnets in the VPC that you want to connect.
* `vpcId` - (Optional) The ID of the VPC that the workforce uses for communication.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The Amazon Resource Name (ARN) assigned by AWS to this Workforce.
* `id` - The name of the Workforce.
* `subdomain` - The subdomain for your OIDC Identity Provider.
* `workforce_vpc_config.0.vpc_endpoint_id` - The IDs for the VPC service endpoints of your VPC workforce.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import SageMaker Workforces using the `workforceName`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SagemakerWorkforce } from "./.gen/providers/aws/sagemaker-workforce";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    SagemakerWorkforce.generateConfigForImport(this, "example", "example");
  }
}

```

Using `terraform import`, import SageMaker Workforces using the `workforceName`. For example:

```console
% terraform import aws_sagemaker_workforce.example example
```

<!-- cache-key: cdktf-0.20.1 input-dfe4e6d6b426026571ddfd549a3e41a20f0d8a81b1ad80e28a8b0c0f37c7656b -->