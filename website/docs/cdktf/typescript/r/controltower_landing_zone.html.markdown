---
subcategory: "Control Tower"
layout: "aws"
page_title: "AWS: aws_controltower_landing_zone"
description: |-
  Creates a new landing zone using Control Tower.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_controltower_landing_zone

Creates a new landing zone using Control Tower. For more information on usage, please see the
[AWS Control Tower Landing Zone User Guide](https://docs.aws.amazon.com/controltower/latest/userguide/how-control-tower-works.html).

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ControltowerLandingZone } from "./.gen/providers/aws/controltower-landing-zone";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ControltowerLandingZone(this, "example", {
      manifestJson: Token.asString(
        Fn.file("${path.module}/LandingZoneManifest.json")
      ),
      version: "3.2",
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `manifestJson` - (Required) The manifest JSON file is a text file that describes your AWS resources. For examples, review [Launch your landing zone](https://docs.aws.amazon.com/controltower/latest/userguide/lz-api-launch).
* `version` - (Required) The landing zone version.
* `tags` - (Optional) Tags to apply to the landing zone. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The identifier of the landing zone.
* `arn` - The ARN of the landing zone.
* `driftStatus` - The drift status summary of the landing zone.
    * `status` - The drift status of the landing zone.
* `latestAvailableVersion` - The latest available version of the landing zone.
* `tagsAll` - A map of tags assigned to the landing zone, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `120m`)
- `update` - (Default `120m`)
- `delete` - (Default `120m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import a Control Tower Landing Zone using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ControltowerLandingZone } from "./.gen/providers/aws/controltower-landing-zone";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ControltowerLandingZone.generateConfigForImport(
      this,
      "example",
      "1A2B3C4D5E6F7G8H"
    );
  }
}

```

Using `terraform import`, import a Control Tower Landing Zone using the `id`. For example:

```console
% terraform import aws_controltower_landing_zone.example 1A2B3C4D5E6F7G8H
```

<!-- cache-key: cdktf-0.20.8 input-53c9533366773a62ee4316ca527ffa720a89c80117625816a27bb368ff0fcd82 -->