---
subcategory: "AppStream 2.0"
layout: "aws"
page_title: "AWS: aws_appstream_image_builder"
description: |-
  Provides an AppStream image builder
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_appstream_image_builder

Provides an AppStream image builder.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppstreamImageBuilder } from "./.gen/providers/aws/appstream-image-builder";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AppstreamImageBuilder(this, "test_fleet", {
      description: "Description of a ImageBuilder",
      displayName: "Display name of a ImageBuilder",
      enableDefaultInternetAccess: false,
      imageName: "AppStream-WinServer2019-10-05-2022",
      instanceType: "stream.standard.large",
      name: "Name",
      tags: {
        Name: "Example Image Builder",
      },
      vpcConfig: {
        subnetIds: [example.id],
      },
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `instanceType` - (Required) Instance type to use when launching the image builder.
* `name` - (Required) Unique name for the image builder.

The following arguments are optional:

* `accessEndpoint` - (Optional) Set of interface VPC endpoint (interface endpoint) objects. Maximum of 4. See below.
* `appstreamAgentVersion` - (Optional) Version of the AppStream 2.0 agent to use for this image builder.
* `description` - (Optional) Description to display.
* `displayName` - (Optional) Human-readable friendly name for the AppStream image builder.
* `domainJoinInfo` - (Optional) Configuration block for the name of the directory and organizational unit (OU) to use to join the image builder to a Microsoft Active Directory domain. See below.
* `enableDefaultInternetAccess` - (Optional) Enables or disables default internet access for the image builder.
* `iamRoleArn` - (Optional) ARN of the IAM role to apply to the image builder.
* `imageArn` - (Optional, Required if `imageName` not provided) ARN of the public, private, or shared image to use.
* `imageName` - (Optional, Required if `imageArn` not provided) Name of the image used to create the image builder.
* `vpcConfig` - (Optional) Configuration block for the VPC configuration for the image builder. See below.
* `tags` - (Optional) Map of tags to assign to the instance. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### `accessEndpoint`

The `accessEndpoint` block supports the following arguments:

* `endpointType` - (Required) Type of interface endpoint. For valid values, refer to the [AWS documentation](https://docs.aws.amazon.com/appstream2/latest/APIReference/API_AccessEndpoint.html).
* `vpceId` - (Optional) Identifier (ID) of the interface VPC endpoint.

### `domainJoinInfo`

The `domainJoinInfo` block supports the following arguments:

* `directoryName` - (Optional) Fully qualified name of the directory (for example, corp.example.com).
* `organizationalUnitDistinguishedName` - (Optional) Distinguished name of the organizational unit for computer accounts.

### `vpcConfig`

The `vpcConfig` block supports the following arguments:

* `securityGroupIds` - (Optional) Identifiers of the security groups for the image builder or image builder.
* `subnetIds` - (Optional) Identifier of the subnet to which a network interface is attached from the image builder instance.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the appstream image builder.
* `createdTime` -  Date and time, in UTC and extended RFC 3339 format, when the image builder was created.
* `id` - Name of the image builder.
* `state` - State of the image builder. For valid values, refer to the [AWS documentation](https://docs.aws.amazon.com/appstream2/latest/APIReference/API_ImageBuilder.html#AppStream2-Type-ImageBuilder-State).
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_appstream_image_builder` using the `name`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppstreamImageBuilder } from "./.gen/providers/aws/appstream-image-builder";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    AppstreamImageBuilder.generateConfigForImport(
      this,
      "example",
      "imageBuilderExample"
    );
  }
}

```

Using `terraform import`, import `aws_appstream_image_builder` using the `name`. For example:

```console
% terraform import aws_appstream_image_builder.example imageBuilderExample
```

<!-- cache-key: cdktf-0.20.1 input-b371c5560fe29fa7c1227813252a979a996c97107efcf6194342d7cac877c823 -->