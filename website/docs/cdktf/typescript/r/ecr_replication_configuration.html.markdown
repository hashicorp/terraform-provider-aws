---
subcategory: "ECR (Elastic Container Registry)"
layout: "aws"
page_title: "AWS: aws_ecr_replication_configuration"
description: |-
  Provides an Elastic Container Registry Replication Configuration.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ecr_replication_configuration

Provides an Elastic Container Registry Replication Configuration.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { DataAwsRegions } from "./.gen/providers/aws/data-aws-regions";
import { EcrReplicationConfiguration } from "./.gen/providers/aws/ecr-replication-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const current = new DataAwsCallerIdentity(this, "current", {});
    const example = new DataAwsRegions(this, "example", {});
    const awsEcrReplicationConfigurationExample =
      new EcrReplicationConfiguration(this, "example_2", {
        replicationConfiguration: {
          rule: [
            {
              destination: [
                {
                  region: Token.asString(Fn.lookupNested(example.names, ["0"])),
                  registryId: Token.asString(current.accountId),
                },
              ],
            },
          ],
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsEcrReplicationConfigurationExample.overrideLogicalId("example");
  }
}

```

## Multiple Region Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { DataAwsRegions } from "./.gen/providers/aws/data-aws-regions";
import { EcrReplicationConfiguration } from "./.gen/providers/aws/ecr-replication-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const current = new DataAwsCallerIdentity(this, "current", {});
    const example = new DataAwsRegions(this, "example", {});
    const awsEcrReplicationConfigurationExample =
      new EcrReplicationConfiguration(this, "example_2", {
        replicationConfiguration: {
          rule: [
            {
              destination: [
                {
                  region: Token.asString(Fn.lookupNested(example.names, ["0"])),
                  registryId: Token.asString(current.accountId),
                },
                {
                  region: Token.asString(Fn.lookupNested(example.names, ["1"])),
                  registryId: Token.asString(current.accountId),
                },
              ],
            },
          ],
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsEcrReplicationConfigurationExample.overrideLogicalId("example");
  }
}

```

## Repository Filter Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { DataAwsRegions } from "./.gen/providers/aws/data-aws-regions";
import { EcrReplicationConfiguration } from "./.gen/providers/aws/ecr-replication-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const current = new DataAwsCallerIdentity(this, "current", {});
    const example = new DataAwsRegions(this, "example", {});
    const awsEcrReplicationConfigurationExample =
      new EcrReplicationConfiguration(this, "example_2", {
        replicationConfiguration: {
          rule: [
            {
              destination: [
                {
                  region: Token.asString(Fn.lookupNested(example.names, ["0"])),
                  registryId: Token.asString(current.accountId),
                },
              ],
              repositoryFilter: [
                {
                  filter: "prod-microservice",
                  filterType: "PREFIX_MATCH",
                },
              ],
            },
          ],
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsEcrReplicationConfigurationExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `replicationConfiguration` - (Required) Replication configuration for a registry. See [Replication Configuration](#replication-configuration).

### Replication Configuration

* `rule` - (Required) The replication rules for a replication configuration. A maximum of 10 are allowed per `replicationConfiguration`. See [Rule](#rule)

### Rule

* `destination` - (Required) the details of a replication destination. A maximum of 25 are allowed per `rule`. See [Destination](#destination).
* `repositoryFilter` - (Optional) filters for a replication rule. See [Repository Filter](#repository-filter).

### Destination

* `region` - (Required) A Region to replicate to.
* `registryId` - (Required) The account ID of the destination registry to replicate to.

### Repository Filter

* `filter` - (Required) The repository filter details.
* `filterType` - (Required) The repository filter type. The only supported value is `PREFIX_MATCH`, which is a repository name prefix specified with the filter parameter.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `registryId` - The registry ID where the replication configuration was created.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ECR Replication Configuration using the `registryId`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EcrReplicationConfiguration } from "./.gen/providers/aws/ecr-replication-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    EcrReplicationConfiguration.generateConfigForImport(
      this,
      "service",
      "012345678912"
    );
  }
}

```

Using `terraform import`, import ECR Replication Configuration using the `registryId`. For example:

```console
% terraform import aws_ecr_replication_configuration.service 012345678912
```

<!-- cache-key: cdktf-0.20.8 input-1e720b09bffb1410913da15b1daa4aaef042cc175055603ba3335ca4406730fc -->