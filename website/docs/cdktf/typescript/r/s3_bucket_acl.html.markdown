---
subcategory: "S3 (Simple Storage)"
layout: "aws"
page_title: "AWS: aws_s3_bucket_acl"
description: |-
  Provides an S3 bucket ACL resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_s3_bucket_acl

Provides an S3 bucket ACL resource.

~> **Note:** `terraform destroy` does not delete the S3 Bucket ACL but does remove the resource from Terraform state.

-> This resource cannot be used with S3 directory buckets.

## Example Usage

### With `private` ACL

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketAcl } from "./.gen/providers/aws/s3-bucket-acl";
import { S3BucketOwnershipControls } from "./.gen/providers/aws/s3-bucket-ownership-controls";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new S3Bucket(this, "example", {
      bucket: "my-tf-example-bucket",
    });
    const awsS3BucketOwnershipControlsExample = new S3BucketOwnershipControls(
      this,
      "example_1",
      {
        bucket: example.id,
        rule: {
          objectOwnership: "BucketOwnerPreferred",
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3BucketOwnershipControlsExample.overrideLogicalId("example");
    const awsS3BucketAclExample = new S3BucketAcl(this, "example_2", {
      acl: "private",
      bucket: example.id,
      dependsOn: [awsS3BucketOwnershipControlsExample],
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3BucketAclExample.overrideLogicalId("example");
  }
}

```

### With `public-read` ACL

-> This example explicitly disables the default S3 bucket security settings. This
should be done with caution, as all bucket objects become publicly exposed.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketAcl } from "./.gen/providers/aws/s3-bucket-acl";
import { S3BucketOwnershipControls } from "./.gen/providers/aws/s3-bucket-ownership-controls";
import { S3BucketPublicAccessBlock } from "./.gen/providers/aws/s3-bucket-public-access-block";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new S3Bucket(this, "example", {
      bucket: "my-tf-example-bucket",
    });
    const awsS3BucketOwnershipControlsExample = new S3BucketOwnershipControls(
      this,
      "example_1",
      {
        bucket: example.id,
        rule: {
          objectOwnership: "BucketOwnerPreferred",
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3BucketOwnershipControlsExample.overrideLogicalId("example");
    const awsS3BucketPublicAccessBlockExample = new S3BucketPublicAccessBlock(
      this,
      "example_2",
      {
        blockPublicAcls: false,
        blockPublicPolicy: false,
        bucket: example.id,
        ignorePublicAcls: false,
        restrictPublicBuckets: false,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3BucketPublicAccessBlockExample.overrideLogicalId("example");
    const awsS3BucketAclExample = new S3BucketAcl(this, "example_3", {
      acl: "public-read",
      bucket: example.id,
      dependsOn: [
        awsS3BucketOwnershipControlsExample,
        awsS3BucketPublicAccessBlockExample,
      ],
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3BucketAclExample.overrideLogicalId("example");
  }
}

```

### With Grants

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsCanonicalUserId } from "./.gen/providers/aws/data-aws-canonical-user-id";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketAcl } from "./.gen/providers/aws/s3-bucket-acl";
import { S3BucketOwnershipControls } from "./.gen/providers/aws/s3-bucket-ownership-controls";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new S3Bucket(this, "example", {
      bucket: "my-tf-example-bucket",
    });
    const awsS3BucketOwnershipControlsExample = new S3BucketOwnershipControls(
      this,
      "example_1",
      {
        bucket: example.id,
        rule: {
          objectOwnership: "BucketOwnerPreferred",
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3BucketOwnershipControlsExample.overrideLogicalId("example");
    const current = new DataAwsCanonicalUserId(this, "current", {});
    const awsS3BucketAclExample = new S3BucketAcl(this, "example_3", {
      accessControlPolicy: {
        grant: [
          {
            grantee: {
              id: Token.asString(current.id),
              type: "CanonicalUser",
            },
            permission: "READ",
          },
          {
            grantee: {
              type: "Group",
              uri: "http://acs.amazonaws.com/groups/s3/LogDelivery",
            },
            permission: "READ_ACP",
          },
        ],
        owner: {
          id: Token.asString(current.id),
        },
      },
      bucket: example.id,
      dependsOn: [awsS3BucketOwnershipControlsExample],
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3BucketAclExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `acl` - (Optional, either `accessControlPolicy` or `acl` is required) Specifies the Canned ACL to apply to the bucket. Valid values: `private`, `public-read`, `public-read-write`, `aws-exec-read`, `authenticated-read`, `bucket-owner-read`, `bucket-owner-full-control`, `log-delivery-write`. Full details are available on the [AWS documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl).
* `accessControlPolicy` - (Optional, either `accessControlPolicy` or `acl` is required) Configuration block that sets the ACL permissions for an object per grantee. [See below](#access_control_policy).
* `bucket` - (Required, Forces new resource) Bucket to which to apply the ACL.
* `expectedBucketOwner` - (Optional, Forces new resource) Account ID of the expected bucket owner.

### access_control_policy

The `accessControlPolicy` configuration block supports the following arguments:

* `grant` - (Required) Set of `grant` configuration blocks. [See below](#grant).
* `owner` - (Required) Configuration block for the bucket owner's display name and ID. [See below](#owner).

### grant

The `grant` configuration block supports the following arguments:

* `grantee` - (Required) Configuration block for the person being granted permissions. [See below](#grantee).
* `permission` - (Required) Logging permissions assigned to the grantee for the bucket. Valid values: `FULL_CONTROL`, `WRITE`, `WRITE_ACP`, `READ`, `READ_ACP`. See [What permissions can I grant?](https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#permissions) for more details about what each permission means in the context of buckets.

### owner

The `owner` configuration block supports the following arguments:

* `id` - (Required) ID of the owner.
* `displayName` - (Optional) Display name of the owner.

### grantee

The `grantee` configuration block supports the following arguments:

* `emailAddress` - (Optional) Email address of the grantee. See [Regions and Endpoints](https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region) for supported AWS regions where this argument can be specified.
* `id` - (Optional) Canonical user ID of the grantee.
* `type` - (Required) Type of grantee. Valid values: `CanonicalUser`, `AmazonCustomerByEmail`, `Group`.
* `uri` - (Optional) URI of the grantee group.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The `bucket`, `expectedBucketOwner` (if configured), and `acl` (if configured) separated by commas (`,`).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import S3 bucket ACL using `bucket`, `expectedBucketOwner`, and/or `acl`, depending on your situation. For example:

If the owner (account ID) of the source bucket is the _same_ account used to configure the Terraform AWS Provider, and the source bucket is **not configured** with a
[canned ACL][1] (i.e. predefined grant), import using the `bucket`:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { S3BucketAcl } from "./.gen/providers/aws/s3-bucket-acl";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    S3BucketAcl.generateConfigForImport(this, "example", "bucket-name");
  }
}

```

If the owner (account ID) of the source bucket is the _same_ account used to configure the Terraform AWS Provider, and the source bucket is **configured** with a
[canned ACL][1] (i.e. predefined grant), import using the `bucket` and `acl` separated by a comma (`,`):

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { S3BucketAcl } from "./.gen/providers/aws/s3-bucket-acl";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    S3BucketAcl.generateConfigForImport(this, "example", "bucket-name,private");
  }
}

```

If the owner (account ID) of the source bucket _differs_ from the account used to configure the Terraform AWS Provider, and the source bucket is **not configured** with a [canned ACL][1] (i.e. predefined grant), imported using the `bucket` and `expectedBucketOwner` separated by a comma (`,`):

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { S3BucketAcl } from "./.gen/providers/aws/s3-bucket-acl";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    S3BucketAcl.generateConfigForImport(
      this,
      "example",
      "bucket-name,123456789012"
    );
  }
}

```

If the owner (account ID) of the source bucket _differs_ from the account used to configure the Terraform AWS Provider, and the source bucket is **configured** with a
[canned ACL][1] (i.e. predefined grant), imported using the `bucket`, `expectedBucketOwner`, and `acl` separated by commas (`,`):

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { S3BucketAcl } from "./.gen/providers/aws/s3-bucket-acl";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    S3BucketAcl.generateConfigForImport(
      this,
      "example",
      "bucket-name,123456789012,private"
    );
  }
}

```

**Using `terraform import` to import** using `bucket`, `expectedBucketOwner`, and/or `acl`, depending on your situation. For example:

If the owner (account ID) of the source bucket is the _same_ account used to configure the Terraform AWS Provider, and the source bucket is **not configured** with a
[canned ACL][1] (i.e. predefined grant), import using the `bucket`:

```console
% terraform import aws_s3_bucket_acl.example bucket-name
```

If the owner (account ID) of the source bucket is the _same_ account used to configure the Terraform AWS Provider, and the source bucket is **configured** with a [canned ACL][1] (i.e. predefined grant), import using the `bucket` and `acl` separated by a comma (`,`):

```console
% terraform import aws_s3_bucket_acl.example bucket-name,private
```

If the owner (account ID) of the source bucket _differs_ from the account used to configure the Terraform AWS Provider, and the source bucket is **not configured** with a [canned ACL][1] (i.e. predefined grant), imported using the `bucket` and `expectedBucketOwner` separated by a comma (`,`):

```console
% terraform import aws_s3_bucket_acl.example bucket-name,123456789012
```

If the owner (account ID) of the source bucket _differs_ from the account used to configure the Terraform AWS Provider, and the source bucket is **configured** with a [canned ACL][1] (i.e. predefined grant), imported using the `bucket`, `expectedBucketOwner`, and `acl` separated by commas (`,`):

```console
% terraform import aws_s3_bucket_acl.example bucket-name,123456789012,private
```

[1]: https://docs.aws.amazon.com/AmazonS3/latest/userguide/acl-overview.html#canned-acl

<!-- cache-key: cdktf-0.20.8 input-f7eaa2b766c3b5417b859c0c0fbb4bf31664e8d5dac63afac62a9262559a8893 -->