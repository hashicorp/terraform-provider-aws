---
subcategory: "FinSpace"
layout: "aws"
page_title: "AWS: aws_finspace_kx_user"
description: |-
  Terraform resource for managing an AWS FinSpace Kx User.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_finspace_kx_user

Terraform resource for managing an AWS FinSpace Kx User.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { FinspaceKxEnvironment } from "./.gen/providers/aws/finspace-kx-environment";
import { FinspaceKxUser } from "./.gen/providers/aws/finspace-kx-user";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { KmsKey } from "./.gen/providers/aws/kms-key";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new IamRole(this, "example", {
      assumeRolePolicy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: "sts:AssumeRole",
              Effect: "Allow",
              Principal: {
                Service: "ec2.amazonaws.com",
              },
              Sid: "",
            },
          ],
          Version: "2012-10-17",
        })
      ),
      name: "example-role",
    });
    const awsKmsKeyExample = new KmsKey(this, "example_1", {
      deletionWindowInDays: 7,
      description: "Example KMS Key",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsKmsKeyExample.overrideLogicalId("example");
    const awsFinspaceKxEnvironmentExample = new FinspaceKxEnvironment(
      this,
      "example_2",
      {
        kmsKeyId: Token.asString(awsKmsKeyExample.arn),
        name: "my-tf-kx-environment",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsFinspaceKxEnvironmentExample.overrideLogicalId("example");
    const awsFinspaceKxUserExample = new FinspaceKxUser(this, "example_3", {
      environmentId: Token.asString(awsFinspaceKxEnvironmentExample.id),
      iamRole: example.arn,
      name: "my-tf-kx-user",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsFinspaceKxUserExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `name` - (Required) A unique identifier for the user.
* `environmentId` - (Required) Unique identifier for the KX environment.
* `iamRole` - (Required) IAM role ARN to be associated with the user.

The following arguments are optional:

* `tags` - (Optional) Key-value mapping of resource tags. If configured with a provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) identifier of the KX user.
* `id` - A comma-delimited string joining environment ID and user name.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `update` - (Default `30m`)
* `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import an AWS FinSpace Kx User using the `id` (environment ID and user name, comma-delimited). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { FinspaceKxUser } from "./.gen/providers/aws/finspace-kx-user";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    FinspaceKxUser.generateConfigForImport(
      this,
      "example",
      "n3ceo7wqxoxcti5tujqwzs,my-tf-kx-user"
    );
  }
}

```

Using `terraform import`, import an AWS FinSpace Kx User using the `id` (environment ID and user name, comma-delimited). For example:

```console
% terraform import aws_finspace_kx_user.example n3ceo7wqxoxcti5tujqwzs,my-tf-kx-user
```

<!-- cache-key: cdktf-0.20.8 input-ca0c383fee51cd83230b9fbdc20cbdd865bb1f5eb6633d7d2d1fa7bea216bcb4 -->