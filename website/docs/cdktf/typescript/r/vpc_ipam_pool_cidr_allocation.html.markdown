---
subcategory: "VPC IPAM (IP Address Manager)"
layout: "aws"
page_title: "AWS: aws_vpc_ipam_pool_cidr_allocation"
description: |-
  Allocates (reserves) a CIDR from an IPAM address pool, preventing usage by IPAM.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_vpc_ipam_pool_cidr_allocation

Allocates (reserves) a CIDR from an IPAM address pool, preventing usage by IPAM. Only works for private IPv4.

## Example Usage

Basic usage:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsRegion } from "./.gen/providers/aws/data-aws-region";
import { VpcIpam } from "./.gen/providers/aws/vpc-ipam";
import { VpcIpamPool } from "./.gen/providers/aws/vpc-ipam-pool";
import { VpcIpamPoolCidr } from "./.gen/providers/aws/vpc-ipam-pool-cidr";
import { VpcIpamPoolCidrAllocation } from "./.gen/providers/aws/vpc-ipam-pool-cidr-allocation";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const current = new DataAwsRegion(this, "current", {});
    const example = new VpcIpam(this, "example", {
      operatingRegions: [
        {
          regionName: Token.asString(current.name),
        },
      ],
    });
    const awsVpcIpamPoolExample = new VpcIpamPool(this, "example_2", {
      addressFamily: "ipv4",
      ipamScopeId: example.privateDefaultScopeId,
      locale: Token.asString(current.name),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcIpamPoolExample.overrideLogicalId("example");
    const awsVpcIpamPoolCidrExample = new VpcIpamPoolCidr(this, "example_3", {
      cidr: "172.20.0.0/16",
      ipamPoolId: Token.asString(awsVpcIpamPoolExample.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcIpamPoolCidrExample.overrideLogicalId("example");
    const awsVpcIpamPoolCidrAllocationExample = new VpcIpamPoolCidrAllocation(
      this,
      "example_4",
      {
        cidr: "172.20.0.0/24",
        dependsOn: [awsVpcIpamPoolCidrExample],
        ipamPoolId: Token.asString(awsVpcIpamPoolExample.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcIpamPoolCidrAllocationExample.overrideLogicalId("example");
  }
}

```

With the `disallowedCidrs` attribute:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsRegion } from "./.gen/providers/aws/data-aws-region";
import { VpcIpam } from "./.gen/providers/aws/vpc-ipam";
import { VpcIpamPool } from "./.gen/providers/aws/vpc-ipam-pool";
import { VpcIpamPoolCidr } from "./.gen/providers/aws/vpc-ipam-pool-cidr";
import { VpcIpamPoolCidrAllocation } from "./.gen/providers/aws/vpc-ipam-pool-cidr-allocation";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const current = new DataAwsRegion(this, "current", {});
    const example = new VpcIpam(this, "example", {
      operatingRegions: [
        {
          regionName: Token.asString(current.name),
        },
      ],
    });
    const awsVpcIpamPoolExample = new VpcIpamPool(this, "example_2", {
      addressFamily: "ipv4",
      ipamScopeId: example.privateDefaultScopeId,
      locale: Token.asString(current.name),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcIpamPoolExample.overrideLogicalId("example");
    const awsVpcIpamPoolCidrExample = new VpcIpamPoolCidr(this, "example_3", {
      cidr: "172.20.0.0/16",
      ipamPoolId: Token.asString(awsVpcIpamPoolExample.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcIpamPoolCidrExample.overrideLogicalId("example");
    const awsVpcIpamPoolCidrAllocationExample = new VpcIpamPoolCidrAllocation(
      this,
      "example_4",
      {
        dependsOn: [awsVpcIpamPoolCidrExample],
        disallowedCidrs: ["172.20.0.0/28"],
        ipamPoolId: Token.asString(awsVpcIpamPoolExample.id),
        netmaskLength: 28,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcIpamPoolCidrAllocationExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `cidr` - (Optional, Forces new resource) The CIDR you want to assign to the pool.
* `description` - (Optional, Forces new resource) The description for the allocation.
* `disallowedCidrs` - (Optional, Forces new resource) Exclude a particular CIDR range from being returned by the pool.
* `ipamPoolId` - (Required, Forces new resource) The ID of the pool to which you want to assign a CIDR.
* `netmaskLength` - (Optional, Forces new resource) The netmask length of the CIDR you would like to allocate to the IPAM pool. Valid Values: `0-128`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the allocation.
* `resourceId` - The ID of the resource.
* `resourceOwner` - The owner of the resource.
* `resourceType` - The type of the resource.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import IPAM allocations using the allocation `id` and `pool id`, separated by `_`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VpcIpamPoolCidrAllocation } from "./.gen/providers/aws/vpc-ipam-pool-cidr-allocation";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    VpcIpamPoolCidrAllocation.generateConfigForImport(
      this,
      "example",
      "ipam-pool-alloc-0dc6d196509c049ba8b549ff99f639736_ipam-pool-07cfb559e0921fcbe"
    );
  }
}

```

Using `terraform import`, import IPAM allocations using the allocation `id` and `pool id`, separated by `_`. For example:

```console
% terraform import aws_vpc_ipam_pool_cidr_allocation.example ipam-pool-alloc-0dc6d196509c049ba8b549ff99f639736_ipam-pool-07cfb559e0921fcbe
```

<!-- cache-key: cdktf-0.20.1 input-fda9663b9e39d957ce0f2859addfeffc21d1ce22091ce0b4c748dbc034daa31e -->