---
subcategory: "DataZone"
layout: "aws"
page_title: "AWS: aws_datazone_domain"
description: |-
  Terraform resource for managing an AWS DataZone Domain.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_datazone_domain

Terraform resource for managing an AWS DataZone Domain.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DatazoneDomain } from "./.gen/providers/aws/datazone-domain";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicy } from "./.gen/providers/aws/iam-role-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const domainExecutionRole = new IamRole(this, "domain_execution_role", {
      assumeRolePolicy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: ["sts:AssumeRole", "sts:TagSession"],
              Effect: "Allow",
              Principal: {
                Service: "datazone.amazonaws.com",
              },
            },
            {
              Action: ["sts:AssumeRole", "sts:TagSession"],
              Effect: "Allow",
              Principal: {
                Service: "cloudformation.amazonaws.com",
              },
            },
          ],
          Version: "2012-10-17",
        })
      ),
      name: "my_domain_execution_role",
    });
    const awsIamRolePolicyDomainExecutionRole = new IamRolePolicy(
      this,
      "domain_execution_role_1",
      {
        policy: Token.asString(
          Fn.jsonencode({
            Statement: [
              {
                Action: ["datazone:*", "ram:*", "sso:*", "kms:*"],
                Effect: "Allow",
                Resource: "*",
              },
            ],
            Version: "2012-10-17",
          })
        ),
        role: domainExecutionRole.name,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyDomainExecutionRole.overrideLogicalId(
      "domain_execution_role"
    );
    new DatazoneDomain(this, "example", {
      domainExecutionRole: domainExecutionRole.arn,
      name: "example",
    });
  }
}

```

### V2 Domain

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { DataAwsIamPolicy } from "./.gen/providers/aws/data-aws-iam-policy";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { DatazoneDomain } from "./.gen/providers/aws/datazone-domain";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicyAttachment } from "./.gen/providers/aws/iam-role-policy-attachment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const current = new DataAwsCallerIdentity(this, "current", {});
    const domainExecutionRole = new DataAwsIamPolicy(
      this,
      "domain_execution_role",
      {
        name: "SageMakerStudioDomainExecutionRolePolicy",
      }
    );
    const domainServiceRole = new DataAwsIamPolicy(
      this,
      "domain_service_role",
      {
        name: "SageMakerStudioDomainServiceRolePolicy",
      }
    );
    const assumeRoleDomainExecution = new DataAwsIamPolicyDocument(
      this,
      "assume_role_domain_execution",
      {
        statement: [
          {
            actions: ["sts:AssumeRole", "sts:TagSession", "sts:SetContext"],
            condition: [
              {
                test: "StringEquals",
                values: [Token.asString(current.accountId)],
                variable: "aws:SourceAccount",
              },
              {
                test: "ForAllValues:StringLike",
                values: ["datazone*"],
                variable: "aws:TagKeys",
              },
            ],
            principals: [
              {
                identifiers: ["datazone.amazonaws.com"],
                type: "Service",
              },
            ],
          },
        ],
      }
    );
    const assumeRoleDomainService = new DataAwsIamPolicyDocument(
      this,
      "assume_role_domain_service",
      {
        statement: [
          {
            actions: ["sts:AssumeRole"],
            condition: [
              {
                test: "StringEquals",
                values: [Token.asString(current.accountId)],
                variable: "aws:SourceAccount",
              },
            ],
            principals: [
              {
                identifiers: ["datazone.amazonaws.com"],
                type: "Service",
              },
            ],
          },
        ],
      }
    );
    const domainExecution = new IamRole(this, "domain_execution", {
      assumeRolePolicy: Token.asString(assumeRoleDomainExecution.json),
      name: "example-domain-execution-role",
    });
    const domainService = new IamRole(this, "domain_service", {
      assumeRolePolicy: Token.asString(assumeRoleDomainService.json),
      name: "example-domain-service-role",
    });
    const awsIamRolePolicyAttachmentDomainExecution =
      new IamRolePolicyAttachment(this, "domain_execution_7", {
        policyArn: Token.asString(domainExecutionRole.arn),
        role: domainExecution.name,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyAttachmentDomainExecution.overrideLogicalId(
      "domain_execution"
    );
    const awsIamRolePolicyAttachmentDomainService = new IamRolePolicyAttachment(
      this,
      "domain_service_8",
      {
        policyArn: Token.asString(domainServiceRole.arn),
        role: domainService.name,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyAttachmentDomainService.overrideLogicalId("domain_service");
    new DatazoneDomain(this, "example", {
      domainExecutionRole: domainExecution.arn,
      domainVersion: "V2",
      name: "example-domain",
      serviceRole: domainService.arn,
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `name` - (Required) Name of the Domain.
* `domainExecutionRole` - (Required) ARN of the role used by DataZone to configure the Domain.

The following arguments are optional:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `description` - (Optional) Description of the Domain.
* `domainVersion` - (Optional) Version of the Domain. Valid values are `V1` and `V2`. Defaults to `V1`.
* `kmsKeyIdentifier` - (Optional) ARN of the KMS key used to encrypt the Amazon DataZone domain, metadata and reporting data.
* `serviceRole` - (Optional) ARN of the service role used by DataZone. Required when `domainVersion` is set to `V2`.
* `singleSignOn` - (Optional) Single sign on options, used to [enable AWS IAM Identity Center](https://docs.aws.amazon.com/datazone/latest/userguide/enable-IAM-identity-center-for-datazone.html) for DataZone.
* `skipDeletionCheck` - (Optional) Whether to skip the deletion check for the Domain.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the Domain.
* `id` - ID of the Domain.
* `portalUrl` - URL of the data portal for the Domain.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `10m`)
* `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import DataZone Domain using the `domainId`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DatazoneDomain } from "./.gen/providers/aws/datazone-domain";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DatazoneDomain.generateConfigForImport(
      this,
      "example",
      "domain-id-12345678"
    );
  }
}

```

Using `terraform import`, import DataZone Domain using the `domainId`. For example:

```console
% terraform import aws_datazone_domain.example domain-id-12345678
```

<!-- cache-key: cdktf-0.20.8 input-374106300826848c5ca762f24f8b1cb84d7e822c81f34bbfce1b23a68a1225d0 -->