---
subcategory: "DataZone"
layout: "aws"
page_title: "AWS: aws_datazone_domain"
description: |-
  Terraform resource for managing an AWS DataZone Domain.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_datazone_domain

Terraform resource for managing an AWS DataZone Domain.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DatazoneDomain } from "./.gen/providers/aws/";
import { IamRole } from "./.gen/providers/aws/iam-role";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const domainExecutionRole = new IamRole(this, "domain_execution_role", {
      assumeRolePolicy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: ["sts:AssumeRole", "sts:TagSession"],
              Effect: "Allow",
              Principal: {
                Service: "datazone.amazonaws.com",
              },
            },
            {
              Action: ["sts:AssumeRole", "sts:TagSession"],
              Effect: "Allow",
              Principal: {
                Service: "cloudformation.amazonaws.com",
              },
            },
          ],
          Version: "2012-10-17",
        })
      ),
      inlinePolicy: [
        {
          name: "domain_execution_policy",
          policy: Token.asString(
            Fn.jsonencode({
              Statement: [
                {
                  Action: ["datazone:*", "ram:*", "sso:*", "kms:*"],
                  Effect: "Allow",
                  Resource: "*",
                },
              ],
              Version: "2012-10-17",
            })
          ),
        },
      ],
      name: "my_domain_execution_role",
    });
    new DatazoneDomain(this, "example", {
      domain_execution_role: domainExecutionRole.arn,
      name: "example",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `name` - (Required) Name of the Domain.
* `domain_execution_role` - (Required) ARN of the role used by DataZone to configure the Domain.

The following arguments are optional:

* `description` - (Optional) Description of the Domain.
* `kmsKeyIdentifier` - (Optional) ARN of the KMS key used to encrypt the Amazon DataZone domain, metadata and reporting data.
* `single_sign_on` - (Optional) Single sign on options, used to [enable AWS IAM Identity Center](https://docs.aws.amazon.com/datazone/latest/userguide/enable-IAM-identity-center-for-datazone.html) for DataZone.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the Domain.
* `id` - ID of the Domain.
* `portal_url` - URL of the data portal for the Domain.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `10m`)
* `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import DataZone Domain using the `domainId`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DatazoneDomain } from "./.gen/providers/aws/";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DatazoneDomain.generateConfigForImport(
      this,
      "example",
      "domain-id-12345678"
    );
  }
}

```

Using `terraform import`, import DataZone Domain using the `domainId`. For example:

```console
% terraform import aws_datazone_domain.example domain-id-12345678
```

<!-- cache-key: cdktf-0.20.1 input-3b2239cf5f5ac9bcbca4f180b2e7181c60bc3109ef70df45a3bc47135a60b3d8 -->