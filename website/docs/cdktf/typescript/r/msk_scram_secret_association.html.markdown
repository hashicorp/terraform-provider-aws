---
subcategory: "Managed Streaming for Kafka"
layout: "aws"
page_title: "AWS: aws_msk_scram_secret_association"
description: |-
  Associates SCRAM secrets with a Managed Streaming for Kafka (MSK) cluster.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_msk_scram_secret_association

Associates SCRAM secrets stored in the Secrets Manager service with a Managed Streaming for Kafka (MSK) cluster.

!> This resource takes exclusive ownership over SCRAM secrets associated with a cluster. This includes removal of SCRAM secrets which are not explicitly configured. To prevent persistent drift, ensure any `aws_msk_single_scram_secret_association` resources managed alongside this resource are included in the `secretArnList` argument.

-> **Note:** The following assumes the MSK cluster has SASL/SCRAM authentication enabled. See below for example usage or refer to the [Username/Password Authentication](https://docs.aws.amazon.com/msk/latest/developerguide/msk-password.html) section of the MSK Developer Guide for more details.

To set up username and password authentication for a cluster, create an [`aws_secretsmanager_secret` resource](/docs/providers/aws/r/secretsmanager_secret.html) and associate
a username and password with the secret with an [`aws_secretsmanager_secret_version` resource](/docs/providers/aws/r/secretsmanager_secret_version.html). When creating a secret for the cluster,
the `name` must have the prefix `AmazonMSK_` and you must either use an existing custom AWS KMS key or create a new
custom AWS KMS key for your secret with the [`aws_kms_key` resource](/docs/providers/aws/r/kms_key.html). It is important to note that a policy is required for the `aws_secretsmanager_secret`
resource in order for Kafka to be able to read it. This policy is attached automatically when the `aws_msk_scram_secret_association` is used,
however, this policy will not be in terraform and as such, will present a diff on plan/apply. For that reason, you must use the [`aws_secretsmanager_secret_policy`
resource](/docs/providers/aws/r/secretsmanager_secret_policy.html) as shown below in order to ensure that the state is in a clean state after the creation of secret and the association to the cluster.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { KmsKey } from "./.gen/providers/aws/kms-key";
import { MskCluster } from "./.gen/providers/aws/msk-cluster";
import { MskScramSecretAssociation } from "./.gen/providers/aws/msk-scram-secret-association";
import { SecretsmanagerSecret } from "./.gen/providers/aws/secretsmanager-secret";
import { SecretsmanagerSecretPolicy } from "./.gen/providers/aws/secretsmanager-secret-policy";
import { SecretsmanagerSecretVersion } from "./.gen/providers/aws/secretsmanager-secret-version";
interface MyConfig {
  brokerNodeGroupInfo: any;
  kafkaVersion: any;
  numberOfBrokerNodes: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    const example = new KmsKey(this, "example", {
      description: "Example Key for MSK Cluster Scram Secret Association",
    });
    const awsMskClusterExample = new MskCluster(this, "example_1", {
      clientAuthentication: {
        sasl: {
          scram: true,
        },
      },
      clusterName: "example",
      brokerNodeGroupInfo: config.brokerNodeGroupInfo,
      kafkaVersion: config.kafkaVersion,
      numberOfBrokerNodes: config.numberOfBrokerNodes,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsMskClusterExample.overrideLogicalId("example");
    const awsSecretsmanagerSecretExample = new SecretsmanagerSecret(
      this,
      "example_2",
      {
        kmsKeyId: example.keyId,
        name: "AmazonMSK_example",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSecretsmanagerSecretExample.overrideLogicalId("example");
    const awsSecretsmanagerSecretVersionExample =
      new SecretsmanagerSecretVersion(this, "example_3", {
        secretId: Token.asString(awsSecretsmanagerSecretExample.id),
        secretString: Token.asString(
          Fn.jsonencode({
            password: "pass",
            username: "user",
          })
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSecretsmanagerSecretVersionExample.overrideLogicalId("example");
    const dataAwsIamPolicyDocumentExample = new DataAwsIamPolicyDocument(
      this,
      "example_4",
      {
        statement: [
          {
            actions: ["secretsmanager:getSecretValue"],
            effect: "Allow",
            principals: [
              {
                identifiers: ["kafka.amazonaws.com"],
                type: "Service",
              },
            ],
            resources: [Token.asString(awsSecretsmanagerSecretExample.arn)],
            sid: "AWSKafkaResourcePolicy",
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsIamPolicyDocumentExample.overrideLogicalId("example");
    const awsMskScramSecretAssociationExample = new MskScramSecretAssociation(
      this,
      "example_5",
      {
        clusterArn: Token.asString(awsMskClusterExample.arn),
        dependsOn: [awsSecretsmanagerSecretVersionExample],
        secretArnList: [Token.asString(awsSecretsmanagerSecretExample.arn)],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsMskScramSecretAssociationExample.overrideLogicalId("example");
    const awsSecretsmanagerSecretPolicyExample = new SecretsmanagerSecretPolicy(
      this,
      "example_6",
      {
        policy: Token.asString(dataAwsIamPolicyDocumentExample.json),
        secretArn: Token.asString(awsSecretsmanagerSecretExample.arn),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSecretsmanagerSecretPolicyExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `clusterArn` - (Required, Forces new resource) Amazon Resource Name (ARN) of the MSK cluster.
* `secretArnList` - (Required) List of AWS Secrets Manager secret ARNs.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Amazon Resource Name (ARN) of the MSK cluster.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import MSK SCRAM Secret Associations using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { MskScramSecretAssociation } from "./.gen/providers/aws/msk-scram-secret-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    MskScramSecretAssociation.generateConfigForImport(
      this,
      "example",
      "arn:aws:kafka:us-west-2:123456789012:cluster/example/279c0212-d057-4dba-9aa9-1c4e5a25bfc7-3"
    );
  }
}

```

Using `terraform import`, import MSK SCRAM Secret Associations using the `id`. For example:

```console
% terraform import aws_msk_scram_secret_association.example arn:aws:kafka:us-west-2:123456789012:cluster/example/279c0212-d057-4dba-9aa9-1c4e5a25bfc7-3
```

<!-- cache-key: cdktf-0.20.8 input-7cada2fdd943e43d676c04c972d59565150f424bb7230fb974abfdfaf6b7fbc8 -->