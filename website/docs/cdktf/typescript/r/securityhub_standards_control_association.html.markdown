---
subcategory: "Security Hub"
layout: "aws"
page_title: "AWS: aws_securityhub_standards_control_association"
description: |-
  Terraform resource for managing an AWS Security Hub Standards Control Association.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_securityhub_standards_control_association

Terraform resource for managing an AWS Security Hub Standards Control Association.

Disable/enable Security Hub security control in the standard.

The `aws_securityhub_standards_control_association`, similarly to `aws_securityhub_standards_control`,
behaves differently from normal resources, in that Terraform does not _create_ this resource, but instead "adopts" it
into management. When you _delete_ this resource configuration, Terraform "abandons" resource as is and just removes it from the state.

## Example Usage

### Basic usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SecurityhubAccount } from "./.gen/providers/aws/securityhub-account";
import { SecurityhubStandardsControlAssociation } from "./.gen/providers/aws/securityhub-standards-control-association";
import { SecurityhubStandardsSubscription } from "./.gen/providers/aws/securityhub-standards-subscription";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new SecurityhubAccount(this, "example", {});
    const cisAwsFoundationsBenchmark = new SecurityhubStandardsSubscription(
      this,
      "cis_aws_foundations_benchmark",
      {
        dependsOn: [example],
        standardsArn:
          "arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0",
      }
    );
    new SecurityhubStandardsControlAssociation(
      this,
      "cis_aws_foundations_benchmark_disable_iam_1",
      {
        associationStatus: "DISABLED",
        securityControlId: "IAM.1",
        standardsArn: cisAwsFoundationsBenchmark.standardsArn,
        updatedReason: "Not needed",
      }
    );
  }
}

```

## Disabling security control in all standards

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformIterator, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsSecurityhubStandardsControlAssociations } from "./.gen/providers/aws/data-aws-securityhub-standards-control-associations";
import { SecurityhubAccount } from "./.gen/providers/aws/securityhub-account";
import { SecurityhubStandardsControlAssociation } from "./.gen/providers/aws/securityhub-standards-control-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new SecurityhubAccount(this, "example", {});
    const iam1 = new DataAwsSecurityhubStandardsControlAssociations(
      this,
      "iam_1",
      {
        dependsOn: [example],
        securityControlId: "IAM.1",
      }
    );
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const iam1ForEachIterator = TerraformIterator.fromList(
      Token.asAny(
        Fn.toset(
          Fn.lookupNested(iam1.standardsControlAssociations, [
            "*",
            "standards_arn",
          ])
        )
      )
    );
    const awsSecurityhubStandardsControlAssociationIam1 =
      new SecurityhubStandardsControlAssociation(this, "iam_1_2", {
        associationStatus: "DISABLED",
        securityControlId: Token.asString(iam1.securityControlId),
        standardsArn: Token.asString(iam1ForEachIterator.key),
        updatedReason: "Not needed",
        forEach: iam1ForEachIterator,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSecurityhubStandardsControlAssociationIam1.overrideLogicalId("iam_1");
  }
}

```

## Argument Reference

The following arguments are required:

* `associationStatus` - (Required) The desired enablement status of the control in the standard. Valid values: `ENABLED`, `DISABLED`.
* `securityControlId` - (Required) The unique identifier for the security control whose enablement status you want to update.
* `standardsArn` - (Required) The Amazon Resource Name (ARN) of the standard in which you want to update the control's enablement status.

The following arguments are optional:

* `updatedReason` - (Optional) The reason for updating the control's enablement status in the standard. Required when `associationStatus` is `DISABLED`.

## Attribute Reference

This resource exports no additional attributes.

<!-- cache-key: cdktf-0.20.8 input-36d0ae6f04d142748524c969c4ff5e6aa2ba4705300bb023aff57327dc810254 -->