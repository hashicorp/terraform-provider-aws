---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_vpc_peering_connection_options"
description: |-
  Provides a resource to manage VPC peering connection options.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_vpc_peering_connection_options

Provides a resource to manage VPC peering connection options.

~> **NOTE on VPC Peering Connections and VPC Peering Connection Options:** Terraform provides
both a standalone VPC Peering Connection Options and a [VPC Peering Connection](vpc_peering_connection.html)
resource with `accepter` and `requester` attributes. Do not manage options for the same VPC peering
connection in both a VPC Peering Connection resource and a VPC Peering Connection Options resource.
Doing so will cause a conflict of options and will overwrite the options.
Using a VPC Peering Connection Options resource decouples management of the connection options from
management of the VPC Peering Connection and allows options to be set correctly in cross-region and
cross-account scenarios.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Vpc } from "./.gen/providers/aws/vpc";
import { VpcPeeringConnection } from "./.gen/providers/aws/vpc-peering-connection";
import { VpcPeeringConnectionOptions } from "./.gen/providers/aws/vpc-peering-connection-options";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const bar = new Vpc(this, "bar", {
      cidrBlock: "10.1.0.0/16",
    });
    const foo = new Vpc(this, "foo", {
      cidrBlock: "10.0.0.0/16",
    });
    const awsVpcPeeringConnectionFoo = new VpcPeeringConnection(this, "foo_2", {
      autoAccept: true,
      peerVpcId: bar.id,
      vpcId: foo.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcPeeringConnectionFoo.overrideLogicalId("foo");
    const awsVpcPeeringConnectionOptionsFoo = new VpcPeeringConnectionOptions(
      this,
      "foo_3",
      {
        accepter: {
          allowRemoteVpcDnsResolution: true,
        },
        vpcPeeringConnectionId: Token.asString(awsVpcPeeringConnectionFoo.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcPeeringConnectionOptionsFoo.overrideLogicalId("foo");
  }
}

```

### Cross-Account Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { AwsProvider } from "./.gen/providers/aws/provider";
import { Vpc } from "./.gen/providers/aws/vpc";
import { VpcPeeringConnection } from "./.gen/providers/aws/vpc-peering-connection";
import { VpcPeeringConnectionAccepterA } from "./.gen/providers/aws/vpc-peering-connection-accepter";
import { VpcPeeringConnectionOptions } from "./.gen/providers/aws/vpc-peering-connection-options";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const requester = new AwsProvider(this, "aws", {
      alias: "requester",
    });
    const accepter = new AwsProvider(this, "aws_1", {
      alias: "accepter",
    });
    const main = new Vpc(this, "main", {
      cidrBlock: "10.0.0.0/16",
      enableDnsHostnames: true,
      enableDnsSupport: true,
      provider: requester,
    });
    const peer = new Vpc(this, "peer", {
      cidrBlock: "10.1.0.0/16",
      enableDnsHostnames: true,
      enableDnsSupport: true,
      provider: accepter,
    });
    const dataAwsCallerIdentityPeer = new DataAwsCallerIdentity(
      this,
      "peer_4",
      {
        provider: accepter,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsCallerIdentityPeer.overrideLogicalId("peer");
    const awsVpcPeeringConnectionPeer = new VpcPeeringConnection(
      this,
      "peer_5",
      {
        autoAccept: false,
        peerOwnerId: Token.asString(dataAwsCallerIdentityPeer.accountId),
        peerVpcId: peer.id,
        provider: requester,
        tags: {
          Side: "Requester",
        },
        vpcId: main.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcPeeringConnectionPeer.overrideLogicalId("peer");
    const awsVpcPeeringConnectionAccepterPeer =
      new VpcPeeringConnectionAccepterA(this, "peer_6", {
        autoAccept: true,
        provider: accepter,
        tags: {
          Side: "Accepter",
        },
        vpcPeeringConnectionId: Token.asString(awsVpcPeeringConnectionPeer.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcPeeringConnectionAccepterPeer.overrideLogicalId("peer");
    new VpcPeeringConnectionOptions(this, "accepter", {
      accepter: {
        allowRemoteVpcDnsResolution: true,
      },
      provider: accepter,
      vpcPeeringConnectionId: Token.asString(
        awsVpcPeeringConnectionAccepterPeer.id
      ),
    });
    new VpcPeeringConnectionOptions(this, "requester", {
      provider: requester,
      requester: {
        allowRemoteVpcDnsResolution: true,
      },
      vpcPeeringConnectionId: Token.asString(
        awsVpcPeeringConnectionAccepterPeer.id
      ),
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `vpcPeeringConnectionId` - (Required) The ID of the requester VPC peering connection.
* `accepter` (Optional) - An optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that accepts the peering connection (a maximum of one).
* `requester` (Optional) - A optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requests the peering connection (a maximum of one).

#### Accepter and Requester Arguments

-> **Note:** When enabled, the DNS resolution feature requires that VPCs participating in the peering must have support for the DNS hostnames enabled. This can be done using the [`enableDnsHostnames`](vpc.html#enable_dns_hostnames) attribute in the [`aws_vpc`](vpc.html) resource. See [Using DNS with Your VPC](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-dns.html) user guide for more information.

* `allowRemoteVpcDnsResolution` - (Optional) Allow a local VPC to resolve public DNS hostnames to private IP addresses when queried from instances in the peer VPC.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the VPC Peering Connection Options.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import VPC Peering Connection Options using the VPC peering `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VpcPeeringConnectionOptions } from "./.gen/providers/aws/vpc-peering-connection-options";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    VpcPeeringConnectionOptions.generateConfigForImport(
      this,
      "foo",
      "pcx-111aaa111"
    );
  }
}

```

Using `terraform import`, import VPC Peering Connection Options using the VPC peering `id`. For example:

```console
% terraform import aws_vpc_peering_connection_options.foo pcx-111aaa111
```

<!-- cache-key: cdktf-0.20.8 input-6ec91844b8fe040be8bdaa6fedfe78ce6d155f95d1258d7182e6ce5f3573c4a7 -->