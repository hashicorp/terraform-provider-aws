---
subcategory: "DSQL"
layout: "aws"
page_title: "AWS: aws_dsql_cluster_peering"
description: |-
  Terraform resource for managing an Amazon Aurora DSQL Cluster Peering.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_dsql_cluster_peering

Terraform resource for managing an Amazon Aurora DSQL Cluster Peering.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DsqlCluster } from "./.gen/providers/aws/dsql-cluster";
import { DsqlClusterPeering } from "./.gen/providers/aws/dsql-cluster-peering";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example1 = new DsqlCluster(this, "example_1", {
      multiRegionProperties: [
        {
          witnessRegion: "us-west-2",
        },
      ],
    });
    const example2 = new DsqlCluster(this, "example_2", {
      multiRegionProperties: [
        {
          witnessRegion: "us-west-2",
        },
      ],
      provider: alternate,
    });
    const awsDsqlClusterPeeringExample1 = new DsqlClusterPeering(
      this,
      "example_1_2",
      {
        clusters: [example2.arn],
        identifier: example1.identifier,
        witnessRegion: Token.asString(
          Fn.lookupNested(example1.multiRegionProperties, [
            "0",
            "witness_region",
          ])
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDsqlClusterPeeringExample1.overrideLogicalId("example_1");
    const awsDsqlClusterPeeringExample2 = new DsqlClusterPeering(
      this,
      "example_2_3",
      {
        clusters: [example1.arn],
        identifier: example2.identifier,
        provider: alternate,
        witnessRegion: Token.asString(
          Fn.lookupNested(example2.multiRegionProperties, [
            "0",
            "witness_region",
          ])
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDsqlClusterPeeringExample2.overrideLogicalId("example_2");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `clusters` - (Required) List of DSQL Cluster ARNs to be peered to this cluster.
* `identifier` - (Required) DSQL Cluster Identifier.
* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `witnessRegion` - (Required) Witness region for a multi-region cluster.

## Attribute Reference

This resource exports no additional attributes.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import DSQL Cluster Peering using the `identifier`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DsqlClusterPeering } from "./.gen/providers/aws/dsql-cluster-peering";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DsqlClusterPeering.generateConfigForImport(
      this,
      "example",
      "cluster-id-12345678"
    );
  }
}

```

Using `terraform import`, import DSQL Cluster Peering using the `identifier`. For example:

```console
% terraform import aws_dsql_cluster_peering.example cluster-id-12345678
```

<!-- cache-key: cdktf-0.20.8 input-3319f9af2405f6852dd5b2730731d5393e41662d98d22aca8a9267fb6f69ad1c -->