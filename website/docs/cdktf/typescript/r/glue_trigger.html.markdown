---
subcategory: "Glue"
layout: "aws"
page_title: "AWS: aws_glue_trigger"
description: |-
  Manages a Glue Trigger resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_glue_trigger

Manages a Glue Trigger resource.

## Example Usage

### Conditional Trigger

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueTrigger } from "./.gen/providers/aws/glue-trigger";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new GlueTrigger(this, "example", {
      actions: [
        {
          jobName: example1.name,
        },
      ],
      name: "example",
      predicate: {
        conditions: [
          {
            jobName: example2.name,
            state: "SUCCEEDED",
          },
        ],
      },
      type: "CONDITIONAL",
    });
  }
}

```

### On-Demand Trigger

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueTrigger } from "./.gen/providers/aws/glue-trigger";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new GlueTrigger(this, "example", {
      actions: [
        {
          jobName: Token.asString(awsGlueJobExample.name),
        },
      ],
      name: "example",
      type: "ON_DEMAND",
    });
  }
}

```

### Scheduled Trigger

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueTrigger } from "./.gen/providers/aws/glue-trigger";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new GlueTrigger(this, "example", {
      actions: [
        {
          jobName: Token.asString(awsGlueJobExample.name),
        },
      ],
      name: "example",
      schedule: "cron(15 12 * * ? *)",
      type: "SCHEDULED",
    });
  }
}

```

### Conditional Trigger with Crawler Action

**Note:** Triggers can have both a crawler action and a crawler condition, just no example provided.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueTrigger } from "./.gen/providers/aws/glue-trigger";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new GlueTrigger(this, "example", {
      actions: [
        {
          crawlerName: example1.name,
        },
      ],
      name: "example",
      predicate: {
        conditions: [
          {
            jobName: example2.name,
            state: "SUCCEEDED",
          },
        ],
      },
      type: "CONDITIONAL",
    });
  }
}

```

### Conditional Trigger with Crawler Condition

**Note:** Triggers can have both a crawler action and a crawler condition, just no example provided.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueTrigger } from "./.gen/providers/aws/glue-trigger";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new GlueTrigger(this, "example", {
      actions: [
        {
          jobName: example1.name,
        },
      ],
      name: "example",
      predicate: {
        conditions: [
          {
            crawlState: "SUCCEEDED",
            crawlerName: example2.name,
          },
        ],
      },
      type: "CONDITIONAL",
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `actions` – (Required) List of actions initiated by this trigger when it fires. See [Actions](#actions) Below.
* `description` – (Optional) A description of the new trigger.
* `enabled` – (Optional) Start the trigger. Defaults to `true`.
* `name` – (Required) The name of the trigger.
* `predicate` – (Optional) A predicate to specify when the new trigger should fire. Required when trigger type is `CONDITIONAL`. See [Predicate](#predicate) Below.
* `schedule` – (Optional) A cron expression used to specify the schedule. [Time-Based Schedules for Jobs and Crawlers](https://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html)
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `startOnCreation` – (Optional) Set to true to start `SCHEDULED` and `CONDITIONAL` triggers when created. True is not supported for `ON_DEMAND` triggers.
* `type` – (Required) The type of trigger. Valid values are `CONDITIONAL`, `EVENT`, `ON_DEMAND`, and `SCHEDULED`.
* `workflowName` - (Optional) A workflow to which the trigger should be associated to. Every workflow graph (DAG) needs a starting trigger (`ON_DEMAND` or `SCHEDULED` type) and can contain multiple additional `CONDITIONAL` triggers.
* `eventBatchingCondition` - (Optional) Batch condition that must be met (specified number of events received or batch time window expired) before EventBridge event trigger fires. See [Event Batching Condition](#event-batching-condition).

### Actions

* `arguments` - (Optional) Arguments to be passed to the job. You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.
* `crawlerName` - (Optional) The name of the crawler to be executed. Conflicts with `jobName`.
* `jobName` - (Optional) The name of a job to be executed. Conflicts with `crawlerName`.
* `timeout` - (Optional) The job run timeout in minutes. It overrides the timeout value of the job.
* `securityConfiguration` - (Optional) The name of the Security Configuration structure to be used with this action.
* `notificationProperty` - (Optional) Specifies configuration properties of a job run notification. See [Notification Property](#notification-property) details below.

#### Notification Property

* `notifyDelayAfter` - (Optional) After a job run starts, the number of minutes to wait before sending a job run delay notification.

### Predicate

* `conditions` - (Required) A list of the conditions that determine when the trigger will fire. See [Conditions](#conditions).
* `logical` - (Optional) How to handle multiple conditions. Defaults to `AND`. Valid values are `AND` or `ANY`.

#### Conditions

* `jobName` - (Optional) The name of the job to watch. If this is specified, `state` must also be specified. Conflicts with `crawlerName`.
* `state` - (Optional) The condition job state. Currently, the values supported are `SUCCEEDED`, `STOPPED`, `TIMEOUT` and `FAILED`. If this is specified, `jobName` must also be specified. Conflicts with `crawler_state`.
* `crawlerName` - (Optional) The name of the crawler to watch. If this is specified, `crawlState` must also be specified. Conflicts with `jobName`.
* `crawlState` - (Optional) The condition crawl state. Currently, the values supported are `RUNNING`, `SUCCEEDED`, `CANCELLED`, and `FAILED`. If this is specified, `crawlerName` must also be specified. Conflicts with `state`.
* `logicalOperator` - (Optional) A logical operator. Defaults to `EQUALS`.

### Event Batching Condition

* `batchSize` - (Required)Number of events that must be received from Amazon EventBridge before EventBridge  event trigger fires.
* `batchWindow` - (Optional) Window of time in seconds after which EventBridge event trigger fires. Window starts when first event is received. Default value is `900`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of Glue Trigger
* `id` - Trigger name
* `state` - The current state of the trigger.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `5m`)
- `update` - (Default `5m`)
- `delete` - (Default `5m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Glue Triggers using `name`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueTrigger } from "./.gen/providers/aws/glue-trigger";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    GlueTrigger.generateConfigForImport(this, "myTrigger", "MyTrigger");
  }
}

```

Using `terraform import`, import Glue Triggers using `name`. For example:

```console
% terraform import aws_glue_trigger.MyTrigger MyTrigger
```

<!-- cache-key: cdktf-0.20.8 input-10793ae596511776b0571cce99e12fc8a20d4e7c0ef8b0c75b4c4a07e2f7e6d8 -->