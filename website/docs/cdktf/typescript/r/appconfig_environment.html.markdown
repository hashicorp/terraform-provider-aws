---
subcategory: "AppConfig"
layout: "aws"
page_title: "AWS: aws_appconfig_environment"
description: |-
  Provides an AppConfig Environment resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_appconfig_environment

Provides an AppConfig Environment resource for an [`aws_appconfig_application` resource](appconfig_application.html.markdown). One or more environments can be defined for an application.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppconfigApplication } from "./.gen/providers/aws/appconfig-application";
import { AppconfigEnvironment } from "./.gen/providers/aws/appconfig-environment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new AppconfigApplication(this, "example", {
      description: "Example AppConfig Application",
      name: "example-application-tf",
      tags: {
        Type: "AppConfig Application",
      },
    });
    const awsAppconfigEnvironmentExample = new AppconfigEnvironment(
      this,
      "example_1",
      {
        applicationId: example.id,
        description: "Example AppConfig Environment",
        monitor: [
          {
            alarmArn: Token.asString(awsCloudwatchMetricAlarmExample.arn),
            alarmRoleArn: Token.asString(awsIamRoleExample.arn),
          },
        ],
        name: "example-environment-tf",
        tags: {
          Type: "AppConfig Environment",
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAppconfigEnvironmentExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `applicationId` - (Required, Forces new resource) AppConfig application ID. Must be between 4 and 7 characters in length.
* `name` - (Required) Name for the environment. Must be between 1 and 64 characters in length.
* `description` - (Optional) Description of the environment. Can be at most 1024 characters.
* `monitor` - (Optional) Set of Amazon CloudWatch alarms to monitor during the deployment process. Maximum of 5. See [Monitor](#monitor) below for more details.
* `tags` - (Optional) Map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### Monitor

The `monitor` block supports the following:

* `alarmArn` - (Required) ARN of the Amazon CloudWatch alarm.
* `alarmRoleArn` - (Optional) ARN of an IAM role for AWS AppConfig to monitor `alarmArn`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the AppConfig Environment.
* `id` - (**Deprecated**) AppConfig environment ID and application ID separated by a colon (`:`).
* `environmentId` - AppConfig environment ID.
* `state` - State of the environment. Possible values are `READY_FOR_DEPLOYMENT`, `DEPLOYING`, `ROLLING_BACK`
  or `ROLLED_BACK`.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import AppConfig Environments using the environment ID and application ID separated by a colon (`:`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppconfigEnvironment } from "./.gen/providers/aws/appconfig-environment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    AppconfigEnvironment.generateConfigForImport(
      this,
      "example",
      "71abcde:11xxxxx"
    );
  }
}

```

Using `terraform import`, import AppConfig Environments using the environment ID and application ID separated by a colon (`:`). For example:

```console
% terraform import aws_appconfig_environment.example 71abcde:11xxxxx
```

<!-- cache-key: cdktf-0.20.8 input-fbf604e2e551d298f98ef374aae241f630d53aa562269a500dee31fdf26530c5 -->