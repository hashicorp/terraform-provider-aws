---
subcategory: "Transcribe"
layout: "aws"
page_title: "AWS: aws_transcribe_vocabulary"
description: |-
  Terraform resource for managing an AWS Transcribe Vocabulary.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_transcribe_vocabulary

Terraform resource for managing an AWS Transcribe Vocabulary.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3Object } from "./.gen/providers/aws/s3-object";
import { TranscribeVocabulary } from "./.gen/providers/aws/transcribe-vocabulary";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new S3Bucket(this, "example", {
      bucket: "example-vocab-123",
      forceDestroy: true,
    });
    const object = new S3Object(this, "object", {
      bucket: example.id,
      key: "transcribe/test1.txt",
      source: "test.txt",
    });
    const awsTranscribeVocabularyExample = new TranscribeVocabulary(
      this,
      "example_2",
      {
        dependsOn: [object],
        languageCode: "en-US",
        tags: {
          tag1: "value1",
          tag2: "value3",
        },
        vocabularyFileUri: "s3://${" + example.id + "}/${" + object.key + "}",
        vocabularyName: "example",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsTranscribeVocabularyExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `languageCode` - (Required) The language code you selected for your vocabulary.
* `vocabularyFileUri` - (Required) The Amazon S3 location (URI) of the text file that contains your custom vocabulary.
* `vocabularyName` - (Required) The name of the Vocabulary.

The following arguments are optional:

* `phrases` - (Optional) - A list of terms to include in the vocabulary. Conflicts with `vocabularyFileUri`
* `vocabularyFileUri` - (Optional) The Amazon S3 location (URI) of the text file that contains your custom vocabulary. Conflicts wth `phrases`.
* `tags` - (Optional) A map of tags to assign to the Vocabulary. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Name of the Vocabulary.
* `arn` - ARN of the Vocabulary.
* `downloadUri` - Generated download URI.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `update` - (Default `30m`)
* `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Transcribe Vocabulary using the `vocabularyName`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { TranscribeVocabulary } from "./.gen/providers/aws/transcribe-vocabulary";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    TranscribeVocabulary.generateConfigForImport(
      this,
      "example",
      "example-name"
    );
  }
}

```

Using `terraform import`, import Transcribe Vocabulary using the `vocabularyName`. For example:

```console
% terraform import aws_transcribe_vocabulary.example example-name
```

<!-- cache-key: cdktf-0.20.8 input-4a63881191c0f51840ddf42c0326273b5b41ebbdda248795a18439aec52f460c -->