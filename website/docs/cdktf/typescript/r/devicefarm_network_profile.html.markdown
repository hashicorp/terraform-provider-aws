---
subcategory: "Device Farm"
layout: "aws"
page_title: "AWS: aws_devicefarm_network_profile"
description: |-
  Provides a Devicefarm network profile
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_devicefarm_network_profile

Provides a resource to manage AWS Device Farm Network Profiles.
âˆ‚
~> **NOTE:** AWS currently has limited regional support for Device Farm (e.g., `us-west-2`). See [AWS Device Farm endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/devicefarm.html) for information on supported regions.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DevicefarmNetworkProfile } from "./.gen/providers/aws/devicefarm-network-profile";
import { DevicefarmProject } from "./.gen/providers/aws/devicefarm-project";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DevicefarmProject(this, "example", {
      name: "example",
    });
    const awsDevicefarmNetworkProfileExample = new DevicefarmNetworkProfile(
      this,
      "example_1",
      {
        name: "example",
        projectArn: example.arn,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDevicefarmNetworkProfileExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

* `description` - (Optional) The description of the network profile.
* `downlinkBandwidthBits` - (Optional) The data throughput rate in bits per second, as an integer from `0` to `104857600`. Default value is `104857600`.
* `downlinkDelayMs` - (Optional) Delay time for all packets to destination in milliseconds as an integer from `0` to `2000`.
* `downlinkJitterMs` - (Optional) Time variation in the delay of received packets in milliseconds as an integer from `0` to `2000`.
* `downlinkLossPercent` - (Optional) Proportion of received packets that fail to arrive from `0` to `100` percent.
* `name` - (Required) The name for the network profile.
* `uplinkBandwidthBits` - (Optional) The data throughput rate in bits per second, as an integer from `0` to `104857600`. Default value is `104857600`.
* `uplinkDelayMs` - (Optional) Delay time for all packets to destination in milliseconds as an integer from `0` to `2000`.
* `uplinkJitterMs` - (Optional) Time variation in the delay of received packets in milliseconds as an integer from `0` to `2000`.
* `uplinkLossPercent` - (Optional) Proportion of received packets that fail to arrive from `0` to `100` percent.
* `projectArn` - (Required) The ARN of the project for the network profile.
* `type` - (Optional) The type of network profile to create. Valid values are listed are `PRIVATE` and `CURATED`.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The Amazon Resource Name of this network profile.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import DeviceFarm Network Profiles using their ARN. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DevicefarmNetworkProfile } from "./.gen/providers/aws/devicefarm-network-profile";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DevicefarmNetworkProfile.generateConfigForImport(
      this,
      "example",
      "arn:aws:devicefarm:us-west-2:123456789012:networkprofile:4fa784c7-ccb4-4dbf-ba4f-02198320daa1"
    );
  }
}

```

Using `terraform import`, import DeviceFarm Network Profiles using their ARN. For example:

```console
% terraform import aws_devicefarm_network_profile.example arn:aws:devicefarm:us-west-2:123456789012:networkprofile:4fa784c7-ccb4-4dbf-ba4f-02198320daa1
```

<!-- cache-key: cdktf-0.20.8 input-82616cb48039f8368ead9b616e986d34cc6658f5bc299c003c202bc94e665131 -->