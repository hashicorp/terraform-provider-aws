---
subcategory: "Chime SDK Media Pipelines"
layout: "aws"
page_title: "AWS: aws_chimesdkmediapipelines_media_insights_pipeline_configuration"
description: |-
  Terraform resource for managing an AWS Chime SDK Media Pipelines Media Insights Pipeline Configuration.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_chimesdkmediapipelines_media_insights_pipeline_configuration

Terraform resource for managing an AWS Chime SDK Media Pipelines Media Insights Pipeline Configuration.
Consult the [Call analytics developer guide](https://docs.aws.amazon.com/chime-sdk/latest/dg/call-analytics.html) for more detailed information about usage.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ChimesdkmediapipelinesMediaInsightsPipelineConfiguration } from "./.gen/providers/aws/chimesdkmediapipelines-media-insights-pipeline-configuration";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { KinesisStream } from "./.gen/providers/aws/kinesis-stream";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new KinesisStream(this, "example", {
      name: "example",
      shardCount: 2,
    });
    const mediaPipelinesAssumeRole = new DataAwsIamPolicyDocument(
      this,
      "media_pipelines_assume_role",
      {
        statement: [
          {
            actions: ["sts:AssumeRole"],
            effect: "Allow",
            principals: [
              {
                identifiers: ["mediapipelines.chime.amazonaws.com"],
                type: "Service",
              },
            ],
          },
        ],
      }
    );
    const callAnalyticsRole = new IamRole(this, "call_analytics_role", {
      assumeRolePolicy: Token.asString(mediaPipelinesAssumeRole.json),
      name: "CallAnalyticsRole",
    });
    new ChimesdkmediapipelinesMediaInsightsPipelineConfiguration(
      this,
      "my_configuration",
      {
        elements: [
          {
            amazonTranscribeCallAnalyticsProcessorConfiguration: {
              languageCode: "en-US",
            },
            type: "AmazonTranscribeCallAnalyticsProcessor",
          },
          {
            kinesisDataStreamSinkConfiguration: {
              insightsTarget: example.arn,
            },
            type: "KinesisDataStreamSink",
          },
        ],
        name: "MyBasicConfiguration",
        resourceAccessRoleArn: callAnalyticsRole.arn,
        tags: {
          Key1: "Value1",
          Key2: "Value2",
        },
      }
    );
  }
}

```

- The required policies on `call_analytics_role` will vary based on the selected processors. See [Call analytics resource access role](https://docs.aws.amazon.com/chime-sdk/latest/dg/ca-resource-access-role.html) for directions on choosing appropriate policies.

### Transcribe Call Analytics processor usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ChimesdkmediapipelinesMediaInsightsPipelineConfiguration } from "./.gen/providers/aws/chimesdkmediapipelines-media-insights-pipeline-configuration";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const transcribeAssumeRole = new DataAwsIamPolicyDocument(
      this,
      "transcribe_assume_role",
      {
        statement: [
          {
            actions: ["sts:AssumeRole"],
            effect: "Allow",
            principals: [
              {
                identifiers: ["transcribe.amazonaws.com"],
                type: "Service",
              },
            ],
          },
        ],
      }
    );
    const postCallRole = new IamRole(this, "post_call_role", {
      assumeRolePolicy: Token.asString(transcribeAssumeRole.json),
      name: "PostCallAccessRole",
    });
    new ChimesdkmediapipelinesMediaInsightsPipelineConfiguration(
      this,
      "my_configuration",
      {
        elements: [
          {
            amazonTranscribeCallAnalyticsProcessorConfiguration: {
              callAnalyticsStreamCategories: ["category_1", "category_2"],
              contentRedactionType: "PII",
              enablePartialResultsStabilization: true,
              filterPartialResults: true,
              languageCode: "en-US",
              languageModelName: "MyLanguageModel",
              partialResultsStability: "high",
              piiEntityTypes: "ADDRESS,BANK_ACCOUNT_NUMBER",
              postCallAnalyticsSettings: {
                contentRedactionOutput: "redacted",
                dataAccessRoleArn: postCallRole.arn,
                outputEncryptionKmsKeyId: "MyKmsKeyId",
                outputLocation: "s3://MyBucket",
              },
              vocabularyFilterMethod: "mask",
              vocabularyFilterName: "MyVocabularyFilter",
              vocabularyName: "MyVocabulary",
            },
            type: "AmazonTranscribeCallAnalyticsProcessor",
          },
          {
            kinesisDataStreamSinkConfiguration: {
              insightsTarget: example.arn,
            },
            type: "KinesisDataStreamSink",
          },
        ],
        name: "MyCallAnalyticsConfiguration",
        resourceAccessRoleArn: Token.asString(awsIamRoleExample.arn),
      }
    );
  }
}

```

### Real time alerts usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ChimesdkmediapipelinesMediaInsightsPipelineConfiguration } from "./.gen/providers/aws/chimesdkmediapipelines-media-insights-pipeline-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ChimesdkmediapipelinesMediaInsightsPipelineConfiguration(
      this,
      "my_configuration",
      {
        elements: [
          {
            amazonTranscribeCallAnalyticsProcessorConfiguration: {
              languageCode: "en-US",
            },
            type: "AmazonTranscribeCallAnalyticsProcessor",
          },
          {
            kinesisDataStreamSinkConfiguration: {
              insightsTarget: example.arn,
            },
            type: "KinesisDataStreamSink",
          },
        ],
        name: "MyRealTimeAlertConfiguration",
        realTimeAlertConfiguration: {
          disabled: false,
          rules: [
            {
              issueDetectionConfiguration: {
                ruleName: "MyIssueDetectionRule",
              },
              type: "IssueDetection",
            },
            {
              keywordMatchConfiguration: {
                keywords: ["keyword1", "keyword2"],
                negate: false,
                ruleName: "MyKeywordMatchRule",
              },
              type: "KeywordMatch",
            },
            {
              sentimentConfiguration: {
                ruleName: "MySentimentRule",
                sentimentType: "NEGATIVE",
                timePeriod: 60,
              },
              type: "Sentiment",
            },
          ],
        },
        resourceAccessRoleArn: callAnalyticsRole.arn,
      }
    );
  }
}

```

### Transcribe processor usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ChimesdkmediapipelinesMediaInsightsPipelineConfiguration } from "./.gen/providers/aws/chimesdkmediapipelines-media-insights-pipeline-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ChimesdkmediapipelinesMediaInsightsPipelineConfiguration(
      this,
      "my_configuration",
      {
        elements: [
          {
            amazonTranscribeProcessorConfiguration: {
              contentIdentificationType: "PII",
              enablePartialResultsStabilization: true,
              filterPartialResults: true,
              languageCode: "en-US",
              languageModelName: "MyLanguageModel",
              partialResultsStability: "high",
              piiEntityTypes: "ADDRESS,BANK_ACCOUNT_NUMBER",
              showSpeakerLabel: true,
              vocabularyFilterMethod: "mask",
              vocabularyFilterName: "MyVocabularyFilter",
              vocabularyName: "MyVocabulary",
            },
            type: "AmazonTranscribeProcessor",
          },
          {
            kinesisDataStreamSinkConfiguration: {
              insightsTarget: example.arn,
            },
            type: "KinesisDataStreamSink",
          },
        ],
        name: "MyTranscribeConfiguration",
        resourceAccessRoleArn: Token.asString(awsIamRoleExample.arn),
      }
    );
  }
}

```

### Voice analytics processor usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ChimesdkmediapipelinesMediaInsightsPipelineConfiguration } from "./.gen/providers/aws/chimesdkmediapipelines-media-insights-pipeline-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ChimesdkmediapipelinesMediaInsightsPipelineConfiguration(
      this,
      "my_configuration",
      {
        elements: [
          {
            type: "VoiceAnalyticsProcessor",
            voiceAnalyticsProcessorConfiguration: {
              speakerSearchStatus: "Enabled",
              voiceToneAnalysisStatus: "Enabled",
            },
          },
          {
            lambdaFunctionSinkConfiguration: {
              insightsTarget:
                "arn:aws:lambda:us-west-2:1111111111:function:MyFunction",
            },
            type: "LambdaFunctionSink",
          },
          {
            snsTopicSinkConfiguration: {
              insightsTarget: "arn:aws:sns:us-west-2:1111111111:topic/MyTopic",
            },
            type: "SnsTopicSink",
          },
          {
            sqsQueueSinkConfiguration: {
              insightsTarget: "arn:aws:sqs:us-west-2:1111111111:queue/MyQueue",
            },
            type: "SqsQueueSink",
          },
          {
            kinesisDataStreamSinkConfiguration: {
              insightsTarget: test.arn,
            },
            type: "KinesisDataStreamSink",
          },
        ],
        name: "MyVoiceAnalyticsConfiguration",
        resourceAccessRoleArn: example.arn,
      }
    );
  }
}

```

### S3 Recording sink usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ChimesdkmediapipelinesMediaInsightsPipelineConfiguration } from "./.gen/providers/aws/chimesdkmediapipelines-media-insights-pipeline-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ChimesdkmediapipelinesMediaInsightsPipelineConfiguration(
      this,
      "my_configuration",
      {
        elements: [
          {
            s3RecordingSinkConfiguration: {
              destination: "arn:aws:s3:::MyBucket",
            },
            type: "S3RecordingSink",
          },
        ],
        name: "MyS3RecordingConfiguration",
        resourceAccessRoleArn: example.arn,
      }
    );
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) Configuration name.
* `resourceAccessRoleArn` - (Required) ARN of IAM Role used by service to invoke processors and sinks specified by configuration elements.
* `elements` - (Required) Collection of processors and sinks to transform media and deliver data.
* `realTimeAlertConfiguration` - (Optional) Configuration for real-time alert rules to send EventBridge notifications when certain conditions are met.
* `tags` - (Optional) Key-value map of tags for the resource.

### Elements

* `type` - (Required) Element type.
* `amazonTranscribeCallAnalyticsProcessorConfiguration` - (Optional) Configuration for Amazon Transcribe Call Analytics processor.
    * `callAnalyticsStreamCategories` - (Optional) Filter for category events to be delivered to insights target.
    * `contentIdentificationType` - (Optional) Labels all personally identifiable information (PII) identified in Utterance events.
    * `contentRedactionType` - (Optional) Redacts all personally identifiable information (PII) identified in Utterance events.
    * `enablePartialResultsStabilization` - (Optional) Enables partial result stabilization in Utterance events.
    * `filterPartialResults` - (Optional) Filters partial Utterance events from delivery to the insights target.
    * `languageCode` - (Required) Language code for the transcription model.
    * `languageModelName` - (Optional) Name of custom language model for transcription.
    * `partialResultsStability` - (Optional) Level of stability to use when partial results stabilization is enabled.
    * `piiEntityTypes` - (Optional) Types of personally identifiable information (PII) to redact from an Utterance event.
    * `postCallAnalyticsSettings` - (Optional) Settings for post call analytics.
        * `contentRedactionOutput` - (Optional) Should output be redacted.
        * `dataAccessRoleArn` - (Required) ARN of the role used by AWS Transcribe to upload your post call analysis.
        * `outputEncryptionKmsKeyId` - (Optional) ID of the KMS key used to encrypt the output.
        * `outputLocation` - (Required) The Amazon S3 location where you want your Call Analytics post-call transcription output stored.
    * `vocabularyFilterMethod` - (Optional) Method for applying a vocabulary filter to Utterance events.
    * `vocabularyFilterName` - (Optional) Name of the custom vocabulary filter to use when processing Utterance events.
    * `vocabularyName` - (Optional) Name of the custom vocabulary to use when processing Utterance events.
* `amazonTranscribeProcessorConfiguration` - (Optional) Configuration for Amazon Transcribe processor.
    * `contentIdentificationType` - (Optional) Labels all personally identifiable information (PII) identified in Transcript events.
    * `contentRedactionType` - (Optional) Redacts all personally identifiable information (PII) identified in Transcript events.
    * `enablePartialResultsStabilization` - (Optional) Enables partial result stabilization in Transcript events.
    * `filterPartialResults` - (Optional) Filters partial Utterance events from delivery to the insights target.
    * `languageCode` - (Required) Language code for the transcription model.
    * `languageModelName` - (Optional) Name of custom language model for transcription.
    * `partialResultsStability` - (Optional) Level of stability to use when partial results stabilization is enabled.
    * `piiEntityTypes` - (Optional) Types of personally identifiable information (PII) to redact from a Transcript event.
    * `showSpeakerLabel` - (Optional) Enables speaker partitioning (diarization) in your Transcript events.
    * `vocabularyFilterMethod` - (Optional) Method for applying a vocabulary filter to Transcript events.
    * `vocabularyFilterName` - (Optional) Name of the custom vocabulary filter to use when processing Transcript events.
    * `vocabularyName` - (Optional) Name of the custom vocabulary to use when processing Transcript events.
* `kinesisDataStreamSinkConfiguration` - (Optional) Configuration for Kinesis Data Stream sink.
    * `insightsTarget` - (Required) Kinesis Data Stream to deliver results.
* `lambdaFunctionSinkConfiguration` - (Optional) Configuration for Lambda Function sink.
    * `insightsTarget` - (Required) Lambda Function to deliver results.
* `snsTopicSinkConfiguration` - (Optional) Configuration for SNS Topic sink.
    * `insightsTarget` - (Required) SNS topic to deliver results.
* `sqsQueueSinkConfiguration` - (Optional) Configuration for SQS Queue sink.
    * `insightsTarget` - (Required) SQS queue to deliver results.
* `s3RecordingSinkConfiguration` - (Optional) Configuration for S3 recording sink.
    * `destination` - (Required) S3 URI to deliver recordings.
* `voiceAnalyticsProcessorConfiguration` - (Optional) Configuration for Voice analytics processor.
    * `speakerSearchStatus` - (Required) Enable speaker search.
    * `voiceToneAnalysisStatus` - (Required) Enable voice tone analysis.

### Real time alert configuration

* `rules` - (Required) Collection of real time alert rules
    * `type` - (Required) Rule type.
    * `issueDetectionConfiguration` - (Optional) Configuration for an issue detection rule.
        * `ruleName` - (Required) Rule name.
    * `keywordMatchConfiguration` - (Optional) Configuration for a keyword match rule.
        * `ruleName` - (Required) Rule name.
        * `keywords` - (Required) Collection of keywords to match.
        * `negate` - (Optional) Negate the rule.
    * `sentimentConfiguration` - (Optional) Configuration for a sentiment rule.
        * `ruleName` - (Required) Rule name.
        * `sentimentType` - (Required) Sentiment type to match.
        * `timePeriod` - (Optional) Analysis interval.
* `disabled` - (Optional) Disables real time alert rules.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the Media Insights Pipeline Configuration.
* `id` - Unique ID of the Media Insights Pipeline Configuration.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `3m`)
* `update` - (Default `3m`)
* `delete` - (Default `30s`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Chime SDK Media Pipelines Media Insights Pipeline Configuration using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ChimesdkmediapipelinesMediaInsightsPipelineConfiguration } from "./.gen/providers/aws/chimesdkmediapipelines-media-insights-pipeline-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ChimesdkmediapipelinesMediaInsightsPipelineConfiguration.generateConfigForImport(
      this,
      "example",
      "abcdef123456"
    );
  }
}

```

Using `terraform import`, import Chime SDK Media Pipelines Media Insights Pipeline Configuration using the `id`. For example:

```console
% terraform import aws_chimesdkmediapipelines_media_insights_pipeline_configuration.example abcdef123456
```

<!-- cache-key: cdktf-0.20.8 input-e27c8cae132bb59224264ffd318670201dbde0c3fb71b0400db863d44cf5ecde -->