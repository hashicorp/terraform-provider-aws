---
subcategory: "Pinpoint"
layout: "aws"
page_title: "AWS: aws_pinpoint_event_stream"
description: |-
  Provides a Pinpoint Event Stream resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_pinpoint_event_stream

Provides a Pinpoint Event Stream resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicy } from "./.gen/providers/aws/iam-role-policy";
import { KinesisStream } from "./.gen/providers/aws/kinesis-stream";
import { PinpointApp } from "./.gen/providers/aws/pinpoint-app";
import { PinpointEventStream } from "./.gen/providers/aws/pinpoint-event-stream";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const testStream = new KinesisStream(this, "test_stream", {
      name: "pinpoint-kinesis-test",
      shardCount: 1,
    });
    const app = new PinpointApp(this, "app", {});
    const assumeRole = new DataAwsIamPolicyDocument(this, "assume_role", {
      statement: [
        {
          actions: ["sts:AssumeRole"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["pinpoint.us-east-1.amazonaws.com"],
              type: "Service",
            },
          ],
        },
      ],
    });
    const testRolePolicy = new DataAwsIamPolicyDocument(
      this,
      "test_role_policy",
      {
        statement: [
          {
            actions: ["kinesis:PutRecords", "kinesis:DescribeStream"],
            effect: "Allow",
            resources: ["arn:aws:kinesis:us-east-1:*:*/*"],
          },
        ],
      }
    );
    const testRole = new IamRole(this, "test_role", {
      assumeRolePolicy: Token.asString(assumeRole.json),
    });
    const awsIamRolePolicyTestRolePolicy = new IamRolePolicy(
      this,
      "test_role_policy_5",
      {
        name: "test_policy",
        policy: Token.asString(testRolePolicy.json),
        role: testRole.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyTestRolePolicy.overrideLogicalId("test_role_policy");
    new PinpointEventStream(this, "stream", {
      applicationId: app.applicationId,
      destinationStreamArn: testStream.arn,
      roleArn: testRole.arn,
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `applicationId` - (Required) The application ID.
* `destinationStreamArn` - (Required) The Amazon Resource Name (ARN) of the Amazon Kinesis stream or Firehose delivery stream to which you want to publish events.
* `roleArn` - (Required) The IAM role that authorizes Amazon Pinpoint to publish events to the stream in your account.

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Pinpoint Event Stream using the `application-id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { PinpointEventStream } from "./.gen/providers/aws/pinpoint-event-stream";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    PinpointEventStream.generateConfigForImport(
      this,
      "stream",
      "application-id"
    );
  }
}

```

Using `terraform import`, import Pinpoint Event Stream using the `application-id`. For example:

```console
% terraform import aws_pinpoint_event_stream.stream application-id
```

<!-- cache-key: cdktf-0.20.8 input-781c351d9404f1abba2f962888a231281d00739d19baa3253947f07c74cba124 -->