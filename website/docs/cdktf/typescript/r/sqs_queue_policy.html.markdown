---
subcategory: "SQS (Simple Queue)"
layout: "aws"
page_title: "AWS: aws_sqs_queue_policy"
description: |-
  Provides a SQS Queue Policy resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_sqs_queue_policy

Allows you to set a policy of an SQS Queue while referencing the ARN of the queue within the policy.

!> AWS will hang indefinitely when creating or updating an [`aws_sqs_queue`](/docs/providers/aws/r/sqs_queue.html) with an associated policy if `Version = "2012-10-17"` is not explicitly set in the policy. [See below](#timeout-problems-creatingupdating) for an example of how to avoid this issue.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { SqsQueue } from "./.gen/providers/aws/sqs-queue";
import { SqsQueuePolicy } from "./.gen/providers/aws/sqs-queue-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const q = new SqsQueue(this, "q", {
      name: "examplequeue",
    });
    const test = new DataAwsIamPolicyDocument(this, "test", {
      statement: [
        {
          actions: ["sqs:SendMessage"],
          condition: [
            {
              test: "ArnEquals",
              values: [example.arn],
              variable: "aws:SourceArn",
            },
          ],
          effect: "Allow",
          principals: [
            {
              identifiers: ["*"],
              type: "*",
            },
          ],
          resources: [q.arn],
          sid: "First",
        },
      ],
    });
    const awsSqsQueuePolicyTest = new SqsQueuePolicy(this, "test_2", {
      policy: Token.asString(test.json),
      queueUrl: q.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSqsQueuePolicyTest.overrideLogicalId("test");
  }
}

```

### Timeout Problems Creating/Updating

If `Version = "2012-10-17"` is not explicitly set in the policy, AWS may hang, causing the AWS provider to time out. To avoid this, make sure to include `Version` as shown in the example below.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { SqsQueue } from "./.gen/providers/aws/sqs-queue";
import { SqsQueuePolicy } from "./.gen/providers/aws/sqs-queue-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new S3Bucket(this, "example", {
      bucket: "brodobaggins",
    });
    const awsSqsQueueExample = new SqsQueue(this, "example_1", {
      name: "be-giant",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSqsQueueExample.overrideLogicalId("example");
    const awsSqsQueuePolicyExample = new SqsQueuePolicy(this, "example_2", {
      policy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: "SQS:SendMessage",
              Condition: {
                ArnLike: {
                  "aws:SourceArn": example.arn,
                },
              },
              Effect: "Allow",
              Principal: {
                Service: "s3.amazonaws.com",
              },
              Resource: awsSqsQueueExample.arn,
              Sid: "Cejuwdam",
            },
          ],
          Version: "2012-10-17",
        })
      ),
      queueUrl: Token.asString(awsSqsQueueExample.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSqsQueuePolicyExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `policy` - (Required) JSON policy for the SQS queue. For more information about building AWS IAM policy documents with Terraform, see the [AWS IAM Policy Document Guide](https://learn.hashicorp.com/terraform/aws/iam-policy). Ensure that `Version = "2012-10-17"` is set in the policy or AWS may hang in creating the queue.
* `queueUrl` - (Required) URL of the SQS Queue to which to attach the policy.

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import SQS Queue Policies using the queue URL. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SqsQueuePolicy } from "./.gen/providers/aws/sqs-queue-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    SqsQueuePolicy.generateConfigForImport(
      this,
      "test",
      "https://queue.amazonaws.com/123456789012/myqueue"
    );
  }
}

```

Using `terraform import`, import SQS Queue Policies using the queue URL. For example:

```console
% terraform import aws_sqs_queue_policy.test https://queue.amazonaws.com/123456789012/myqueue
```

<!-- cache-key: cdktf-0.20.8 input-5555f36627fbd1f1a3309a2c61f2ac45b3b761e494b6220f2cc708242288f543 -->