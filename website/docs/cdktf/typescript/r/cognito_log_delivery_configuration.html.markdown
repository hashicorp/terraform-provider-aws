---
subcategory: "Cognito IDP (Identity Provider)"
layout: "aws"
page_title: "AWS: aws_cognito_log_delivery_configuration"
description: |-
  Manages an AWS Cognito IDP (Identity Provider) Log Delivery Configuration.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cognito_log_delivery_configuration

Manages an AWS Cognito IDP (Identity Provider) Log Delivery Configuration.

## Example Usage

### Basic Usage with CloudWatch Logs

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchLogGroup } from "./.gen/providers/aws/cloudwatch-log-group";
import { CognitoLogDeliveryConfiguration } from "./.gen/providers/aws/cognito-log-delivery-configuration";
import { CognitoUserPool } from "./.gen/providers/aws/cognito-user-pool";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new CloudwatchLogGroup(this, "example", {
      name: "example",
    });
    const awsCognitoUserPoolExample = new CognitoUserPool(this, "example_1", {
      name: "example",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCognitoUserPoolExample.overrideLogicalId("example");
    const awsCognitoLogDeliveryConfigurationExample =
      new CognitoLogDeliveryConfiguration(this, "example_2", {
        logConfigurations: [
          {
            cloudWatchLogsConfiguration: [
              {
                logGroupArn: example.arn,
              },
            ],
            eventSource: "userNotification",
            logLevel: "ERROR",
          },
        ],
        userPoolId: Token.asString(awsCognitoUserPoolExample.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCognitoLogDeliveryConfigurationExample.overrideLogicalId("example");
  }
}

```

### Multiple Log Configurations with Different Destinations

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchLogGroup } from "./.gen/providers/aws/cloudwatch-log-group";
import { CognitoLogDeliveryConfiguration } from "./.gen/providers/aws/cognito-log-delivery-configuration";
import { CognitoUserPool } from "./.gen/providers/aws/cognito-user-pool";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicy } from "./.gen/providers/aws/iam-role-policy";
import { KinesisFirehoseDeliveryStream } from "./.gen/providers/aws/kinesis-firehose-delivery-stream";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new CloudwatchLogGroup(this, "example", {
      name: "example",
    });
    const awsCognitoUserPoolExample = new CognitoUserPool(this, "example_1", {
      name: "example",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCognitoUserPoolExample.overrideLogicalId("example");
    const firehose = new IamRole(this, "firehose", {
      assumeRolePolicy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: "sts:AssumeRole",
              Effect: "Allow",
              Principal: {
                Service: "firehose.amazonaws.com",
              },
            },
          ],
          Version: "2012-10-17",
        })
      ),
      name: "firehose-role",
    });
    const awsS3BucketExample = new S3Bucket(this, "example_3", {
      bucket: "example-bucket",
      forceDestroy: true,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3BucketExample.overrideLogicalId("example");
    const awsIamRolePolicyFirehose = new IamRolePolicy(this, "firehose_4", {
      name: "firehose-policy",
      policy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: [
                "s3:AbortMultipartUpload",
                "s3:GetBucketLocation",
                "s3:GetObject",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads",
                "s3:PutObject",
              ],
              Effect: "Allow",
              Resource: [
                awsS3BucketExample.arn,
                "${" + awsS3BucketExample.arn + "}/*",
              ],
            },
          ],
          Version: "2012-10-17",
        })
      ),
      role: firehose.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyFirehose.overrideLogicalId("firehose");
    const awsKinesisFirehoseDeliveryStreamExample =
      new KinesisFirehoseDeliveryStream(this, "example_5", {
        destination: "extended_s3",
        extendedS3Configuration: {
          bucketArn: Token.asString(awsS3BucketExample.arn),
          roleArn: firehose.arn,
        },
        name: "example-stream",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsKinesisFirehoseDeliveryStreamExample.overrideLogicalId("example");
    const awsCognitoLogDeliveryConfigurationExample =
      new CognitoLogDeliveryConfiguration(this, "example_6", {
        logConfigurations: [
          {
            cloudWatchLogsConfiguration: [
              {
                logGroupArn: example.arn,
              },
            ],
            eventSource: "userNotification",
            logLevel: "INFO",
          },
          {
            eventSource: "userAuthEvents",
            firehoseConfiguration: [
              {
                streamArn: Token.asString(
                  awsKinesisFirehoseDeliveryStreamExample.arn
                ),
              },
            ],
            logLevel: "ERROR",
          },
        ],
        userPoolId: Token.asString(awsCognitoUserPoolExample.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCognitoLogDeliveryConfigurationExample.overrideLogicalId("example");
  }
}

```

### S3 Configuration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CognitoLogDeliveryConfiguration } from "./.gen/providers/aws/cognito-log-delivery-configuration";
import { CognitoUserPool } from "./.gen/providers/aws/cognito-user-pool";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new CognitoUserPool(this, "example", {
      name: "example",
    });
    const awsS3BucketExample = new S3Bucket(this, "example_1", {
      bucket: "example-bucket",
      forceDestroy: true,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3BucketExample.overrideLogicalId("example");
    const awsCognitoLogDeliveryConfigurationExample =
      new CognitoLogDeliveryConfiguration(this, "example_2", {
        logConfigurations: [
          {
            eventSource: "userNotification",
            logLevel: "ERROR",
            s3Configuration: [
              {
                bucketArn: Token.asString(awsS3BucketExample.arn),
              },
            ],
          },
        ],
        userPoolId: example.id,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCognitoLogDeliveryConfigurationExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `userPoolId` - (Required) The ID of the user pool for which to configure log delivery.

The following arguments are optional:

* `logConfigurations` - (Optional) Configuration block for log delivery. At least one configuration block is required. See [Log Configurations](#log-configurations) below.
* `region` - (Optional) The AWS region.

### Log Configurations

The `logConfigurations` block supports the following:

* `eventSource` - (Required) The event source to configure logging for. Valid values are `userNotification` and `userAuthEvents`.
* `logLevel` - (Required) The log level to set for the event source. Valid values are `ERROR` and `INFO`.
* `cloudWatchLogsConfiguration` - (Optional) Configuration for CloudWatch Logs delivery. See [CloudWatch Logs Configuration](#cloudwatch-logs-configuration) below.
* `firehoseConfiguration` - (Optional) Configuration for Kinesis Data Firehose delivery. See [Firehose Configuration](#firehose-configuration) below.
* `s3Configuration` - (Optional) Configuration for S3 delivery. See [S3 Configuration](#s3-configuration) below.

~> **Note:** At least one destination configuration (`cloudWatchLogsConfiguration`, `firehoseConfiguration`, or `s3Configuration`) must be specified for each log configuration.

#### CloudWatch Logs Configuration

The `cloudWatchLogsConfiguration` block supports the following:

* `logGroupArn` - (Optional) The ARN of the CloudWatch Logs log group to which the logs should be delivered.

#### Firehose Configuration

The `firehoseConfiguration` block supports the following:

* `streamArn` - (Optional) The ARN of the Kinesis Data Firehose delivery stream to which the logs should be delivered.

#### S3 Configuration

The `s3Configuration` block supports the following:

* `bucketArn` - (Optional) The ARN of the S3 bucket to which the logs should be delivered.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Cognito IDP (Identity Provider) Log Delivery Configuration using the `userPoolId`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CognitoLogDeliveryConfiguration } from "./.gen/providers/aws/cognito-log-delivery-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    CognitoLogDeliveryConfiguration.generateConfigForImport(
      this,
      "example",
      "us-west-2_example123"
    );
  }
}

```

Using `terraform import`, import Cognito IDP (Identity Provider) Log Delivery Configuration using the `userPoolId`. For example:

```console
% terraform import aws_cognito_log_delivery_configuration.example us-west-2_example123
```

<!-- cache-key: cdktf-0.20.8 input-06bcd87e77c8f84d74082358026627ce29979429c9b1eb667b8e9760f15f7795 -->