---
subcategory: "IVS (Interactive Video) Chat"
layout: "aws"
page_title: "AWS: aws_ivschat_logging_configuration"
description: |-
  Terraform resource for managing an AWS IVS (Interactive Video) Chat Logging Configuration.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ivschat_logging_configuration

Terraform resource for managing an AWS IVS (Interactive Video) Chat Logging Configuration.

## Example Usage

### Basic Usage - Logging to CloudWatch

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchLogGroup } from "./.gen/providers/aws/cloudwatch-log-group";
import { IvschatLoggingConfiguration } from "./.gen/providers/aws/ivschat-logging-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new CloudwatchLogGroup(this, "example", {});
    const awsIvschatLoggingConfigurationExample =
      new IvschatLoggingConfiguration(this, "example_1", {
        destinationConfiguration: {
          cloudwatchLogs: {
            logGroupName: example.name,
          },
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIvschatLoggingConfigurationExample.overrideLogicalId("example");
  }
}

```

### Basic Usage - Logging to Kinesis Firehose with Extended S3

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IvschatLoggingConfiguration } from "./.gen/providers/aws/ivschat-logging-configuration";
import { KinesisFirehoseDeliveryStream } from "./.gen/providers/aws/kinesis-firehose-delivery-stream";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketAcl } from "./.gen/providers/aws/s3-bucket-acl";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new S3Bucket(this, "example", {
      bucketPrefix: "tf-ivschat-logging-bucket",
    });
    const awsS3BucketAclExample = new S3BucketAcl(this, "example_1", {
      acl: "private",
      bucket: example.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3BucketAclExample.overrideLogicalId("example");
    const assumeRole = new DataAwsIamPolicyDocument(this, "assume_role", {
      statement: [
        {
          actions: ["sts:AssumeRole"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["firehose.amazonaws.com"],
              type: "Service",
            },
          ],
        },
      ],
    });
    const awsIamRoleExample = new IamRole(this, "example_3", {
      assumeRolePolicy: Token.asString(assumeRole.json),
      name: "firehose_example_role",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRoleExample.overrideLogicalId("example");
    const awsKinesisFirehoseDeliveryStreamExample =
      new KinesisFirehoseDeliveryStream(this, "example_4", {
        destination: "extended_s3",
        extendedS3Configuration: {
          bucketArn: example.arn,
          roleArn: Token.asString(awsIamRoleExample.arn),
        },
        name: "terraform-kinesis-firehose-extended-s3-example-stream",
        tags: {
          LogDeliveryEnabled: "true",
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsKinesisFirehoseDeliveryStreamExample.overrideLogicalId("example");
    const awsIvschatLoggingConfigurationExample =
      new IvschatLoggingConfiguration(this, "example_5", {
        destinationConfiguration: {
          firehose: {
            deliveryStreamName: Token.asString(
              awsKinesisFirehoseDeliveryStreamExample.name
            ),
          },
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIvschatLoggingConfigurationExample.overrideLogicalId("example");
  }
}

```

### Basic Usage - Logging to S3

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IvschatLoggingConfiguration } from "./.gen/providers/aws/ivschat-logging-configuration";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new S3Bucket(this, "example", {
      bucket_name: "tf-ivschat-logging",
      forceDestroy: true,
    });
    const awsIvschatLoggingConfigurationExample =
      new IvschatLoggingConfiguration(this, "example_1", {
        destinationConfiguration: {
          s3: {
            bucketName: example.id,
          },
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIvschatLoggingConfigurationExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `destinationConfiguration` - (Required) Object containing destination configuration for where chat activity will be logged. This object must contain exactly one of the following children arguments:
    * `cloudwatchLogs` - An Amazon CloudWatch Logs destination configuration where chat activity will be logged.
        * `logGroupName` - Name of the Amazon Cloudwatch Logs destination where chat activity will be logged.
    * `firehose` - An Amazon Kinesis Data Firehose destination configuration where chat activity will be logged.
        * `deliveryStreamName` - Name of the Amazon Kinesis Firehose delivery stream where chat activity will be logged.
    * `s3` - An Amazon S3 destination configuration where chat activity will be logged.
        * `bucketName` - Name of the Amazon S3 bucket where chat activity will be logged.

The following arguments are optional:

* `name` - (Optional) Logging Configuration name.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the Logging Configuration.
* `id` - ID of the Logging Configuration.
* `state` - State of the Logging Configuration.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://www.terraform.io/docs/configuration/blocks/resources/syntax.html#operation-timeouts):

* `create` - (Default `5m`)
* `update` - (Default `5m`)
* `delete` - (Default `5m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import IVS (Interactive Video) Chat Logging Configuration using the ARN. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IvschatLoggingConfiguration } from "./.gen/providers/aws/ivschat-logging-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    IvschatLoggingConfiguration.generateConfigForImport(
      this,
      "example",
      "arn:aws:ivschat:us-west-2:326937407773:logging-configuration/MMUQc8wcqZmC"
    );
  }
}

```

Using `terraform import`, import IVS (Interactive Video) Chat Logging Configuration using the ARN. For example:

```console
% terraform import aws_ivschat_logging_configuration.example arn:aws:ivschat:us-west-2:326937407773:logging-configuration/MMUQc8wcqZmC
```

<!-- cache-key: cdktf-0.20.8 input-bba8a6a4c3ad40b83127a5d0756507ed6f522126fec6a06bdf49e17484976b8d -->