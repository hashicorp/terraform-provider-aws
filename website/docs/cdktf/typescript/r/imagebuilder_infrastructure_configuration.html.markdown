---
subcategory: "EC2 Image Builder"
layout: "aws"
page_title: "AWS: aws_imagebuilder_infrastructure_configuration"
description: |-
  Manages an Image Builder Infrastructure Configuration
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_imagebuilder_infrastructure_configuration

Manages an Image Builder Infrastructure Configuration.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ImagebuilderInfrastructureConfiguration } from "./.gen/providers/aws/imagebuilder-infrastructure-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ImagebuilderInfrastructureConfiguration(this, "example", {
      description: "example description",
      instanceProfileName: Token.asString(awsIamInstanceProfileExample.name),
      instanceTypes: ["t2.nano", "t3.micro"],
      keyPair: Token.asString(awsKeyPairExample.keyName),
      logging: {
        s3Logs: {
          s3BucketName: Token.asString(awsS3BucketExample.bucket),
          s3KeyPrefix: "logs",
        },
      },
      name: "example",
      securityGroupIds: [Token.asString(awsSecurityGroupExample.id)],
      snsTopicArn: Token.asString(awsSnsTopicExample.arn),
      subnetId: main.id,
      tags: {
        foo: "bar",
      },
      terminateInstanceOnFailure: true,
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `instanceProfileName` - (Required) Name of IAM Instance Profile.
* `name` - (Required) Name for the configuration.

The following arguments are optional:

* `description` - (Optional) Description for the configuration.
* `instanceMetadataOptions` - (Optional) Configuration block with instance metadata options for the HTTP requests that pipeline builds use to launch EC2 build and test instances. Detailed below.
* `instanceTypes` - (Optional) Set of EC2 Instance Types.
* `keyPair` - (Optional) Name of EC2 Key Pair.
* `logging` - (Optional) Configuration block with logging settings. Detailed below.
* `resourceTags` - (Optional) Key-value map of resource tags to assign to infrastructure created by the configuration.
* `securityGroupIds` - (Optional) Set of EC2 Security Group identifiers.
* `snsTopicArn` - (Optional) Amazon Resource Name (ARN) of SNS Topic.
* `subnetId` - (Optional) EC2 Subnet identifier. Also requires `securityGroupIds` argument.
* `tags` - (Optional) Key-value map of resource tags to assign to the configuration. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `terminateInstanceOnFailure` - (Optional) Enable if the instance should be terminated when the pipeline fails. Defaults to `false`.

### instance_metadata_options

The following arguments are optional:

* `httpPutResponseHopLimit` - The number of hops that an instance can traverse to reach its destonation.
* `httpTokens` - Whether a signed token is required for instance metadata retrieval requests. Valid values: `required`, `optional`.

### logging

The following arguments are required:

* `s3Logs` - (Required) Configuration block with S3 logging settings. Detailed below.

### s3_logs

The following arguments are required:

* `s3BucketName` - (Required) Name of the S3 Bucket.

The following arguments are optional:

* `s3KeyPrefix` - (Optional) Prefix to use for S3 logs. Defaults to `/`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Amazon Resource Name (ARN) of the configuration.
* `arn` - Amazon Resource Name (ARN) of the configuration.
* `dateCreated` - Date when the configuration was created.
* `dateUpdated` - Date when the configuration was updated.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_imagebuilder_infrastructure_configuration` using the Amazon Resource Name (ARN). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ImagebuilderInfrastructureConfiguration } from "./.gen/providers/aws/imagebuilder-infrastructure-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ImagebuilderInfrastructureConfiguration.generateConfigForImport(
      this,
      "example",
      "arn:aws:imagebuilder:us-east-1:123456789012:infrastructure-configuration/example"
    );
  }
}

```

Using `terraform import`, import `aws_imagebuilder_infrastructure_configuration` using the Amazon Resource Name (ARN). For example:

```console
% terraform import aws_imagebuilder_infrastructure_configuration.example arn:aws:imagebuilder:us-east-1:123456789012:infrastructure-configuration/example
```

<!-- cache-key: cdktf-0.20.8 input-92ce8940a00b3a6132cb84f5e5797b0c5f3f5546af00335b30802f922e76f2ef -->