---
subcategory: "EKS (Elastic Kubernetes)"
layout: "aws"
page_title: "AWS: aws_eks_access_policy_associattion"
description: |-
  Access Entry Policy Association for an EKS Cluster.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_eks_access_policy_association

Access Entry Policy Association for an EKS Cluster.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EksAccessPolicyAssociation } from "./.gen/providers/aws/eks-access-policy-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new EksAccessPolicyAssociation(this, "example", {
      accessScope: {
        namespaces: ["example-namespace"],
        type: "namespace",
      },
      clusterName: Token.asString(awsEksClusterExample.name),
      policyArn: "arn:aws:eks::aws:cluster-access-policy/AmazonEKSViewPolicy",
      principalArn: Token.asString(awsIamUserExample.arn),
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `clusterName` – (Required) Name of the EKS Cluster.
* `policyArn` – (Required) The ARN of the access policy that you're associating.
* `principalArn` – (Required) The IAM Principal ARN which requires Authentication access to the EKS cluster.
* `accessScope` – (Required) The configuration block to determine the scope of the access. See [`accessScope` Block](#access_scope-block) below.

### `accessScope` Block

The `accessScope` block supports the following arguments.

* `type` - (Required) Valid values are `namespace` or `cluster`.
* `namespaces` - (Optional) The namespaces to which the access scope applies when type is namespace.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `associated_access_policy` - Contains information about the access policy associatieon. See [`associated_access_policy` Block](#associated_access_policy-block) below.

### `associated_access_policy` Block

The `associated_access_policy` block has the following attributes.

* `associatedAt` - Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the policy was associated.
* `modifiedAt` - Date and time in [RFC3339 format](https://tools.ietf.org/html/rfc3339#section-5.8) that the policy was updated.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `20m`)
* `update` - (Default `20m`)
* `delete` - (Default `40m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import EKS add-on using the `clusterName`, `principalArn`and `policyArn` separated by an octothorp (`#`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EksAccessPolicyAssociation } from "./.gen/providers/aws/eks-access-policy-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    EksAccessPolicyAssociation.generateConfigForImport(
      this,
      "myEksEntry",
      "my_cluster_name#my_principal_arn#my_policy_arn"
    );
  }
}

```

Using `terraform import`, import EKS access entry using the `clusterName` `principalArn` and `policyArn` separated by an octothorp (`#`). For example:

```console
% terraform import aws_eks_access_policy_association.my_eks_access_entry my_cluster_name#my_principal_arn#my_policy_arn
```

<!-- cache-key: cdktf-0.20.8 input-ecd9ef51995252da25c6cdb41abe4d6bd4454a736eb2237934c32885db8f00f1 -->