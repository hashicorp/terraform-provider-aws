---
subcategory: "Lambda"
layout: "aws"
page_title: "AWS: aws_lambda_permission"
description: |-
  Manages an AWS Lambda permission.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_lambda_permission

Manages an AWS Lambda permission. Use this resource to grant external sources (e.g., EventBridge Rules, SNS, or S3) permission to invoke Lambda functions.

## Example Usage

### Basic Usage with EventBridge

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamRole } from "./.gen/providers/aws/iam-role";
import { LambdaAlias } from "./.gen/providers/aws/lambda-alias";
import { LambdaFunction } from "./.gen/providers/aws/lambda-function";
import { LambdaPermission } from "./.gen/providers/aws/lambda-permission";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const iamForLambda = new IamRole(this, "iam_for_lambda", {
      assumeRolePolicy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: "sts:AssumeRole",
              Effect: "Allow",
              Principal: {
                Service: "lambda.amazonaws.com",
              },
              Sid: "",
            },
          ],
          Version: "2012-10-17",
        })
      ),
      name: "iam_for_lambda",
    });
    const testLambda = new LambdaFunction(this, "test_lambda", {
      filename: "lambdatest.zip",
      functionName: "lambda_function_name",
      handler: "exports.handler",
      role: iamForLambda.arn,
      runtime: "nodejs20.x",
    });
    const testAlias = new LambdaAlias(this, "test_alias", {
      description: "a sample description",
      functionName: testLambda.functionName,
      functionVersion: "$LATEST",
      name: "testalias",
    });
    new LambdaPermission(this, "allow_cloudwatch", {
      action: "lambda:InvokeFunction",
      functionName: testLambda.functionName,
      principal: "events.amazonaws.com",
      qualifier: testAlias.name,
      sourceArn: "arn:aws:events:eu-west-1:111122223333:rule/RunDaily",
      statementId: "AllowExecutionFromCloudWatch",
    });
  }
}

```

### SNS Integration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamRole } from "./.gen/providers/aws/iam-role";
import { LambdaFunction } from "./.gen/providers/aws/lambda-function";
import { LambdaPermission } from "./.gen/providers/aws/lambda-permission";
import { SnsTopic } from "./.gen/providers/aws/sns-topic";
import { SnsTopicSubscription } from "./.gen/providers/aws/sns-topic-subscription";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const defaultVar = new IamRole(this, "default", {
      assumeRolePolicy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: "sts:AssumeRole",
              Effect: "Allow",
              Principal: {
                Service: "lambda.amazonaws.com",
              },
              Sid: "",
            },
          ],
          Version: "2012-10-17",
        })
      ),
      name: "iam_for_lambda_with_sns",
    });
    const func = new LambdaFunction(this, "func", {
      filename: "lambdatest.zip",
      functionName: "lambda_called_from_sns",
      handler: "exports.handler",
      role: defaultVar.arn,
      runtime: "python3.12",
    });
    const awsSnsTopicDefault = new SnsTopic(this, "default_2", {
      name: "call-lambda-maybe",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSnsTopicDefault.overrideLogicalId("default");
    new SnsTopicSubscription(this, "lambda", {
      endpoint: func.arn,
      protocol: "lambda",
      topicArn: Token.asString(awsSnsTopicDefault.arn),
    });
    new LambdaPermission(this, "with_sns", {
      action: "lambda:InvokeFunction",
      functionName: func.functionName,
      principal: "sns.amazonaws.com",
      sourceArn: Token.asString(awsSnsTopicDefault.arn),
      statementId: "AllowExecutionFromSNS",
    });
  }
}

```

### API Gateway REST API Integration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ApiGatewayRestApi } from "./.gen/providers/aws/api-gateway-rest-api";
import { LambdaPermission } from "./.gen/providers/aws/lambda-permission";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const myDemoApi = new ApiGatewayRestApi(this, "MyDemoAPI", {
      description: "This is my API for demonstration purposes",
      name: "MyDemoAPI",
    });
    new LambdaPermission(this, "lambda_permission", {
      action: "lambda:InvokeFunction",
      functionName: "MyDemoFunction",
      principal: "apigateway.amazonaws.com",
      sourceArn: "${" + myDemoApi.executionArn + "}/*",
      statementId: "AllowMyDemoAPIInvoke",
    });
  }
}

```

### CloudWatch Log Group Integration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchLogGroup } from "./.gen/providers/aws/cloudwatch-log-group";
import { CloudwatchLogSubscriptionFilter } from "./.gen/providers/aws/cloudwatch-log-subscription-filter";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { LambdaFunction } from "./.gen/providers/aws/lambda-function";
import { LambdaPermission } from "./.gen/providers/aws/lambda-permission";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const defaultVar = new CloudwatchLogGroup(this, "default", {
      name: "/default",
    });
    const assumeRole = new DataAwsIamPolicyDocument(this, "assume_role", {
      statement: [
        {
          actions: ["sts:AssumeRole"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["lambda.amazonaws.com"],
              type: "Service",
            },
          ],
        },
      ],
    });
    const awsIamRoleDefault = new IamRole(this, "default_2", {
      assumeRolePolicy: Token.asString(assumeRole.json),
      name: "iam_for_lambda_called_from_cloudwatch_logs",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRoleDefault.overrideLogicalId("default");
    const logging = new LambdaFunction(this, "logging", {
      filename: "lamba_logging.zip",
      functionName: "lambda_called_from_cloudwatch_logs",
      handler: "exports.handler",
      role: Token.asString(awsIamRoleDefault.arn),
      runtime: "python3.12",
    });
    const awsLambdaPermissionLogging = new LambdaPermission(this, "logging_4", {
      action: "lambda:InvokeFunction",
      functionName: logging.functionName,
      principal: "logs.eu-west-1.amazonaws.com",
      sourceArn: "${" + defaultVar.arn + "}:*",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsLambdaPermissionLogging.overrideLogicalId("logging");
    const awsCloudwatchLogSubscriptionFilterLogging =
      new CloudwatchLogSubscriptionFilter(this, "logging_5", {
        dependsOn: [awsLambdaPermissionLogging],
        destinationArn: logging.arn,
        filterPattern: "",
        logGroupName: defaultVar.name,
        name: "logging_default",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCloudwatchLogSubscriptionFilterLogging.overrideLogicalId("logging");
  }
}

```

### Cross-Account Function URL Access

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionUrl } from "./.gen/providers/aws/lambda-function-url";
import { LambdaPermission } from "./.gen/providers/aws/lambda-permission";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LambdaFunctionUrl(this, "url", {
      authorizationType: "AWS_IAM",
      functionName: example.functionName,
    });
    const awsLambdaPermissionUrl = new LambdaPermission(this, "url_1", {
      action: "lambda:InvokeFunctionUrl",
      functionName: example.functionName,
      functionUrlAuthType: "AWS_IAM",
      principal: "arn:aws:iam::444455556666:role/example",
      sourceAccount: "444455556666",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsLambdaPermissionUrl.overrideLogicalId("url");
  }
}

```

### Automatic Permission Updates with Function Changes

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaPermission } from "./.gen/providers/aws/lambda-permission";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LambdaPermission(this, "logging", {
      action: "lambda:InvokeFunction",
      functionName: example.functionName,
      lifecycle: {
        replaceTriggeredBy: [example],
      },
      principal: "events.amazonaws.com",
      sourceArn: "arn:aws:events:eu-west-1:111122223333:rule/RunDaily",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `action` - (Required) Lambda action to allow in this statement (e.g., `lambda:InvokeFunction`)
* `functionName` - (Required) Name or ARN of the Lambda function
* `principal` - (Required) AWS service or account that invokes the function (e.g., `s3.amazonaws.com`, `sns.amazonaws.com`, AWS account ID, or AWS IAM principal)

The following arguments are optional:

* `eventSourceToken` - (Optional) Event Source Token for Alexa Skills
* `functionUrlAuthType` - (Optional) Lambda Function URL authentication type. Valid values: `AWS_IAM` or `NONE`. Only valid with `lambda:InvokeFunctionUrl` action
* `principalOrgId` - (Optional) AWS Organizations ID to grant permission to all accounts under this organization
* `qualifier` - (Optional) Lambda function version or alias name
* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference)
* `sourceAccount` - (Optional) AWS account ID of the source owner for cross-account access, S3, or SES
* `sourceArn` - (Optional) ARN of the source resource granting permission to invoke the Lambda function
* `statementId` - (Optional) Statement identifier. Generated by Terraform if not provided
* `statementIdPrefix` - (Optional) Statement identifier prefix. Conflicts with `statementId`

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Lambda permission statements using function_name/statement_id with an optional qualifier. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaPermission } from "./.gen/providers/aws/lambda-permission";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    LambdaPermission.generateConfigForImport(
      this,
      "testLambdaPermission",
      "my_test_lambda_function/AllowExecutionFromCloudWatch"
    );
  }
}

```

Using `qualifier`:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaPermission } from "./.gen/providers/aws/lambda-permission";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    LambdaPermission.generateConfigForImport(
      this,
      "testLambdaPermission",
      "my_test_lambda_function:qualifier_name/AllowExecutionFromCloudWatch"
    );
  }
}

```

For backwards compatibility, the following legacy `terraform import` commands are also supported:

```console
% terraform import aws_lambda_permission.example my_test_lambda_function/AllowExecutionFromCloudWatch
% terraform import aws_lambda_permission.test_lambda_permission my_test_lambda_function:qualifier_name/AllowExecutionFromCloudWatch
```

<!-- cache-key: cdktf-0.20.8 input-9e6dfb44d75ae3db05e77504e7e74d74631a3263cb7151673a23aff18efb82c2 -->