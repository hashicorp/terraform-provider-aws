---
subcategory: "OpenSearch Serverless"
layout: "aws"
page_title: "AWS: aws_opensearchserverless_security_policy"
description: |-
  Terraform resource for managing an AWS OpenSearch Serverless Security Policy.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_opensearchserverless_security_policy

Terraform resource for managing an AWS OpenSearch Serverless Security Policy. See AWS documentation for [encryption policies](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-encryption.html#serverless-encryption-policies) and [network policies](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/serverless-network.html#serverless-network-policies).

## Example Usage

### Encryption Security Policy

#### Applies to a single collection

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { OpensearchserverlessSecurityPolicy } from "./.gen/providers/aws/opensearchserverless-security-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new OpensearchserverlessSecurityPolicy(this, "example", {
      description: "encryption security policy for example-collection",
      name: "example",
      policy: Token.asString(
        Fn.jsonencode({
          AWSOwnedKey: true,
          Rules: [
            {
              Resource: ["collection/example-collection"],
              ResourceType: "collection",
            },
          ],
        })
      ),
      type: "encryption",
    });
  }
}

```

#### Applies to multiple collections

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { OpensearchserverlessSecurityPolicy } from "./.gen/providers/aws/opensearchserverless-security-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new OpensearchserverlessSecurityPolicy(this, "example", {
      description:
        'encryption security policy for collections that begin with \\"example\\"',
      name: "example",
      policy: Token.asString(
        Fn.jsonencode({
          AWSOwnedKey: true,
          Rules: [
            {
              Resource: ["collection/example*"],
              ResourceType: "collection",
            },
          ],
        })
      ),
      type: "encryption",
    });
  }
}

```

#### Using a customer managed key

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { OpensearchserverlessSecurityPolicy } from "./.gen/providers/aws/opensearchserverless-security-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new OpensearchserverlessSecurityPolicy(this, "example", {
      description: "encryption security policy using customer KMS key",
      name: "example",
      policy: Token.asString(
        Fn.jsonencode({
          AWSOwnedKey: false,
          KmsARN:
            "arn:aws:kms:us-east-1:123456789012:key/93fd6da4-a317-4c17-bfe9-382b5d988b36",
          Rules: [
            {
              Resource: ["collection/customer-managed-key-collection"],
              ResourceType: "collection",
            },
          ],
        })
      ),
      type: "encryption",
    });
  }
}

```

### Network Security Policy

#### Allow public access to the collection endpoint and the Dashboards endpoint

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { OpensearchserverlessSecurityPolicy } from "./.gen/providers/aws/opensearchserverless-security-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new OpensearchserverlessSecurityPolicy(this, "example", {
      description: "Public access",
      name: "example",
      policy: Token.asString(
        Fn.jsonencode([
          {
            AllowFromPublic: true,
            Description:
              "Public access to collection and Dashboards endpoint for example collection",
            Rules: [
              {
                Resource: ["collection/example-collection"],
                ResourceType: "collection",
              },
              {
                Resource: ["collection/example-collection"],
                ResourceType: "dashboard",
              },
            ],
          },
        ])
      ),
      type: "network",
    });
  }
}

```

#### Allow VPC access to the collection endpoint and the Dashboards endpoint

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { OpensearchserverlessSecurityPolicy } from "./.gen/providers/aws/opensearchserverless-security-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new OpensearchserverlessSecurityPolicy(this, "example", {
      description: "VPC access",
      name: "example",
      policy: Token.asString(
        Fn.jsonencode([
          {
            AllowFromPublic: false,
            Description:
              "VPC access to collection and Dashboards endpoint for example collection",
            Rules: [
              {
                Resource: ["collection/example-collection"],
                ResourceType: "collection",
              },
              {
                Resource: ["collection/example-collection"],
                ResourceType: "dashboard",
              },
            ],
            SourceVPCEs: ["vpce-050f79086ee71ac05"],
          },
        ])
      ),
      type: "network",
    });
  }
}

```

#### Mixed access for different collections

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { OpensearchserverlessSecurityPolicy } from "./.gen/providers/aws/opensearchserverless-security-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new OpensearchserverlessSecurityPolicy(this, "example", {
      description: "Mixed access for marketing and sales",
      name: "example",
      policy: Token.asString(
        Fn.jsonencode([
          {
            AllowFromPublic: false,
            Description: "Marketing access",
            Rules: [
              {
                Resource: ["collection/marketing*"],
                ResourceType: "collection",
              },
              {
                Resource: ["collection/marketing*"],
                ResourceType: "dashboard",
              },
            ],
            SourceVPCEs: ["vpce-050f79086ee71ac05"],
          },
          {
            AllowFromPublic: true,
            Description: "Sales access",
            Rules: [
              {
                Resource: ["collection/finance"],
                ResourceType: "collection",
              },
            ],
          },
        ])
      ),
      type: "network",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `name` - (Required) Name of the policy.
* `policy` - (Required) JSON policy document to use as the content for the new policy
* `type` - (Required) Type of security policy. One of `encryption` or `network`.

The following arguments are optional:

* `description` - (Optional) Description of the policy. Typically used to store information about the permissions defined in the policy.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `policyVersion` - Version of the policy.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import OpenSearchServerless Security Policy using the `name` and `type` arguments separated by a slash (`/`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { OpensearchserverlessSecurityPolicy } from "./.gen/providers/aws/opensearchserverless-security-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    OpensearchserverlessSecurityPolicy.generateConfigForImport(
      this,
      "example",
      "example/encryption"
    );
  }
}

```

Using `terraform import`, import OpenSearchServerless Security Policy using the `name` and `type` arguments separated by a slash (`/`). For example:

```console
% terraform import aws_opensearchserverless_security_policy.example example/encryption
```

<!-- cache-key: cdktf-0.20.8 input-becd08ee3f6a3b334c7cc8143eed41d3094a5e44bfbffe39e37ab8c8a317620e -->