---
subcategory: "CloudWatch"
layout: "aws"
page_title: "AWS: aws_cloudwatch_composite_alarm"
description: |-
  Provides a CloudWatch Composite Alarm resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cloudwatch_composite_alarm

Provides a CloudWatch Composite Alarm resource.

~> **NOTE:** An alarm (composite or metric) cannot be destroyed when there are other composite alarms depending on it. This can lead to a cyclical dependency on update, as Terraform will unsuccessfully attempt to destroy alarms before updating the rule. Consider using `dependsOn`, references to alarm names, and two-stage updates.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchCompositeAlarm } from "./.gen/providers/aws/cloudwatch-composite-alarm";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new CloudwatchCompositeAlarm(this, "example", {
      actionsSuppressor: {
        alarm: "suppressor-alarm",
        extensionPeriod: 10,
        waitPeriod: 20,
      },
      alarmActions: Token.asList(awsSnsTopicExample.arn),
      alarmDescription: "This is a composite alarm!",
      alarmName: "example-composite-alarm",
      alarmRule:
        "ALARM(${" +
        alpha.alarmName +
        "}) OR\nALARM(${" +
        bravo.alarmName +
        "})\n\n",
      okActions: Token.asList(awsSnsTopicExample.arn),
    });
  }
}

```

## Argument Reference

* `actionsEnabled` - (Optional, Forces new resource) Indicates whether actions should be executed during any changes to the alarm state of the composite alarm. Defaults to `true`.
* `actionsSuppressor` - (Optional) Actions will be suppressed if the suppressor alarm is in the ALARM state.
    * `alarm` - (Required) Can be an AlarmName or an Amazon Resource Name (ARN) from an existing alarm.
    * `extensionPeriod` - (Required) The maximum time in seconds that the composite alarm waits after suppressor alarm goes out of the `ALARM` state. After this time, the composite alarm performs its actions.
    * `waitPeriod` - (Required) The maximum time in seconds that the composite alarm waits for the suppressor alarm to go into the `ALARM` state. After this time, the composite alarm performs its actions.
* `alarmActions` - (Optional) The set of actions to execute when this alarm transitions to the `ALARM` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
* `alarmDescription` - (Optional) The description for the composite alarm.
* `alarmName` - (Required) The name for the composite alarm. This name must be unique within the region.
* `alarmRule` - (Required) An expression that specifies which other alarms are to be evaluated to determine this composite alarm's state. For syntax, see [Creating a Composite Alarm](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/Create_Composite_Alarm.html). The maximum length is 10240 characters.
* `insufficientDataActions` - (Optional) The set of actions to execute when this alarm transitions to the `INSUFFICIENT_DATA` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
* `okActions` - (Optional) The set of actions to execute when this alarm transitions to an `OK` state from any other state. Each action is specified as an ARN. Up to 5 actions are allowed.
* `tags` - (Optional) A map of tags to associate with the alarm. Up to 50 tags are allowed. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The ARN of the composite alarm.
* `id` - The ID of the composite alarm resource, which is equivalent to its `alarmName`.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import a CloudWatch Composite Alarm using the `alarmName`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchCompositeAlarm } from "./.gen/providers/aws/cloudwatch-composite-alarm";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    CloudwatchCompositeAlarm.generateConfigForImport(this, "test", "my-alarm");
  }
}

```

Using `terraform import`, import a CloudWatch Composite Alarm using the `alarmName`. For example:

```console
% terraform import aws_cloudwatch_composite_alarm.test my-alarm
```

<!-- cache-key: cdktf-0.20.8 input-bc5f81d668dc98cce89e801ef7bbb869b647ded82d35c20f03ae8298b2d50282 -->