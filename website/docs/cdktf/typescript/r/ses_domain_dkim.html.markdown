---
subcategory: "SES (Simple Email)"
layout: "aws"
page_title: "AWS: aws_ses_domain_dkim"
description: |-
  Provides an SES domain DKIM generation resource
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ses_domain_dkim

Provides an SES domain DKIM generation resource.

Domain ownership needs to be confirmed first using [ses_domain_identity Resource](/docs/providers/aws/r/ses_domain_identity.html)

## Argument Reference

This resource supports the following arguments:

* `domain` - (Required) Verified domain name to generate DKIM tokens for.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `dkimTokens` - DKIM tokens generated by SES.
  These tokens should be used to create CNAME records used to verify SES Easy DKIM.
  See below for an example of how this might be achieved
  when the domain is hosted in Route 53 and managed by Terraform.
  Find out more about verifying domains in Amazon SES
  in the [AWS SES docs](http://docs.aws.amazon.com/ses/latest/DeveloperGuide/easy-dkim-dns-records.html).

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformCount, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Route53Record } from "./.gen/providers/aws/route53-record";
import { SesDomainDkim } from "./.gen/providers/aws/ses-domain-dkim";
import { SesDomainIdentity } from "./.gen/providers/aws/ses-domain-identity";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new SesDomainIdentity(this, "example", {
      domain: "example.com",
    });
    const awsSesDomainDkimExample = new SesDomainDkim(this, "example_1", {
      domain: example.domain,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSesDomainDkimExample.overrideLogicalId("example");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const exampleAmazonsesDkimRecordCount = TerraformCount.of(
      Token.asNumber("3")
    );
    new Route53Record(this, "example_amazonses_dkim_record", {
      name:
        Token.asString(
          Fn.lookupNested(awsSesDomainDkimExample.dkimTokens, [
            exampleAmazonsesDkimRecordCount.index,
          ])
        ) + "._domainkey",
      records: [
        Token.asString(
          Fn.lookupNested(awsSesDomainDkimExample.dkimTokens, [
            exampleAmazonsesDkimRecordCount.index,
          ])
        ) + ".dkim.amazonses.com",
      ],
      ttl: Token.asNumber("600"),
      type: "CNAME",
      zoneId: "ABCDEFGHIJ123",
      count: exampleAmazonsesDkimRecordCount,
    });
  }
}

```

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import DKIM tokens using the `domain` attribute. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SesDomainDkim } from "./.gen/providers/aws/ses-domain-dkim";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    SesDomainDkim.generateConfigForImport(this, "example", "example.com");
  }
}

```

Using `terraform import`, import DKIM tokens using the `domain` attribute. For example:

```console
% terraform import aws_ses_domain_dkim.example example.com
```

<!-- cache-key: cdktf-0.20.8 input-39725dfa611ba6cca577c30709217ceb82a4f67575d3367fd44ba5c674ea4983 -->