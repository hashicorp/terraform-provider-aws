---
subcategory: "Direct Connect"
layout: "aws"
page_title: "AWS: aws_dx_hosted_private_virtual_interface"
description: |-
  Provides a Direct Connect hosted private virtual interface resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_dx_hosted_private_virtual_interface

Provides a Direct Connect hosted private virtual interface resource. This resource represents the allocator's side of the hosted virtual interface.
A hosted virtual interface is a virtual interface that is owned by another AWS account.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DxHostedPrivateVirtualInterface } from "./.gen/providers/aws/dx-hosted-private-virtual-interface";
interface MyConfig {
  ownerAccountId: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new DxHostedPrivateVirtualInterface(this, "foo", {
      addressFamily: "ipv4",
      bgpAsn: 65352,
      connectionId: "dxcon-zzzzzzzz",
      name: "vif-foo",
      vlan: 4094,
      ownerAccountId: config.ownerAccountId,
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `addressFamily` - (Required) The address family for the BGP peer. `ipv4 ` or `ipv6`.
* `bgpAsn` - (Required) The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
* `connectionId` - (Required) The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
* `name` - (Required) The name for the virtual interface.
* `ownerAccountId` - (Required) The AWS account that will own the new virtual interface.
* `vlan` - (Required) The VLAN ID.
* `amazonAddress` - (Optional) The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
* `mtu` - (Optional) The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection. The MTU of a virtual private interface can be either `1500` or `9001` (jumbo frames). Default is `1500`.
* `bgpAuthKey` - (Optional) The authentication key for BGP configuration.
* `customerAddress` - (Optional) The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the virtual interface.
* `arn` - The ARN of the virtual interface.
* `jumboFrameCapable` - Indicates whether jumbo frames (9001 MTU) are supported.
* `awsDevice` - The Direct Connect endpoint on which the virtual interface terminates.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `10m`)
- `update` - (Default `10m`)
- `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Direct Connect hosted private virtual interfaces using the VIF `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DxHostedPrivateVirtualInterface } from "./.gen/providers/aws/dx-hosted-private-virtual-interface";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DxHostedPrivateVirtualInterface.generateConfigForImport(
      this,
      "test",
      "dxvif-33cc44dd"
    );
  }
}

```

Using `terraform import`, import Direct Connect hosted private virtual interfaces using the VIF `id`. For example:

```console
% terraform import aws_dx_hosted_private_virtual_interface.test dxvif-33cc44dd
```

<!-- cache-key: cdktf-0.20.8 input-30c56346b371b07a0381a9a9a399fae393a6827e0de105fc1f2ffe338e99c3e4 -->