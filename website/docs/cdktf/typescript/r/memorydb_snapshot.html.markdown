---
subcategory: "MemoryDB"
layout: "aws"
page_title: "AWS: aws_memorydb_snapshot"
description: |-
  Provides a MemoryDB Snapshot.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_memorydb_snapshot

Provides a MemoryDB Snapshot.

More information about snapshot and restore can be found in the [MemoryDB User Guide](https://docs.aws.amazon.com/memorydb/latest/devguide/snapshots.html).

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { MemorydbSnapshot } from "./.gen/providers/aws/memorydb-snapshot";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new MemorydbSnapshot(this, "example", {
      clusterName: Token.asString(awsMemorydbClusterExample.name),
      name: "my-snapshot",
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `clusterName` - (Required, Forces new resource) Name of the MemoryDB cluster to take a snapshot of.
* `name` - (Optional, Forces new resource) Name of the snapshot. If omitted, Terraform will assign a random, unique name. Conflicts with `namePrefix`.
* `namePrefix` - (Optional, Forces new resource) Creates a unique name beginning with the specified prefix. Conflicts with `name`.
* `kmsKeyArn` - (Optional, Forces new resource) ARN of the KMS key used to encrypt the snapshot at rest.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The name of the snapshot.
* `arn` - The ARN of the snapshot.
* `clusterConfiguration` - The configuration of the cluster from which the snapshot was taken.
    * `description` - Description for the cluster.
    * `engine` - The engine that will run on cluster nodes.
    * `engineVersion` - Version number of the engine used by the cluster.
    * `maintenanceWindow` - The weekly time range during which maintenance on the cluster is performed.
    * `name` - Name of the cluster.
    * `nodeType` - Compute and memory capacity of the nodes in the cluster.
    * `numShards` - Number of shards in the cluster.
    * `parameterGroupName` - Name of the parameter group associated with the cluster.
    * `port` - Port number on which the cluster accepts connections.
    * `snapshotRetentionLimit` - Number of days for which MemoryDB retains automatic snapshots before deleting them.
    * `snapshotWindow` - The daily time range (in UTC) during which MemoryDB begins taking a daily snapshot of the shard.
    * `subnetGroupName` - Name of the subnet group used by the cluster.
    * `topicArn` - ARN of the SNS topic to which cluster notifications are sent.
    * `vpcId` - The VPC in which the cluster exists.
* `source` - Indicates whether the snapshot is from an automatic backup (`automated`) or was created manually (`manual`).
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `120m`)
- `delete` - (Default `120m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import a snapshot using the `name`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { MemorydbSnapshot } from "./.gen/providers/aws/memorydb-snapshot";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    MemorydbSnapshot.generateConfigForImport(this, "example", "my-snapshot");
  }
}

```

Using `terraform import`, import a snapshot using the `name`. For example:

```console
% terraform import aws_memorydb_snapshot.example my-snapshot
```

<!-- cache-key: cdktf-0.20.8 input-472b6583ce4bfcb329a2db7ea7a926933996c5a2cf3009e05e6c6d3eeb644d01 -->