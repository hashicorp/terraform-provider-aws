---
subcategory: "S3 Control"
layout: "aws"
page_title: "AWS: aws_s3control_access_point_policy"
description: |-
  Provides a resource to manage an S3 Access Point resource policy.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_s3control_access_point_policy

Provides a resource to manage an S3 Access Point resource policy.

~> **NOTE on Access Points and Access Point Policies:** Terraform provides both a standalone Access Point Policy resource and an [Access Point](s3_access_point.html) resource with a resource policy defined in-line. You cannot use an Access Point with in-line resource policy in conjunction with an Access Point Policy resource. Doing so will cause a conflict of policies and will overwrite the access point's resource policy.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { S3AccessPoint } from "./.gen/providers/aws/s3-access-point";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3ControlAccessPointPolicy } from "./.gen/providers/aws/s3-control-access-point-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new S3Bucket(this, "example", {
      bucket: "example",
    });
    const awsS3AccessPointExample = new S3AccessPoint(this, "example_1", {
      bucket: example.id,
      lifecycle: {
        ignoreChanges: [policy],
      },
      name: "example",
      publicAccessBlockConfiguration: {
        blockPublicAcls: true,
        blockPublicPolicy: false,
        ignorePublicAcls: true,
        restrictPublicBuckets: false,
      },
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3AccessPointExample.overrideLogicalId("example");
    const awsS3ControlAccessPointPolicyExample = new S3ControlAccessPointPolicy(
      this,
      "example_2",
      {
        accessPointArn: Token.asString(awsS3AccessPointExample.arn),
        policy: Token.asString(
          Fn.jsonencode({
            Statement: [
              {
                Action: "s3:GetObjectTagging",
                Effect: "Allow",
                Principal: {
                  AWS: "*",
                },
                Resource: "${" + awsS3AccessPointExample.arn + "}/object/*",
              },
            ],
            Version: "2008-10-17",
          })
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3ControlAccessPointPolicyExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `accessPointArn` - (Required) The ARN of the access point that you want to associate with the specified policy.
* `policy` - (Required) The policy that you want to apply to the specified access point.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `hasPublicAccessPolicy` - Indicates whether this access point currently has a policy that allows public access.
* `id` - The AWS account ID and access point name separated by a colon (`:`).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Access Point policies using the `accessPointArn`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { S3ControlAccessPointPolicy } from "./.gen/providers/aws/s3-control-access-point-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    S3ControlAccessPointPolicy.generateConfigForImport(
      this,
      "example",
      "arn:aws:s3:us-west-2:123456789012:accesspoint/example"
    );
  }
}

```

Using `terraform import`, import Access Point policies using the `accessPointArn`. For example:

```console
% terraform import aws_s3control_access_point_policy.example arn:aws:s3:us-west-2:123456789012:accesspoint/example
```

<!-- cache-key: cdktf-0.20.8 input-e5c457db50c72d6b30534efccf23fc63cd4d7f721d03d7a1b36a6e8875fa8261 -->