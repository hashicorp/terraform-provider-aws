---
subcategory: "App Mesh"
layout: "aws"
page_title: "AWS: aws_appmesh_virtual_service"
description: |-
  Provides an AWS App Mesh virtual service resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_appmesh_virtual_service

Provides an AWS App Mesh virtual service resource.

## Example Usage

### Virtual Node Provider

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppmeshVirtualService } from "./.gen/providers/aws/appmesh-virtual-service";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AppmeshVirtualService(this, "servicea", {
      meshName: simple.id,
      name: "servicea.simpleapp.local",
      spec: {
        provider: {
          virtualNode: {
            virtualNodeName: serviceb1.name,
          },
        },
      },
    });
  }
}

```

### Virtual Router Provider

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppmeshVirtualService } from "./.gen/providers/aws/appmesh-virtual-service";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AppmeshVirtualService(this, "servicea", {
      meshName: simple.id,
      name: "servicea.simpleapp.local",
      spec: {
        provider: {
          virtualRouter: {
            virtualRouterName: serviceb.name,
          },
        },
      },
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) Name to use for the virtual service. Must be between 1 and 255 characters in length.
* `meshName` - (Required) Name of the service mesh in which to create the virtual service. Must be between 1 and 255 characters in length.
* `meshOwner` - (Optional) AWS account ID of the service mesh's owner. Defaults to the account ID the [AWS provider][1] is currently connected to.
* `spec` - (Required) Virtual service specification to apply.
* `tags` - (Optional) Map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

The `spec` object supports the following:

* `provider`- (Optional) App Mesh object that is acting as the provider for a virtual service. You can specify a single virtual node or virtual router.

The `provider` object supports the following:

* `virtualNode` - (Optional) Virtual node associated with a virtual service.
* `virtualRouter` - (Optional) Virtual router associated with a virtual service.

The `virtualNode` object supports the following:

* `virtualNodeName` - (Required) Name of the virtual node that is acting as a service provider. Must be between 1 and 255 characters in length.

The `virtualRouter` object supports the following:

* `virtualRouterName` - (Required) Name of the virtual router that is acting as a service provider. Must be between 1 and 255 characters in length.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - ID of the virtual service.
* `arn` - ARN of the virtual service.
* `createdDate` - Creation date of the virtual service.
* `lastUpdatedDate` - Last update date of the virtual service.
* `resourceOwner` - Resource owner's AWS account ID.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import App Mesh virtual services using `meshName` together with the virtual service's `name`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppmeshVirtualService } from "./.gen/providers/aws/appmesh-virtual-service";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    AppmeshVirtualService.generateConfigForImport(
      this,
      "servicea",
      "simpleapp/servicea.simpleapp.local"
    );
  }
}

```

Using `terraform import`, import App Mesh virtual services using `meshName` together with the virtual service's `name`. For example:

```console
% terraform import aws_appmesh_virtual_service.servicea simpleapp/servicea.simpleapp.local
```

[1]: /docs/providers/aws/index.html

<!-- cache-key: cdktf-0.20.8 input-5fae0e103caf94ef3f122b26a776a50dc44ebd36febaccc175efd0e97ba5bdaf -->