---
subcategory: "Connect"
layout: "aws"
page_title: "AWS: aws_connect_user_hierarchy_group"
description: |-
  Provides details about a specific Amazon Connect User Hierarchy Group
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_connect_user_hierarchy_group

Provides an Amazon Connect User Hierarchy Group resource. For more information see
[Amazon Connect: Getting Started](https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-get-started.html)

~> **NOTE:** The User Hierarchy Structure must be created before creating a User Hierarchy Group.

## Example Usage

### Basic

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConnectUserHierarchyGroup } from "./.gen/providers/aws/connect-user-hierarchy-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ConnectUserHierarchyGroup(this, "example", {
      instanceId: "aaaaaaaa-bbbb-cccc-dddd-111111111111",
      name: "example",
      tags: {
        Name: "Example User Hierarchy Group",
      },
    });
  }
}

```

### With a parent group

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConnectUserHierarchyGroup } from "./.gen/providers/aws/connect-user-hierarchy-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const parent = new ConnectUserHierarchyGroup(this, "parent", {
      instanceId: "aaaaaaaa-bbbb-cccc-dddd-111111111111",
      name: "parent",
      tags: {
        Name: "Example User Hierarchy Group Parent",
      },
    });
    new ConnectUserHierarchyGroup(this, "child", {
      instanceId: "aaaaaaaa-bbbb-cccc-dddd-111111111111",
      name: "child",
      parentGroupId: parent.hierarchyGroupId,
      tags: {
        Name: "Example User Hierarchy Group Child",
      },
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `instanceId` - (Required) Specifies the identifier of the hosting Amazon Connect Instance.
* `name` - (Required) The name of the user hierarchy group. Must not be more than 100 characters.
* `parentGroupId` - (Optional) The identifier for the parent hierarchy group. The user hierarchy is created at level one if the parent group ID is null.
* `tags` - (Optional) Tags to apply to the hierarchy group. If configured with a provider
[`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The Amazon Resource Name (ARN) of the hierarchy group.
* `hierarchyGroupId` - The identifier for the hierarchy group.
* `hierarchyPath` - A block that contains information about the levels in the hierarchy group. The `hierarchyPath` block is documented below.
* `id` - The identifier of the hosting Amazon Connect Instance and identifier of the hierarchy group
separated by a colon (`:`).
* `levelId` - The identifier of the level in the hierarchy group.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

A `hierarchyPath` block supports the following attributes:

* `levelOne` - A block that defines the details of level one. The level block is documented below.
* `levelTwo` - A block that defines the details of level two. The level block is documented below.
* `levelThree` - A block that defines the details of level three. The level block is documented below.
* `levelFour` - A block that defines the details of level four. The level block is documented below.
* `levelFive` - A block that defines the details of level five. The level block is documented below.

A level block supports the following attributes:

* `arn` -  The Amazon Resource Name (ARN) of the hierarchy group.
* `id` -  The identifier of the hierarchy group.
* `name` - The name of the hierarchy group.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Amazon Connect User Hierarchy Groups using the `instanceId` and `hierarchyGroupId` separated by a colon (`:`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConnectUserHierarchyGroup } from "./.gen/providers/aws/connect-user-hierarchy-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ConnectUserHierarchyGroup.generateConfigForImport(
      this,
      "example",
      "f1288a1f-6193-445a-b47e-af739b2:c1d4e5f6-1b3c-1b3c-1b3c-c1d4e5f6c1d4e5"
    );
  }
}

```

Using `terraform import`, import Amazon Connect User Hierarchy Groups using the `instanceId` and `hierarchyGroupId` separated by a colon (`:`). For example:

```console
% terraform import aws_connect_user_hierarchy_group.example f1288a1f-6193-445a-b47e-af739b2:c1d4e5f6-1b3c-1b3c-1b3c-c1d4e5f6c1d4e5
```

<!-- cache-key: cdktf-0.20.8 input-88263c0c4b64231cf0ae6b158e3728e1a26added6f1a3b85f4dc8db7b158609a -->