---
subcategory: "ELB Classic"
layout: "aws"
page_title: "AWS: aws_app_cookie_stickiness_policy"
description: |-
  Provides an application cookie stickiness policy, which allows an ELB to wed its stickiness cookie to a cookie generated by your application.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_app_cookie_stickiness_policy

Provides an application cookie stickiness policy, which allows an ELB to wed its sticky cookie's expiration to a cookie generated by your application.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppCookieStickinessPolicy } from "./.gen/providers/aws/app-cookie-stickiness-policy";
import { Elb } from "./.gen/providers/aws/elb";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const lb = new Elb(this, "lb", {
      availabilityZones: ["us-east-1a"],
      listener: [
        {
          instancePort: 8000,
          instanceProtocol: "http",
          lbPort: 80,
          lbProtocol: "http",
        },
      ],
      name: "test-lb",
    });
    new AppCookieStickinessPolicy(this, "foo", {
      cookieName: "MyAppCookie",
      lbPort: 80,
      loadBalancer: lb.name,
      name: "foo_policy",
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `name` - (Required) Name of the stickiness policy.
* `loadBalancer` - (Required) Name of load balancer to which the policy
  should be attached.
* `lbPort` - (Required) Load balancer port to which the policy
  should be applied. This must be an active listener on the load
balancer.
* `cookieName` - (Required) Application cookie whose lifetime the ELB's cookie should follow.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - ID of the policy.
* `name` - Name of the stickiness policy.
* `loadBalancer` - Name of load balancer to which the policy is attached.
* `lbPort` - Load balancer port to which the policy is applied.
* `cookieName` - Application cookie whose lifetime the ELB's cookie should follow.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import application cookie stickiness policies using the ELB name, port, and policy name separated by colons (`:`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppCookieStickinessPolicy } from "./.gen/providers/aws/app-cookie-stickiness-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    AppCookieStickinessPolicy.generateConfigForImport(
      this,
      "example",
      "my-elb:80:my-policy"
    );
  }
}

```

Using `terraform import`, import application cookie stickiness policies using the ELB name, port, and policy name separated by colons (`:`). For example:

```console
% terraform import aws_app_cookie_stickiness_policy.example my-elb:80:my-policy
```

<!-- cache-key: cdktf-0.20.8 input-84ab72b5859ee3412565dbcd8041cc761d8339701d18ffc0b97224a879adfff6 -->