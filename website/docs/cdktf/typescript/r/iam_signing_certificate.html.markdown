---
subcategory: "IAM (Identity & Access Management)"
layout: "aws"
page_title: "AWS: aws_iam_signing_certificate"
description: |-
  Provides an IAM Signing Certificate
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_iam_signing_certificate

Provides an IAM Signing Certificate resource to upload Signing Certificates.

~> **Note:** All arguments including the certificate body will be stored in the raw state as plain-text.
[Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).

## Example Usage

**Using certs on file:**

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamSigningCertificate } from "./.gen/providers/aws/iam-signing-certificate";
interface MyConfig {
  userName: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new IamSigningCertificate(this, "test_cert", {
      certificateBody: Token.asString(Fn.file("self-ca-cert.pem")),
      username: "some_test_cert",
      userName: config.userName,
    });
  }
}

```

**Example with cert in-line:**

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamSigningCertificate } from "./.gen/providers/aws/iam-signing-certificate";
interface MyConfig {
  userName: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new IamSigningCertificate(this, "test_cert_alt", {
      certificateBody:
        "-----BEGIN CERTIFICATE-----\n[......] # cert contents\n-----END CERTIFICATE-----\n\n",
      username: "some_test_cert",
      userName: config.userName,
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `certificateBody` – (Required) The contents of the signing certificate in PEM-encoded format.
* `status` – (Optional)  The status you want to assign to the certificate. `Active` means that the certificate can be used for programmatic calls to Amazon Web Services `Inactive` means that the certificate cannot be used.
* `userName` – (Required) The name of the user the signing certificate is for.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `certificateId` - The ID for the signing certificate.
* `id` - The `certificate_id:user_name`

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import IAM Signing Certificates using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamSigningCertificate } from "./.gen/providers/aws/iam-signing-certificate";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    IamSigningCertificate.generateConfigForImport(
      this,
      "certificate",
      "IDIDIDIDID:user-name"
    );
  }
}

```

Using `terraform import`, import IAM Signing Certificates using the `id`. For example:

```console
% terraform import aws_iam_signing_certificate.certificate IDIDIDIDID:user-name
```

<!-- cache-key: cdktf-0.20.8 input-5dd149e4ec34690d2d3d0ad3b6a7ed2784cb04247b33fd1ab71da3b19a32535c -->