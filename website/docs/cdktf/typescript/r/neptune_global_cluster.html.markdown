---
subcategory: "Neptune"
layout: "aws"
page_title: "AWS: aws_neptune_global_cluster"
description: |-
  Provides an Neptune Global Cluster Resource
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_neptune_global_cluster

Manages a Neptune Global Cluster. A global cluster consists of one primary region and up to five read-only secondary regions. You issue write operations directly to the primary cluster in the primary region and Amazon Neptune automatically replicates the data to the secondary regions using dedicated infrastructure.

More information about Neptune Global Clusters can be found in the [Neptune User Guide](https://docs.aws.amazon.com/neptune/latest/userguide/neptune-global-database.html).

## Example Usage

### New Neptune Global Cluster

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NeptuneCluster } from "./.gen/providers/aws/neptune-cluster";
import { NeptuneClusterInstance } from "./.gen/providers/aws/neptune-cluster-instance";
import { NeptuneGlobalCluster } from "./.gen/providers/aws/neptune-global-cluster";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const primary = new AwsProvider(this, "aws", {
      alias: "primary",
      region: "us-east-2",
    });
    const secondary = new AwsProvider(this, "aws_1", {
      alias: "secondary",
      region: "us-east-1",
    });
    const example = new NeptuneGlobalCluster(this, "example", {
      engine: "neptune",
      engineVersion: "1.2.0.0",
      globalClusterIdentifier: "global-test",
    });
    const awsNeptuneClusterPrimary = new NeptuneCluster(this, "primary", {
      clusterIdentifier: "test-primary-cluster",
      engine: example.engine,
      engineVersion: example.engineVersion,
      globalClusterIdentifier: example.id,
      neptuneSubnetGroupName: "default",
      provider: primary,
    });
    const awsNeptuneClusterSecondary = new NeptuneCluster(this, "secondary", {
      clusterIdentifier: "test-secondary-cluster",
      engine: example.engine,
      engineVersion: example.engineVersion,
      globalClusterIdentifier: example.id,
      neptuneSubnetGroupName: "default",
      provider: secondary,
    });
    const awsNeptuneClusterInstancePrimary = new NeptuneClusterInstance(
      this,
      "primary_5",
      {
        clusterIdentifier: Token.asString(awsNeptuneClusterPrimary.id),
        engine: example.engine,
        engineVersion: example.engineVersion,
        identifier: "test-primary-cluster-instance",
        instanceClass: "db.r5.large",
        neptuneSubnetGroupName: "default",
        provider: primary,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNeptuneClusterInstancePrimary.overrideLogicalId("primary");
    const awsNeptuneClusterInstanceSecondary = new NeptuneClusterInstance(
      this,
      "secondary_6",
      {
        clusterIdentifier: Token.asString(awsNeptuneClusterSecondary.id),
        dependsOn: [awsNeptuneClusterInstancePrimary],
        engine: example.engine,
        engineVersion: example.engineVersion,
        identifier: "test-secondary-cluster-instance",
        instanceClass: "db.r5.large",
        neptuneSubnetGroupName: "default",
        provider: secondary,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNeptuneClusterInstanceSecondary.overrideLogicalId("secondary");
  }
}

```

### New Global Cluster From Existing DB Cluster

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NeptuneCluster } from "./.gen/providers/aws/neptune-cluster";
import { NeptuneGlobalCluster } from "./.gen/providers/aws/neptune-global-cluster";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new NeptuneCluster(this, "example", {
      lifecycle: {
        ignoreChanges: [globalClusterIdentifier],
      },
    });
    const awsNeptuneGlobalClusterExample = new NeptuneGlobalCluster(
      this,
      "example_1",
      {
        globalClusterIdentifier: "example",
        sourceDbClusterIdentifier: example.arn,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNeptuneGlobalClusterExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `globalClusterIdentifier` - (Required, Forces new resources) The global cluster identifier.
* `deletionProtection` - (Optional) If the Global Cluster should have deletion protection enabled. The database can't be deleted when this value is set to `true`. The default is `false`.
* `engine` - (Optional, Forces new resources) Name of the database engine to be used for this DB cluster. Terraform will only perform drift detection if a configuration value is provided. Current Valid values: `neptune`. Conflicts with `sourceDbClusterIdentifier`.
* `engineVersion` - (Optional) Engine version of the global database. Upgrading the engine version will result in all cluster members being immediately updated and will.
    * **NOTE:** Upgrading major versions is not supported.
* `sourceDbClusterIdentifier` - (Optional) Amazon Resource Name (ARN) to use as the primary DB Cluster of the Global Cluster on creation. Terraform cannot perform drift detection of this value.
* `storageEncrypted` - (Optional, Forces new resources) Specifies whether the DB cluster is encrypted. The default is `false` unless `sourceDbClusterIdentifier` is specified and encrypted. Terraform will only perform drift detection if a configuration value is provided.

### Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/docs/configuration/blocks/resources/syntax.html#operation-timeouts) for certain actions:

* `create` - (Defaults to 5 mins) Used when creating the Global Cluster
* `update` - (Defaults to 120 mins) Used when updating the Global Cluster members (time is per member)
* `delete` - (Defaults to 5 mins) Used when deleting the Global Cluster members (time is per member)

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Global Cluster Amazon Resource Name (ARN)
* `globalClusterMembers` - Set of objects containing Global Cluster members.
    * `db_cluster_arn` - Amazon Resource Name (ARN) of member DB Cluster.
    * `is_writer` - Whether the member is the primary DB Cluster.
* `globalClusterResourceId` - AWS Region-unique, immutable identifier for the global database cluster. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB cluster is accessed.
* `id` - Neptune Global Cluster.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_neptune_global_cluster` using the Global Cluster identifier. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NeptuneGlobalCluster } from "./.gen/providers/aws/neptune-global-cluster";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    NeptuneGlobalCluster.generateConfigForImport(this, "example", "example");
  }
}

```

Using `terraform import`, import `aws_neptune_global_cluster` using the Global Cluster identifier. For example:

```console
% terraform import aws_neptune_global_cluster.example example
```

Certain resource arguments, like `sourceDbClusterIdentifier`, do not have an API method for reading the information after creation. If the argument is set in the Terraform configuration on an imported resource, Terraform will always show a difference. To workaround this behavior, either omit the argument from the Terraform configuration or use [`ignore_changes`](https://www.terraform.io/docs/configuration/meta-arguments/lifecycle.html#ignore_changes) to hide the difference. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NeptuneGlobalCluster } from "./.gen/providers/aws/neptune-global-cluster";
interface MyConfig {
  globalClusterIdentifier: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new NeptuneGlobalCluster(this, "example", {
      lifecycle: {
        ignoreChanges: [sourceDbClusterIdentifier],
      },
      globalClusterIdentifier: config.globalClusterIdentifier,
    });
  }
}

```

<!-- cache-key: cdktf-0.20.8 input-8950ed9539f8cfa73cf920a0d999502a62c1a0cc78e2fc0e44cf362c351b01bc -->