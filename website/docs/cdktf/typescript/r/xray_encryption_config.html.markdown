---
subcategory: "X-Ray"
layout: "aws"
page_title: "AWS: aws_xray_encryption_config"
description: |-
    Creates and manages an AWS XRay Encryption Config.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_xray_encryption_config

Creates and manages an AWS XRay Encryption Config.

~> **NOTE:** Removing this resource from Terraform has no effect to the encryption configuration within X-Ray.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { XrayEncryptionConfig } from "./.gen/providers/aws/xray-encryption-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new XrayEncryptionConfig(this, "example", {
      type: "NONE",
    });
  }
}

```

## Example Usage with KMS Key

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { KmsKey } from "./.gen/providers/aws/kms-key";
import { XrayEncryptionConfig } from "./.gen/providers/aws/xray-encryption-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const current = new DataAwsCallerIdentity(this, "current", {});
    const example = new DataAwsIamPolicyDocument(this, "example", {
      statement: [
        {
          actions: ["kms:*"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["arn:aws:iam::${" + current.accountId + "}:root"],
              type: "AWS",
            },
          ],
          resources: ["*"],
          sid: "Enable IAM User Permissions",
        },
      ],
    });
    const awsKmsKeyExample = new KmsKey(this, "example_2", {
      deletionWindowInDays: 7,
      description: "Some Key",
      policy: Token.asString(example.json),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsKmsKeyExample.overrideLogicalId("example");
    const awsXrayEncryptionConfigExample = new XrayEncryptionConfig(
      this,
      "example_3",
      {
        keyId: Token.asString(awsKmsKeyExample.arn),
        type: "KMS",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsXrayEncryptionConfigExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

* `type` - (Required) The type of encryption. Set to `KMS` to use your own key for encryption. Set to `NONE` for default encryption.
* `keyId` - (Optional) An AWS KMS customer master key (CMK) ARN.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Region name.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import XRay Encryption Config using the region name. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { XrayEncryptionConfig } from "./.gen/providers/aws/xray-encryption-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    XrayEncryptionConfig.generateConfigForImport(this, "example", "us-west-2");
  }
}

```

Using `terraform import`, import XRay Encryption Config using the region name. For example:

```console
% terraform import aws_xray_encryption_config.example us-west-2
```

<!-- cache-key: cdktf-0.20.8 input-55d226205a72425f4aa1a56a07d4e3a41a8d86c6c3b3f83bf024e6de8c19b0ed -->