---
subcategory: "Device Farm"
layout: "aws"
page_title: "AWS: aws_devicefarm_upload"
description: |-
  Provides a Devicefarm upload
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_devicefarm_upload

Provides a resource to manage AWS Device Farm Uploads.

~> **NOTE:** AWS currently has limited regional support for Device Farm (e.g., `us-west-2`). See [AWS Device Farm endpoints and quotas](https://docs.aws.amazon.com/general/latest/gr/devicefarm.html) for information on supported regions.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DevicefarmProject } from "./.gen/providers/aws/devicefarm-project";
import { DevicefarmUpload } from "./.gen/providers/aws/devicefarm-upload";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DevicefarmProject(this, "example", {
      name: "example",
    });
    const awsDevicefarmUploadExample = new DevicefarmUpload(this, "example_1", {
      name: "example",
      projectArn: example.arn,
      type: "APPIUM_JAVA_TESTNG_TEST_SPEC",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDevicefarmUploadExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

* `contentType` - (Optional) The upload's content type (for example, application/octet-stream).
* `name` - (Required) The upload's file name. The name should not contain any forward slashes (/). If you are uploading an iOS app, the file name must end with the .ipa extension. If you are uploading an Android app, the file name must end with the .apk extension. For all others, the file name must end with the .zip file extension.
* `projectArn` - (Required) The ARN of the project for the upload.
* `type` - (Required) The upload's upload type. See [AWS Docs](https://docs.aws.amazon.com/devicefarm/latest/APIReference/API_CreateUpload.html#API_CreateUpload_RequestSyntax) for valid list of values.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The Amazon Resource Name of this upload.
* `url` - The presigned Amazon S3 URL that was used to store a file using a PUT request.
* `category` - The upload's category.
* `metadata` - The upload's metadata. For example, for Android, this contains information that is parsed from the manifest and is displayed in the AWS Device Farm console after the associated app is uploaded.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import DeviceFarm Uploads using their ARN. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DevicefarmUpload } from "./.gen/providers/aws/devicefarm-upload";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DevicefarmUpload.generateConfigForImport(
      this,
      "example",
      "arn:aws:devicefarm:us-west-2:123456789012:upload:4fa784c7-ccb4-4dbf-ba4f-02198320daa1"
    );
  }
}

```

Using `terraform import`, import DeviceFarm Uploads using their ARN. For example:

```console
% terraform import aws_devicefarm_upload.example arn:aws:devicefarm:us-west-2:123456789012:upload:4fa784c7-ccb4-4dbf-ba4f-02198320daa1
```

<!-- cache-key: cdktf-0.20.8 input-157c6a3834c0d5903b438d5bff03780c3535132f31f3df5b70aed301ac010dfd -->