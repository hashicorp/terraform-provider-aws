---
subcategory: "IAM (Identity & Access Management)"
layout: "aws"
page_title: "AWS: aws_iam_user_group_membership"
description: |-
  Provides a resource for adding an IAM User to IAM Groups without conflicting
  with itself.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_iam_user_group_membership

Provides a resource for adding an [IAM User][2] to [IAM Groups][1]. This
resource can be used multiple times with the same user for non-overlapping
groups.

To exclusively manage the users in a group, see the
[`aws_iam_group_membership` resource][3].

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamGroup } from "./.gen/providers/aws/iam-group";
import { IamUser } from "./.gen/providers/aws/iam-user";
import { IamUserGroupMembership } from "./.gen/providers/aws/iam-user-group-membership";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const group1 = new IamGroup(this, "group1", {
      name: "group1",
    });
    const group2 = new IamGroup(this, "group2", {
      name: "group2",
    });
    const group3 = new IamGroup(this, "group3", {
      name: "group3",
    });
    const user1 = new IamUser(this, "user1", {
      name: "user1",
    });
    new IamUserGroupMembership(this, "example1", {
      groups: [group1.name, group2.name],
      user: user1.name,
    });
    new IamUserGroupMembership(this, "example2", {
      groups: [group3.name],
      user: user1.name,
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `user` - (Required) The name of the [IAM User][2] to add to groups
* `groups` - (Required) A list of [IAM Groups][1] to add the user to

## Attribute Reference

This resource exports no additional attributes.

[1]: /docs/providers/aws/r/iam_group.html
[2]: /docs/providers/aws/r/iam_user.html
[3]: /docs/providers/aws/r/iam_group_membership.html

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import IAM user group membership using the user name and group names separated by `/`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamUserGroupMembership } from "./.gen/providers/aws/iam-user-group-membership";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    IamUserGroupMembership.generateConfigForImport(
      this,
      "example1",
      "user1/group1/group2"
    );
  }
}

```

Using `terraform import`, import IAM user group membership using the user name and group names separated by `/`. For example:

```console
% terraform import aws_iam_user_group_membership.example1 user1/group1/group2
```

<!-- cache-key: cdktf-0.20.8 input-14dd4765176954105a47943f6e53617581e2a060a1824a5c74af382ab83e177b -->