---
subcategory: "Managed Streaming for Kafka"
layout: "aws"
page_title: "AWS: aws_msk_serverless_cluster"
description: |-
  Terraform resource for managing an Amazon MSK Serverless cluster.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_msk_serverless_cluster

Manages an Amazon MSK Serverless cluster.

-> **Note:** To manage a _provisioned_ Amazon MSK cluster, use the [`aws_msk_cluster`](/docs/providers/aws/r/msk_cluster.html) resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { MskServerlessCluster } from "./.gen/providers/aws/msk-serverless-cluster";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new MskServerlessCluster(this, "example", {
      clientAuthentication: {
        sasl: {
          iam: {
            enabled: true,
          },
        },
      },
      clusterName: "Example",
      vpcConfig: [
        {
          securityGroupIds: [Token.asString(awsSecurityGroupExample.id)],
          subnetIds: Token.asList(
            Fn.lookupNested(awsSubnetExample, ["*", "id"])
          ),
        },
      ],
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `clientAuthentication` - (Required) Specifies client authentication information for the serverless cluster. See below.
* `clusterName` - (Required) The name of the serverless cluster.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `vpcConfig` - (Required) VPC configuration information. See below.

### client_authentication Argument Reference

* `sasl` - (Required) Details for client authentication using SASL. See below.

### sasl Argument Reference

* `iam` - (Required) Details for client authentication using IAM. See below.

### iam Argument Reference

* `enabled` - (Required) Whether SASL/IAM authentication is enabled or not.

### vpc_config Argument Reference

* `securityGroupIds` - (Optional) Specifies up to five security groups that control inbound and outbound traffic for the serverless cluster.
* `subnetIds` - (Required) A list of subnets in at least two different Availability Zones that host your client applications.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The ARN of the serverless cluster.
* `clusterUuid` - UUID of the serverless cluster, for use in IAM policies.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `120m`)
* `delete` - (Default `120m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import MSK serverless clusters using the cluster `arn`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { MskServerlessCluster } from "./.gen/providers/aws/msk-serverless-cluster";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    MskServerlessCluster.generateConfigForImport(
      this,
      "example",
      "arn:aws:kafka:us-west-2:123456789012:cluster/example/279c0212-d057-4dba-9aa9-1c4e5a25bfc7-3"
    );
  }
}

```

Using `terraform import`, import MSK serverless clusters using the cluster `arn`. For example:

```console
% terraform import aws_msk_serverless_cluster.example arn:aws:kafka:us-west-2:123456789012:cluster/example/279c0212-d057-4dba-9aa9-1c4e5a25bfc7-3
```

<!-- cache-key: cdktf-0.20.8 input-e874f0cb80a0744435c987dbba0dd6d2b31f5d0aeda927db3722774f9b044561 -->