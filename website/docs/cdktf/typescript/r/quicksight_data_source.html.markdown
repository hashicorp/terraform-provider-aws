---
subcategory: "QuickSight"
layout: "aws"
page_title: "AWS: aws_quicksight_data_source"
description: |-
  Manages a Resource QuickSight Data Source.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_quicksight_data_source

Resource for managing QuickSight Data Source

## Example Usage

### S3 Data Source

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { QuicksightDataSource } from "./.gen/providers/aws/quicksight-data-source";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new QuicksightDataSource(this, "default", {
      dataSourceId: "example-id",
      name: "My Cool Data in S3",
      parameters: {
        s3: {
          manifestFileLocation: {
            bucket: "my-bucket",
            key: "path/to/manifest.json",
          },
        },
      },
      type: "S3",
    });
  }
}

```

### S3 Data Source with IAM Role ARN

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { DataAwsPartition } from "./.gen/providers/aws/data-aws-partition";
import { DataAwsRegion } from "./.gen/providers/aws/data-aws-region";
import { IamPolicy } from "./.gen/providers/aws/iam-policy";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicyAttachment } from "./.gen/providers/aws/iam-role-policy-attachment";
import { QuicksightDataSource } from "./.gen/providers/aws/quicksight-data-source";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3Object } from "./.gen/providers/aws/s3-object";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new S3Bucket(this, "example", {});
    const current = new DataAwsCallerIdentity(this, "current", {});
    const dataAwsPartitionCurrent = new DataAwsPartition(this, "current_2", {});
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsPartitionCurrent.overrideLogicalId("current");
    const dataAwsRegionCurrent = new DataAwsRegion(this, "current_3", {});
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsRegionCurrent.overrideLogicalId("current");
    const awsIamRoleExample = new IamRole(this, "example_4", {
      assumeRolePolicy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: "sts:AssumeRole",
              Condition: {
                StringEquals: {
                  "aws:SourceAccount": current.accountId,
                },
              },
              Effect: "Allow",
              Principal: {
                Service: "quicksight.amazonaws.com",
              },
            },
          ],
          Version: "2012-10-17",
        })
      ),
      name: "example",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRoleExample.overrideLogicalId("example");
    const awsS3ObjectExample = new S3Object(this, "example_5", {
      bucket: example.bucket,
      content: Token.asString(
        Fn.jsonencode({
          fileLocations: [
            {
              URIPrefixes: [
                "https://${" +
                  example.id +
                  "}.s3-${" +
                  dataAwsRegionCurrent.name +
                  "}.${" +
                  dataAwsPartitionCurrent.dnsSuffix +
                  "}",
              ],
            },
          ],
          globalUploadSettings: {
            containsHeader: true,
            delimiter: ",",
            format: "CSV",
            textqualifier: '\\"',
          },
        })
      ),
      key: "manifest.json",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3ObjectExample.overrideLogicalId("example");
    const awsIamPolicyExample = new IamPolicy(this, "example_6", {
      description: "Policy to allow QuickSight access to S3 bucket",
      name: "example",
      policy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: ["s3:GetObject"],
              Effect: "Allow",
              Resource:
                "${" + example.arn + "}/${" + awsS3ObjectExample.key + "}",
            },
            {
              Action: ["s3:ListBucket"],
              Effect: "Allow",
              Resource: example.arn,
            },
          ],
          Version: "2012-10-17",
        })
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamPolicyExample.overrideLogicalId("example");
    const awsIamRolePolicyAttachmentExample = new IamRolePolicyAttachment(
      this,
      "example_7",
      {
        policyArn: Token.asString(awsIamPolicyExample.arn),
        role: Token.asString(awsIamRoleExample.name),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyAttachmentExample.overrideLogicalId("example");
    const awsQuicksightDataSourceExample = new QuicksightDataSource(
      this,
      "example_8",
      {
        dataSourceId: "example-id",
        name: "manifest in S3",
        parameters: {
          s3: {
            manifestFileLocation: {
              bucket: example.arn,
              key: Token.asString(awsS3ObjectExample.key),
            },
            roleArn: Token.asString(awsIamRoleExample.arn),
          },
        },
        type: "S3",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsQuicksightDataSourceExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `dataSourceId` - (Required, Forces new resource) An identifier for the data source.
* `name` - (Required) A name for the data source, maximum of 128 characters.
* `parameters` - (Required) The [parameters](#parameters-argument-reference) used to connect to this data source (exactly one).
* `type` - (Required) The type of the data source. See the [AWS Documentation](https://docs.aws.amazon.com/quicksight/latest/APIReference/API_CreateDataSource.html#QS-CreateDataSource-request-Type) for the complete list of valid values.

The following arguments are optional:

* `awsAccountId` - (Optional, Forces new resource) The ID for the AWS account that the data source is in. Currently, you use the ID for the AWS account that contains your Amazon QuickSight account.
* `credentials` - (Optional) The credentials Amazon QuickSight uses to connect to your underlying source. See [Credentials](#credentials-argument-reference) below for more details.
* `permission` - (Optional) A set of resource permissions on the data source. Maximum of 64 items. See [Permission](#permission-argument-reference) below for more details.
* `sslProperties` - (Optional) Secure Socket Layer (SSL) properties that apply when Amazon QuickSight connects to your underlying source. See [SSL Properties](#ssl_properties-argument-reference) below for more details.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `vpcConnectionProperties`- (Optional) Use this parameter only when you want Amazon QuickSight to use a VPC connection when connecting to your underlying source. See [VPC Connection Properties](#vpc_connection_properties-argument-reference) below for more details.

### credentials Argument Reference

* `copySourceArn` (Optional, Conflicts with `credentialPair` and `secretArn`) - The Amazon Resource Name (ARN) of a data source that has the credential pair that you want to use.
When the value is not null, the `credentialPair` from the data source in the ARN is used.
* `credentialPair` (Optional, Conflicts with `copySourceArn` and `secretArn`) - Credential pair. See [Credential Pair](#credential_pair-argument-reference) below for more details.
* `secretArn` (Optional, Conflicts with `copySourceArn` and `credentialPair`) - The Amazon Resource Name (ARN) of the secret associated with the data source in Amazon Secrets Manager.

### credential_pair Argument Reference

* `password` - (Required) Password, maximum length of 1024 characters.
* `username` - (Required) User name, maximum length of 64 characters.

### parameters Argument Reference

To specify data source connection parameters, exactly one of the following sub-objects must be provided.

* `amazonElasticsearch` - (Optional) [Parameters](#amazon_elasticsearch-argument-reference) for connecting to Amazon Elasticsearch.
* `athena` - (Optional) [Parameters](#athena-argument-reference) for connecting to Athena.
* `aurora` - (Optional) [Parameters](#aurora-argument-reference) for connecting to Aurora MySQL.
* `auroraPostgresql` - (Optional) [Parameters](#aurora_postgresql-argument-reference) for connecting to Aurora Postgresql.
* `awsIotAnalytics` - (Optional) [Parameters](#aws_iot_analytics-argument-reference) for connecting to AWS IOT Analytics.
* `databricks` - (Optional) [Parameters](#databricks-argument-reference) for connecting to Databricks.
* `jira` - (Optional) [Parameters](#jira-fargument-reference) for connecting to Jira.
* `mariaDb` - (Optional) [Parameters](#maria_db-argument-reference) for connecting to MariaDB.
* `mysql` - (Optional) [Parameters](#mysql-argument-reference) for connecting to MySQL.
* `oracle` - (Optional) [Parameters](#oracle-argument-reference) for connecting to Oracle.
* `postgresql` - (Optional) [Parameters](#postgresql-argument-reference) for connecting to Postgresql.
* `presto` - (Optional) [Parameters](#presto-argument-reference) for connecting to Presto.
* `rds` - (Optional) [Parameters](#rds-argument-reference) for connecting to RDS.
* `redshift` - (Optional) [Parameters](#redshift-argument-reference) for connecting to Redshift.
* `s3` - (Optional) [Parameters](#s3-argument-reference) for connecting to S3.
* `serviceNow` - (Optional) [Parameters](#service_now-argument-reference) for connecting to ServiceNow.
* `snowflake` - (Optional) [Parameters](#snowflake-argument-reference) for connecting to Snowflake.
* `spark` - (Optional) [Parameters](#spark-argument-reference) for connecting to Spark.
* `sqlServer` - (Optional) [Parameters](#sql_server-argument-reference) for connecting to SQL Server.
* `teradata` - (Optional) [Parameters](#teradata-argument-reference) for connecting to Teradata.
* `twitter` - (Optional) [Parameters](#twitter-argument-reference) for connecting to Twitter.

### permission Argument Reference

* `actions` - (Required) Set of IAM actions to grant or revoke permissions on. Max of 16 items.
* `principal` - (Required) The Amazon Resource Name (ARN) of the principal.

### ssl_properties Argument Reference

* `disableSsl` - (Required) A Boolean option to control whether SSL should be disabled.

### vpc_connection_properties Argument Reference

* `vpcConnectionArn` - (Required) The Amazon Resource Name (ARN) for the VPC connection.

### amazon_elasticsearch Argument Reference

* `domain` - (Required) The OpenSearch domain.

### athena Argument Reference

* `workGroup` - (Optional) The work-group to which to connect.

### aurora Argument Reference

* `database` - (Required) The database to which to connect.
* `host` - (Required) The host to which to connect.
* `port` - (Required) The port to which to connect.

### aurora_postgresql Argument Reference

* `database` - (Required) The database to which to connect.
* `host` - (Required) The host to which to connect.
* `port` - (Required) The port to which to connect.

### aws_iot_analytics Argument Reference

* `dataSetName` - (Required) The name of the data set to which to connect.

### databricks Argument Reference

* `host` - (Required) The host name of the Databricks data source.
* `port` - (Required) The port for the Databricks data source.
* `sqlEndpointPath` - (Required) The HTTP path of the Databricks data source.

### jira fArgument Reference

* `siteBaseUrl` - (Required) The base URL of the Jira instance's site to which to connect.

### maria_db Argument Reference

* `database` - (Required) The database to which to connect.
* `host` - (Required) The host to which to connect.
* `port` - (Required) The port to which to connect.

### mysql Argument Reference

* `database` - (Required) The database to which to connect.
* `host` - (Required) The host to which to connect.
* `port` - (Required) The port to which to connect.

### oracle Argument Reference

* `database` - (Required) The database to which to connect.
* `host` - (Required) The host to which to connect.
* `port` - (Required) The port to which to connect.

### postgresql Argument Reference

* `database` - (Required) The database to which to connect.
* `host` - (Required) The host to which to connect.
* `port` - (Required) The port to which to connect.

### presto Argument Reference

* `catalog` - (Required) The catalog to which to connect.
* `host` - (Required) The host to which to connect.
* `port` - (Required) The port to which to connect.

### rds Argument Reference

* `database` - (Required) The database to which to connect.
* `instanceId` - (Optional) The instance ID to which to connect.

### redshift Argument Reference

* `clusterId` - (Optional, Required if `host` and `port` are not provided) The ID of the cluster to which to connect.
* `database` - (Required) The database to which to connect.
* `host` - (Optional, Required if `clusterId` is not provided) The host to which to connect.
* `port` - (Optional, Required if `clusterId` is not provided) The port to which to connect.

### s3 Argument Reference

* `manifestFileLocation` - (Required) An [object containing the S3 location](#manifest_file_location-argument-reference) of the S3 manifest file.
* `roleArn` - (Optional) Use the `roleArn` to override an account-wide role for a specific S3 data source. For example, say an account administrator has turned off all S3 access with an account-wide role. The administrator can then use `roleArn` to bypass the account-wide role and allow S3 access for the single S3 data source that is specified in the structure, even if the account-wide role forbidding S3 access is still active.

### manifest_file_location Argument Reference

* `bucket` - (Required) The name of the bucket that contains the manifest file.
* `key` - (Required) The key of the manifest file within the bucket.

### service_now Argument Reference

* `siteBaseUrl` - (Required) The base URL of the Jira instance's site to which to connect.

### snowflake Argument Reference

* `database` - (Required) The database to which to connect.
* `host` - (Required) The host to which to connect.
* `warehouse` - (Required) The warehouse to which to connect.

### spark Argument Reference

* `host` - (Required) The host to which to connect.
* `port` - (Required) The warehouse to which to connect.

### sql_server Argument Reference

* `database` - (Required) The database to which to connect.
* `host` - (Required) The host to which to connect.
* `port` - (Required) The warehouse to which to connect.

### teradata Argument Reference

* `database` - (Required) The database to which to connect.
* `host` - (Required) The host to which to connect.
* `port` - (Required) The warehouse to which to connect.

#### twitter Argument Reference

* `maxRows` - (Required) The maximum number of rows to query.
* `query` - (Required) The Twitter query to retrieve the data.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of the data source
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import a QuickSight data source using the AWS account ID, and data source ID separated by a slash (`/`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { QuicksightDataSource } from "./.gen/providers/aws/quicksight-data-source";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    QuicksightDataSource.generateConfigForImport(
      this,
      "example",
      "123456789123/my-data-source-id"
    );
  }
}

```

Using `terraform import`, import a QuickSight data source using the AWS account ID, and data source ID separated by a slash (`/`). For example:

```console
% terraform import aws_quicksight_data_source.example 123456789123/my-data-source-id
```

<!-- cache-key: cdktf-0.20.8 input-88923fe0ac64cf85368d19b7fc917e7f16dc7f40222dc56ffc273d3204bb1fb5 -->