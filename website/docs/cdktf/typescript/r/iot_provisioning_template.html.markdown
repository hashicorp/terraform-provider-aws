---
subcategory: "IoT Core"
layout: "aws"
page_title: "AWS: aws_iot_provisioning_template"
description: |-
    Manages an IoT fleet provisioning template.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_iot_provisioning_template

Manages an IoT fleet provisioning template. For more info, see the AWS documentation on [fleet provisioning](https://docs.aws.amazon.com/iot/latest/developerguide/provision-wo-cert.html).

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicyAttachment } from "./.gen/providers/aws/iam-role-policy-attachment";
import { IotPolicy } from "./.gen/providers/aws/iot-policy";
import { IotProvisioningTemplate } from "./.gen/providers/aws/iot-provisioning-template";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const devicePolicy = new DataAwsIamPolicyDocument(this, "device_policy", {
      statement: [
        {
          actions: ["iot:Subscribe"],
          resources: ["*"],
        },
      ],
    });
    const iotAssumeRolePolicy = new DataAwsIamPolicyDocument(
      this,
      "iot_assume_role_policy",
      {
        statement: [
          {
            actions: ["sts:AssumeRole"],
            principals: [
              {
                identifiers: ["iot.amazonaws.com"],
                type: "Service",
              },
            ],
          },
        ],
      }
    );
    const iotFleetProvisioning = new IamRole(this, "iot_fleet_provisioning", {
      assumeRolePolicy: Token.asString(iotAssumeRolePolicy.json),
      name: "IoTProvisioningServiceRole",
      path: "/service-role/",
    });
    new IamRolePolicyAttachment(this, "iot_fleet_provisioning_registration", {
      policyArn:
        "arn:aws:iam::aws:policy/service-role/AWSIoTThingsRegistration",
      role: iotFleetProvisioning.name,
    });
    const awsIotPolicyDevicePolicy = new IotPolicy(this, "device_policy_4", {
      name: "DevicePolicy",
      policy: Token.asString(devicePolicy.json),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIotPolicyDevicePolicy.overrideLogicalId("device_policy");
    new IotProvisioningTemplate(this, "fleet", {
      description: "My provisioning template",
      enabled: true,
      name: "FleetTemplate",
      provisioningRoleArn: iotFleetProvisioning.arn,
      templateBody: Token.asString(
        Fn.jsonencode({
          Parameters: {
            SerialNumber: {
              Type: "String",
            },
          },
          Resources: {
            certificate: {
              Properties: {
                CertificateId: {
                  Ref: "AWS::IoT::Certificate::Id",
                },
                Status: "Active",
              },
              Type: "AWS::IoT::Certificate",
            },
            policy: {
              Properties: {
                PolicyName: awsIotPolicyDevicePolicy.name,
              },
              Type: "AWS::IoT::Policy",
            },
          },
        })
      ),
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The name of the fleet provisioning template.
* `description` - (Optional) The description of the fleet provisioning template.
* `enabled` - (Optional) True to enable the fleet provisioning template, otherwise false.
* `preProvisioningHook` - (Optional) Creates a pre-provisioning hook template. Details below.
* `provisioningRoleArn` - (Required) The role ARN for the role associated with the fleet provisioning template. This IoT role grants permission to provision a device.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `templateBody` - (Required) The JSON formatted contents of the fleet provisioning template.
* `type` - (Optional) The type you define in a provisioning template.

### pre_provisioning_hook

The `preProvisioningHook` configuration block supports the following:

* `payloadVersion` - (Optional) The version of the payload that was sent to the target function. The only valid (and the default) payload version is `"2020-04-01"`.
* `targetArn` - (Optional) The ARN of the target function.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The ARN that identifies the provisioning template.
* `defaultVersionId` - The default version of the fleet provisioning template.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import IoT fleet provisioning templates using the `name`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IotProvisioningTemplate } from "./.gen/providers/aws/iot-provisioning-template";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    IotProvisioningTemplate.generateConfigForImport(
      this,
      "fleet",
      "FleetProvisioningTemplate"
    );
  }
}

```

Using `terraform import`, import IoT fleet provisioning templates using the `name`. For example:

```console
% terraform import aws_iot_provisioning_template.fleet FleetProvisioningTemplate
```

<!-- cache-key: cdktf-0.20.8 input-0caa47853f782deb3ce1c0adf39db30dd119e9251e987dbe84f960ceed581db6 -->