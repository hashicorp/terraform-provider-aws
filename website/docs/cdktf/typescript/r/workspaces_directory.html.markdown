---
subcategory: "WorkSpaces"
layout: "aws"
page_title: "AWS: aws_workspaces_directory"
description: |-
  Provides a WorkSpaces directory in AWS WorkSpaces Service.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_workspaces_directory

Provides a WorkSpaces directory in AWS WorkSpaces Service.

~> **NOTE:** AWS WorkSpaces service requires [`workspaces_DefaultRole`](https://docs.aws.amazon.com/workspaces/latest/adminguide/workspaces-access-control.html#create-default-role) IAM role to operate normally.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { DirectoryServiceDirectory } from "./.gen/providers/aws/directory-service-directory";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicyAttachment } from "./.gen/providers/aws/iam-role-policy-attachment";
import { Subnet } from "./.gen/providers/aws/subnet";
import { Vpc } from "./.gen/providers/aws/vpc";
import { WorkspacesDirectory } from "./.gen/providers/aws/workspaces-directory";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new Vpc(this, "example", {
      cidrBlock: "10.0.0.0/16",
    });
    const workspaces = new DataAwsIamPolicyDocument(this, "workspaces", {
      statement: [
        {
          actions: ["sts:AssumeRole"],
          principals: [
            {
              identifiers: ["workspaces.amazonaws.com"],
              type: "Service",
            },
          ],
        },
      ],
    });
    const workspacesDefault = new IamRole(this, "workspaces_default", {
      assumeRolePolicy: Token.asString(workspaces.json),
      name: "workspaces_DefaultRole",
    });
    const workspacesDefaultSelfServiceAccess = new IamRolePolicyAttachment(
      this,
      "workspaces_default_self_service_access",
      {
        policyArn: "arn:aws:iam::aws:policy/AmazonWorkSpacesSelfServiceAccess",
        role: workspacesDefault.name,
      }
    );
    const workspacesDefaultServiceAccess = new IamRolePolicyAttachment(
      this,
      "workspaces_default_service_access",
      {
        policyArn: "arn:aws:iam::aws:policy/AmazonWorkSpacesServiceAccess",
        role: workspacesDefault.name,
      }
    );
    const exampleA = new Subnet(this, "example_a", {
      availabilityZone: "us-east-1a",
      cidrBlock: "10.0.0.0/24",
      vpcId: example.id,
    });
    const exampleB = new Subnet(this, "example_b", {
      availabilityZone: "us-east-1b",
      cidrBlock: "10.0.1.0/24",
      vpcId: example.id,
    });
    const exampleC = new Subnet(this, "example_c", {
      availabilityZone: "us-east-1c",
      cidrBlock: "10.0.2.0/24",
      vpcId: example.id,
    });
    const exampleD = new Subnet(this, "example_d", {
      availabilityZone: "us-east-1d",
      cidrBlock: "10.0.3.0/24",
      vpcId: example.id,
    });
    const awsDirectoryServiceDirectoryExample = new DirectoryServiceDirectory(
      this,
      "example_9",
      {
        name: "corp.example.com",
        password: "#S1ncerely",
        size: "Small",
        vpcSettings: {
          subnetIds: [exampleA.id, exampleB.id],
          vpcId: example.id,
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDirectoryServiceDirectoryExample.overrideLogicalId("example");
    const awsWorkspacesDirectoryExample = new WorkspacesDirectory(
      this,
      "example_10",
      {
        certificateBasedAuthProperties: {
          certificateAuthorityArn:
            "arn:aws:acm-pca:us-east-1:123456789012:certificate-authority/12345678-1234-1234-1234-123456789012",
          status: "ENABLED",
        },
        dependsOn: [
          workspacesDefaultServiceAccess,
          workspacesDefaultSelfServiceAccess,
        ],
        directoryId: Token.asString(awsDirectoryServiceDirectoryExample.id),
        samlProperties: {
          status: "ENABLED",
          userAccessUrl: "https://sso.example.com/",
        },
        selfServicePermissions: {
          changeComputeType: true,
          increaseVolumeSize: true,
          rebuildWorkspace: true,
          restartWorkspace: true,
          switchRunningMode: true,
        },
        subnetIds: [exampleC.id, exampleD.id],
        tags: {
          Example: Token.asString(true),
        },
        workspaceAccessProperties: {
          deviceTypeAndroid: "ALLOW",
          deviceTypeChromeos: "ALLOW",
          deviceTypeIos: "ALLOW",
          deviceTypeLinux: "DENY",
          deviceTypeOsx: "ALLOW",
          deviceTypeWeb: "DENY",
          deviceTypeWindows: "DENY",
          deviceTypeZeroclient: "DENY",
        },
        workspaceCreationProperties: {
          customSecurityGroupId: Token.asString(awsSecurityGroupExample.id),
          defaultOu: "OU=AWS,DC=Workgroup,DC=Example,DC=com",
          enableInternetAccess: true,
          enableMaintenanceMode: true,
          userEnabledAsLocalAdministrator: true,
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsWorkspacesDirectoryExample.overrideLogicalId("example");
  }
}

```

### WorkSpaces Pools

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { WorkspacesDirectory } from "./.gen/providers/aws/workspaces-directory";
interface MyConfig {
  directoryId: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new WorkspacesDirectory(this, "example", {
      active_directory_config: [
        {
          domain_name: "example.internal",
          service_account_secret_arn: awsSecretsmanagerSecretExample.arn,
        },
      ],
      samlProperties: {
        relayStateParameterName: "RelayState",
        status: "ENABLED",
        userAccessUrl: "https://sso.example.com/",
      },
      subnetIds: [exampleC.id, exampleD.id],
      user_identity_type: "CUSTOMER_MANAGED",
      workspaceAccessProperties: {
        deviceTypeAndroid: "ALLOW",
        deviceTypeChromeos: "ALLOW",
        deviceTypeIos: "ALLOW",
        deviceTypeLinux: "DENY",
        deviceTypeOsx: "ALLOW",
        deviceTypeWeb: "DENY",
        deviceTypeWindows: "DENY",
        deviceTypeZeroclient: "DENY",
      },
      workspaceCreationProperties: {
        customSecurityGroupId: Token.asString(awsSecurityGroupExample.id),
        defaultOu: "OU=AWS,DC=Workgroup,DC=Example,DC=com",
        enableInternetAccess: true,
      },
      workspace_directory_description: "WorkSpaces Pools directory",
      workspace_directory_name: "Pool directory",
      workspace_type: "POOLS",
      directoryId: config.directoryId,
    });
  }
}

```

### IP Groups

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { WorkspacesDirectory } from "./.gen/providers/aws/workspaces-directory";
import { WorkspacesIpGroup } from "./.gen/providers/aws/workspaces-ip-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new WorkspacesIpGroup(this, "example", {
      name: "example",
    });
    const awsWorkspacesDirectoryExample = new WorkspacesDirectory(
      this,
      "example_1",
      {
        directoryId: Token.asString(awsDirectoryServiceDirectoryExample.id),
        ipGroupIds: [example.id],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsWorkspacesDirectoryExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `directoryId` - (Optional) The directory identifier for registration in WorkSpaces service.
* `subnetIds` - (Optional) The identifiers of the subnets where the directory resides.
* `ipGroupIds` – (Optional) The identifiers of the IP access control groups associated with the directory.
* `tags` – (Optional) A map of tags assigned to the WorkSpaces directory. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `certificateBasedAuthProperties` - (Optional) Configuration of certificate-based authentication (CBA) integration. Requires SAML authentication to be enabled. Defined below.
* `samlProperties` – (Optional) Configuration of SAML authentication integration. Defined below.
* `selfServicePermissions` – (Optional) Permissions to enable or disable self-service capabilities when `workspace_type` is set to `PERSONAL`.. Defined below.
* `workspaceAccessProperties` – (Optional) Specifies which devices and operating systems users can use to access their WorkSpaces. Defined below.
* `workspaceCreationProperties` – (Optional) Default properties that are used for creating WorkSpaces. Defined below.
* `workspace_type` - (Optional) Specifies the type of WorkSpaces directory. Valid values are `PERSONAL` and `POOLS`. Default is `PERSONAL`.
* `active_directory_config` – (Optional) Configuration for Active Directory integration when `workspace_type` is set to `POOLS`. Defined below.
* `workspace_directory_name` - (Required for `POOLS`) The name of the WorkSpaces directory when `workspace_type` is set to `POOLS`.
* `workspace_directory_description` - (Required for `POOLS`) The description of the WorkSpaces directory when `workspace_type` is set to `POOLS`.
* `user_identity_type` - (Required for `POOLS`) Specifies the user identity type for the WorkSpaces directory. Valid values are `CUSTOMER_MANAGED`, `AWS_DIRECTORY_SERVICE`, `AWS_IAM_IDENTITY_CENTER`.

-> **Note:** When `workspace_type` is set to `POOLS`, the `directoryId` is automatically generated and cannot be manually set.

### certificate_based_auth_properties

* `certificateAuthorityArn` - (Optional) The Amazon Resource Name (ARN) of the certificate manager private certificate authority (ACM-PCA) that is used for certificate-based authentication.
* `status` - (Optional) Status of certificate-based authentication. Default `DISABLED`.

### saml_properties

* `relayStateParameterName` - (Optional) The relay state parameter name supported by the SAML 2.0 identity provider (IdP). Default `RelayState`.
* `status` - (Optional) Status of SAML 2.0 authentication. Default `DISABLED`.
* `userAccessUrl` - (Optional) The SAML 2.0 identity provider (IdP) user access URL.

### self_service_permissions

* `changeComputeType` – (Optional) Whether WorkSpaces directory users can change the compute type (bundle) for their workspace. Default `false`.
* `increaseVolumeSize` – (Optional) Whether WorkSpaces directory users can increase the volume size of the drives on their workspace. Default `false`.
* `rebuildWorkspace` – (Optional) Whether WorkSpaces directory users can rebuild the operating system of a workspace to its original state. Default `false`.
* `restartWorkspace` – (Optional) Whether WorkSpaces directory users can restart their workspace. Default `true`.
* `switchRunningMode` – (Optional) Whether WorkSpaces directory users can switch the running mode of their workspace. Default `false`.

### workspace_access_properties

* `deviceTypeAndroid` – (Optional) Indicates whether users can use Android devices to access their WorkSpaces.
* `deviceTypeChromeos` – (Optional) Indicates whether users can use Chromebooks to access their WorkSpaces.
* `deviceTypeIos` – (Optional) Indicates whether users can use iOS devices to access their WorkSpaces.
* `deviceTypeLinux` – (Optional) Indicates whether users can use Linux clients to access their WorkSpaces.
* `deviceTypeOsx` – (Optional) Indicates whether users can use macOS clients to access their WorkSpaces.
* `deviceTypeWeb` – (Optional) Indicates whether users can access their WorkSpaces through a web browser.
* `deviceTypeWindows` – (Optional) Indicates whether users can use Windows clients to access their WorkSpaces.
* `deviceTypeZeroclient` – (Optional) Indicates whether users can use zero client devices to access their WorkSpaces.

### workspace_creation_properties

-> **Note:** Once you specified `customSecurityGroupId` or `defaultOu`, there is no way to delete these attributes. If you cleanup them from the configuration, they still be present in state.

* `customSecurityGroupId` – (Optional) The identifier of your custom security group. Should relate to the same VPC, where workspaces reside in.
* `defaultOu` – (Optional) The default organizational unit (OU) for your WorkSpace directories. Should conform `"OU=<value>,DC=<value>,...,DC=<value>"` pattern.
* `enableInternetAccess` – (Optional) Indicates whether internet access is enabled for your WorkSpaces.
* `enableMaintenanceMode` – (Optional) Indicates whether maintenance mode is enabled for your WorkSpaces. Valid only if `workspace_type` is set to `PERSONAL`.
* `userEnabledAsLocalAdministrator` – (Optional) Indicates whether users are local administrators of their WorkSpaces. Valid only if `workspace_type` is set to `PERSONAL`.

### active_directory_config

-> **Note:** `active_directory_config` is only valid if `workspaces_type` is set to `POOLS`.

* `domainName` – Fully qualified domain name of the AWS Directory Service directory.
* `service_account_secret_arn` – ARN of the Secrets Manager secret that contains the credentials for the service account. For more information, see [Service Account Details](https://docs.aws.amazon.com/workspaces/latest/adminguide/pools-service-account-details.html).

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The WorkSpaces directory identifier.
* `alias` - The directory alias.
* `customerUserName` - The user name for the service account.
* `directoryName` - The name of the directory.
* `directoryType` - The directory type.
* `dnsIpAddresses` - The IP addresses of the DNS servers for the directory.
* `iamRoleId` - The identifier of the IAM role. This is the role that allows Amazon WorkSpaces to make calls to other services, such as Amazon EC2, on your behalf.
* `ipGroupIds` - The identifiers of the IP access control groups associated with the directory.
* `registrationCode` - The registration code for the directory. This is the code that users enter in their Amazon WorkSpaces client application to connect to the directory.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).
* `workspaceSecurityGroupId` - The identifier of the security group that is assigned to new WorkSpaces.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Workspaces directory using the directory ID. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { WorkspacesDirectory } from "./.gen/providers/aws/workspaces-directory";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    WorkspacesDirectory.generateConfigForImport(this, "main", "d-4444444444");
  }
}

```

Using `terraform import`, import Workspaces directory using the directory ID. For example:

```console
% terraform import aws_workspaces_directory.main d-4444444444
```

<!-- cache-key: cdktf-0.20.8 input-87a326ccf795070d83d6ff9474c2155fa87ee487ee14ef2a79d42e595c0134c9 -->