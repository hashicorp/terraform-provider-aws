---
subcategory: "EFS (Elastic File System)"
layout: "aws"
page_title: "AWS: aws_efs_file_system_policy"
description: |-
  Provides an Elastic File System (EFS) File System Policy resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_efs_file_system_policy

Provides an Elastic File System (EFS) File System Policy resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { EfsFileSystem } from "./.gen/providers/aws/efs-file-system";
import { EfsFileSystemPolicy } from "./.gen/providers/aws/efs-file-system-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const fs = new EfsFileSystem(this, "fs", {
      creationToken: "my-product",
    });
    const policy = new DataAwsIamPolicyDocument(this, "policy", {
      statement: [
        {
          actions: [
            "elasticfilesystem:ClientMount",
            "elasticfilesystem:ClientWrite",
          ],
          condition: [
            {
              test: "Bool",
              values: ["true"],
              variable: "aws:SecureTransport",
            },
          ],
          effect: "Allow",
          principals: [
            {
              identifiers: ["*"],
              type: "AWS",
            },
          ],
          resources: [fs.arn],
          sid: "ExampleStatement01",
        },
      ],
    });
    const awsEfsFileSystemPolicyPolicy = new EfsFileSystemPolicy(
      this,
      "policy_2",
      {
        fileSystemId: fs.id,
        policy: Token.asString(policy.json),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsEfsFileSystemPolicyPolicy.overrideLogicalId("policy");
  }
}

```

## Argument Reference

The following arguments are required:

* `fileSystemId` - (Required) The ID of the EFS file system.
* `policy` - (Required) The JSON formatted file system policy for the EFS file system. see [Docs](https://docs.aws.amazon.com/efs/latest/ug/access-control-overview.html#access-control-manage-access-intro-resource-policies) for more info.

The following arguments are optional:

* `bypassPolicyLockoutSafetyCheck` - (Optional) A flag to indicate whether to bypass the `aws_efs_file_system_policy` lockout safety check. The policy lockout safety check determines whether the policy in the request will prevent the principal making the request will be locked out from making future `PutFileSystemPolicy` requests on the file system. Set `bypassPolicyLockoutSafetyCheck` to `true` only when you intend to prevent the principal that is making the request from making a subsequent `PutFileSystemPolicy` request on the file system. The default value is `false`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID that identifies the file system (e.g., fs-ccfc0d65).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import the EFS file system policies using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EfsFileSystemPolicy } from "./.gen/providers/aws/efs-file-system-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    EfsFileSystemPolicy.generateConfigForImport(this, "foo", "fs-6fa144c6");
  }
}

```

Using `terraform import`, import the EFS file system policies using the `id`. For example:

```console
% terraform import aws_efs_file_system_policy.foo fs-6fa144c6
```

<!-- cache-key: cdktf-0.20.8 input-51ce0e6776bd5a12b73f8fd6edc2135ed20119de727978bb7a52e39fe7641ce6 -->