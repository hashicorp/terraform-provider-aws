---
subcategory: "Direct Connect"
layout: "aws"
page_title: "AWS: aws_dx_transit_virtual_interface"
description: |-
  Provides a Direct Connect transit virtual interface resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_dx_transit_virtual_interface

Provides a Direct Connect transit virtual interface resource.
A transit virtual interface is a VLAN that transports traffic from a [Direct Connect gateway](dx_gateway.html) to one or more [transit gateways](ec2_transit_gateway.html).

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DxGateway } from "./.gen/providers/aws/dx-gateway";
import { DxTransitVirtualInterface } from "./.gen/providers/aws/dx-transit-virtual-interface";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DxGateway(this, "example", {
      amazonSideAsn: Token.asString(64512),
      name: "tf-dxg-example",
    });
    const awsDxTransitVirtualInterfaceExample = new DxTransitVirtualInterface(
      this,
      "example_1",
      {
        addressFamily: "ipv4",
        bgpAsn: 65352,
        connectionId: Token.asString(awsDxConnectionExample.id),
        dxGatewayId: example.id,
        name: "tf-transit-vif-example",
        vlan: 4094,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDxTransitVirtualInterfaceExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `addressFamily` - (Required) The address family for the BGP peer. `ipv4 ` or `ipv6`.
* `bgpAsn` - (Required) The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
* `connectionId` - (Required) The ID of the Direct Connect connection (or LAG) on which to create the virtual interface.
* `dxGatewayId` - (Required) The ID of the Direct Connect gateway to which to connect the virtual interface.
* `name` - (Required) The name for the virtual interface.
* `vlan` - (Required) The VLAN ID.
* `amazonAddress` - (Optional) The IPv4 CIDR address to use to send traffic to Amazon. Required for IPv4 BGP peers.
* `bgpAuthKey` - (Optional) The authentication key for BGP configuration.
* `customerAddress` - (Optional) The IPv4 CIDR destination address to which Amazon should send traffic. Required for IPv4 BGP peers.
* `mtu` - (Optional) The maximum transmission unit (MTU) is the size, in bytes, of the largest permissible packet that can be passed over the connection.
The MTU of a virtual transit interface can be either `1500` or `8500` (jumbo frames). Default is `1500`.
* `sitelinkEnabled` - (Optional) Indicates whether to enable or disable SiteLink.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the virtual interface.
* `arn` - The ARN of the virtual interface.
* `awsDevice` - The Direct Connect endpoint on which the virtual interface terminates.
* `jumboFrameCapable` - Indicates whether jumbo frames (8500 MTU) are supported.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `10m`)
- `update` - (Default `10m`)
- `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Direct Connect transit virtual interfaces using the VIF `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DxTransitVirtualInterface } from "./.gen/providers/aws/dx-transit-virtual-interface";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DxTransitVirtualInterface.generateConfigForImport(
      this,
      "test",
      "dxvif-33cc44dd"
    );
  }
}

```

Using `terraform import`, import Direct Connect transit virtual interfaces using the VIF `id`. For example:

```console
% terraform import aws_dx_transit_virtual_interface.test dxvif-33cc44dd
```

<!-- cache-key: cdktf-0.20.8 input-50fafeb6465a4e137f551c411cb1ceffa75181ced4f85830fcb62fdb271ace49 -->