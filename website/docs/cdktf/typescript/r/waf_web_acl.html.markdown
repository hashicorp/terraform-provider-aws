---
subcategory: "WAF Classic"
layout: "aws"
page_title: "AWS: aws_waf_web_acl"
description: |-
  Provides a AWS WAF web access control group (ACL) resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_waf_web_acl

Provides a WAF Web ACL Resource

## Example Usage

This example blocks requests coming from `192.0.7.0/24` and allows everything else.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { WafIpset } from "./.gen/providers/aws/waf-ipset";
import { WafRule } from "./.gen/providers/aws/waf-rule";
import { WafWebAcl } from "./.gen/providers/aws/waf-web-acl";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const ipset = new WafIpset(this, "ipset", {
      ipSetDescriptors: [
        {
          type: "IPV4",
          value: "192.0.7.0/24",
        },
      ],
      name: "tfIPSet",
    });
    const wafrule = new WafRule(this, "wafrule", {
      dependsOn: [ipset],
      metricName: "tfWAFRule",
      name: "tfWAFRule",
      predicates: [
        {
          dataId: ipset.id,
          negated: false,
          type: "IPMatch",
        },
      ],
    });
    new WafWebAcl(this, "waf_acl", {
      defaultAction: {
        type: "ALLOW",
      },
      dependsOn: [ipset, wafrule],
      metricName: "tfWebACL",
      name: "tfWebACL",
      rules: [
        {
          action: {
            type: "BLOCK",
          },
          priority: 1,
          ruleId: wafrule.id,
          type: "REGULAR",
        },
      ],
    });
  }
}

```

### Logging

~> *NOTE:* The Kinesis Firehose Delivery Stream name must begin with `aws-waf-logs-` and be located in `us-east-1` region. See the [AWS WAF Developer Guide](https://docs.aws.amazon.com/waf/latest/developerguide/logging.html) for more information about enabling WAF logging.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { WafWebAcl } from "./.gen/providers/aws/waf-web-acl";
interface MyConfig {
  defaultAction: any;
  metricName: any;
  name: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new WafWebAcl(this, "example", {
      loggingConfiguration: {
        logDestination: Token.asString(
          awsKinesisFirehoseDeliveryStreamExample.arn
        ),
        redactedFields: {
          fieldToMatch: [
            {
              type: "URI",
            },
            {
              data: "referer",
              type: "HEADER",
            },
          ],
        },
      },
      defaultAction: config.defaultAction,
      metricName: config.metricName,
      name: config.name,
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `defaultAction` - (Required) Configuration block with action that you want AWS WAF to take when a request doesn't match the criteria in any of the rules that are associated with the web ACL. Detailed below.
* `metricName` - (Required) The name or description for the Amazon CloudWatch metric of this web ACL.
* `name` - (Required) The name or description of the web ACL.
* `rules` - (Optional) Configuration blocks containing rules to associate with the web ACL and the settings for each rule. Detailed below.
* `loggingConfiguration` - (Optional) Configuration block to enable WAF logging. Detailed below.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### `defaultAction` Configuration Block

* `type` - (Required) Specifies how you want AWS WAF to respond to requests that don't match the criteria in any of the `rules`.
  e.g., `ALLOW` or `BLOCK`

### `loggingConfiguration` Configuration Block

* `logDestination` - (Required) Amazon Resource Name (ARN) of Kinesis Firehose Delivery Stream
* `redactedFields` - (Optional) Configuration block containing parts of the request that you want redacted from the logs. Detailed below.

#### `redactedFields` Configuration Block

* `fieldToMatch` - (Required) Set of configuration blocks for fields to redact. Detailed below.

##### `fieldToMatch` Configuration Block

-> Additional information about this configuration can be found in the [AWS WAF Regional API Reference](https://docs.aws.amazon.com/waf/latest/APIReference/API_regional_FieldToMatch.html).

* `data` - (Optional) When the value of `type` is `HEADER`, enter the name of the header that you want the WAF to search, for example, `User-Agent` or `Referer`. If the value of `type` is any other value, omit `data`.
* `type` - (Required) The part of the web request that you want AWS WAF to search for a specified stringE.g., `HEADER` or `METHOD`

### `rules` Configuration Block

See [docs](http://docs.aws.amazon.com/waf/latest/APIReference/API_ActivatedRule.html) for all details and supported values.

* `action` - (Optional) The action that CloudFront or AWS WAF takes when a web request matches the conditions in the rule. Not used if `type` is `GROUP`.
    * `type` - (Required) valid values are: `BLOCK`, `ALLOW`, or `COUNT`
* `overrideAction` - (Optional) Override the action that a group requests CloudFront or AWS WAF takes when a web request matches the conditions in the rule. Only used if `type` is `GROUP`.
    * `type` - (Required) valid values are: `NONE` or `COUNT`
* `priority` - (Required) Specifies the order in which the rules in a WebACL are evaluated.
  Rules with a lower value are evaluated before rules with a higher value.
* `ruleId` - (Required) ID of the associated WAF (Global) rule (e.g., [`aws_waf_rule`](/docs/providers/aws/r/waf_rule.html)). WAF (Regional) rules cannot be used.
* `type` - (Optional) The rule type, either `REGULAR`, as defined by [Rule](http://docs.aws.amazon.com/waf/latest/APIReference/API_Rule.html), `RATE_BASED`, as defined by [RateBasedRule](http://docs.aws.amazon.com/waf/latest/APIReference/API_RateBasedRule.html), or `GROUP`, as defined by [RuleGroup](https://docs.aws.amazon.com/waf/latest/APIReference/API_RuleGroup.html). The default is REGULAR. If you add a RATE_BASED rule, you need to set `type` as `RATE_BASED`. If you add a GROUP rule, you need to set `type` as `GROUP`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the WAF WebACL.
* `arn` - The ARN of the WAF WebACL.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import WAF Web ACL using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { WafWebAcl } from "./.gen/providers/aws/waf-web-acl";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    WafWebAcl.generateConfigForImport(
      this,
      "main",
      "0c8e583e-18f3-4c13-9e2a-67c4805d2f94"
    );
  }
}

```

Using `terraform import`, import WAF Web ACL using the `id`. For example:

```console
% terraform import aws_waf_web_acl.main 0c8e583e-18f3-4c13-9e2a-67c4805d2f94
```

<!-- cache-key: cdktf-0.20.8 input-ef78a6170a502ab8d3c2771bf4b7f7c113cf688e0a9d2aa577e013e90b14709a -->