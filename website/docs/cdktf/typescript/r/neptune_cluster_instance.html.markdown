---
subcategory: "Neptune"
layout: "aws"
page_title: "AWS: aws_neptune_cluster_instance"
description: |-
  Provides an Neptune Cluster Resource Instance
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_neptune_cluster_instance

A Cluster Instance Resource defines attributes that are specific to a single instance in a Neptune Cluster.

You can simply add neptune instances and Neptune manages the replication. You can use the [count][1]
meta-parameter to make multiple instances and join them all to the same Neptune Cluster, or you may specify different Cluster Instance resources with various `instanceClass` sizes.

## Example Usage

The following example will create a neptune cluster with two neptune instances(one writer and one reader).

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformCount, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NeptuneCluster } from "./.gen/providers/aws/neptune-cluster";
import { NeptuneClusterInstance } from "./.gen/providers/aws/neptune-cluster-instance";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const defaultVar = new NeptuneCluster(this, "default", {
      applyImmediately: true,
      backupRetentionPeriod: 5,
      clusterIdentifier: "neptune-cluster-demo",
      engine: "neptune",
      iamDatabaseAuthenticationEnabled: true,
      preferredBackupWindow: "07:00-09:00",
      skipFinalSnapshot: true,
    });
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const exampleCount = TerraformCount.of(Token.asNumber("2"));
    new NeptuneClusterInstance(this, "example", {
      applyImmediately: true,
      clusterIdentifier: defaultVar.id,
      engine: "neptune",
      instanceClass: "db.r4.large",
      count: exampleCount,
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `applyImmediately` - (Optional) Specifies whether any instance modifications
  are applied immediately, or during the next maintenance window. Default is`false`.
* `autoMinorVersionUpgrade` - (Optional) Indicates that minor engine upgrades will be applied automatically to the instance during the maintenance window. Default is `true`.
* `availabilityZone` - (Optional) The EC2 Availability Zone that the neptune instance is created in.
* `clusterIdentifier` - (Required) The identifier of the [`aws_neptune_cluster`](/docs/providers/aws/r/neptune_cluster.html) in which to launch this instance.
* `engine` - (Optional) The name of the database engine to be used for the neptune instance. Defaults to `neptune`. Valid Values: `neptune`.
* `engineVersion` - (Optional) The neptune engine version. Currently configuring this argumnet has no effect.
* `identifier` - (Optional, Forces new resource) The identifier for the neptune instance, if omitted, Terraform will assign a random, unique identifier.
* `identifierPrefix` - (Optional, Forces new resource) Creates a unique identifier beginning with the specified prefix. Conflicts with `identifier`.
* `instanceClass` - (Required) The instance class to use.
* `neptuneSubnetGroupName` - (Required if `publicly_accessible = false`, Optional otherwise) A subnet group to associate with this neptune instance. **NOTE:** This must match the `neptuneSubnetGroupName` of the attached [`aws_neptune_cluster`](/docs/providers/aws/r/neptune_cluster.html).
* `neptuneParameterGroupName` - (Optional) The name of the neptune parameter group to associate with this instance.
* `port` - (Optional) The port on which the DB accepts connections. Defaults to `8182`.
* `preferredBackupWindow` - (Optional) The daily time range during which automated backups are created if automated backups are enabled. Eg: "04:00-09:00"
* `preferredMaintenanceWindow` - (Optional) The window to perform maintenance in.
  Syntax: "ddd:hh24:mi-ddd:hh24:mi". Eg: "Mon:00:00-Mon:03:00".
* `promotionTier` - (Optional) Default 0. Failover Priority setting on instance level. The reader who has lower tier has higher priority to get promoter to writer.
* `publiclyAccessible` - (Optional) Bool to control if instance is publicly accessible. Default is `false`.
* `skipFinalSnapshot` - (Optional) Determines whether a final DB snapshot is created before the DB instance is deleted.
* `tags` - (Optional) A map of tags to assign to the instance. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `address` - The hostname of the instance. See also `endpoint` and `port`.
* `arn` - Amazon Resource Name (ARN) of neptune instance
* `dbiResourceId` - The region-unique, immutable identifier for the neptune instance.
* `endpoint` - The connection endpoint in `address:port` format.
* `id` - The Instance identifier
* `kmsKeyArn` - The ARN for the KMS encryption key if one is set to the neptune cluster.
* `storageEncrypted` - Specifies whether the neptune cluster is encrypted.
* `storageType` - Storage type associated with the cluster `standard/iopt1`.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).
* `writer` â€“ Boolean indicating if this instance is writable. `False` indicates this instance is a read replica.

[1]: https://www.terraform.io/docs/configuration/meta-arguments/count.html

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `90m`)
- `update` - (Default `90m`)
- `delete` - (Default `90m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_neptune_cluster_instance` using the instance identifier. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NeptuneClusterInstance } from "./.gen/providers/aws/neptune-cluster-instance";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    NeptuneClusterInstance.generateConfigForImport(
      this,
      "example",
      "my-instance"
    );
  }
}

```

Using `terraform import`, import `aws_neptune_cluster_instance` using the instance identifier. For example:

```console
% terraform import aws_neptune_cluster_instance.example my-instance
```

<!-- cache-key: cdktf-0.20.8 input-2ba6312683077ebbd2225c004780e41bd347fbc57a1a99be6bad0899ad291a36 -->