---
subcategory: "OpsWorks"
layout: "aws"
page_title: "AWS: aws_opsworks_instance"
description: |-
  Provides an OpsWorks instance resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_opsworks_instance

Provides an OpsWorks instance resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { OpsworksInstance } from "./.gen/providers/aws/opsworks-instance";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new OpsworksInstance(this, "my-instance", {
      instanceType: "t2.micro",
      layerIds: [myLayer.id],
      os: "Amazon Linux 2015.09",
      stackId: main.id,
      state: "stopped",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `layerIds` - (Required) List of the layers the instance will belong to.
* `stackId` - (Required) Identifier of the stack the instance will belong to.

The following arguments are optional:

* `agentVersion` - (Optional) OpsWorks agent to install. Default is `INHERIT`.
* `amiId` - (Optional) AMI to use for the instance.  If an AMI is specified, `os` must be `Custom`.
* `architecture` - (Optional) Machine architecture for created instances.  Valid values are `x86_64` or `i386`. The default is `x86_64`.
* `autoScalingType` - (Optional) Creates load-based or time-based instances.  Valid values are `load`, `timer`.
* `availabilityZone` - (Optional) Name of the availability zone where instances will be created by default.
* `deleteEbs` - (Optional) Whether to delete EBS volume on deletion. Default is `true`.
* `deleteEip` - (Optional) Whether to delete the Elastic IP on deletion.
* `ebsBlockDevice` - (Optional) Configuration block for additional EBS block devices to attach to the instance. See [Block Devices](#block-devices) below.
* `ebsOptimized` - (Optional) Whether the launched EC2 instance will be EBS-optimized.
* `ecsClusterArn` - (Optional) ECS cluster's ARN for container instances.
* `elasticIp` - (Optional) Instance Elastic IP address.
* `ephemeralBlockDevice` - (Optional) Configuration block for ephemeral (also known as "Instance Store") volumes on the instance. See [Block Devices](#block-devices) below.
* `hostname` - (Optional) Instance's host name.
* `infrastructureClass` - (Optional) For registered instances, infrastructure class: ec2 or on-premises.
* `installUpdatesOnBoot` - (Optional) Controls where to install OS and package updates when the instance boots.  Default is `true`.
* `instanceProfileArn` - (Optional) ARN of the instance's IAM profile.
* `instanceType` - (Optional) Type of instance to start.
* `os` - (Optional) Name of operating system that will be installed.
* `rootBlockDevice` - (Optional) Configuration block for the root block device of the instance. See [Block Devices](#block-devices) below.
* `rootDeviceType` - (Optional) Name of the type of root device instances will have by default. Valid values are `ebs` or `instance-store`.
* `sshKeyName` - (Optional) Name of the SSH keypair that instances will have by default.
* `state` - (Optional) Desired state of the instance. Valid values are `running` or `stopped`.
* `subnetId` - (Optional) Subnet ID to attach to.
* `tenancy` - (Optional) Instance tenancy to use. Valid values are `default`, `dedicated` or `host`.
* `virtualizationType` - (Optional) Keyword to choose what virtualization mode created instances will use. Valid values are `paravirtual` or `hvm`.

## Block devices

Each of the `*_block_device` attributes controls a portion of the AWS
Instance's "Block Device Mapping". It's a good idea to familiarize yourself with [AWS's Block Device
Mapping docs](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html)
to understand the implications of using these attributes.

### `ebsBlockDevice`

* `deleteOnTermination` - (Optional) Whether the volume should be destroyed on instance termination. Default is `true`.
* `deviceName` - (Required) Name of the device to mount.
* `iops` - (Optional) Amount of provisioned [IOPS](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html). This must be set with a `volumeType` of `io1`.
* `snapshotId` - (Optional) Snapshot ID to mount.
* `volumeSize` - (Optional) Size of the volume in gigabytes.
* `volumeType` - (Optional) Type of volume. Valid values are `standard`, `gp2`, or `io1`. Default is `standard`.

Modifying any `ebsBlockDevice` currently requires resource replacement.

### `ephemeralBlockDevice`

* `deviceName` - Name of the block device to mount on the instance.
* `virtualName` - The [Instance Store Device Name](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#InstanceStoreDeviceNames) (e.g., `ephemeral0`).

Each AWS Instance type has a different set of Instance Store block devices
available for attachment. AWS [publishes a
list](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#StorageOnInstanceTypes)
of which ephemeral devices are available on each type. The devices are always
identified by the `virtualName` in the format `ephemeral{0..N}`.

### `rootBlockDevice`

* `deleteOnTermination` - (Optional) Whether the volume should be destroyed on instance termination. Default is `true`.
* `iops` - (Optional) Amount of provisioned [IOPS](http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-io-characteristics.html). This must be set with a `volumeType` of `io1`.
* `volumeSize` - (Optional) Size of the volume in gigabytes.
* `volumeType` - (Optional) Type of volume. Valid values are `standard`, `gp2`, or `io1`. Default is `standard`.

Modifying any of the `rootBlockDevice` settings requires resource
replacement.

~> **NOTE:** Currently, changes to `*_block_device` configuration of _existing_
resources cannot be automatically detected by Terraform. After making updates
to block device configuration, resource recreation can be manually triggered by
using the [`taint` command](https://www.terraform.io/docs/commands/taint.html).

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `createdAt` - Time that the instance was created.
* `ec2InstanceId` - EC2 instance ID.
* `id` - ID of the OpsWorks instance.
* `lastServiceErrorId` - ID of the last service error.
* `platform` - Instance's platform.
* `privateDns` - Private DNS name assigned to the instance. Can only be used inside the Amazon EC2, and only available if you've enabled DNS hostnames for your VPC.
* `privateIp` - Private IP address assigned to the instance.
* `publicDns` - Public DNS name assigned to the instance. For EC2-VPC, this is only available if you've enabled DNS hostnames for your VPC.
* `publicIp` - Public IP address assigned to the instance, if applicable.
* `registeredBy` - For registered instances, who performed the registration.
* `reportedAgentVersion` - Instance's reported AWS OpsWorks Stacks agent version.
* `reportedOsFamily` - For registered instances, the reported operating system family.
* `reportedOsName` - For registered instances, the reported operating system name.
* `reportedOsVersion` - For registered instances, the reported operating system version.
* `rootDeviceVolumeId` - Root device volume ID.
* `securityGroupIds` - Associated security groups.
* `sshHostDsaKeyFingerprint` - SSH key's Deep Security Agent (DSA) fingerprint.
* `sshHostRsaKeyFingerprint` - SSH key's RSA fingerprint.
* `status` - Instance status. Will be one of `booting`, `connection_lost`, `online`, `pending`, `rebooting`, `requested`, `running_setup`, `setup_failed`, `shutting_down`, `start_failed`, `stop_failed`, `stopped`, `stopping`, `terminated`, or `terminating`.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `10m`)
- `delete` - (Default `10m`)
- `update` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Opsworks Instances using the instance `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { OpsworksInstance } from "./.gen/providers/aws/opsworks-instance";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    OpsworksInstance.generateConfigForImport(
      this,
      "myInstance",
      "4d6d1710-ded9-42a1-b08e-b043ad7af1e2"
    );
  }
}

```

Using `terraform import`, import Opsworks Instances using the instance `id`. For example:

```console
% terraform import aws_opsworks_instance.my_instance 4d6d1710-ded9-42a1-b08e-b043ad7af1e2
```

<!-- cache-key: cdktf-0.20.8 input-760182d76d218ceaf2aa97bf60861140665a51f7861d5210b509e78e8f84b58d -->