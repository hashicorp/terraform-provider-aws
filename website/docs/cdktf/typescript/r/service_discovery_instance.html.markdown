---
subcategory: "Cloud Map"
layout: "aws"
page_title: "AWS: aws_service_discovery_instance"
description: |-
  Provides a Service Discovery Instance resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_service_discovery_instance

Provides a Service Discovery Instance resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ServiceDiscoveryInstance } from "./.gen/providers/aws/service-discovery-instance";
import { ServiceDiscoveryPrivateDnsNamespace } from "./.gen/providers/aws/service-discovery-private-dns-namespace";
import { ServiceDiscoveryService } from "./.gen/providers/aws/service-discovery-service";
import { Vpc } from "./.gen/providers/aws/vpc";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new Vpc(this, "example", {
      cidrBlock: "10.0.0.0/16",
      enableDnsHostnames: true,
      enableDnsSupport: true,
    });
    const awsServiceDiscoveryPrivateDnsNamespaceExample =
      new ServiceDiscoveryPrivateDnsNamespace(this, "example_1", {
        description: "example",
        name: "example.terraform.local",
        vpc: example.id,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsServiceDiscoveryPrivateDnsNamespaceExample.overrideLogicalId("example");
    const awsServiceDiscoveryServiceExample = new ServiceDiscoveryService(
      this,
      "example_2",
      {
        dnsConfig: {
          dnsRecords: [
            {
              ttl: 10,
              type: "A",
            },
          ],
          namespaceId: Token.asString(
            awsServiceDiscoveryPrivateDnsNamespaceExample.id
          ),
          routingPolicy: "MULTIVALUE",
        },
        healthCheckCustomConfig: {
          failureThreshold: 1,
        },
        name: "example",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsServiceDiscoveryServiceExample.overrideLogicalId("example");
    const awsServiceDiscoveryInstanceExample = new ServiceDiscoveryInstance(
      this,
      "example_3",
      {
        attributes: {
          AWS_INSTANCE_IPV4: "172.18.0.1",
          custom_attribute: "custom",
        },
        instanceId: "example-instance-id",
        serviceId: Token.asString(awsServiceDiscoveryServiceExample.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsServiceDiscoveryInstanceExample.overrideLogicalId("example");
  }
}

```

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ServiceDiscoveryHttpNamespace } from "./.gen/providers/aws/service-discovery-http-namespace";
import { ServiceDiscoveryInstance } from "./.gen/providers/aws/service-discovery-instance";
import { ServiceDiscoveryService } from "./.gen/providers/aws/service-discovery-service";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new ServiceDiscoveryHttpNamespace(this, "example", {
      description: "example",
      name: "example.terraform.com",
    });
    const awsServiceDiscoveryServiceExample = new ServiceDiscoveryService(
      this,
      "example_1",
      {
        name: "example",
        namespaceId: example.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsServiceDiscoveryServiceExample.overrideLogicalId("example");
    const awsServiceDiscoveryInstanceExample = new ServiceDiscoveryInstance(
      this,
      "example_2",
      {
        attributes: {
          AWS_EC2_INSTANCE_ID: "i-0abdg374kd892cj6dl",
        },
        instanceId: "example-instance-id",
        serviceId: Token.asString(awsServiceDiscoveryServiceExample.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsServiceDiscoveryInstanceExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `instanceId` - (Required, ForceNew) The ID of the service instance.
* `serviceId` - (Required, ForceNew) The ID of the service that you want to use to create the instance.
* `attributes` - (Required) A map contains the attributes of the instance. Check the [doc](https://docs.aws.amazon.com/cloud-map/latest/api/API_RegisterInstance.html#API_RegisterInstance_RequestSyntax) for the supported attributes and syntax.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the instance.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Service Discovery Instance using the service ID and instance ID. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ServiceDiscoveryInstance } from "./.gen/providers/aws/service-discovery-instance";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ServiceDiscoveryInstance.generateConfigForImport(
      this,
      "example",
      "0123456789/i-0123"
    );
  }
}

```

Using `terraform import`, import Service Discovery Instance using the service ID and instance ID. For example:

```console
% terraform import aws_service_discovery_instance.example 0123456789/i-0123
```

<!-- cache-key: cdktf-0.20.8 input-81e46074d207df4789822f0bad31c495113362f2fbc8b6456fb894ad88def8b7 -->