---
subcategory: "OpenSearch"
layout: "aws"
page_title: "AWS: aws_opensearch_inbound_connection_accepter"
description: |-
  Terraform resource for managing an AWS OpenSearch Inbound Connection Accepter.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_opensearch_inbound_connection_accepter

Manages an [AWS Opensearch Inbound Connection Accepter](https://docs.aws.amazon.com/opensearch-service/latest/APIReference/API_AcceptInboundConnection.html). If connecting domains from different AWS accounts, ensure that the accepter is configured to use the AWS account where the _remote_ opensearch domain exists.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { DataAwsRegion } from "./.gen/providers/aws/data-aws-region";
import { OpensearchInboundConnectionAccepter } from "./.gen/providers/aws/opensearch-inbound-connection-accepter";
import { OpensearchOutboundConnection } from "./.gen/providers/aws/opensearch-outbound-connection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const current = new DataAwsCallerIdentity(this, "current", {});
    const dataAwsRegionCurrent = new DataAwsRegion(this, "current_1", {});
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsRegionCurrent.overrideLogicalId("current");
    const foo = new OpensearchOutboundConnection(this, "foo", {
      connectionAlias: "outbound_connection",
      localDomainInfo: {
        domainName: localDomain.domainName,
        ownerId: Token.asString(current.accountId),
        region: Token.asString(dataAwsRegionCurrent.name),
      },
      remoteDomainInfo: {
        domainName: remoteDomain.domainName,
        ownerId: Token.asString(current.accountId),
        region: Token.asString(dataAwsRegionCurrent.name),
      },
    });
    const awsOpensearchInboundConnectionAccepterFoo =
      new OpensearchInboundConnectionAccepter(this, "foo_3", {
        connectionId: foo.id,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsOpensearchInboundConnectionAccepterFoo.overrideLogicalId("foo");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `connectionId` - (Required, Forces new resource) Specifies the ID of the connection to accept.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The Id of the connection to accept.
* `connectionStatus` - Status of the connection request.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `5m`)
* `delete` - (Default `5m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import AWS Opensearch Inbound Connection Accepters using the Inbound Connection ID. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { OpensearchInboundConnectionAccepter } from "./.gen/providers/aws/opensearch-inbound-connection-accepter";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    OpensearchInboundConnectionAccepter.generateConfigForImport(
      this,
      "foo",
      "connection-id"
    );
  }
}

```

Using `terraform import`, import AWS Opensearch Inbound Connection Accepters using the Inbound Connection ID. For example:

```console
% terraform import aws_opensearch_inbound_connection_accepter.foo connection-id
```

<!-- cache-key: cdktf-0.20.8 input-55e95b97c434786498b87477ae28b40538814eb9c17d405e3c6f2aa8f4d59ff6 -->