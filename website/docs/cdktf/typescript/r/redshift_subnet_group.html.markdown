---
subcategory: "Redshift"
layout: "aws"
page_title: "AWS: aws_redshift_subnet_group"
description: |-
  Provides a Redshift Subnet Group resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_redshift_subnet_group

Creates a new Amazon Redshift subnet group. You must provide a list of one or more subnets in your existing Amazon Virtual Private Cloud (Amazon VPC) when creating Amazon Redshift subnet group.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { RedshiftSubnetGroup } from "./.gen/providers/aws/redshift-subnet-group";
import { Subnet } from "./.gen/providers/aws/subnet";
import { Vpc } from "./.gen/providers/aws/vpc";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const foo = new Vpc(this, "foo", {
      cidrBlock: "10.1.0.0/16",
    });
    const bar = new Subnet(this, "bar", {
      availabilityZone: "us-west-2b",
      cidrBlock: "10.1.2.0/24",
      tags: {
        Name: "tf-dbsubnet-test-2",
      },
      vpcId: foo.id,
    });
    const awsSubnetFoo = new Subnet(this, "foo_2", {
      availabilityZone: "us-west-2a",
      cidrBlock: "10.1.1.0/24",
      tags: {
        Name: "tf-dbsubnet-test-1",
      },
      vpcId: foo.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSubnetFoo.overrideLogicalId("foo");
    const awsRedshiftSubnetGroupFoo = new RedshiftSubnetGroup(this, "foo_3", {
      name: "foo",
      subnetIds: [Token.asString(awsSubnetFoo.id), bar.id],
      tags: {
        environment: "Production",
      },
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRedshiftSubnetGroupFoo.overrideLogicalId("foo");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The name of the Redshift Subnet group.
* `description` - (Optional) The description of the Redshift Subnet group. Defaults to "Managed by Terraform".
* `subnetIds` - (Required) An array of VPC subnet IDs.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of the Redshift Subnet group name
* `id` - The Redshift Subnet group ID.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Redshift subnet groups using the `name`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { RedshiftSubnetGroup } from "./.gen/providers/aws/redshift-subnet-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    RedshiftSubnetGroup.generateConfigForImport(
      this,
      "testgroup1",
      "test-cluster-subnet-group"
    );
  }
}

```

Using `terraform import`, import Redshift subnet groups using the `name`. For example:

```console
% terraform import aws_redshift_subnet_group.testgroup1 test-cluster-subnet-group
```

<!-- cache-key: cdktf-0.20.8 input-3d603e489c1bb01bdc966a54771f0f1ba11b9496fe058472a61fd0520c9b7c8c -->