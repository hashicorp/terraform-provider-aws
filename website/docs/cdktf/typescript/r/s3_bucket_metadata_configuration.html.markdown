---
subcategory: "S3 (Simple Storage)"
layout: "aws"
page_title: "AWS: aws_s3_bucket_metadata_configuration"
description: |-
  Manages Amazon S3 Metadata for a bucket.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_s3_bucket_metadata_configuration

Manages Amazon S3 Metadata for a bucket.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { S3BucketMetadataConfiguration } from "./.gen/providers/aws/s3-bucket-metadata-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new S3BucketMetadataConfiguration(this, "example", {
      bucket: Token.asString(awsS3BucketExample.bucket),
      metadataConfiguration: [
        {
          inventoryTableConfiguration: [
            {
              configurationState: "ENABLED",
            },
          ],
          journalTableConfiguration: [
            {
              recordExpiration: [
                {
                  days: 7,
                  expiration: "ENABLED",
                },
              ],
            },
          ],
        },
      ],
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `bucket` - (Required) General purpose bucket that you want to create the metadata configuration for.
* `metadataConfiguration` - (Required) Metadata configuration. See [`metadataConfiguration` Block](#metadata_configuration-block) for details.

The following arguments are optional:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).

### `metadataConfiguration` Block

The `metadataConfiguration` configuration block supports the following arguments:

* `inventoryTableConfiguration` - (Required) Inventory table configuration. See [`inventoryTableConfiguration` Block](#inventory_table_configuration-block) for details.
* `journalTableConfiguration` - (Required) Journal table configuration. See [`journalTableConfiguration` Block](#journal_table_configuration-block) for details.

### `inventoryTableConfiguration` Block

The `inventoryTableConfiguration` configuration block supports the following arguments:

* `configurationState` - (Required) Configuration state of the inventory table, indicating whether the inventory table is enabled or disabled. Valid values: `ENABLED`, `DISABLED`.
* `encryptionConfiguration` - (Optional) Encryption configuration for the inventory table. See [`encryptionConfiguration` Block](#encryption_configuration-block) for details.

### `journalTableConfiguration` Block

The `journalTableConfiguration` configuration block supports the following arguments:

* `encryptionConfiguration` - (Optional) Encryption configuration for the journal table. See [`encryptionConfiguration` Block](#encryption_configuration-block) for details.
* `recordExpiration` - (Required) Journal table record expiration settings. See [`recordExpiration` Block](#record_expiration-block) for details.

### `encryptionConfiguration` Block

The `encryptionConfiguration` configuration block supports the following arguments:

* `kmsKeyArn` - (Optional) KMS key ARN when `sseAlgorithm` is `aws:kms`.
* `sseAlgorithm` - (Required) Encryption type for the metadata table. Valid values: `aws:kms`, `AES256`.

### `recordExpiration` Block

The `recordExpiration` configuration block supports the following arguments:

* `days` - (Optional) Number of days to retain journal table records.
* `expiration` - (Required) Whether journal table record expiration is enabled or disabled. Valid values: `ENABLED`, `DISABLED`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `metadata_configuration.0.destination` - Destination information for the S3 Metadata configuration.
    * `tableBucketArn` - ARN of the table bucket where the metadata configuration is stored.
    * `table_bucket_type` - Type of the table bucket where the metadata configuration is stored.
    * `table_namespace` - Namespace in the table bucket where the metadata tables for the metadata configuration are stored.
* `metadata_configuration.0.inventory_table_configuration.0.table_arn` - Inventory table ARN.
* `metadata_configuration.0.inventory_table_configuration.0.table_name` - Inventory table name.
* `metadata_configuration.0.journal_table_configuration.0.table_arn` - Journal table ARN.
* `metadata_configuration.0.journal_table_configuration.0.table_name` - Journal table name.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import S3 bucket metadata configuration using the `bucket` or using the `bucket` and `expectedBucketOwner` separated by a comma (`,`). For example:

If the owner (account ID) of the source bucket is the same account used to configure the Terraform AWS Provider, import using the `bucket`:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { S3BucketMetadataConfiguration } from "./.gen/providers/aws/s3-bucket-metadata-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    S3BucketMetadataConfiguration.generateConfigForImport(
      this,
      "example",
      "bucket-name"
    );
  }
}

```

If the owner (account ID) of the source bucket differs from the account used to configure the Terraform AWS Provider, import using the `bucket` and `expectedBucketOwner` separated by a comma (`,`):

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { S3BucketMetadataConfiguration } from "./.gen/providers/aws/s3-bucket-metadata-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    S3BucketMetadataConfiguration.generateConfigForImport(
      this,
      "example",
      "bucket-name,123456789012"
    );
  }
}

```

**Using `terraform import` to import** S3 bucket metadata configuration using the `bucket` or using the `bucket` and `expectedBucketOwner` separated by a comma (`,`). For example:

If the owner (account ID) of the source bucket is the same account used to configure the Terraform AWS Provider, import using the `bucket`:

```console
% terraform import aws_s3_bucket_metadata_configuration.example bucket-name
```

If the owner (account ID) of the source bucket differs from the account used to configure the Terraform AWS Provider, import using the `bucket` and `expectedBucketOwner` separated by a comma (`,`):

```console
% terraform import aws_s3_bucket_metadata_configuration.example bucket-name,123456789012
```

<!-- cache-key: cdktf-0.20.8 input-a60b2204b5042ee53b04dc76150a3ce6d6905c0a6c90ed3b7263d38c3c2091c0 -->