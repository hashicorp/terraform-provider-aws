---
subcategory: "DataSync"
layout: "aws"
page_title: "AWS: aws_datasync_agent"
description: |-
  Manages an AWS DataSync Agent in the provider region
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_datasync_agent

Manages an AWS DataSync Agent deployed on premises.

~> **NOTE:** One of `activationKey` or `ipAddress` must be provided for resource creation (agent activation). Neither is required for resource import. If using `ipAddress`, Terraform must be able to make an HTTP (port 80) GET request to the specified IP address from where it is running. The agent will turn off that HTTP server after activation.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DatasyncAgent } from "./.gen/providers/aws/datasync-agent";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new DatasyncAgent(this, "example", {
      ipAddress: "1.2.3.4",
      name: "example",
    });
  }
}

```

## Example Usage with VPC Endpoints

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsNetworkInterface } from "./.gen/providers/aws/data-aws-network-interface";
import { DataAwsRegion } from "./.gen/providers/aws/data-aws-region";
import { DatasyncAgent } from "./.gen/providers/aws/datasync-agent";
import { VpcEndpoint } from "./.gen/providers/aws/vpc-endpoint";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const current = new DataAwsRegion(this, "current", {});
    const example = new VpcEndpoint(this, "example", {
      securityGroupIds: [Token.asString(awsSecurityGroupExample.id)],
      serviceName: "com.amazonaws.${" + current.name + "}.datasync",
      subnetIds: [Token.asString(awsSubnetExample.id)],
      vpcEndpointType: "Interface",
      vpcId: Token.asString(awsVpcExample.id),
    });
    const dataAwsNetworkInterfaceExample = new DataAwsNetworkInterface(
      this,
      "example_2",
      {
        id: Token.asString(
          Fn.lookupNested(Fn.tolist(example.networkInterfaceIds), ["0"])
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsNetworkInterfaceExample.overrideLogicalId("example");
    const awsDatasyncAgentExample = new DatasyncAgent(this, "example_3", {
      ipAddress: "1.2.3.4",
      name: "example",
      privateLinkEndpoint: Token.asString(
        dataAwsNetworkInterfaceExample.privateIp
      ),
      securityGroupArns: [Token.asString(awsSecurityGroupExample.arn)],
      subnetArns: [Token.asString(awsSubnetExample.arn)],
      vpcEndpointId: example.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDatasyncAgentExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) Name of the DataSync Agent.
* `activationKey` - (Optional) DataSync Agent activation key during resource creation. Conflicts with `ipAddress`. If an `ipAddress` is provided instead, Terraform will retrieve the `activationKey` as part of the resource creation.
* `ipAddress` - (Optional) DataSync Agent IP address to retrieve activation key during resource creation. Conflicts with `activationKey`. DataSync Agent must be accessible on port 80 from where Terraform is running.
* `privateLinkEndpoint` - (Optional) The IP address of the VPC endpoint the agent should connect to when retrieving an activation key during resource creation. Conflicts with `activationKey`.
* `securityGroupArns` - (Optional) The ARNs of the security groups used to protect your data transfer task subnets.
* `subnetArns` - (Optional) The Amazon Resource Names (ARNs) of the subnets in which DataSync will create elastic network interfaces for each data transfer task.
* `tags` - (Optional) Key-value pairs of resource tags to assign to the DataSync Agent. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `vpcEndpointId` - (Optional) The ID of the VPC (virtual private cloud) endpoint that the agent has access to.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Amazon Resource Name (ARN) of the DataSync Agent.
* `arn` - Amazon Resource Name (ARN) of the DataSync Agent.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_datasync_agent` using the DataSync Agent Amazon Resource Name (ARN). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DatasyncAgent } from "./.gen/providers/aws/datasync-agent";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DatasyncAgent.generateConfigForImport(
      this,
      "example",
      "arn:aws:datasync:us-east-1:123456789012:agent/agent-12345678901234567"
    );
  }
}

```

Using `terraform import`, import `aws_datasync_agent` using the DataSync Agent Amazon Resource Name (ARN). For example:

```console
% terraform import aws_datasync_agent.example arn:aws:datasync:us-east-1:123456789012:agent/agent-12345678901234567
```

<!-- cache-key: cdktf-0.20.8 input-0acba5dd129383087553f49e6f95af67ac05fa502cb2be0e9157f77f225a5cfa -->