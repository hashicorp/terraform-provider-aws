---
subcategory: "KMS (Key Management)"
layout: "aws"
page_title: "AWS: aws_kms_alias"
description: |-
  Provides a display name for a customer master key.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_kms_alias

Provides an alias for a KMS customer master key. AWS Console enforces 1-to-1 mapping between aliases & keys,
but API (hence Terraform too) allows you to create as many aliases as
the [account limits](http://docs.aws.amazon.com/kms/latest/developerguide/limits.html) allow you.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { KmsAlias } from "./.gen/providers/aws/kms-alias";
import { KmsKey } from "./.gen/providers/aws/kms-key";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const a = new KmsKey(this, "a", {});
    const awsKmsAliasA = new KmsAlias(this, "a_1", {
      name: "alias/my-key-alias",
      targetKeyId: a.keyId,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsKmsAliasA.overrideLogicalId("a");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `name` - (Optional) The display name of the alias. The name must start with the word "alias" followed by a forward slash (alias/)
* `namePrefix` - (Optional) Creates an unique alias beginning with the specified prefix.
The name must start with the word "alias" followed by a forward slash (alias/).  Conflicts with `name`.
* `targetKeyId` - (Required) Identifier for the key for which the alias is for, can be either an ARN or key_id.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The Amazon Resource Name (ARN) of the key alias.
* `targetKeyArn` - The Amazon Resource Name (ARN) of the target key identifier.

## Import

In Terraform v1.12.0 and later, the [`import` block](https://developer.hashicorp.com/terraform/language/import) can be used with the `identity` attribute. For example:

```terraform
import {
  to = aws_kms_alias.example
  identity = {
    name = "alias/my-key-alias"
  }
}

resource "aws_kms_alias" "example" {
  ### Configuration omitted for brevity ###
}
```

### Identity Schema

#### Required

* `name` - (String) Name of the KMS key alias.

#### Optional

- `accountId` (String) AWS Account where this resource is managed.
- `region` (String) Region where this resource is managed.

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import KMS aliases using the `name`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { KmsAlias } from "./.gen/providers/aws/kms-alias";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    KmsAlias.generateConfigForImport(this, "a", "alias/my-key-alias");
  }
}

```

Using `terraform import`, import KMS aliases using the `name`. For example:

```console
% terraform import aws_kms_alias.a alias/my-key-alias
```

<!-- cache-key: cdktf-0.20.8 input-c017bf9b3d49f24e56bb7e869062e118494d13ef36e5ba52b752f6ec12e4c776 -->