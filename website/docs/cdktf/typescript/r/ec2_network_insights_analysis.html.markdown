---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_ec2_network_insights_analysis"
description: |-
  Provides a Network Insights Analysis resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ec2_network_insights_analysis

Provides a Network Insights Analysis resource. Part of the "Reachability Analyzer" service in the AWS VPC console.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Ec2NetworkInsightsAnalysis } from "./.gen/providers/aws/ec2-network-insights-analysis";
import { Ec2NetworkInsightsPath } from "./.gen/providers/aws/ec2-network-insights-path";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const path = new Ec2NetworkInsightsPath(this, "path", {
      destination: destination.id,
      protocol: "tcp",
      source: source.id,
    });
    new Ec2NetworkInsightsAnalysis(this, "analysis", {
      networkInsightsPathId: path.id,
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `networkInsightsPathId` - (Required) ID of the Network Insights Path to run an analysis on.

The following arguments are optional:

* `filterInArns` - (Optional) A list of ARNs for resources the path must traverse.
* `waitForCompletion` - (Optional) If enabled, the resource will wait for the Network Insights Analysis status to change to `succeeded` or `failed`. Setting this to `false` will skip the process. Default: `true`.
* `tags` - (Optional) Map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `alternatePathHints` - Potential intermediate components of a feasible path. Described below.
* `arn` - ARN of the Network Insights Analysis.
* `explanations` - Explanation codes for an unreachable path. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_Explanation.html) for details.
* `forwardPathComponents` - The components in the path from source to destination. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_PathComponent.html) for details.
* `id` - ID of the Network Insights Analysis.
* `pathFound` - Set to `true` if the destination was reachable.
* `returnPathComponents` - The components in the path from destination to source. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_PathComponent.html) for details.
* `startDate` - The date/time the analysis was started.
* `status` - The status of the analysis. `succeeded` means the analysis was completed, not that a path was found, for that see `pathFound`.
* `statusMessage` - A message to provide more context when the `status` is `failed`.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block).
* `warningMessage` - The warning message.

The `alternatePathHints` object supports the following:

* `componentArn` - The Amazon Resource Name (ARN) of the component.
* `componentId` - The ID of the component.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Network Insights Analyzes using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Ec2NetworkInsightsAnalysis } from "./.gen/providers/aws/ec2-network-insights-analysis";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    Ec2NetworkInsightsAnalysis.generateConfigForImport(
      this,
      "test",
      "nia-0462085c957f11a55"
    );
  }
}

```

Using `terraform import`, import Network Insights Analyzes using the `id`. For example:

```console
% terraform import aws_ec2_network_insights_analysis.test nia-0462085c957f11a55
```

<!-- cache-key: cdktf-0.20.1 input-3063c975278b92355095dba4f28ceb3bf6d912cc122c65aa893f7f35c8cbcee9 -->