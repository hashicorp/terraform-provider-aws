---
subcategory: "AppSync"
layout: "aws"
page_title: "AWS: aws_appsync_channel_namespace"
description: |-
  Manages an AWS AppSync Channel Namespace.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_appsync_channel_namespace

Manages an [AWS AppSync Channel Namespace](https://docs.aws.amazon.com/appsync/latest/eventapi/event-api-concepts.html#namespace).

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppsyncChannelNamespace } from "./.gen/providers/aws/appsync-channel-namespace";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AppsyncChannelNamespace(this, "example", {
      apiId: Token.asString(awsAppsyncApiExample.apiId),
      name: "example-channel-namespace",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `apiId` - (Required) Event API ID.
* `name` - (Required) Name of the channel namespace.

The following arguments are optional:

* `codeHandlers` - (Optional) Event handler functions that run custom business logic to process published events and subscribe requests.
* `handlerConfigs` - (Optional) Configuration for the `onPublish` and `onSubscribe` handlers. See [Handler Configs](#handler-configs) below.
* `publishAuthMode` - (Optional) Authorization modes to use for publishing messages on the channel namespace. This configuration overrides the default API authorization configuration. See [Auth Modes](#auth-modes) below.
* `subscribeAuthMode` - (Optional) Authorization modes to use for subscribing to messages on the channel namespace. This configuration overrides the default API authorization configuration. See [Auth Modes](#auth-modes) below.
* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `tags` - (Optional) Map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### Auth Modes

The `publishAuthMode`, and `subscribeAuthMode` blocks support the following:

* `authType` - (Required) Type of authentication. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`, `AWS_LAMBDA`.

### Handler Configs

The `handlerConfigs` block support the following:

* `onPublish` - (Optional) Handler configuration. See [Handler Config](#handler-config) below.
* `onSubscribe` - (Optional) Handler configuration. See [Handler Config](#handler-config) below.

### Handler Config

The `onPublish` and `onSubscribe` blocks support the following:

* `behavior` - (Required) Behavior for the handler. Valid values: `CODE`, `DIRECT`.
* `integration` - (Required) Integration data source configuration for the handler. See [Integration](#integration) below.

### Integration

The `integration` block support the following:

* `dataSourceName` - (Required) Unique name of the data source that has been configured on the API.
* `lambdaConfig` - (Optional) Configuration for a Lambda data source. See [Lambda Config](#lambda-config) below.

### Lambad Config

The `lambdaConfig` block support the following:

* `invokeType` - (Optional) Invocation type for a Lambda data source. Valid values: `REQUEST_RESPONSE`, `EVENT`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `channelNamespaceArn` - ARN of the channel namespace.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import AppSync Channel Namespace using the `apiId` and `name` separated by a comma (`,`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppsyncChannelNamespace } from "./.gen/providers/aws/appsync-channel-namespace";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    AppsyncChannelNamespace.generateConfigForImport(
      this,
      "example",
      "example-api-id,example-channel-namespace"
    );
  }
}

```

Using `terraform import`, import AppSync Channel Namespace using the `apiId` and `name` separated by a comma (`,`). For example:

```console
% terraform import aws_appsync_channel_namespace.example example-api-id,example-channel-namespace
```

<!-- cache-key: cdktf-0.20.8 input-be74b6f51ec7954ecb7d42eb287e3d970992047986bd6fbb45cbb1487c550d01 -->