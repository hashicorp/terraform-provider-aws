---
subcategory: "Verified Access"
layout: "aws"
page_title: "AWS: aws_verifiedaccess_instance_logging_configuration"
description: |-
  Terraform resource for managing a Verified Access Instance Logging Configuration.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_verifiedaccess_instance_logging_configuration

Terraform resource for managing a Verified Access Logging Configuration.

## Example Usage

### With CloudWatch Logging

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VerifiedaccessInstanceLoggingConfiguration } from "./.gen/providers/aws/verifiedaccess-instance-logging-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new VerifiedaccessInstanceLoggingConfiguration(this, "example", {
      accessLogs: {
        cloudwatchLogs: {
          enabled: true,
          logGroup: Token.asString(awsCloudwatchLogGroupExample.id),
        },
      },
      verifiedaccessInstanceId: Token.asString(
        awsVerifiedaccessInstanceExample.id
      ),
    });
  }
}

```

### With Kinesis Data Firehose Logging

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VerifiedaccessInstanceLoggingConfiguration } from "./.gen/providers/aws/verifiedaccess-instance-logging-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new VerifiedaccessInstanceLoggingConfiguration(this, "example", {
      accessLogs: {
        kinesisDataFirehose: {
          deliveryStream: Token.asString(
            awsKinesisFirehoseDeliveryStreamExample.name
          ),
          enabled: true,
        },
      },
      verifiedaccessInstanceId: Token.asString(
        awsVerifiedaccessInstanceExample.id
      ),
    });
  }
}

```

### With S3 logging

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VerifiedaccessInstanceLoggingConfiguration } from "./.gen/providers/aws/verifiedaccess-instance-logging-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new VerifiedaccessInstanceLoggingConfiguration(this, "example", {
      accessLogs: {
        s3: {
          bucketName: Token.asString(awsS3BucketExample.id),
          enabled: true,
          prefix: "example",
        },
      },
      verifiedaccessInstanceId: Token.asString(
        awsVerifiedaccessInstanceExample.id
      ),
    });
  }
}

```

### With all three logging options

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VerifiedaccessInstanceLoggingConfiguration } from "./.gen/providers/aws/verifiedaccess-instance-logging-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new VerifiedaccessInstanceLoggingConfiguration(this, "example", {
      accessLogs: {
        cloudwatchLogs: {
          enabled: true,
          logGroup: Token.asString(awsCloudwatchLogGroupExample.id),
        },
        kinesisDataFirehose: {
          deliveryStream: Token.asString(
            awsKinesisFirehoseDeliveryStreamExample.name
          ),
          enabled: true,
        },
        s3: {
          bucketName: Token.asString(awsS3BucketExample.id),
          enabled: true,
        },
      },
      verifiedaccessInstanceId: Token.asString(
        awsVerifiedaccessInstanceExample.id
      ),
    });
  }
}

```

### With `includeTrustContext`

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VerifiedaccessInstanceLoggingConfiguration } from "./.gen/providers/aws/verifiedaccess-instance-logging-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new VerifiedaccessInstanceLoggingConfiguration(this, "example", {
      accessLogs: {
        includeTrustContext: true,
      },
      verifiedaccessInstanceId: Token.asString(
        awsVerifiedaccessInstanceExample.id
      ),
    });
  }
}

```

### With `logVersion`

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VerifiedaccessInstanceLoggingConfiguration } from "./.gen/providers/aws/verifiedaccess-instance-logging-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new VerifiedaccessInstanceLoggingConfiguration(this, "example", {
      accessLogs: {
        logVersion: "ocsf-1.0.0-rc.2",
      },
      verifiedaccessInstanceId: Token.asString(
        awsVerifiedaccessInstanceExample.id
      ),
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `accessLogs` - (Required) A block that specifies the configuration options for Verified Access instances. [Detailed below](#access_logs).
* `verifiedaccessInstanceId` - (Required - Forces New resource) The ID of the Verified Access instance.

### access_logs

A `accessLogs` block supports the following arguments:

* `cloudwatchLogs` - (Optional) A block that specifies configures sending Verified Access logs to CloudWatch Logs. [Detailed below](#cloudwatch_logs).
* `includeTrustContext` - (Optional) Include trust data sent by trust providers into the logs.
* `kinesisDataFirehose` - (Optional) A block that specifies configures sending Verified Access logs to Kinesis. [Detailed below](#kinesis_data_firehose).
* `logVersion` - (Optional) The logging version to use. Refer to [VerifiedAccessLogOptions](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VerifiedAccessLogOptions.html) for the allowed values.
* `s3` - (Optional) A block that specifies configures sending Verified Access logs to S3. [Detailed below](#s3).

#### cloudwatch_logs

A `cloudwatchLogs` block supports the following arguments:

* `enabled` - (Required) Indicates whether logging is enabled.
* `logGroup` - (Optional) The name of the CloudWatch Logs Log Group.

#### kinesis_data_firehose

A `kinesisDataFirehose` block supports the following arguments:

* `deliveryStream` - (Optional) The name of the delivery stream.
* `enabled` - (Required) Indicates whether logging is enabled.

#### s3

A `s3` block supports the following arguments:

* `bucketName` - (Optional) The name of S3 bucket.
* `bucketOwner` - (Optional) The ID of the AWS account that owns the Amazon S3 bucket.
* `enabled` - (Required) Indicates whether logging is enabled.
* `prefix` - (Optional) The bucket prefix.

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Verified Access Logging Configuration using the Verified Access Instance `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VerifiedaccessInstanceLoggingConfiguration } from "./.gen/providers/aws/verifiedaccess-instance-logging-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    VerifiedaccessInstanceLoggingConfiguration.generateConfigForImport(
      this,
      "example",
      "vai-1234567890abcdef0"
    );
  }
}

```

Using `terraform import`, import Verified Access Logging Configuration using the Verified Access Instance `id`. For example:

```console
% terraform import aws_verifiedaccess_instance_logging_configuration.example vai-1234567890abcdef0
```

<!-- cache-key: cdktf-0.20.8 input-79065eedd6b6f9585bd07a6cdc493096940c3c74f302f0f330a123cc337d069b -->