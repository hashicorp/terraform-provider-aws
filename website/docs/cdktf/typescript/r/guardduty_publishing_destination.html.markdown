---
subcategory: "GuardDuty"
layout: aws
page_title: 'AWS: aws_guardduty_publishing_destination'
description: Provides a resource to manage a GuardDuty PublishingDestination
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_guardduty_publishing_destination

Provides a resource to manage a GuardDuty PublishingDestination. Requires an existing GuardDuty Detector.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { DataAwsRegion } from "./.gen/providers/aws/data-aws-region";
import { GuarddutyDetector } from "./.gen/providers/aws/guardduty-detector";
import { GuarddutyPublishingDestination } from "./.gen/providers/aws/guardduty-publishing-destination";
import { KmsKey } from "./.gen/providers/aws/kms-key";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketAcl } from "./.gen/providers/aws/s3-bucket-acl";
import { S3BucketPolicy } from "./.gen/providers/aws/s3-bucket-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const testGd = new GuarddutyDetector(this, "test_gd", {
      enable: true,
    });
    const gdBucket = new S3Bucket(this, "gd_bucket", {
      bucket: "example",
      forceDestroy: true,
    });
    new S3BucketAcl(this, "gd_bucket_acl", {
      acl: "private",
      bucket: gdBucket.id,
    });
    const current = new DataAwsCallerIdentity(this, "current", {});
    const bucketPol = new DataAwsIamPolicyDocument(this, "bucket_pol", {
      statement: [
        {
          actions: ["s3:PutObject"],
          principals: [
            {
              identifiers: ["guardduty.amazonaws.com"],
              type: "Service",
            },
          ],
          resources: ["${" + gdBucket.arn + "}/*"],
          sid: "Allow PutObject",
        },
        {
          actions: ["s3:GetBucketLocation"],
          principals: [
            {
              identifiers: ["guardduty.amazonaws.com"],
              type: "Service",
            },
          ],
          resources: [gdBucket.arn],
          sid: "Allow GetBucketLocation",
        },
      ],
    });
    const dataAwsRegionCurrent = new DataAwsRegion(this, "current_5", {});
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsRegionCurrent.overrideLogicalId("current");
    const gdBucketPolicy = new S3BucketPolicy(this, "gd_bucket_policy", {
      bucket: gdBucket.id,
      policy: Token.asString(bucketPol.json),
    });
    const kmsPol = new DataAwsIamPolicyDocument(this, "kms_pol", {
      statement: [
        {
          actions: ["kms:GenerateDataKey"],
          principals: [
            {
              identifiers: ["guardduty.amazonaws.com"],
              type: "Service",
            },
          ],
          resources: [
            "arn:aws:kms:${" +
              dataAwsRegionCurrent.name +
              "}:${" +
              current.accountId +
              "}:key/*",
          ],
          sid: "Allow GuardDuty to encrypt findings",
        },
        {
          actions: ["kms:*"],
          principals: [
            {
              identifiers: ["arn:aws:iam::${" + current.accountId + "}:root"],
              type: "AWS",
            },
          ],
          resources: [
            "arn:aws:kms:${" +
              dataAwsRegionCurrent.name +
              "}:${" +
              current.accountId +
              "}:key/*",
          ],
          sid: "Allow all users to modify/delete key (test only)",
        },
      ],
    });
    const gdKey = new KmsKey(this, "gd_key", {
      deletionWindowInDays: 7,
      description: "Temporary key for AccTest of TF",
      policy: Token.asString(kmsPol.json),
    });
    new GuarddutyPublishingDestination(this, "test", {
      dependsOn: [gdBucketPolicy],
      destinationArn: gdBucket.arn,
      detectorId: testGd.id,
      kmsKeyArn: gdKey.arn,
    });
  }
}

```

~> **Note:** Please do not use this simple example for Bucket-Policy and KMS Key Policy in a production environment. It is much too open for such a use-case. Refer to the AWS documentation here: https://docs.aws.amazon.com/guardduty/latest/ug/guardduty_exportfindings.html

## Argument Reference

This resource supports the following arguments:

* `detectorId` - (Required) The detector ID of the GuardDuty.
* `destinationArn` - (Required) The bucket arn and prefix under which the findings get exported. Bucket-ARN is required, the prefix is optional and will be `AWSLogs/[Account-ID]/GuardDuty/[Region]/` if not provided
* `kmsKeyArn` - (Required) The ARN of the KMS key used to encrypt GuardDuty findings. GuardDuty enforces this to be encrypted.
* `destinationType`- (Optional) Currently there is only "S3" available as destination type which is also the default value

~> **Note:** In case of missing permissions (S3 Bucket Policy _or_ KMS Key permissions) the resource will fail to create. If the permissions are changed after resource creation, this can be asked from the AWS API via the "DescribePublishingDestination" call (https://docs.aws.amazon.com/cli/latest/reference/guardduty/describe-publishing-destination.html).

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the GuardDuty PublishingDestination and the detector ID. Format: `<DetectorID>:<PublishingDestinationID>`

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import GuardDuty PublishingDestination using the master GuardDuty detector ID and PublishingDestinationID. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GuarddutyPublishingDestination } from "./.gen/providers/aws/guardduty-publishing-destination";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    GuarddutyPublishingDestination.generateConfigForImport(
      this,
      "test",
      "a4b86f26fa42e7e7cf0d1c333ea77777:a4b86f27a0e464e4a7e0516d242f1234"
    );
  }
}

```

Using `terraform import`, import GuardDuty PublishingDestination using the master GuardDuty detector ID and PublishingDestinationID. For example:

```console
% terraform import aws_guardduty_publishing_destination.test a4b86f26fa42e7e7cf0d1c333ea77777:a4b86f27a0e464e4a7e0516d242f1234
```

<!-- cache-key: cdktf-0.20.8 input-62a290b6c0d879190b7ab5d6098de0abf59abd632ca625aa1c6a6b8f48e6ac47 -->