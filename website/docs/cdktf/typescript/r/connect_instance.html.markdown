---
subcategory: "Connect"
layout: "aws"
page_title: "AWS: aws_connect_instance"
description: |-
  Provides details about a specific Connect Instance.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_connect_instance

Provides an Amazon Connect instance resource. For more information see
[Amazon Connect: Getting Started](https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-get-started.html)

!> **WARN:** Amazon Connect enforces a limit of [100 combined instance creation and deletions every 30 days](https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-service-limits.html#feature-limits). For example, if you create 80 instances and delete 20 of them, you must wait 30 days to create or delete another instance. Use care when creating or deleting instances.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConnectInstance } from "./.gen/providers/aws/connect-instance";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ConnectInstance(this, "test", {
      identityManagementType: "CONNECT_MANAGED",
      inboundCallsEnabled: true,
      instanceAlias: "friendly-name-connect",
      outboundCallsEnabled: true,
      tags: {
        hello: "world",
      },
    });
  }
}

```

## Example Usage with Existing Active Directory

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConnectInstance } from "./.gen/providers/aws/connect-instance";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ConnectInstance(this, "test", {
      directoryId: Token.asString(awsDirectoryServiceDirectoryTest.id),
      identityManagementType: "EXISTING_DIRECTORY",
      inboundCallsEnabled: true,
      instanceAlias: "friendly-name-connect",
      outboundCallsEnabled: true,
    });
  }
}

```

## Example Usage with SAML

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConnectInstance } from "./.gen/providers/aws/connect-instance";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ConnectInstance(this, "test", {
      identityManagementType: "SAML",
      inboundCallsEnabled: true,
      instanceAlias: "friendly-name-connect",
      outboundCallsEnabled: true,
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `autoResolveBestVoicesEnabled` - (Optional) Specifies whether auto resolve best voices is enabled. Defaults to `true`.
* `contactFlowLogsEnabled` - (Optional) Specifies whether contact flow logs are enabled. Defaults to `false`.
* `contactLensEnabled` - (Optional) Specifies whether contact lens is enabled. Defaults to `true`.
* `directoryId` - (Optional) The identifier for the directory if identity_management_type is `EXISTING_DIRECTORY`.
* `earlyMediaEnabled` - (Optional) Specifies whether early media for outbound calls is enabled . Defaults to `true` if outbound calls is enabled.
* `identityManagementType` - (Required) Specifies the identity management type attached to the instance. Allowed Values are: `SAML`, `CONNECT_MANAGED`, `EXISTING_DIRECTORY`.
* `inboundCallsEnabled` - (Required) Specifies whether inbound calls are enabled.
* `instanceAlias` - (Optional) Specifies the name of the instance. Required if `directoryId` not specified.
* `multiPartyConferenceEnabled` - (Optional) Specifies whether multi-party calls/conference is enabled. Defaults to `false`.
* `outboundCallsEnabled` - (Required) Specifies whether outbound calls are enabled.
* `tags` - (Optional) Tags to apply to the Instance. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
<!-- * `use_custom_tts_voices` - (Optional) Whether use custom tts voices is enabled. Defaults to `false` -->

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The identifier of the instance.
* `arn` - Amazon Resource Name (ARN) of the instance.
* `createdTime` - When the instance was created.
* `serviceRole` - The service role of the instance.
* `status` - The state of the instance.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `5m`)
* `delete` - (Default `5m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Connect instances using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConnectInstance } from "./.gen/providers/aws/connect-instance";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ConnectInstance.generateConfigForImport(
      this,
      "example",
      "f1288a1f-6193-445a-b47e-af739b2"
    );
  }
}

```

Using `terraform import`, import Connect instances using the `id`. For example:

```console
% terraform import aws_connect_instance.example f1288a1f-6193-445a-b47e-af739b2
```

<!-- cache-key: cdktf-0.20.8 input-d1443fd148ff97442c0cbc213c98df8bf41697f92b5cbc99863e02219d26d43d -->