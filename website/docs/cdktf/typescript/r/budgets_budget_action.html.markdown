---
subcategory: "Web Services Budgets"
layout: "aws"
page_title: "AWS: aws_budgets_budget_action"
description: |-
  Provides a budget action resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_budgets_budget_action

Provides a budget action resource. Budget actions are cost savings controls that run either automatically on your behalf or by using a workflow approval process.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BudgetsBudget } from "./.gen/providers/aws/budgets-budget";
import { BudgetsBudgetAction } from "./.gen/providers/aws/budgets-budget-action";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { DataAwsPartition } from "./.gen/providers/aws/data-aws-partition";
import { IamPolicy } from "./.gen/providers/aws/iam-policy";
import { IamRole } from "./.gen/providers/aws/iam-role";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new BudgetsBudget(this, "example", {
      budgetType: "USAGE",
      limitAmount: "10.0",
      limitUnit: "dollars",
      name: "example",
      timePeriodStart: "2006-01-02_15:04",
      timeUnit: "MONTHLY",
    });
    const dataAwsIamPolicyDocumentExample = new DataAwsIamPolicyDocument(
      this,
      "example_1",
      {
        statement: [
          {
            actions: ["ec2:Describe*"],
            effect: "Allow",
            resources: ["*"],
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsIamPolicyDocumentExample.overrideLogicalId("example");
    const current = new DataAwsPartition(this, "current", {});
    const awsIamPolicyExample = new IamPolicy(this, "example_3", {
      description: "My example policy",
      name: "example",
      policy: Token.asString(dataAwsIamPolicyDocumentExample.json),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamPolicyExample.overrideLogicalId("example");
    const assumeRole = new DataAwsIamPolicyDocument(this, "assume_role", {
      statement: [
        {
          actions: ["sts:AssumeRole"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["budgets.${" + current.dnsSuffix + "}"],
              type: "Service",
            },
          ],
        },
      ],
    });
    const awsIamRoleExample = new IamRole(this, "example_5", {
      assumeRolePolicy: Token.asString(assumeRole.json),
      name: "example",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRoleExample.overrideLogicalId("example");
    const awsBudgetsBudgetActionExample = new BudgetsBudgetAction(
      this,
      "example_6",
      {
        actionThreshold: {
          actionThresholdType: "ABSOLUTE_VALUE",
          actionThresholdValue: 100,
        },
        actionType: "APPLY_IAM_POLICY",
        approvalModel: "AUTOMATIC",
        budgetName: example.name,
        definition: {
          iamActionDefinition: {
            policyArn: Token.asString(awsIamPolicyExample.arn),
            roles: [Token.asString(awsIamRoleExample.name)],
          },
        },
        executionRoleArn: Token.asString(awsIamRoleExample.arn),
        notificationType: "ACTUAL",
        subscriber: [
          {
            address: "example@example.example",
            subscriptionType: "EMAIL",
          },
        ],
        tags: {
          Tag1: "Value1",
          Tag2: "Value2",
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsBudgetsBudgetActionExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `accountId` - (Optional) The ID of the target account for budget. Will use current user's account_id by default if omitted.
* `budgetName` - (Required) The name of a budget.
* `actionThreshold` - (Required) The trigger threshold of the action. See [Action Threshold](#action-threshold).
* `actionType` - (Required) The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. Valid values are `APPLY_IAM_POLICY`, `APPLY_SCP_POLICY`, and `RUN_SSM_DOCUMENTS`.
* `approvalModel` - (Required) This specifies if the action needs manual or automatic approval. Valid values are `AUTOMATIC` and `MANUAL`.
* `definition` - (Required) Specifies all of the type-specific parameters. See [Definition](#definition).
* `executionRoleArn` - (Required) The role passed for action execution and reversion. Roles and actions must be in the same account.
* `notificationType` - (Required) The type of a notification. Valid values are `ACTUAL` or `FORECASTED`.
* `subscriber` - (Required) A list of subscribers. See [Subscriber](#subscriber).
* `tags` - (Optional) Map of tags assigned to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### Action Threshold

* `actionThresholdType` - (Required) The type of threshold for a notification. Valid values are `PERCENTAGE` or `ABSOLUTE_VALUE`.
* `actionThresholdValue` - (Required) The threshold of a notification.

### Subscriber

* `address` - (Required) The address that AWS sends budget notifications to, either an SNS topic or an email.
* `subscriptionType` - (Required) The type of notification that AWS sends to a subscriber. Valid values are `SNS` or `EMAIL`.

### Definition

* `iamActionDefinition` - (Optional) The AWS Identity and Access Management (IAM) action definition details. See [IAM Action Definition](#iam-action-definition).
* `ssmActionDefinition` - (Optional) The AWS Systems Manager (SSM) action definition details. See [SSM Action Definition](#ssm-action-definition).
* `scpActionDefinition` - (Optional) The service control policies (SCPs) action definition details. See [SCP Action Definition](#scp-action-definition).

#### IAM Action Definition

* `policyArn` - (Required) The Amazon Resource Name (ARN) of the policy to be attached.
* `groups` - (Optional) A list of groups to be attached. There must be at least one group.
* `roles` - (Optional) A list of roles to be attached. There must be at least one role.
* `users` - (Optional) A list of users to be attached. There must be at least one user.

#### SCP Action Definition

* `policyId` - (Required) The policy ID attached.
* `targetIds` - (Optional) A list of target IDs.

#### SSM Action Definition

* `actionSubType` - (Required) The action subType. Valid values are `STOP_EC2_INSTANCES` or `STOP_RDS_INSTANCES`.
* `instanceIds` - (Required) The EC2 and RDS instance IDs.
* `region` - (Required) The Region to run the SSM document.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `actionId` - The id of the budget action.
* `id` - ID of resource.
* `arn` - The ARN of the budget action.
* `status` - The status of the budget action.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `5m`)
* `update` - (Default `5m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import budget actions using `AccountID:ActionID:BudgetName`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BudgetsBudgetAction } from "./.gen/providers/aws/budgets-budget-action";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    BudgetsBudgetAction.generateConfigForImport(
      this,
      "myBudget",
      "123456789012:some-id:myBudget"
    );
  }
}

```

Using `terraform import`, import budget actions using `AccountID:ActionID:BudgetName`. For example:

```console
% terraform import aws_budgets_budget_action.myBudget 123456789012:some-id:myBudget
```

<!-- cache-key: cdktf-0.20.1 input-c9d3539dce458a1f85471112fa94f680d4969a1d7317d9898a66654455ae6407 -->