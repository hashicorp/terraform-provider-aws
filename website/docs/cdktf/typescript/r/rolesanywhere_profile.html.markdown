---
subcategory: "Roles Anywhere"
layout: "aws"
page_title: "AWS: aws_rolesanywhere_profile"
description: |-
  Provides a Roles Anywhere Profile resource
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_rolesanywhere_profile

Terraform resource for managing a Roles Anywhere Profile.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamRole } from "./.gen/providers/aws/iam-role";
import { RolesanywhereProfile } from "./.gen/providers/aws/rolesanywhere-profile";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new IamRole(this, "test", {
      assumeRolePolicy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: [
                "sts:AssumeRole",
                "sts:TagSession",
                "sts:SetSourceIdentity",
              ],
              Effect: "Allow",
              Principal: {
                Service: "rolesanywhere.amazonaws.com",
              },
              Sid: "",
            },
          ],
          Version: "2012-10-17",
        })
      ),
      name: "test",
      path: "/",
    });
    const awsRolesanywhereProfileTest = new RolesanywhereProfile(
      this,
      "test_1",
      {
        name: "example",
        roleArns: [test.arn],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRolesanywhereProfileTest.overrideLogicalId("test");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `durationSeconds` - (Optional) The number of seconds the vended session credentials are valid for. Defaults to 3600.
* `enabled` - (Optional) Whether or not the Profile is enabled.
* `managedPolicyArns` - (Optional) A list of managed policy ARNs that apply to the vended session credentials.
* `name` - (Required) The name of the Profile.
* `requireInstanceProperties` - (Optional) Specifies whether instance properties are required in [CreateSession](https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_CreateSession.html) requests with this profile.
* `roleArns` - (Required) A list of IAM roles that this profile can assume
* `sessionPolicy` - (Optional) A session policy that applies to the trust boundary of the vended session credentials.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of the Profile
* `id` - The Profile ID.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_rolesanywhere_profile` using its `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { RolesanywhereProfile } from "./.gen/providers/aws/rolesanywhere-profile";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    RolesanywhereProfile.generateConfigForImport(
      this,
      "example",
      "db138a85-8925-4f9f-a409-08231233cacf"
    );
  }
}

```

Using `terraform import`, import `aws_rolesanywhere_profile` using its `id`. For example:

```console
% terraform import aws_rolesanywhere_profile.example db138a85-8925-4f9f-a409-08231233cacf
```

<!-- cache-key: cdktf-0.20.8 input-6014aa495fc385a2acfb6b7b4cb2e96800954c65d55817afa8439b60e41c2538 -->