---
subcategory: "Glue"
layout: "aws"
page_title: "AWS: aws_glue_schema"
description: |-
  Provides a Glue Schema resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_glue_schema

Provides a Glue Schema resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueSchema } from "./.gen/providers/aws/glue-schema";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new GlueSchema(this, "example", {
      compatibility: "NONE",
      dataFormat: "AVRO",
      registryArn: test.arn,
      schemaDefinition:
        '{\\"type\\": \\"record\\", \\"name\\": \\"r1\\", \\"fields\\": [ {\\"name\\": \\"f1\\", \\"type\\": \\"int\\"}, {\\"name\\": \\"f2\\", \\"type\\": \\"string\\"} ]}',
      schemaName: "example",
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `schemaName` – (Required) The Name of the schema.
* `registryArn` - (Required) The ARN of the Glue Registry to create the schema in.
* `dataFormat` - (Required) The data format of the schema definition. Valid values are `AVRO`, `JSON` and `PROTOBUF`.
* `compatibility` - (Required) The compatibility mode of the schema. Values values are: `NONE`, `DISABLED`, `BACKWARD`, `BACKWARD_ALL`, `FORWARD`, `FORWARD_ALL`, `FULL`, and `FULL_ALL`.
* `schemaDefinition` - (Required) The schema definition using the `dataFormat` setting for `schemaName`.
* `description` – (Optional) A description of the schema.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of the schema.
* `id` - Amazon Resource Name (ARN) of the schema.
* `registryName` - The name of the Glue Registry.
* `latestSchemaVersion` - The latest version of the schema associated with the returned schema definition.
* `nextSchemaVersion` - The next version of the schema associated with the returned schema definition.
* `schemaCheckpoint` - The version number of the checkpoint (the last time the compatibility mode was changed).
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Glue Registries using `arn`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GlueSchema } from "./.gen/providers/aws/glue-schema";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    GlueSchema.generateConfigForImport(
      this,
      "example",
      "arn:aws:glue:us-west-2:123456789012:schema/example/example"
    );
  }
}

```

Using `terraform import`, import Glue Registries using `arn`. For example:

```console
% terraform import aws_glue_schema.example arn:aws:glue:us-west-2:123456789012:schema/example/example
```

<!-- cache-key: cdktf-0.20.8 input-07d8be72b0ef5ec7a36f90bf89a090da4b36963b4802cf618422290e600eac94 -->