---
subcategory: "ELB (Elastic Load Balancing)"
layout: "aws"
page_title: "AWS: aws_lb_target_group_attachment"
description: |-
  Provides the ability to register instances and containers with a LB
  target group
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_lb_target_group_attachment

Provides the ability to register instances and containers with an Application Load Balancer (ALB) or Network Load Balancer (NLB) target group. For attaching resources with Elastic Load Balancer (ELB), see the [`aws_elb_attachment` resource](/docs/providers/aws/r/elb_attachment.html).

~> **Note:** `aws_alb_target_group_attachment` is known as `aws_lb_target_group_attachment`. The functionality is identical.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Instance } from "./.gen/providers/aws/instance";
import { LbTargetGroup } from "./.gen/providers/aws/lb-target-group";
import { LbTargetGroupAttachment } from "./.gen/providers/aws/lb-target-group-attachment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new Instance(this, "test", {});
    const awsLbTargetGroupTest = new LbTargetGroup(this, "test_1", {});
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsLbTargetGroupTest.overrideLogicalId("test");
    const awsLbTargetGroupAttachmentTest = new LbTargetGroupAttachment(
      this,
      "test_2",
      {
        port: 80,
        targetGroupArn: Token.asString(awsLbTargetGroupTest.arn),
        targetId: test.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsLbTargetGroupAttachmentTest.overrideLogicalId("test");
  }
}

```

### Lambda Target

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunction } from "./.gen/providers/aws/lambda-function";
import { LambdaPermission } from "./.gen/providers/aws/lambda-permission";
import { LbTargetGroup } from "./.gen/providers/aws/lb-target-group";
import { LbTargetGroupAttachment } from "./.gen/providers/aws/lb-target-group-attachment";
interface MyConfig {
  functionName: any;
  role: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    const test = new LambdaFunction(this, "test", {
      functionName: config.functionName,
      role: config.role,
    });
    const awsLbTargetGroupTest = new LbTargetGroup(this, "test_1", {
      name: "test",
      targetType: "lambda",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsLbTargetGroupTest.overrideLogicalId("test");
    const withLb = new LambdaPermission(this, "with_lb", {
      action: "lambda:InvokeFunction",
      functionName: test.functionName,
      principal: "elasticloadbalancing.amazonaws.com",
      sourceArn: Token.asString(awsLbTargetGroupTest.arn),
      statementId: "AllowExecutionFromlb",
    });
    const awsLbTargetGroupAttachmentTest = new LbTargetGroupAttachment(
      this,
      "test_3",
      {
        dependsOn: [withLb],
        targetGroupArn: Token.asString(awsLbTargetGroupTest.arn),
        targetId: test.arn,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsLbTargetGroupAttachmentTest.overrideLogicalId("test");
  }
}

```

### Registering Multiple Targets

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import {
  Token,
  TerraformCount,
  TerraformIterator,
  Fn,
  TerraformStack,
} from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Instance } from "./.gen/providers/aws/instance";
import { LbTargetGroup } from "./.gen/providers/aws/lb-target-group";
import { LbTargetGroupAttachment } from "./.gen/providers/aws/lb-target-group-attachment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const exampleCount = TerraformCount.of(Token.asNumber("3"));
    const example = new Instance(this, "example", {
      count: exampleCount,
    });
    const awsLbTargetGroupExample = new LbTargetGroup(this, "example_1", {});
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsLbTargetGroupExample.overrideLogicalId("example");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const exampleForEachIterator = TerraformIterator.fromList(
      Token.asAny("${{ for k, v in ${" + example.fqn + "} : k => v}}")
    );
    const awsLbTargetGroupAttachmentExample = new LbTargetGroupAttachment(
      this,
      "example_2",
      {
        port: 80,
        targetGroupArn: Token.asString(awsLbTargetGroupExample.arn),
        targetId: Token.asString(
          Fn.lookupNested(exampleForEachIterator.value, ["id"])
        ),
        forEach: exampleForEachIterator,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsLbTargetGroupAttachmentExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `targetGroupArn` - (Required) The ARN of the target group with which to register targets.
* `targetId` (Required) The ID of the target. This is the Instance ID for an instance, or the container ID for an ECS container. If the target type is `ip`, specify an IP address. If the target type is `lambda`, specify the Lambda function ARN. If the target type is `alb`, specify the ALB ARN.

The following arguments are optional:

* `availabilityZone` - (Optional) The Availability Zone where the IP address of the target is to be registered. If the private IP address is outside of the VPC scope, this value must be set to `all`.
* `port` - (Optional) The port on which targets receive traffic.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - A unique identifier for the attachment.

## Import

You cannot import Target Group Attachments.

<!-- cache-key: cdktf-0.20.1 input-ab9658101e55ff2b7e9dcb8c1729d7e87f2de8dff7d0559549746cf241510328 -->