---
subcategory: "Lambda"
layout: "aws"
page_title: "AWS: aws_lambda_function_url"
description: |-
  Provides a Lambda function URL resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_lambda_function_url

Provides a Lambda function URL resource. A function URL is a dedicated HTTP(S) endpoint for a Lambda function.

See the [AWS Lambda documentation](https://docs.aws.amazon.com/lambda/latest/dg/lambda-urls.html) for more information.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionUrl } from "./.gen/providers/aws/lambda-function-url";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LambdaFunctionUrl(this, "test_latest", {
      authorizationType: "NONE",
      functionName: test.functionName,
    });
    new LambdaFunctionUrl(this, "test_live", {
      authorizationType: "AWS_IAM",
      cors: {
        allowCredentials: true,
        allowHeaders: ["date", "keep-alive"],
        allowMethods: ["*"],
        allowOrigins: ["*"],
        exposeHeaders: ["keep-alive", "date"],
        maxAge: 86400,
      },
      functionName: test.functionName,
      qualifier: "my_alias",
    });
  }
}

```

## Argument Reference

* `authorizationType` - (Required) The type of authentication that the function URL uses. Set to `"AWS_IAM"` to restrict access to authenticated IAM users only. Set to `"NONE"` to bypass IAM authentication and create a public endpoint. See the [AWS documentation](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html) for more details.
* `cors` - (Optional) The [cross-origin resource sharing (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) settings for the function URL. Documented below.
* `functionName` - (Required) The name (or ARN) of the Lambda function.
* `invokeMode` - (Optional) Determines how the Lambda function responds to an invocation. Valid values are `BUFFERED` (default) and `RESPONSE_STREAM`. See more in [Configuring a Lambda function to stream responses](https://docs.aws.amazon.com/lambda/latest/dg/configuration-response-streaming.html).
* `qualifier` - (Optional) The alias name or `"$LATEST"`.

### cors

This configuration block supports the following attributes:

* `allowCredentials` - (Optional) Whether to allow cookies or other credentials in requests to the function URL. The default is `false`.
* `allowHeaders` - (Optional) The HTTP headers that origins can include in requests to the function URL. For example: `["date", "keep-alive", "x-custom-header"]`.
* `allowMethods` - (Optional) The HTTP methods that are allowed when calling the function URL. For example: `["GET", "POST", "DELETE"]`, or the wildcard character (`["*"]`).
* `allowOrigins` - (Optional) The origins that can access the function URL. You can list any number of specific origins (or the wildcard character (`"*"`)), separated by a comma. For example: `["https://www.example.com", "http://localhost:60905"]`.
* `exposeHeaders` - (Optional) The HTTP headers in your function response that you want to expose to origins that call the function URL.
* `maxAge` - (Optional) The maximum amount of time, in seconds, that web browsers can cache results of a preflight request. By default, this is set to `0`, which means that the browser doesn't cache results. The maximum value is `86400`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `functionArn` - The Amazon Resource Name (ARN) of the function.
* `functionUrl` - The HTTP URL endpoint for the function in the format `https://<url_id>.lambda-url.<region>.on.aws/`.
* `urlId` - A generated ID for the endpoint.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Lambda function URLs using the `functionName` or `function_name/qualifier`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionUrl } from "./.gen/providers/aws/lambda-function-url";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    LambdaFunctionUrl.generateConfigForImport(
      this,
      "testLambdaUrl",
      "my_test_lambda_function"
    );
  }
}

```

Using `terraform import`, import Lambda function URLs using the `functionName` or `function_name/qualifier`. For example:

```console
% terraform import aws_lambda_function_url.test_lambda_url my_test_lambda_function
```

<!-- cache-key: cdktf-0.20.8 input-df0357afbe60810a2222218979789b21c7e2e3036e06fc57dde6705b7ff10e3f -->