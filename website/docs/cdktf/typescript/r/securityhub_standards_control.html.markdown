---
subcategory: "Security Hub"
layout: "aws"
page_title: "AWS: aws_securityhub_standards_control"
description: |-
  Enable/disable Security Hub standards controls.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_securityhub_standards_control

Disable/enable Security Hub standards control in the current region.

The `aws_securityhub_standards_control` behaves differently from normal resources, in that
Terraform does not _create_ this resource, but instead "adopts" it
into management. When you _delete_ this resource configuration, Terraform "abandons" resource as is and just removes it from the state.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SecurityhubAccount } from "./.gen/providers/aws/securityhub-account";
import { SecurityhubStandardsControl } from "./.gen/providers/aws/securityhub-standards-control";
import { SecurityhubStandardsSubscription } from "./.gen/providers/aws/securityhub-standards-subscription";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new SecurityhubAccount(this, "example", {});
    const cisAwsFoundationsBenchmark = new SecurityhubStandardsSubscription(
      this,
      "cis_aws_foundations_benchmark",
      {
        dependsOn: [example],
        standardsArn:
          "arn:aws:securityhub:::ruleset/cis-aws-foundations-benchmark/v/1.2.0",
      }
    );
    new SecurityhubStandardsControl(
      this,
      "ensure_iam_password_policy_prevents_password_reuse",
      {
        controlStatus: "DISABLED",
        dependsOn: [cisAwsFoundationsBenchmark],
        disabledReason: "We handle password policies within Okta",
        standardsControlArn:
          "arn:aws:securityhub:us-east-1:111111111111:control/cis-aws-foundations-benchmark/v/1.2.0/1.10",
      }
    );
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `standardsControlArn` - (Required) The standards control ARN. See the AWS documentation for how to list existing controls using [`get-enabled-standards`](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/securityhub/get-enabled-standards.html) and [`describe-standards-controls`](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/securityhub/describe-standards-controls.html).
* `controlStatus` – (Required) The control status could be `ENABLED` or `DISABLED`. You have to specify `disabledReason` argument for `DISABLED` control status.
* `disabledReason` – (Optional) A description of the reason why you are disabling a security standard control. If you specify this attribute, `controlStatus` will be set to `DISABLED` automatically.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The standard control ARN.
* `controlId` – The identifier of the security standard control.
* `controlStatusUpdatedAt` – The date and time that the status of the security standard control was most recently updated.
* `description` – The standard control longer description. Provides information about what the control is checking for.
* `relatedRequirements` – The list of requirements that are related to this control.
* `remediationUrl` – A link to remediation information for the control in the Security Hub user documentation.
* `severityRating` – The severity of findings generated from this security standard control.
* `title` – The standard control title.

<!-- cache-key: cdktf-0.20.8 input-4f2686dbc145e094fc564010e6dbf6ac103f5be38f045e92ccb633c43bb96b39 -->