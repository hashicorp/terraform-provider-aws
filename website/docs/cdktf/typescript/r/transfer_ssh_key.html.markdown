---
subcategory: "Transfer Family"
layout: "aws"
page_title: "AWS: aws_transfer_ssh_key"
description: |-
  Provides a AWS Transfer SSH Public Key resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_transfer_ssh_key

Provides a AWS Transfer User SSH Key resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicy } from "./.gen/providers/aws/iam-role-policy";
import { TransferServer } from "./.gen/providers/aws/transfer-server";
import { TransferSshKey } from "./.gen/providers/aws/transfer-ssh-key";
import { TransferUser } from "./.gen/providers/aws/transfer-user";
import { PrivateKey } from "./.gen/providers/tls/private-key";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: tls.
    For a more precise conversion please use the --provider flag in convert.*/
    const example = new TransferServer(this, "example", {
      identityProviderType: "SERVICE_MANAGED",
      tags: {
        NAME: "tf-acc-test-transfer-server",
      },
    });
    const tlsPrivateKeyExample = new PrivateKey(this, "example_1", {
      algorithm: "RSA",
      rsa_bits: 4096,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    tlsPrivateKeyExample.overrideLogicalId("example");
    const assumeRole = new DataAwsIamPolicyDocument(this, "assume_role", {
      statement: [
        {
          actions: ["sts:AssumeRole"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["transfer.amazonaws.com"],
              type: "Service",
            },
          ],
        },
      ],
    });
    const dataAwsIamPolicyDocumentExample = new DataAwsIamPolicyDocument(
      this,
      "example_3",
      {
        statement: [
          {
            actions: ["s3:*"],
            effect: "Allow",
            resources: ["*"],
            sid: "AllowFullAccesstoS3",
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsIamPolicyDocumentExample.overrideLogicalId("example");
    const awsIamRoleExample = new IamRole(this, "example_4", {
      assumeRolePolicy: Token.asString(assumeRole.json),
      name: "tf-test-transfer-user-iam-role",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRoleExample.overrideLogicalId("example");
    const awsIamRolePolicyExample = new IamRolePolicy(this, "example_5", {
      name: "tf-test-transfer-user-iam-policy",
      policy: Token.asString(dataAwsIamPolicyDocumentExample.json),
      role: Token.asString(awsIamRoleExample.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyExample.overrideLogicalId("example");
    const awsTransferUserExample = new TransferUser(this, "example_6", {
      role: Token.asString(awsIamRoleExample.arn),
      serverId: example.id,
      tags: {
        NAME: "tftestuser",
      },
      userName: "tftestuser",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsTransferUserExample.overrideLogicalId("example");
    const awsTransferSshKeyExample = new TransferSshKey(this, "example_7", {
      body: Token.asString(
        Fn.trimspace(Token.asString(tlsPrivateKeyExample.publicKeyOpenssh))
      ),
      serverId: example.id,
      userName: Token.asString(awsTransferUserExample.userName),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsTransferSshKeyExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `serverId` - (Requirement) The Server ID of the Transfer Server (e.g., `s-12345678`)
* `userName` - (Requirement) The name of the user account that is assigned to one or more servers.
* `body` - (Requirement) The public key portion of an SSH key pair.

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Transfer SSH Public Key using the `serverId` and `userName` and `sshPublicKeyId` separated by `/`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { TransferSshKey } from "./.gen/providers/aws/transfer-ssh-key";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    TransferSshKey.generateConfigForImport(
      this,
      "bar",
      "s-12345678/test-username/key-12345"
    );
  }
}

```

Using `terraform import`, import Transfer SSH Public Key using the `serverId` and `userName` and `sshPublicKeyId` separated by `/`. For example:

```console
% terraform import aws_transfer_ssh_key.bar s-12345678/test-username/key-12345
```

<!-- cache-key: cdktf-0.20.1 input-b1d6cb5d993474a7ca2476432fffe3755b8615b3fd1b2007ce93984646f2bdbc -->