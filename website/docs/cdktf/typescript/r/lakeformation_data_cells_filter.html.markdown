---
subcategory: "Lake Formation"
layout: "aws"
page_title: "AWS: aws_lakeformation_data_cells_filter"
description: |-
  Terraform resource for managing an AWS Lake Formation Data Cells Filter.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_lakeformation_data_cells_filter

Terraform resource for managing an AWS Lake Formation Data Cells Filter.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LakeformationDataCellsFilter } from "./.gen/providers/aws/lakeformation-data-cells-filter";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LakeformationDataCellsFilter(this, "example", {
      tableData: [
        {
          columnNames: ["my_column"],
          databaseName: test.name,
          name: "example",
          rowFilter: [
            {
              filterExpression: "my_column='example'",
            },
          ],
          tableCatalogId: Token.asString(current.accountId),
          tableName: Token.asString(awsGlueCatalogTableTest.name),
        },
      ],
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `tableData` - (Required) Information about the data cells filter. See [Table Data](#table-data) below for details.

### Table Data

* `databaseName` - (Required) The name of the database.
* `name` - (Required) The name of the data cells filter.
* `tableCatalogId` - (Required) The ID of the Data Catalog.
* `tableName` - (Required) The name of the table.
* `columnNames` - (Optional) A list of column names and/or nested column attributes.
* `columnWildcard` - (Optional) A wildcard with exclusions. See [Column Wildcard](#column-wildcard) below for details.
* `rowFilter` - (Optional) A PartiQL predicate. See [Row Filter](#row-filter) below for details.
* `versionId` - (Optional) ID of the data cells filter version.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Provider composed identifier: `database_name,name,table_catalog_id,table_name`.

#### Column Wildcard

* `excludedColumnNames` - (Optional) Excludes column names. Any column with this name will be excluded.

#### Row Filter

* `allRowsWildcard` - (Optional) A wildcard that matches all rows.
* `filterExpression` - (Optional) A filter expression.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `2m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Lake Formation Data Cells Filter using the `example_id_arg`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LakeformationDataCellsFilter } from "./.gen/providers/aws/lakeformation-data-cells-filter";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    LakeformationDataCellsFilter.generateConfigForImport(
      this,
      "example",
      "database_name,name,table_catalog_id,table_name"
    );
  }
}

```

Using `terraform import`, import Lake Formation Data Cells Filter using the `id`. For example:

```console
% terraform import aws_lakeformation_data_cells_filter.example database_name,name,table_catalog_id,table_name
```

<!-- cache-key: cdktf-0.20.1 input-90a60f5519ebcb7059d4d20667167c76c44a101f6078b3622f7b7f6e54918452 -->