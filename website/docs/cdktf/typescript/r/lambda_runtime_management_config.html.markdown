---
subcategory: "Lambda"
layout: "aws"
page_title: "AWS: aws_lambda_runtime_management_config"
description: |-
  Terraform resource for managing an AWS Lambda Runtime Management Config.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_lambda_runtime_management_config

Terraform resource for managing an AWS Lambda Runtime Management Config.

Refer to the [AWS Lambda documentation](https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html) for supported runtimes.

~> Deletion of this resource returns the runtime update mode to `Auto` (the default behavior).
To leave the configured runtime management options in-place, use a [`removed` block](https://developer.hashicorp.com/terraform/language/resources/syntax#removing-resources) with the destroy lifecycle set to `false`.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaRuntimeManagementConfig } from "./.gen/providers/aws/lambda-runtime-management-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LambdaRuntimeManagementConfig(this, "example", {
      functionName: test.functionName,
      updateRuntimeOn: "FunctionUpdate",
    });
  }
}

```

### `Manual` Update

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaRuntimeManagementConfig } from "./.gen/providers/aws/lambda-runtime-management-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LambdaRuntimeManagementConfig(this, "example", {
      functionName: test.functionName,
      runtimeVersionArn: "arn:aws:lambda:us-east-1::runtime:abcd1234",
      updateRuntimeOn: "Manual",
    });
  }
}

```

~> Once the runtime update mode is set to `Manual`, the `aws_lambda_function` `runtime` cannot be updated. To upgrade a runtime, the `updateRuntimeOn` argument must be set to `Auto` or `FunctionUpdate` prior to changing the function's `runtime` argument.

## Argument Reference

The following arguments are required:

* `functionName` - (Required) Name or ARN of the Lambda function.

The following arguments are optional:

* `qualifier` - (Optional) Version of the function. This can be `$LATEST` or a published version number. If omitted, this resource will manage the runtime configuration for `$LATEST`.
* `runtimeVersionArn` - (Optional) ARN of the runtime version. Only required when `updateRuntimeOn` is `Manual`.
* `updateRuntimeOn` - (Optional) Runtime update mode. Valid values are `Auto`, `FunctionUpdate`, and `Manual`. When a function is created, the default mode is `Auto`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `functionArn` - ARN of the function.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Lambda Runtime Management Config using a comma-delimited string combining `functionName` and `qualifier`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaRuntimeManagementConfig } from "./.gen/providers/aws/lambda-runtime-management-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    LambdaRuntimeManagementConfig.generateConfigForImport(
      this,
      "example",
      "my-function,$LATEST"
    );
  }
}

```

Using `terraform import`, import Lambda Runtime Management Config using a comma-delimited string combining `functionName` and `qualifier`. For example:

```console
% terraform import aws_lambda_runtime_management_config.example my-function,$LATEST
```

<!-- cache-key: cdktf-0.20.1 input-743c9d3a978bd13a2faf177f3e5fb3a476aa5e0a3544f748028e87f499ebf4ca -->