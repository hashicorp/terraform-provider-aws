---
subcategory: "AppSync"
layout: "aws"
page_title: "AWS: aws_appsync_api"
description: |-
  Manages an AWS AppSync Event API.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_appsync_api

Manages an [AWS AppSync Event API](https://docs.aws.amazon.com/appsync/latest/eventapi/event-api-concepts.html#API). Event APIs enable real-time subscriptions and event-driven communication in AppSync applications.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppsyncApi } from "./.gen/providers/aws/appsync-api";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AppsyncApi(this, "example", {
      eventConfig: [
        {
          authProvider: [
            {
              authType: "API_KEY",
            },
          ],
          connectionAuthMode: [
            {
              authType: "API_KEY",
            },
          ],
          defaultPublishAuthMode: [
            {
              authType: "API_KEY",
            },
          ],
          defaultSubscribeAuthMode: [
            {
              authType: "API_KEY",
            },
          ],
        },
      ],
      name: "example-event-api",
    });
  }
}

```

### With Cognito Authentication

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppsyncApi } from "./.gen/providers/aws/appsync-api";
import { CognitoUserPool } from "./.gen/providers/aws/cognito-user-pool";
import { DataAwsRegion } from "./.gen/providers/aws/data-aws-region";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new CognitoUserPool(this, "example", {
      name: "example-user-pool",
    });
    const current = new DataAwsRegion(this, "current", {});
    const awsAppsyncApiExample = new AppsyncApi(this, "example_2", {
      eventConfig: [
        {
          authProvider: [
            {
              authType: "AMAZON_COGNITO_USER_POOLS",
              cognitoConfig: [
                {
                  awsRegion: Token.asString(current.name),
                  userPoolId: example.id,
                },
              ],
            },
          ],
          connectionAuthMode: [
            {
              authType: "AMAZON_COGNITO_USER_POOLS",
            },
          ],
          defaultPublishAuthMode: [
            {
              authType: "AMAZON_COGNITO_USER_POOLS",
            },
          ],
          defaultSubscribeAuthMode: [
            {
              authType: "AMAZON_COGNITO_USER_POOLS",
            },
          ],
        },
      ],
      name: "example-event-api",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAppsyncApiExample.overrideLogicalId("example");
  }
}

```

### With Lambda Authorizer

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppsyncApi } from "./.gen/providers/aws/appsync-api";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AppsyncApi(this, "example", {
      eventConfig: [
        {
          authProvider: [
            {
              authType: "AWS_LAMBDA",
              lambdaAuthorizerConfig: [
                {
                  authorizerResultTtlInSeconds: 300,
                  authorizerUri: Token.asString(
                    awsLambdaFunctionExample.invokeArn
                  ),
                },
              ],
            },
          ],
          connectionAuthMode: [
            {
              authType: "AWS_LAMBDA",
            },
          ],
          defaultPublishAuthMode: [
            {
              authType: "AWS_LAMBDA",
            },
          ],
          defaultSubscribeAuthMode: [
            {
              authType: "AWS_LAMBDA",
            },
          ],
        },
      ],
      name: "example-event-api",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `eventConfig` - (Required) Configuration for the Event API. See [Event Config](#event-config) below.
* `name` - (Required) Name of the Event API.

The following arguments are optional:

* `ownerContact` - (Optional) Contact information for the owner of the Event API.
* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `tags` - (Optional) Map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### Event Config

The `eventConfig` block supports the following:

* `authProvider` - (Required) List of authentication providers. See [Auth Providers](#auth-providers) below.
* `connectionAuthMode` - (Required) List of authentication modes for connections. See [Auth Modes](#auth-modes) below.
* `defaultPublishAuthMode` - (Required) List of default authentication modes for publishing. See [Auth Modes](#auth-modes) below.
* `defaultSubscribeAuthMode` - (Required) List of default authentication modes for subscribing. See [Auth Modes](#auth-modes) below.
* `logConfig` - (Optional) Logging configuration. See [Log Config](#log-config) below.

### Auth Providers

The `authProvider` block supports the following:

* `authType` - (Required) Type of authentication provider. Valid values: `AMAZON_COGNITO_USER_POOLS`, `AWS_LAMBDA`, `OPENID_CONNECT`, `API_KEY`.
* `cognitoConfig` - (Optional) Configuration for Cognito user pool authentication. Required when `authType` is `AMAZON_COGNITO_USER_POOLS`. See [Cognito Config](#cognito-config) below.
* `lambdaAuthorizerConfig` - (Optional) Configuration for Lambda authorization. Required when `authType` is `AWS_LAMBDA`. See [Lambda Authorizer Config](#lambda-authorizer-config) below.
* `openidConnectConfig` - (Optional) Configuration for OpenID Connect. Required when `authType` is `OPENID_CONNECT`. See [OpenID Connect Config](#openid-connect-config) below.

### Cognito Config

The `cognitoConfig` block supports the following:

* `appIdClientRegex` - (Optional) Regular expression for matching the client ID.
* `awsRegion` - (Required) AWS region where the user pool is located.
* `userPoolId` - (Required) ID of the Cognito user pool.

### Lambda Authorizer Config

The `lambdaAuthorizerConfig` block supports the following:

* `authorizerResultTtlInSeconds` - (Optional) TTL in seconds for the authorization result cache.
* `authorizerUri` - (Required) URI of the Lambda function for authorization.
* `identityValidationExpression` - (Optional) Regular expression for identity validation.

### OpenID Connect Config

The `openidConnectConfig` block supports the following:

* `authTtl` - (Optional) TTL in seconds for the authentication token.
* `clientId` - (Optional) Client ID for the OpenID Connect provider.
* `iatTtl` - (Optional) TTL in seconds for the issued at time.
* `issuer` - (Required) Issuer URL for the OpenID Connect provider.

### Auth Modes

The `connectionAuthMode`, `defaultPublishAuthMode`, and `defaultSubscribeAuthMode` blocks support the following:

* `authType` - (Required) Type of authentication. Valid values: `API_KEY`, `AWS_IAM`, `AMAZON_COGNITO_USER_POOLS`, `OPENID_CONNECT`, `AWS_LAMBDA`.

### Log Config

The `logConfig` block supports the following:

* `cloudwatchLogsRoleArn` - (Required) ARN of the IAM role for CloudWatch logs.
* `logLevel` - (Required) Log level. Valid values: `NONE`, `ERROR`, `ALL`, `INFO`, `DEBUG`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `apiId` - ID of the Event API.
* `apiArn` - ARN of the Event API.
* `dns` - DNS configuration for the Event API.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).
* `wafWebAclArn` - ARN of the associated WAF web ACL.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import AppSync Event API using the `apiId`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppsyncApi } from "./.gen/providers/aws/appsync-api";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    AppsyncApi.generateConfigForImport(this, "example", "example-api-id");
  }
}

```

Using `terraform import`, import AppSync Event API using the `apiId`. For example:

```console
% terraform import aws_appsync_api.example example-api-id
```

<!-- cache-key: cdktf-0.20.8 input-7aad35e5a1b1cc865678d856567b2b1903c5a96019160119e25b683b6ae0add1 -->