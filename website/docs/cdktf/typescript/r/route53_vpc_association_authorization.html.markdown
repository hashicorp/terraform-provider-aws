---
subcategory: "Route 53"
layout: "aws"
page_title: "AWS: aws_route53_vpc_association_authorization"
description: |-
  Authorizes a VPC in a different account to be associated with a local Route53 Hosted Zone
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_route53_vpc_association_authorization

Authorizes a VPC in a different account to be associated with a local Route53 Hosted Zone.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AwsProvider } from "./.gen/providers/aws/provider";
import { Route53VpcAssociationAuthorization } from "./.gen/providers/aws/route53-vpc-association-authorization";
import { Route53Zone } from "./.gen/providers/aws/route53-zone";
import { Route53ZoneAssociation } from "./.gen/providers/aws/route53-zone-association";
import { Vpc } from "./.gen/providers/aws/vpc";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {});
    const alternate = new AwsProvider(this, "aws_1", {
      alias: "alternate",
    });
    const awsVpcAlternate = new Vpc(this, "alternate", {
      cidrBlock: "10.7.0.0/16",
      enableDnsHostnames: true,
      enableDnsSupport: true,
      provider: alternate,
    });
    const example = new Vpc(this, "example", {
      cidrBlock: "10.6.0.0/16",
      enableDnsHostnames: true,
      enableDnsSupport: true,
    });
    const awsRoute53ZoneExample = new Route53Zone(this, "example_4", {
      lifecycle: {
        ignoreChanges: [vpc],
      },
      name: "example.com",
      vpc: [
        {
          vpcId: example.id,
        },
      ],
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRoute53ZoneExample.overrideLogicalId("example");
    const awsRoute53VpcAssociationAuthorizationExample =
      new Route53VpcAssociationAuthorization(this, "example_5", {
        vpcId: Token.asString(awsVpcAlternate.id),
        zoneId: Token.asString(awsRoute53ZoneExample.id),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRoute53VpcAssociationAuthorizationExample.overrideLogicalId("example");
    const awsRoute53ZoneAssociationExample = new Route53ZoneAssociation(
      this,
      "example_6",
      {
        provider: alternate,
        vpcId: Token.asString(
          awsRoute53VpcAssociationAuthorizationExample.vpcId
        ),
        zoneId: Token.asString(
          awsRoute53VpcAssociationAuthorizationExample.zoneId
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRoute53ZoneAssociationExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `zoneId` - (Required) The ID of the private hosted zone that you want to authorize associating a VPC with.
* `vpcId` - (Required) The VPC to authorize for association with the private hosted zone.
* `vpcRegion` - (Optional) The VPC's region. Defaults to the region of the AWS provider.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The calculated unique identifier for the association.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Route 53 VPC Association Authorizations using the Hosted Zone ID and VPC ID, separated by a colon (`:`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Route53VpcAssociationAuthorization } from "./.gen/providers/aws/route53-vpc-association-authorization";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    Route53VpcAssociationAuthorization.generateConfigForImport(
      this,
      "example",
      "Z123456ABCDEFG:vpc-12345678"
    );
  }
}

```

Using `terraform import`, import Route 53 VPC Association Authorizations using the Hosted Zone ID and VPC ID, separated by a colon (`:`). For example:

```console
% terraform import aws_route53_vpc_association_authorization.example Z123456ABCDEFG:vpc-12345678
```

<!-- cache-key: cdktf-0.20.8 input-5538910c15da1bdf9d215131a092f3a81fc71383f121c9a24ab62a7757345a40 -->