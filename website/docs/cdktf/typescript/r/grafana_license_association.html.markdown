---
subcategory: "Managed Grafana"
layout: "aws"
page_title: "AWS: aws_grafana_license_association"
description: |-
  Provides an Amazon Managed Grafana workspace license association resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_grafana_license_association

Provides an Amazon Managed Grafana workspace license association resource.

## Example Usage

### Basic configuration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GrafanaLicenseAssociation } from "./.gen/providers/aws/grafana-license-association";
import { GrafanaWorkspace } from "./.gen/providers/aws/grafana-workspace";
import { IamRole } from "./.gen/providers/aws/iam-role";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const assume = new IamRole(this, "assume", {
      assumeRolePolicy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: "sts:AssumeRole",
              Effect: "Allow",
              Principal: {
                Service: "grafana.amazonaws.com",
              },
              Sid: "",
            },
          ],
          Version: "2012-10-17",
        })
      ),
      name: "grafana-assume",
    });
    const example = new GrafanaWorkspace(this, "example", {
      accountAccessType: "CURRENT_ACCOUNT",
      authenticationProviders: ["SAML"],
      permissionType: "SERVICE_MANAGED",
      roleArn: assume.arn,
    });
    const awsGrafanaLicenseAssociationExample = new GrafanaLicenseAssociation(
      this,
      "example_2",
      {
        licenseType: "ENTERPRISE_FREE_TRIAL",
        workspaceId: example.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsGrafanaLicenseAssociationExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `grafanaToken` - (Optional) A token from Grafana Labs that ties your AWS account with a Grafana Labs account.
* `licenseType` - (Required) The type of license for the workspace license association. Valid values are `ENTERPRISE` and `ENTERPRISE_FREE_TRIAL`.
* `workspaceId` - (Required) The workspace id.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `freeTrialExpiration` - If `licenseType` is set to `ENTERPRISE_FREE_TRIAL`, this is the expiration date of the free trial.
* `licenseExpiration` - If `licenseType` is set to `ENTERPRISE`, this is the expiration date of the enterprise license.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Grafana workspace license association using the workspace's `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GrafanaLicenseAssociation } from "./.gen/providers/aws/grafana-license-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    GrafanaLicenseAssociation.generateConfigForImport(
      this,
      "example",
      "g-2054c75a02"
    );
  }
}

```

Using `terraform import`, import Grafana workspace license association using the workspace's `id`. For example:

```console
% terraform import aws_grafana_license_association.example g-2054c75a02
```

<!-- cache-key: cdktf-0.20.8 input-78984364313468b80fa3a73019f77575fce8fb8f6a36ef50fa639d2f9d2428e5 -->