---
subcategory: "DSQL"
layout: "aws"
page_title: "AWS: aws_dsql_cluster"
description: |-
  Terraform resource for managing an Amazon Aurora DSQL Cluster.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_dsql_cluster

Terraform resource for managing an Amazon Aurora DSQL Cluster.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DsqlCluster } from "./.gen/providers/aws/dsql-cluster";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new DsqlCluster(this, "example", {
      deletionProtectionEnabled: true,
      tags: {
        Name: "TestCluster",
      },
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `deletionProtectionEnabled` - (Required) Whether deletion protection is enabled in this cluster.
* `kmsEncryptionKey` - (Optional) The ARN of the AWS KMS key that encrypts data in the DSQL Cluster, or `"AWS_OWNED_KMS_KEY"`.
* `multiRegionProperties` - (Optional) Multi-region properties of the DSQL Cluster.
    * `witnessRegion` - (Required) Witness region for the multi-region clusters. Setting this makes this cluster a multi-region cluster. Changing it recreates the resource.
* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `tags` - (Optional) Set of tags to be associated with the AWS DSQL Cluster resource.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the Cluster.
* `encryptionDetails` - Encryption configuration details for the DSQL Cluster.
    * `encryption_status` - The status of encryption for the DSQL Cluster.
    * `encryptionType` - The type of encryption that protects the data on the DSQL Cluster.
* `identifier` - Cluster Identifier.
* `multiRegionProperties` - Multi-region properties of the DSQL Cluster.
    * `clusters` - List of DSQL Cluster ARNs peered to this cluster.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block).
* `vpcEndpointServiceName` - The DSQL Cluster's VPC endpoint service name.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `update` - (Default `30m`)
* `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import DSQL Cluster using the `identifier`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DsqlCluster } from "./.gen/providers/aws/dsql-cluster";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DsqlCluster.generateConfigForImport(
      this,
      "example",
      "abcde1f234ghijklmnop5qr6st"
    );
  }
}

```

Using `terraform import`, import DSQL Cluster using the `identifier`. For example:

```console
% terraform import aws_dsql_cluster.example abcde1f234ghijklmnop5qr6st
```

<!-- cache-key: cdktf-0.20.8 input-f51ceed27c21bd006ea16a9b891ac6b1c49ea2235656a57479efdd3faeb4f6a9 -->