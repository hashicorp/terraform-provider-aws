---
subcategory: "Backup"
layout: "aws"
page_title: "AWS: aws_backup_selection"
description: |-
  Manages selection conditions for AWS Backup plan resources.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_backup_selection

Manages selection conditions for AWS Backup plan resources.

## Example Usage

### IAM Role

-> For more information about creating and managing IAM Roles for backups and restores, see the [AWS Backup Developer Guide](https://docs.aws.amazon.com/aws-backup/latest/devguide/iam-service-roles.html).

The below example creates an IAM role with the default managed IAM Policy for allowing AWS Backup to create backups.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BackupSelection } from "./.gen/providers/aws/backup-selection";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicyAttachment } from "./.gen/providers/aws/iam-role-policy-attachment";
interface MyConfig {
  name: any;
  planId: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    const assumeRole = new DataAwsIamPolicyDocument(this, "assume_role", {
      statement: [
        {
          actions: ["sts:AssumeRole"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["backup.amazonaws.com"],
              type: "Service",
            },
          ],
        },
      ],
    });
    const example = new IamRole(this, "example", {
      assumeRolePolicy: Token.asString(assumeRole.json),
      name: "example",
    });
    const awsIamRolePolicyAttachmentExample = new IamRolePolicyAttachment(
      this,
      "example_2",
      {
        policyArn:
          "arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup",
        role: example.name,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyAttachmentExample.overrideLogicalId("example");
    const awsBackupSelectionExample = new BackupSelection(this, "example_3", {
      iamRoleArn: example.arn,
      name: config.name,
      planId: config.planId,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsBackupSelectionExample.overrideLogicalId("example");
  }
}

```

### Selecting Backups By Tag

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BackupSelection } from "./.gen/providers/aws/backup-selection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new BackupSelection(this, "example", {
      iamRoleArn: Token.asString(awsIamRoleExample.arn),
      name: "tf_example_backup_selection",
      planId: Token.asString(awsBackupPlanExample.id),
      selectionTag: [
        {
          key: "foo",
          type: "STRINGEQUALS",
          value: "bar",
        },
      ],
    });
  }
}

```

### Selecting Backups By Conditions

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BackupSelection } from "./.gen/providers/aws/backup-selection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new BackupSelection(this, "example", {
      condition: [
        {
          stringEquals: [
            {
              key: "aws:ResourceTag/Component",
              value: "rds",
            },
          ],
          stringLike: [
            {
              key: "aws:ResourceTag/Application",
              value: "app*",
            },
          ],
          stringNotEquals: [
            {
              key: "aws:ResourceTag/Backup",
              value: "false",
            },
          ],
          stringNotLike: [
            {
              key: "aws:ResourceTag/Environment",
              value: "test*",
            },
          ],
        },
      ],
      iamRoleArn: Token.asString(awsIamRoleExample.arn),
      name: "tf_example_backup_selection",
      planId: Token.asString(awsBackupPlanExample.id),
      resources: ["*"],
    });
  }
}

```

### Selecting Backups By Resource

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BackupSelection } from "./.gen/providers/aws/backup-selection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new BackupSelection(this, "example", {
      iamRoleArn: Token.asString(awsIamRoleExample.arn),
      name: "tf_example_backup_selection",
      planId: Token.asString(awsBackupPlanExample.id),
      resources: [
        Token.asString(awsDbInstanceExample.arn),
        Token.asString(awsEbsVolumeExample.arn),
        Token.asString(awsEfsFileSystemExample.arn),
      ],
    });
  }
}

```

### Selecting Backups By Not Resource

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BackupSelection } from "./.gen/providers/aws/backup-selection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new BackupSelection(this, "example", {
      iamRoleArn: Token.asString(awsIamRoleExample.arn),
      name: "tf_example_backup_selection",
      notResources: [
        Token.asString(awsDbInstanceExample.arn),
        Token.asString(awsEbsVolumeExample.arn),
        Token.asString(awsEfsFileSystemExample.arn),
      ],
      planId: Token.asString(awsBackupPlanExample.id),
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The display name of a resource selection document.
* `planId` - (Required) The backup plan ID to be associated with the selection of resources.
* `iamRoleArn` - (Required) The ARN of the IAM role that AWS Backup uses to authenticate when restoring and backing up the target resource. See the [AWS Backup Developer Guide](https://docs.aws.amazon.com/aws-backup/latest/devguide/access-control.html#managed-policies) for additional information about using AWS managed policies or creating custom policies attached to the IAM role.
* `selectionTag` - (Optional) Tag-based conditions used to specify a set of resources to assign to a backup plan.
* `condition` - (Optional) A list of conditions that you define to assign resources to your backup plans using tags.
* `resources` - (Optional) An array of strings that either contain Amazon Resource Names (ARNs) or match patterns of resources to assign to a backup plan.
* `notResources` - (Optional) An array of strings that either contain Amazon Resource Names (ARNs) or match patterns of resources to exclude from a backup plan.

Tag conditions (`selectionTag`) support the following:

* `type` - (Required) An operation, such as `StringEquals`, that is applied to a key-value pair used to filter resources in a selection.
* `key` - (Required) The key in a key-value pair.
* `value` - (Required) The value in a key-value pair.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Backup Selection identifier

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Backup selection using the role plan_id and id separated by `|`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BackupSelection } from "./.gen/providers/aws/backup-selection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    BackupSelection.generateConfigForImport(
      this,
      "example",
      "plan-id|selection-id"
    );
  }
}

```

Using `terraform import`, import Backup selection using the role plan_id and id separated by `|`. For example:

```console
% terraform import aws_backup_selection.example plan-id|selection-id
```

<!-- cache-key: cdktf-0.20.8 input-611a33d70e2d7ee876d82838e90e00edfd3ded77693e25a475537a3e728818a3 -->