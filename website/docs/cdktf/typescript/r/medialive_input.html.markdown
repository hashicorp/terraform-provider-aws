---
subcategory: "Elemental MediaLive"
layout: "aws"
page_title: "AWS: aws_medialive_input"
description: |-
  Terraform resource for managing an AWS MediaLive Input.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_medialive_input

Terraform resource for managing an AWS MediaLive Input.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { MedialiveInput } from "./.gen/providers/aws/medialive-input";
import { MedialiveInputSecurityGroup } from "./.gen/providers/aws/medialive-input-security-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new MedialiveInputSecurityGroup(this, "example", {
      tags: {
        ENVIRONMENT: "prod",
      },
      whitelistRules: [
        {
          cidr: "10.0.0.8/32",
        },
      ],
    });
    const awsMedialiveInputExample = new MedialiveInput(this, "example_1", {
      inputSecurityGroups: [example.id],
      name: "example-input",
      tags: {
        ENVIRONMENT: "prod",
      },
      type: "UDP_PUSH",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsMedialiveInputExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `name` - (Required) Name of the input.
* `inputSecurityGroups` - (Required) List of input security groups.
* `type` - (Required) The different types of inputs that AWS Elemental MediaLive supports.

The following arguments are optional:

* `destinations` - (Optional) Destination settings for PUSH type inputs. See [Destinations](#destinations) for more details.
* `inputDevices` - (Optional) Settings for the devices. See [Input Devices](#input-devices) for more details.
* `mediaConnectFlows` - (Optional) A list of the MediaConnect Flows. See [Media Connect Flows](#media-connect-flows) for more details.
* `roleArn` - (Optional) The ARN of the role this input assumes during and after creation.
* `sources` - (Optional) The source URLs for a PULL-type input. See [Sources](#sources) for more details.
* `tags`- (Optional) A map of tags to assign to the Input. If configured with a provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `vpc` - (Optional) Settings for a private VPC Input. See [VPC](#vpc) for more details.

### Destinations

* `streamName` - A unique name for the location the RTMP stream is being pushed to.

### Input Devices

* `id` - The unique ID for the device.

### Media Connect Flows

* `flowArn` - The ARN of the MediaConnect Flow

### Sources

* `passwordParam` - The key used to extract the password from EC2 Parameter store.
* `url` - The URL where the stream is pulled from.
* `username` - The username for the input source.

### VPC

* `subnetIds` - A list of 2 VPC subnet IDs from the same VPC.
* `securityGroupIds` - A list of up to 5 EC2 VPC security group IDs to attach to the Input.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the Input.
* `attachedChannels` - Channels attached to Input.
* `inputClass` - The input class.
* `inputPartnerIds` - A list of IDs for all Inputs which are partners of this one.
* `inputSourceType` - Source type of the input.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `update` - (Default `30m`)
* `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import MediaLive Input using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { MedialiveInput } from "./.gen/providers/aws/medialive-input";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    MedialiveInput.generateConfigForImport(this, "example", "12345678");
  }
}

```

Using `terraform import`, import MediaLive Input using the `id`. For example:

```console
% terraform import aws_medialive_input.example 12345678
```

<!-- cache-key: cdktf-0.20.8 input-e7c2ee81ba845515caa1acd230663186d94a15faebb59c803051c3bdd77ad5df -->