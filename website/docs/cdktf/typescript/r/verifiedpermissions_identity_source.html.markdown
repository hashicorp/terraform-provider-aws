---
subcategory: "Verified Permissions"
layout: "aws"
page_title: "AWS: aws_verifiedpermissions_identity_source"
description: |-
  Terraform resource for managing an AWS Verified Permissions Identity Source.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_verifiedpermissions_identity_source

Terraform resource for managing an AWS Verified Permissions Identity Source.

## Example Usage

### Cognito User Pool Configuration Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CognitoUserPool } from "./.gen/providers/aws/cognito-user-pool";
import { CognitoUserPoolClient } from "./.gen/providers/aws/cognito-user-pool-client";
import { VerifiedpermissionsIdentitySource } from "./.gen/providers/aws/verifiedpermissions-identity-source";
import { VerifiedpermissionsPolicyStore } from "./.gen/providers/aws/verifiedpermissions-policy-store";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new CognitoUserPool(this, "example", {
      name: "example",
    });
    const awsCognitoUserPoolClientExample = new CognitoUserPoolClient(
      this,
      "example_1",
      {
        explicitAuthFlows: ["ADMIN_NO_SRP_AUTH"],
        name: "example",
        userPoolId: example.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCognitoUserPoolClientExample.overrideLogicalId("example");
    const awsVerifiedpermissionsPolicyStoreExample =
      new VerifiedpermissionsPolicyStore(this, "example_2", {
        validationSettings: [
          {
            mode: "STRICT",
          },
        ],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVerifiedpermissionsPolicyStoreExample.overrideLogicalId("example");
    const awsVerifiedpermissionsIdentitySourceExample =
      new VerifiedpermissionsIdentitySource(this, "example_3", {
        configuration: [
          {
            cognitoUserPoolConfiguration: [
              {
                clientIds: [Token.asString(awsCognitoUserPoolClientExample.id)],
                userPoolArn: example.arn,
              },
            ],
          },
        ],
        policyStoreId: Token.asString(
          awsVerifiedpermissionsPolicyStoreExample.id
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVerifiedpermissionsIdentitySourceExample.overrideLogicalId("example");
  }
}

```

### OpenID Connect Configuration Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VerifiedpermissionsIdentitySource } from "./.gen/providers/aws/verifiedpermissions-identity-source";
import { VerifiedpermissionsPolicyStore } from "./.gen/providers/aws/verifiedpermissions-policy-store";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new VerifiedpermissionsPolicyStore(this, "example", {
      validationSettings: [
        {
          mode: "STRICT",
        },
      ],
    });
    const awsVerifiedpermissionsIdentitySourceExample =
      new VerifiedpermissionsIdentitySource(this, "example_1", {
        configuration: [
          {
            openIdConnectConfiguration: [
              {
                entityIdPrefix: "MyOIDCProvider",
                groupConfiguration: [
                  {
                    groupClaim: "groups",
                    groupEntityType: "MyCorp::UserGroup",
                  },
                ],
                issuer: "https://auth.example.com",
                tokenSelection: [
                  {
                    accessTokenOnly: [
                      {
                        audiences: ["https://myapp.example.com"],
                        principalIdClaim: "sub",
                      },
                    ],
                  },
                ],
              },
            ],
          },
        ],
        policyStoreId: example.id,
        principalEntityType: "MyCorp::User",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVerifiedpermissionsIdentitySourceExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

* `policyStoreId` - (Required) Specifies the ID of the policy store in which you want to store this identity source.
* `configuration`- (Required) Specifies the details required to communicate with the identity provider (IdP) associated with this identity source. See [Configuration](#configuration) below.
* `principalEntityType`- (Optional) Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.

### Configuration

* `cognitoUserPoolConfiguration` - (Required) Specifies the configuration details of an Amazon Cognito user pool that Verified Permissions can use as a source of authenticated identities as entities. See [Cognito User Pool Configuration](#cognito-user-pool-configuration) below.
* `openIdConnectConfiguration` - (Required) Specifies the configuration details of an OpenID Connect (OIDC) identity provider, or identity source, that Verified Permissions can use to generate entities from authenticated identities. See [Open ID Connect Configuration](#open-id-connect-configuration) below.

#### Cognito User Pool Configuration

* `userPoolArn` - (Required) The Amazon Resource Name (ARN) of the Amazon Cognito user pool that contains the identities to be authorized.
* `clientIds` - (Optional) The unique application client IDs that are associated with the specified Amazon Cognito user pool.
* `groupConfiguration` - (Optional) The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See [Group Configuration](#group-configuration) below.

#### Group Configuration

* `groupEntityType` - (Required) The name of the schema entity type that's mapped to the user pool group. Defaults to `AWS::CognitoGroup`.

#### Open ID Connect Configuration

* `issuer` - (Required) The issuer URL of an OIDC identity provider. This URL must have an OIDC discovery endpoint at the path `.well-known/openid-configuration`.
* `tokenSelection` - (Required) The token type that you want to process from your OIDC identity provider. Your policy store can process either identity (ID) or access tokens from a given OIDC identity source. See [Token Selection](#token-selection) below.
* `entityIdPrefix` - (Optional) A descriptive string that you want to prefix to user entities from your OIDC identity provider.
* `groupConfiguration` - (Optional) The type of entity that a policy store maps to groups from an Amazon Cognito user pool identity source. See [Group Configuration](#open-id-group-configuration) below.

#### Token Selection

* `accessTokenOnly` - (Optional) The OIDC configuration for processing access tokens. See [Access Token Only](#access-token-only) below.
* `identityTokenOnly` - (Optional) The OIDC configuration for processing identity (ID) tokens. See [Identity Token Only](#identity-token-only) below.

#### Access Token Only

* `audiences` - (Optional) The access token aud claim values that you want to accept in your policy store.
* `principalIdClaim` - (Optional) The claim that determines the principal in OIDC access tokens.

#### Identity Token Only

* `clientIds` - (Optional) The ID token audience, or client ID, claim values that you want to accept in your policy store from an OIDC identity provider.
* `groupEntityType` - (Optional) The claim that determines the principal in OIDC access tokens.

#### Open ID Group Configuration

* `groupClaim` - (Required) The token claim that you want Verified Permissions to interpret as group membership. For example, `groups`.
* `groupEntityType` - (Required) The policy store entity type that you want to map your users' group claim to. For example, `MyCorp::UserGroup`. A group entity type is an entity that can have a user entity type as a member.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `policyId` - The Policy ID of the policy.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Verified Permissions Identity Source using the `policy_store_id:identity_source_id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VerifiedpermissionsIdentitySource } from "./.gen/providers/aws/verifiedpermissions-identity-source";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    VerifiedpermissionsIdentitySource.generateConfigForImport(
      this,
      "example",
      "policy-store-id-12345678:identity-source-id-12345678"
    );
  }
}

```

Using `terraform import`, import Verified Permissions Identity Source using the `policy_store_id:identity_source_id`. For example:

```console
% terraform import aws_verifiedpermissions_identity_source.example policy-store-id-12345678:identity-source-id-12345678
```

<!-- cache-key: cdktf-0.20.1 input-c51f466be9c9c75453250f283eaf4b9fef5041791e2b815c576a5f553eb2817a -->