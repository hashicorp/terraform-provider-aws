---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_vpc_peering_connection"
description: |-
  Provides a resource to manage a VPC peering connection.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_vpc_peering_connection

Provides a resource to manage a VPC peering connection.

~> **NOTE on VPC Peering Connections and VPC Peering Connection Options:** Terraform provides
both a standalone [VPC Peering Connection Options](vpc_peering_connection_options.html) and a VPC Peering Connection
resource with `accepter` and `requester` attributes. Do not manage options for the same VPC peering
connection in both a VPC Peering Connection resource and a VPC Peering Connection Options resource.
Doing so will cause a conflict of options and will overwrite the options.
Using a VPC Peering Connection Options resource decouples management of the connection options from
management of the VPC Peering Connection and allows options to be set correctly in cross-account scenarios.

-> **Note:** For cross-account (requester's AWS account differs from the accepter's AWS account) or inter-region
VPC Peering Connections use the `aws_vpc_peering_connection` resource to manage the requester's side of the
connection and use the `aws_vpc_peering_connection_accepter` resource to manage the accepter's side of the connection.

-> **Note:** Creating multiple `aws_vpc_peering_connection` resources with the same `peerVpcId` and `vpcId` will not produce an error. Instead, AWS will return the connection `id` that already exists, resulting in multiple `aws_vpc_peering_connection` resources with the same `id`.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VpcPeeringConnection } from "./.gen/providers/aws/vpc-peering-connection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new VpcPeeringConnection(this, "foo", {
      peerOwnerId: peerOwnerId.stringValue,
      peerVpcId: bar.id,
      vpcId: Token.asString(awsVpcFoo.id),
    });
  }
}

```

Basic usage with connection options:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VpcPeeringConnection } from "./.gen/providers/aws/vpc-peering-connection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new VpcPeeringConnection(this, "foo", {
      accepter: {
        allowRemoteVpcDnsResolution: true,
      },
      peerOwnerId: peerOwnerId.stringValue,
      peerVpcId: bar.id,
      requester: {
        allowRemoteVpcDnsResolution: true,
      },
      vpcId: Token.asString(awsVpcFoo.id),
    });
  }
}

```

Basic usage with tags:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Vpc } from "./.gen/providers/aws/vpc";
import { VpcPeeringConnection } from "./.gen/providers/aws/vpc-peering-connection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const bar = new Vpc(this, "bar", {
      cidrBlock: "10.2.0.0/16",
    });
    const foo = new Vpc(this, "foo", {
      cidrBlock: "10.1.0.0/16",
    });
    const awsVpcPeeringConnectionFoo = new VpcPeeringConnection(this, "foo_2", {
      autoAccept: true,
      peerOwnerId: peerOwnerId.stringValue,
      peerVpcId: bar.id,
      tags: {
        Name: "VPC Peering between foo and bar",
      },
      vpcId: foo.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcPeeringConnectionFoo.overrideLogicalId("foo");
  }
}

```

Basic usage with region:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Vpc } from "./.gen/providers/aws/vpc";
import { VpcPeeringConnection } from "./.gen/providers/aws/vpc-peering-connection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const bar = new Vpc(this, "bar", {
      cidrBlock: "10.2.0.0/16",
      provider: usEast1,
    });
    const foo = new Vpc(this, "foo", {
      cidrBlock: "10.1.0.0/16",
      provider: usWest2,
    });
    const awsVpcPeeringConnectionFoo = new VpcPeeringConnection(this, "foo_2", {
      peerOwnerId: peerOwnerId.stringValue,
      peerRegion: "us-east-1",
      peerVpcId: bar.id,
      vpcId: foo.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcPeeringConnectionFoo.overrideLogicalId("foo");
  }
}

```

## Argument Reference

-> **Note:** Modifying the VPC Peering Connection options requires peering to be active. An automatic activation
can be done using the [`autoAccept`](vpc_peering_connection.html#auto_accept) attribute. Alternatively, the VPC Peering
Connection has to be made active manually using other means. See [notes](vpc_peering_connection.html#notes) below for
more information.

This resource supports the following arguments:

* `peerOwnerId` - (Optional) The AWS account ID of the target peer VPC.
   Defaults to the account ID the [AWS provider][1] is currently connected to, so must be managed if connecting cross-account.
* `peerVpcId` - (Required) The ID of the target VPC with which you are creating the VPC Peering Connection.
* `vpcId` - (Required) The ID of the requester VPC.
* `autoAccept` - (Optional) Accept the peering (both VPCs need to be in the same AWS account and region).
* `peerRegion` - (Optional) The region of the accepter VPC of the VPC Peering Connection. `autoAccept` must be `false`,
and use the `aws_vpc_peering_connection_accepter` to manage the accepter side.
* `accepter` (Optional) - An optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that accepts
the peering connection (a maximum of one).
* `requester` (Optional) - A optional configuration block that allows for [VPC Peering Connection](https://docs.aws.amazon.com/vpc/latest/peering/what-is-vpc-peering.html) options to be set for the VPC that requests
the peering connection (a maximum of one).
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

#### Accepter and Requester Arguments

-> **Note:** When enabled, the DNS resolution feature requires that VPCs participating in the peering
must have support for the DNS hostnames enabled. This can be done using the [`enableDnsHostnames`](vpc.html#enable_dns_hostnames) attribute in the [`aws_vpc`](vpc.html) resource. See [Using DNS with Your VPC](http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-dns.html) user guide for more information.

* `allowRemoteVpcDnsResolution` - (Optional) Allow a local VPC to resolve public DNS hostnames to
private IP addresses when queried from instances in the peer VPC.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the VPC Peering Connection.
* `acceptStatus` - The status of the VPC Peering Connection request.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Notes

If both VPCs are not in the same AWS account and region do not enable the `autoAccept` attribute.
The accepter can manage its side of the connection using the `aws_vpc_peering_connection_accepter` resource
or accept the connection manually using the AWS Management Console, AWS CLI, through SDKs, etc.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `1m`)
- `update` - (Default `1m`)
- `delete` - (Default `1m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import VPC Peering resources using the VPC peering `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VpcPeeringConnection } from "./.gen/providers/aws/vpc-peering-connection";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    VpcPeeringConnection.generateConfigForImport(
      this,
      "testConnection",
      "pcx-111aaa111"
    );
  }
}

```

Using `terraform import`, import VPC Peering resources using the VPC peering `id`. For example:

```console
% terraform import aws_vpc_peering_connection.test_connection pcx-111aaa111
```

[1]: /docs/providers/aws/index.html

<!-- cache-key: cdktf-0.20.1 input-81146d4d65b74a0127fbac7a0b412052b1f13331dcc243c687067a6fe2c7a258 -->