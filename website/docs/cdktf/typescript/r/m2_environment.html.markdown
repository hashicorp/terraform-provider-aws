---
subcategory: "Mainframe Modernization"
layout: "aws"
page_title: "AWS: aws_m2_environment"
description: |-
  Terraform resource for managing an AWS Mainframe Modernization Environment.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_m2_environment

Terraform resource for managing an [AWS Mainframe Modernization Environment](https://docs.aws.amazon.com/m2/latest/userguide/environments-m2.html).

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { M2Environment } from "./.gen/providers/aws/m2-environment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new M2Environment(this, "test", {
      engineType: "bluage",
      instanceType: "M2.m5.large",
      name: "test-env",
      security_groups: ["sg-01234567890abcdef"],
      subnetIds: ["subnet-01234567890abcdef", "subnet-01234567890abcdea"],
    });
  }
}

```

### High Availability

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { M2Environment } from "./.gen/providers/aws/m2-environment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new M2Environment(this, "test", {
      engineType: "bluage",
      highAvailabilityConfig: [
        {
          desiredCapacity: 2,
        },
      ],
      instanceType: "M2.m5.large",
      name: "test-env",
      security_groups: ["sg-01234567890abcdef"],
      subnetIds: ["subnet-01234567890abcdef", "subnet-01234567890abcdea"],
    });
  }
}

```

### EFS Filesystem

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { M2Environment } from "./.gen/providers/aws/m2-environment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new M2Environment(this, "test", {
      engineType: "bluage",
      instanceType: "M2.m5.large",
      name: "test-env",
      security_groups: ["sg-01234567890abcdef"],
      storageConfiguration: [
        {
          efs: [
            {
              fileSystemId: "fs-01234567890abcdef",
              mountPoint: "/m2/mount/example",
            },
          ],
        },
      ],
      subnetIds: ["subnet-01234567890abcdef", "subnet-01234567890abcdea"],
    });
  }
}

```

### FSX Filesystem

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { M2Environment } from "./.gen/providers/aws/m2-environment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new M2Environment(this, "test", {
      engineType: "bluage",
      instanceType: "M2.m5.large",
      name: "test-env",
      security_groups: ["sg-01234567890abcdef"],
      storageConfiguration: [
        {
          fsx: [
            {
              fileSystemId: "fs-01234567890abcdef",
              mountPoint: "/m2/mount/example",
            },
          ],
        },
      ],
      subnetIds: ["subnet-01234567890abcdef", "subnet-01234567890abcdea"],
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `name` - (Required) Name of the runtime environment. Must be unique within the account.
* `engineType` - (Required) Engine type must be `microfocus` or `bluage`.
* `instanceType` - (Required) M2 Instance Type.

The following arguments are optional:

* `engineVersion` - (Optional) The specific version of the engine for the Environment.
* `forceUpdate` - (Optional) Force update the environment even if applications are running.
* `kmsKeyId` - (Optional) ARN of the KMS key to use for the Environment.
* `preferredMaintenanceWindow` - (Optional) Configures the maintenance window that you want for the runtime environment. The maintenance window must have the format `ddd:hh24:mi-ddd:hh24:mi` and must be less than 24 hours. If not provided a random value will be used.
* `publiclyAccessible` - (Optional) Allow applications deployed to this environment to be publicly accessible.
* `securityGroupIds` - (Optional) List of security group ids.
* `subnetIds` - (Optional) List of subnet ids to deploy environment to.
* `tags` - (Optional) Key-value tags for the place index. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### storage_configuration

#### efs

This argument is processed in [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).

The following arguments are required:

* `mountPoint` - (Required) Path to mount the filesystem on, must start with `/m2/mount/`.
* `fileSystemId` - (Required) Id of the EFS filesystem to mount.

#### fsx

This argument is processed in [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).

The following arguments are required:

* `mountPoint` - (Required) Path to mount the filesystem on, must start with `/m2/mount/`.
* `fileSystemId` - (Required) Id of the FSX filesystem to mount.

### high_availability_config

This argument is processed in [attribute-as-blocks mode](https://www.terraform.io/docs/configuration/attr-as-blocks.html).

The following arguments are required:

* `desiredCapacity` - (Required) Desired number of instances for the Environment.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the Environment.
* `id` - The id of the Environment.
* `environmentId` - The id of the Environment.
* `loadBalancerArn` - ARN of the load balancer created by the Environment.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `update` - (Default `30m`)
* `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Mainframe Modernization Environment using the `01234567890abcdef012345678`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { M2Environment } from "./.gen/providers/aws/m2-environment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    M2Environment.generateConfigForImport(
      this,
      "example",
      "01234567890abcdef012345678"
    );
  }
}

```

Using `terraform import`, import Mainframe Modernization Environment using the `01234567890abcdef012345678`. For example:

```console
% terraform import aws_m2_environment.example 01234567890abcdef012345678
```

<!-- cache-key: cdktf-0.20.1 input-d1757073a6e6cf5a6acfd5694df94816eb07c6503d2539964374bbcd6c8fceb4 -->