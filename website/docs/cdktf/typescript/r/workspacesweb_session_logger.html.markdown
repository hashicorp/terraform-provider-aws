---
subcategory: "WorkSpaces Web"
layout: "aws"
page_title: "AWS: aws_workspacesweb_session_logger"
description: |-
  Terraform resource for managing an AWS WorkSpaces Web Session Logger.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_workspacesweb_session_logger

Terraform resource for managing an AWS WorkSpaces Web Session Logger.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketPolicy } from "./.gen/providers/aws/s3-bucket-policy";
import { WorkspaceswebSessionLogger } from "./.gen/providers/aws/workspacesweb-session-logger";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new S3Bucket(this, "example", {
      bucket: "example-session-logs",
    });
    const dataAwsIamPolicyDocumentExample = new DataAwsIamPolicyDocument(
      this,
      "example_1",
      {
        statement: [
          {
            actions: ["s3:PutObject"],
            effect: "Allow",
            principals: [
              {
                identifiers: ["workspaces-web.amazonaws.com"],
                type: "Service",
              },
            ],
            resources: ["${" + example.arn + "}/*"],
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsIamPolicyDocumentExample.overrideLogicalId("example");
    const awsS3BucketPolicyExample = new S3BucketPolicy(this, "example_2", {
      bucket: example.id,
      policy: Token.asString(dataAwsIamPolicyDocumentExample.json),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3BucketPolicyExample.overrideLogicalId("example");
    const awsWorkspaceswebSessionLoggerExample = new WorkspaceswebSessionLogger(
      this,
      "example_3",
      {
        dependsOn: [awsS3BucketPolicyExample],
        displayName: "example-session-logger",
        eventFilter: [
          {
            all: [{}],
          },
        ],
        logConfiguration: [
          {
            s3: [
              {
                bucket: example.id,
                folderStructure: "Flat",
                logFileFormat: "Json",
              },
            ],
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsWorkspaceswebSessionLoggerExample.overrideLogicalId("example");
  }
}

```

### Complete Configuration with KMS Encryption

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { DataAwsPartition } from "./.gen/providers/aws/data-aws-partition";
import { KmsKey } from "./.gen/providers/aws/kms-key";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3BucketPolicy } from "./.gen/providers/aws/s3-bucket-policy";
import { WorkspaceswebSessionLogger } from "./.gen/providers/aws/workspacesweb-session-logger";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new S3Bucket(this, "example", {
      bucket: "example-session-logs",
      forceDestroy: true,
    });
    const current = new DataAwsCallerIdentity(this, "current", {});
    const dataAwsIamPolicyDocumentExample = new DataAwsIamPolicyDocument(
      this,
      "example_2",
      {
        statement: [
          {
            actions: ["s3:PutObject"],
            effect: "Allow",
            principals: [
              {
                identifiers: ["workspaces-web.amazonaws.com"],
                type: "Service",
              },
            ],
            resources: [example.arn, "${" + example.arn + "}/*"],
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsIamPolicyDocumentExample.overrideLogicalId("example");
    const dataAwsPartitionCurrent = new DataAwsPartition(this, "current_3", {});
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsPartitionCurrent.overrideLogicalId("current");
    const awsS3BucketPolicyExample = new S3BucketPolicy(this, "example_4", {
      bucket: example.id,
      policy: Token.asString(dataAwsIamPolicyDocumentExample.json),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3BucketPolicyExample.overrideLogicalId("example");
    const kmsKeyPolicy = new DataAwsIamPolicyDocument(this, "kms_key_policy", {
      statement: [
        {
          actions: ["kms:*"],
          principals: [
            {
              identifiers: [
                "arn:${" +
                  dataAwsPartitionCurrent.partition +
                  "}:iam::${" +
                  current.accountId +
                  "}:root",
              ],
              type: "AWS",
            },
          ],
          resources: ["*"],
        },
        {
          actions: [
            "kms:Encrypt",
            "kms:GenerateDataKey*",
            "kms:ReEncrypt*",
            "kms:Decrypt",
          ],
          principals: [
            {
              identifiers: ["workspaces-web.amazonaws.com"],
              type: "Service",
            },
          ],
          resources: ["*"],
        },
      ],
    });
    const awsKmsKeyExample = new KmsKey(this, "example_6", {
      description: "KMS key for WorkSpaces Web Session Logger",
      policy: Token.asString(kmsKeyPolicy.json),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsKmsKeyExample.overrideLogicalId("example");
    const awsWorkspaceswebSessionLoggerExample = new WorkspaceswebSessionLogger(
      this,
      "example_7",
      {
        additionalEncryptionContext: {
          Application: "WorkSpacesWeb",
          Environment: "Production",
        },
        customerManagedKey: Token.asString(awsKmsKeyExample.arn),
        dependsOn: [awsS3BucketPolicyExample, awsKmsKeyExample],
        displayName: "example-session-logger",
        eventFilter: [
          {
            include: ["SessionStart", "SessionEnd"],
          },
        ],
        logConfiguration: [
          {
            s3: [
              {
                bucket: example.id,
                bucketOwner: Token.asString(current.accountId),
                folderStructure: "NestedByDate",
                keyPrefix: "workspaces-web-logs/",
                logFileFormat: "JsonLines",
              },
            ],
          },
        ],
        tags: {
          Environment: "Production",
          Name: "example-session-logger",
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsWorkspaceswebSessionLoggerExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `eventFilter` - (Required) Event filter that determines which events are logged. See [Event Filter](#event-filter) below.
* `logConfiguration` - (Required) Configuration block for specifying where logs are delivered. See [Log Configuration](#log-configuration) below.

The following arguments are optional:

* `additionalEncryptionContext` - (Optional) Map of additional encryption context key-value pairs.
* `customerManagedKey` - (Optional) ARN of the customer managed KMS key used to encrypt sensitive information.
* `displayName` - (Optional) Human-readable display name for the session logger resource. Forces replacement if changed.
* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `tags` - (Optional) Map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### Log Configuration

* `s3` - (Required) Configuration block for S3 log delivery. See [S3 Configuration](#s3-configuration) below.

### Event Filter

Exactly one of the following must be specified:

* `all` - (Optional) Block that specifies to monitor all events. Set to `{}` to monitor all events.
* `include` - (Optional) List of specific events to monitor. Valid values include session events like `SessionStart`, `SessionEnd`, etc.

### S3 Configuration

* `bucket` - (Required) S3 bucket name where logs are delivered.
* `folderStructure` - (Required) Folder structure that defines the organizational structure for log files in S3. Valid values: `FlatStructure`, `DateBasedStructure`.
* `logFileFormat` - (Required) Format of the log file written to S3. Valid values: `Json`, `Parquet`.
* `bucketOwner` - (Optional) Expected bucket owner of the target S3 bucket.
* `keyPrefix` - (Optional) S3 path prefix that determines where log files are stored.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `associatedPortalArns` - List of ARNs of the web portals associated with the session logger.
* `sessionLoggerArn` - ARN of the session logger.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

~> **Note:** The `additionalEncryptionContext` and `customerManagedKey` attributes are computed when not specified and will be populated with values from the AWS API response.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import WorkSpaces Web Session Logger using the `sessionLoggerArn`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { WorkspaceswebSessionLogger } from "./.gen/providers/aws/workspacesweb-session-logger";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    WorkspaceswebSessionLogger.generateConfigForImport(
      this,
      "example",
      "arn:aws:workspaces-web:us-west-2:123456789012:sessionLogger/session_logger-id-12345678"
    );
  }
}

```

Using `terraform import`, import WorkSpaces Web Session Logger using the `sessionLoggerArn`. For example:

```console
% terraform import aws_workspacesweb_session_logger.example arn:aws:workspaces-web:us-west-2:123456789012:sessionLogger/session_logger-id-12345678
```

<!-- cache-key: cdktf-0.20.8 input-a65eb0132502814d75911849ab31ab9c213ee79769f2aef71353962be3bcc194 -->