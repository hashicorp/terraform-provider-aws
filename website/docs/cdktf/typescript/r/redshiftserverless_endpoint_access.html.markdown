---
subcategory: "Redshift Serverless"
layout: "aws"
page_title: "AWS: aws_redshiftserverless_endpoint_access"
description: |-
  Provides a Redshift Serverless Endpoint Access resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_redshiftserverless_endpoint_access

Creates a new Amazon Redshift Serverless Endpoint Access.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { RedshiftserverlessEndpointAccess } from "./.gen/providers/aws/redshiftserverless-endpoint-access";
interface MyConfig {
  subnetIds: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new RedshiftserverlessEndpointAccess(this, "example", {
      endpointName: "example",
      workgroupName: "example",
      subnetIds: config.subnetIds,
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `endpointName` - (Required) The name of the endpoint.
* `ownerAccount` - (Optional) The owner Amazon Web Services account for the Amazon Redshift Serverless workgroup.
* `subnetIds` - (Required) An array of VPC subnet IDs to associate with the endpoint.
* `vpcSecurityGroupIds` - (Optional) An array of security group IDs to associate with the workgroup.
* `workgroupName` - (Required) The name of the workgroup.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of the Redshift Serverless Endpoint Access.
* `id` - The Redshift Endpoint Access Name.
* `address` - The DNS address of the VPC endpoint.
* `port` - The port that Amazon Redshift Serverless listens on.
* `vpcEndpoint` - The VPC endpoint or the Redshift Serverless workgroup. See `VPC Endpoint` below.

#### VPC Endpoint

* `vpcEndpointId` - The DNS address of the VPC endpoint.
* `vpcId` - The port that Amazon Redshift Serverless listens on.
* `networkInterface` - The network interfaces of the endpoint.. See `Network Interface` below.

##### Network Interface

* `availabilityZone` - The availability Zone.
* `networkInterfaceId` - The unique identifier of the network interface.
* `privateIpAddress` - The IPv4 address of the network interface within the subnet.
* `subnetId` - The unique identifier of the subnet.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Redshift Serverless Endpoint Access using the `endpointName`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { RedshiftserverlessEndpointAccess } from "./.gen/providers/aws/redshiftserverless-endpoint-access";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    RedshiftserverlessEndpointAccess.generateConfigForImport(
      this,
      "example",
      "example"
    );
  }
}

```

Using `terraform import`, import Redshift Serverless Endpoint Access using the `endpointName`. For example:

```console
% terraform import aws_redshiftserverless_endpoint_access.example example
```

<!-- cache-key: cdktf-0.20.8 input-02a646b226fa2e51fbd46daf9da9414ac21e7f0d365734c9325c86977ee9c65c -->