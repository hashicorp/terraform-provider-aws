---
subcategory: "DMS (Database Migration)"
layout: "aws"
page_title: "AWS: aws_dms_replication_instance"
description: |-
  Provides a DMS (Data Migration Service) replication instance resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_dms_replication_instance

Provides a DMS (Data Migration Service) replication instance resource. DMS replication instances can be created, updated, deleted, and imported.

## Example Usage

Create required roles and then create a DMS instance, setting the depends_on to the required role policy attachments.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { DmsReplicationInstance } from "./.gen/providers/aws/dms-replication-instance";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicyAttachment } from "./.gen/providers/aws/iam-role-policy-attachment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const dmsAssumeRole = new DataAwsIamPolicyDocument(
      this,
      "dms_assume_role",
      {
        statement: [
          {
            actions: ["sts:AssumeRole"],
            principals: [
              {
                identifiers: ["dms.amazonaws.com"],
                type: "Service",
              },
            ],
          },
        ],
      }
    );
    const dmsAccessForEndpoint = new IamRole(this, "dms-access-for-endpoint", {
      assumeRolePolicy: Token.asString(dmsAssumeRole.json),
      name: "dms-access-for-endpoint",
    });
    const dmsCloudwatchLogsRole = new IamRole(
      this,
      "dms-cloudwatch-logs-role",
      {
        assumeRolePolicy: Token.asString(dmsAssumeRole.json),
        name: "dms-cloudwatch-logs-role",
      }
    );
    const dmsVpcRole = new IamRole(this, "dms-vpc-role", {
      assumeRolePolicy: Token.asString(dmsAssumeRole.json),
      name: "dms-vpc-role",
    });
    const dmsAccessForEndpointAmazonDmsRedshiftS3Role =
      new IamRolePolicyAttachment(
        this,
        "dms-access-for-endpoint-AmazonDMSRedshiftS3Role",
        {
          policyArn:
            "arn:aws:iam::aws:policy/service-role/AmazonDMSRedshiftS3Role",
          role: dmsAccessForEndpoint.name,
        }
      );
    const dmsCloudwatchLogsRoleAmazonDmsCloudWatchLogsRole =
      new IamRolePolicyAttachment(
        this,
        "dms-cloudwatch-logs-role-AmazonDMSCloudWatchLogsRole",
        {
          policyArn:
            "arn:aws:iam::aws:policy/service-role/AmazonDMSCloudWatchLogsRole",
          role: dmsCloudwatchLogsRole.name,
        }
      );
    const dmsVpcRoleAmazonDmsvpcManagementRole = new IamRolePolicyAttachment(
      this,
      "dms-vpc-role-AmazonDMSVPCManagementRole",
      {
        policyArn:
          "arn:aws:iam::aws:policy/service-role/AmazonDMSVPCManagementRole",
        role: dmsVpcRole.name,
      }
    );
    new DmsReplicationInstance(this, "test", {
      allocatedStorage: 20,
      applyImmediately: true,
      autoMinorVersionUpgrade: true,
      availabilityZone: "us-west-2c",
      dependsOn: [
        dmsAccessForEndpointAmazonDmsRedshiftS3Role,
        dmsCloudwatchLogsRoleAmazonDmsCloudWatchLogsRole,
        dmsVpcRoleAmazonDmsvpcManagementRole,
      ],
      engineVersion: "3.1.4",
      kmsKeyArn:
        "arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012",
      multiAz: false,
      preferredMaintenanceWindow: "sun:10:30-sun:14:30",
      publiclyAccessible: true,
      replicationInstanceClass: "dms.t2.micro",
      replicationInstanceId: "test-dms-replication-instance-tf",
      replicationSubnetGroupId: testDmsReplicationSubnetGroupTf.id,
      tags: {
        Name: "test",
      },
      vpcSecurityGroupIds: ["sg-12345678"],
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `allocatedStorage` - (Optional, Default: 50, Min: 5, Max: 6144) The amount of storage (in gigabytes) to be initially allocated for the replication instance.
* `allowMajorVersionUpgrade` - (Optional, Default: false) Indicates that major version upgrades are allowed.
* `applyImmediately` - (Optional, Default: false) Indicates whether the changes should be applied immediately or during the next maintenance window. Only used when updating an existing resource.
* `autoMinorVersionUpgrade` - (Optional, Default: false) Indicates that minor engine upgrades will be applied automatically to the replication instance during the maintenance window.
* `availabilityZone` - (Optional) The EC2 Availability Zone that the replication instance will be created in.
* `engineVersion` - (Optional) The engine version number of the replication instance.
* `kmsKeyArn` - (Optional) The Amazon Resource Name (ARN) for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
* `multiAz` - (Optional) Specifies if the replication instance is a multi-az deployment. You cannot set the `availabilityZone` parameter if the `multiAz` parameter is set to `true`.
* `networkType` - (Optional) The type of IP address protocol used by a replication instance. Valid values: `IPV4`, `DUAL`.
* `preferredMaintenanceWindow` - (Optional) The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).

    - Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week.
    - Format: `ddd:hh24:mi-ddd:hh24:mi`
    - Valid Days: `mon, tue, wed, thu, fri, sat, sun`
    - Constraints: Minimum 30-minute window.

* `publiclyAccessible` - (Optional, Default: false) Specifies the accessibility options for the replication instance. A value of true represents an instance with a public IP address. A value of false represents an instance with a private IP address.
* `replicationInstanceClass` - (Required) The compute and memory capacity of the replication instance as specified by the replication instance class. See [AWS DMS User Guide](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_ReplicationInstance.Types.html) for available instance sizes and advice on which one to choose.
* `replicationInstanceId` - (Required) The replication instance identifier. This parameter is stored as a lowercase string.

    - Must contain from 1 to 63 alphanumeric characters or hyphens.
    - First character must be a letter.
    - Cannot end with a hyphen
    - Cannot contain two consecutive hyphens.

* `replicationSubnetGroupId` - (Optional) A subnet group to associate with the replication instance.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `vpcSecurityGroupIds` - (Optional) A list of VPC security group IDs to be used with the replication instance. The VPC security groups must work with the VPC containing the replication instance.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `replicationInstanceArn` - The Amazon Resource Name (ARN) of the replication instance.
* `replicationInstancePrivateIps` -  A list of the private IP addresses of the replication instance.
* `replicationInstancePublicIps` - A list of the public IP addresses of the replication instance.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `40m`)
- `update` - (Default `30m`)
- `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import replication instances using the `replicationInstanceId`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DmsReplicationInstance } from "./.gen/providers/aws/dms-replication-instance";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DmsReplicationInstance.generateConfigForImport(
      this,
      "test",
      "test-dms-replication-instance-tf"
    );
  }
}

```

Using `terraform import`, import replication instances using the `replicationInstanceId`. For example:

```console
% terraform import aws_dms_replication_instance.test test-dms-replication-instance-tf
```

<!-- cache-key: cdktf-0.20.8 input-2a8ab503ceaef9d74fa0c9b95408ac59f3a841f451a3553fdde42db11c32ef45 -->