---
subcategory: "API Gateway"
layout: "aws"
page_title: "AWS: aws_api_gateway_stage"
description: |-
  Manages an API Gateway Stage.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_api_gateway_stage

Manages an API Gateway Stage. A stage is a named reference to a deployment, which can be done via the [`aws_api_gateway_deployment` resource](api_gateway_deployment.html). Stages can be optionally managed further with the [`aws_api_gateway_base_path_mapping` resource](api_gateway_base_path_mapping.html), [`aws_api_gateway_domain_name` resource](api_gateway_domain_name.html), and [`aws_api_method_settings` resource](api_gateway_method_settings.html). For more information, see the [API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-stages.html).

## Example Usage

An end-to-end example of a REST API configured with OpenAPI can be found in the [`/examples/api-gateway-rest-api-openapi` directory within the GitHub repository](https://github.com/hashicorp/terraform-provider-aws/tree/main/examples/api-gateway-rest-api-openapi).

```terraform
resource "aws_api_gateway_rest_api" "example" {
  body = jsonencode({
    openapi = "3.0.1"
    info = {
      title   = "example"
      version = "1.0"
    }
    paths = {
      "/path1" = {
        get = {
          x-amazon-apigateway-integration = {
            httpMethod           = "GET"
            payloadFormatVersion = "1.0"
            type                 = "HTTP_PROXY"
            uri                  = "https://ip-ranges.amazonaws.com/ip-ranges.json"
          }
        }
      }
    }
  })

  name = "example"
}

resource "aws_api_gateway_deployment" "example" {
  rest_api_id = aws_api_gateway_rest_api.example.id

  triggers = {
    redeployment = sha1(jsonencode(aws_api_gateway_rest_api.example.body))
  }

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_api_gateway_stage" "example" {
  deployment_id = aws_api_gateway_deployment.example.id
  rest_api_id   = aws_api_gateway_rest_api.example.id
  stage_name    = "example"
}

resource "aws_api_gateway_method_settings" "example" {
  rest_api_id = aws_api_gateway_rest_api.example.id
  stage_name  = aws_api_gateway_stage.example.stage_name
  method_path = "*/*"

  settings {
    metrics_enabled = true
    logging_level   = "INFO"
  }
}
```

### Managing the API Logging CloudWatch Log Group

API Gateway provides the ability to [enable CloudWatch API logging](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html). To manage the CloudWatch Log Group when this feature is enabled, the [`aws_cloudwatch_log_group` resource](/docs/providers/aws/r/cloudwatch_log_group.html) can be used where the name matches the API Gateway naming convention. If the CloudWatch Log Group previously exists, import the [`aws_cloudwatch_log_group` resource into Terraform](/docs/providers/aws/r/cloudwatch_log_group.html#import) as a one time operation. You can recreate the environment without import.

-> The below configuration uses [`dependsOn`](https://www.terraform.io/language/meta-arguments/depends_on) to prevent ordering issues with API Gateway automatically creating the log group first and a variable for naming consistency. Other ordering and naming methodologies may be more appropriate for your environment.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { VariableType, TerraformVariable, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ApiGatewayRestApi } from "./.gen/providers/aws/api-gateway-rest-api";
import { ApiGatewayStage } from "./.gen/providers/aws/api-gateway-stage";
import { CloudwatchLogGroup } from "./.gen/providers/aws/cloudwatch-log-group";
interface MyConfig {
  name: any;
  deploymentId: any;
  restApiId: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    /*Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
    You can read more about this at https://cdk.tf/variables*/
    const stageName = new TerraformVariable(this, "stage_name", {
      default: "example",
      type: VariableType.STRING,
    });
    const example = new ApiGatewayRestApi(this, "example", {
      name: config.name,
    });
    const awsCloudwatchLogGroupExample = new CloudwatchLogGroup(
      this,
      "example_2",
      {
        name:
          "API-Gateway-Execution-Logs_${" +
          example.id +
          "}/${" +
          stageName.value +
          "}",
        retentionInDays: 7,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCloudwatchLogGroupExample.overrideLogicalId("example");
    const awsApiGatewayStageExample = new ApiGatewayStage(this, "example_3", {
      dependsOn: [awsCloudwatchLogGroupExample],
      stageName: stageName.stringValue,
      deploymentId: config.deploymentId,
      restApiId: config.restApiId,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsApiGatewayStageExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `restApiId` - (Required) ID of the associated REST API
* `stageName` - (Required) Name of the stage
* `deploymentId` - (Required) ID of the deployment that the stage points to
* `accessLogSettings` - (Optional) Enables access logs for the API stage. See [Access Log Settings](#access-log-settings) below.
* `cacheClusterEnabled` - (Optional) Whether a cache cluster is enabled for the stage
* `cacheClusterSize` - (Optional) Size of the cache cluster for the stage, if enabled. Allowed values include `0.5`, `1.6`, `6.1`, `13.5`, `28.4`, `58.2`, `118` and `237`.
* `canarySettings` - (Optional) Configuration settings of a canary deployment. See [Canary Settings](#canary-settings) below.
* `clientCertificateId` - (Optional) Identifier of a client certificate for the stage.
* `description` - (Optional) Description of the stage.
* `documentationVersion` - (Optional) Version of the associated API documentation
* `variables` - (Optional) Map that defines the stage variables
* `tags` - (Optional) Map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `xrayTracingEnabled` - (Optional) Whether active tracing with X-ray is enabled. Defaults to `false`.

### Access Log Settings

* `destinationArn` - (Required) ARN of the CloudWatch Logs log group or Kinesis Data Firehose delivery stream to receive access logs. If you specify a Kinesis Data Firehose delivery stream, the stream name must begin with `amazon-apigateway-`. Automatically removes trailing `:*` if present.
* `format` - (Required) Formatting and values recorded in the logs.
For more information on configuring the log format rules visit the AWS [documentation](https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-logging.html)

### Canary Settings

* `deploymentId` - (Required) ID of the deployment that the canary points to.
* `percentTraffic` - (Optional) Percent `0.0` - `100.0` of traffic to divert to the canary deployment.
* `stageVariableOverrides` - (Optional) Map of overridden stage `variables` (including new variables) for the canary deployment.
* `useStageCache` - (Optional) Whether the canary deployment uses the stage cache. Defaults to false.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN
* `id` - ID of the stage
* `invokeUrl` - URL to invoke the API pointing to the stage,
  e.g., `https://z4675bid1j.execute-api.eu-west-2.amazonaws.com/prod`
* `executionArn` - Execution ARN to be used in [`lambda_permission`](/docs/providers/aws/r/lambda_permission.html)'s `sourceArn`
  when allowing API Gateway to invoke a Lambda function,
  e.g., `arn:aws:execute-api:eu-west-2:123456789012:z4675bid1j/prod`
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).
* `webAclArn` - ARN of the WebAcl associated with the Stage.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_api_gateway_stage` using `REST-API-ID/STAGE-NAME`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ApiGatewayStage } from "./.gen/providers/aws/api-gateway-stage";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ApiGatewayStage.generateConfigForImport(
      this,
      "example",
      "12345abcde/example"
    );
  }
}

```

Using `terraform import`, import `aws_api_gateway_stage` using `REST-API-ID/STAGE-NAME`. For example:

```console
% terraform import aws_api_gateway_stage.example 12345abcde/example
```

<!-- cache-key: cdktf-0.20.8 input-2be068207444953915267d90ec483b29ecc881a26f809840ff8476c37a9a0cf4 -->