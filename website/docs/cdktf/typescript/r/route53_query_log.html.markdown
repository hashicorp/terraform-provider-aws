---
subcategory: "Route 53"
layout: "aws"
page_title: "AWS: aws_route53_query_log"
description: |-
  Provides a Route53 query logging configuration resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_route53_query_log

Provides a Route53 query logging configuration resource.

~> **NOTE:** There are restrictions on the configuration of query logging. Notably,
the CloudWatch log group must be in the `us-east-1` region,
a permissive CloudWatch log resource policy must be in place, and
the Route53 hosted zone must be public.
See [Configuring Logging for DNS Queries](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/query-logs.html?console_help=true#query-logs-configuring) for additional details.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchLogGroup } from "./.gen/providers/aws/cloudwatch-log-group";
import { CloudwatchLogResourcePolicy } from "./.gen/providers/aws/cloudwatch-log-resource-policy";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { AwsProvider } from "./.gen/providers/aws/provider";
import { Route53QueryLog } from "./.gen/providers/aws/route53-query-log";
import { Route53Zone } from "./.gen/providers/aws/route53-zone";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const usEast1 = new AwsProvider(this, "aws", {
      alias: "us-east-1",
      region: "us-east-1",
    });
    const exampleCom = new Route53Zone(this, "example_com", {
      name: "example.com",
    });
    const route53QueryLoggingPolicy = new DataAwsIamPolicyDocument(
      this,
      "route53-query-logging-policy",
      {
        statement: [
          {
            actions: ["logs:CreateLogStream", "logs:PutLogEvents"],
            principals: [
              {
                identifiers: ["route53.amazonaws.com"],
                type: "Service",
              },
            ],
            resources: ["arn:aws:logs:*:*:log-group:/aws/route53/*"],
          },
        ],
      }
    );
    const awsRoute53ExampleCom = new CloudwatchLogGroup(
      this,
      "aws_route53_example_com",
      {
        name: "/aws/route53/${" + exampleCom.name + "}",
        provider: usEast1,
        retentionInDays: 30,
      }
    );
    const awsCloudwatchLogResourcePolicyRoute53QueryLoggingPolicy =
      new CloudwatchLogResourcePolicy(this, "route53-query-logging-policy_4", {
        policyDocument: Token.asString(route53QueryLoggingPolicy.json),
        policyName: "route53-query-logging-policy",
        provider: usEast1,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCloudwatchLogResourcePolicyRoute53QueryLoggingPolicy.overrideLogicalId(
      "route53-query-logging-policy"
    );
    const awsRoute53QueryLogExampleCom = new Route53QueryLog(
      this,
      "example_com_5",
      {
        cloudwatchLogGroupArn: awsRoute53ExampleCom.arn,
        dependsOn: [awsCloudwatchLogResourcePolicyRoute53QueryLoggingPolicy],
        zoneId: exampleCom.zoneId,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRoute53QueryLogExampleCom.overrideLogicalId("example_com");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `cloudwatchLogGroupArn` - (Required) CloudWatch log group ARN to send query logs.
* `zoneId` - (Required) Route53 hosted zone ID to enable query logs.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The Amazon Resource Name (ARN) of the Query Logging Config.
* `id` - The query logging configuration ID

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Route53 query logging configurations using their ID. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Route53QueryLog } from "./.gen/providers/aws/route53-query-log";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    Route53QueryLog.generateConfigForImport(
      this,
      "exampleCom",
      "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
    );
  }
}

```

Using `terraform import`, import Route53 query logging configurations using their ID. For example:

```console
% terraform import aws_route53_query_log.example_com xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
```

<!-- cache-key: cdktf-0.20.8 input-d9656f2fc1e20251769a3e2a3d8099ca32009721211d5ef362901f305ddc7e9e -->