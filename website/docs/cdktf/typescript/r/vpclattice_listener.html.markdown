---
subcategory: "VPC Lattice"
layout: "aws"
page_title: "AWS: aws_vpclattice_listener"
description: |-
  Terraform resource for managing an AWS VPC Lattice Listener.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_vpclattice_listener

Terraform resource for managing an AWS VPC Lattice Listener.

## Example Usage

### Fixed response action

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VpclatticeListener } from "./.gen/providers/aws/vpclattice-listener";
import { VpclatticeService } from "./.gen/providers/aws/vpclattice-service";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new VpclatticeService(this, "example", {
      name: "example",
    });
    const awsVpclatticeListenerExample = new VpclatticeListener(
      this,
      "example_1",
      {
        defaultAction: {
          fixedResponse: {
            statusCode: 404,
          },
        },
        name: "example",
        protocol: "HTTPS",
        serviceIdentifier: example.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpclatticeListenerExample.overrideLogicalId("example");
  }
}

```

### Forward action

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VpclatticeListener } from "./.gen/providers/aws/vpclattice-listener";
import { VpclatticeService } from "./.gen/providers/aws/vpclattice-service";
import { VpclatticeTargetGroup } from "./.gen/providers/aws/vpclattice-target-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new VpclatticeService(this, "example", {
      name: "example",
    });
    const awsVpclatticeTargetGroupExample = new VpclatticeTargetGroup(
      this,
      "example_1",
      {
        config: {
          port: 80,
          protocol: "HTTP",
          vpcIdentifier: Token.asString(awsVpcExample.id),
        },
        name: "example-target-group-1",
        type: "INSTANCE",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpclatticeTargetGroupExample.overrideLogicalId("example");
    const awsVpclatticeListenerExample = new VpclatticeListener(
      this,
      "example_2",
      {
        defaultAction: {
          forward: [
            {
              targetGroups: [
                {
                  targetGroupIdentifier: Token.asString(
                    awsVpclatticeTargetGroupExample.id
                  ),
                },
              ],
            },
          ],
        },
        name: "example",
        protocol: "HTTP",
        serviceIdentifier: example.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpclatticeListenerExample.overrideLogicalId("example");
  }
}

```

### Forward action with weighted target groups

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VpclatticeListener } from "./.gen/providers/aws/vpclattice-listener";
import { VpclatticeService } from "./.gen/providers/aws/vpclattice-service";
import { VpclatticeTargetGroup } from "./.gen/providers/aws/vpclattice-target-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new VpclatticeService(this, "example", {
      name: "example",
    });
    const example1 = new VpclatticeTargetGroup(this, "example1", {
      config: {
        port: 80,
        protocol: "HTTP",
        vpcIdentifier: Token.asString(awsVpcExample.id),
      },
      name: "example-target-group-1",
      type: "INSTANCE",
    });
    const example2 = new VpclatticeTargetGroup(this, "example2", {
      config: {
        port: 8080,
        protocol: "HTTP",
        vpcIdentifier: Token.asString(awsVpcExample.id),
      },
      name: "example-target-group-2",
      type: "INSTANCE",
    });
    const awsVpclatticeListenerExample = new VpclatticeListener(
      this,
      "example_3",
      {
        defaultAction: {
          forward: [
            {
              targetGroups: [
                {
                  targetGroupIdentifier: example1.id,
                  weight: 80,
                },
                {
                  targetGroupIdentifier: example2.id,
                  weight: 20,
                },
              ],
            },
          ],
        },
        name: "example",
        protocol: "HTTP",
        serviceIdentifier: example.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpclatticeListenerExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `defaultAction` - (Required) Default action block for the default listener rule. Default action blocks are defined below.
* `name` - (Required, Forces new resource) Name of the listener. A listener name must be unique within a service. Valid characters are a-z, 0-9, and hyphens (-). You can't use a hyphen as the first or last character, or immediately after another hyphen.
* `port` - (Optional, Forces new resource) Listener port. You can specify a value from 1 to 65535. If `port` is not specified and `protocol` is HTTP, the value will default to 80. If `port` is not specified and `protocol` is HTTPS, the value will default to 443.
* `protocol` - (Required, Forces new resource) Protocol for the listener. Supported values are `HTTP`, `HTTPS` or `TLS_PASSTHROUGH`
* `serviceArn` - (Optional) Amazon Resource Name (ARN) of the VPC Lattice service. You must include either the `serviceArn` or `serviceIdentifier` arguments.
* `serviceIdentifier` - (Optional) ID of the VPC Lattice service. You must include either the `serviceArn` or `serviceIdentifier` arguments.
-> **NOTE:** You must specify one of the following arguments: `serviceArn` or `serviceIdentifier`.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### Default Action

Default action blocks (for `defaultAction`) must include at least one of the following argument blocks:

* `fixed-response` - (Optional) Configuration block for returning a fixed response. See Fixed Response blocks below.
* `forward` - (Optional) Route requests to one or more target groups. See Forward blocks below.

-> **NOTE:** You must specify exactly one of the following argument blocks: `fixedResponse` or `forward`.

### Fixed Response

Fixed response blocks (for `fixed-response`) must include the following argument:

* `statusCode` - (Required) Custom HTTP status code to return, e.g. a 404 response code. See [Listeners](https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html) in the AWS documentation for a list of supported codes.

### Forward

Forward blocks (for `forward`) must include the following arguments:

* `targetGroups` - (Required) One or more target group blocks.

### Target Groups

Target group blocks (for `targetGroup`) must include the following arguments:

* `targetGroupIdentifier` - (Required) ID or Amazon Resource Name (ARN) of the target group.
* `weight` - (Optional) Determines how requests are distributed to the target group. Only required if you specify multiple target groups for a forward action. For example, if you specify two target groups, one with a
weight of 10 and the other with a weight of 20, the target group with a weight of 20 receives twice as many requests as the other target group. See [Listener rules](https://docs.aws.amazon.com/vpc-lattice/latest/ug/listeners.html#listener-rules) in the AWS documentation for additional examples. Default: `100`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the listener.
* `createdAt` - Date and time that the listener was created, specified in ISO-8601 format.
* `listenerId` - Standalone ID of the listener, e.g. `listener-0a1b2c3d4e5f6g`.
* `updatedAt` - Date and time that the listener was last updated, specified in ISO-8601 format.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import VPC Lattice Listener using the `listenerId` of the listener and the `id` of the VPC Lattice service combined with a `/` character. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VpclatticeListener } from "./.gen/providers/aws/vpclattice-listener";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    VpclatticeListener.generateConfigForImport(
      this,
      "example",
      "svc-1a2b3c4d/listener-987654321"
    );
  }
}

```

Using `terraform import`, import VPC Lattice Listener using the `listenerId` of the listener and the `id` of the VPC Lattice service combined with a `/` character. For example:

```console
% terraform import aws_vpclattice_listener.example svc-1a2b3c4d/listener-987654321
```

<!-- cache-key: cdktf-0.20.1 input-0ca5580988bfab04426823395a214bb0c694d578482a69ab5e89b8239757477e -->