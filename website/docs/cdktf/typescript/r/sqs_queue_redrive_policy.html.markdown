---
subcategory: "SQS (Simple Queue)"
layout: "aws"
page_title: "AWS: aws_sqs_queue_redrive_policy"
description: |-
  Provides a SQS Queue Redrive Policy resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_sqs_queue_redrive_policy

Allows you to set a redrive policy of an SQS Queue
while referencing ARN of the dead letter queue inside the redrive policy.

This is useful when you want to set a dedicated
dead letter queue for a standard or FIFO queue, but need
the dead letter queue to exist before setting the redrive policy.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SqsQueue } from "./.gen/providers/aws/sqs-queue";
import { SqsQueueRedrivePolicy } from "./.gen/providers/aws/sqs-queue-redrive-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const q = new SqsQueue(this, "q", {
      name: "examplequeue",
    });
    const ddl = new SqsQueue(this, "ddl", {
      name: "examplequeue-ddl",
      redriveAllowPolicy: Token.asString(
        Fn.jsonencode({
          redrivePermission: "byQueue",
          sourceQueueArns: [q.arn],
        })
      ),
    });
    const awsSqsQueueRedrivePolicyQ = new SqsQueueRedrivePolicy(this, "q_2", {
      queueUrl: q.id,
      redrivePolicy: Token.asString(
        Fn.jsonencode({
          deadLetterTargetArn: ddl.arn,
          maxReceiveCount: 4,
        })
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSqsQueueRedrivePolicyQ.overrideLogicalId("q");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `queueUrl` - (Required) The URL of the SQS Queue to which to attach the policy
* `redrivePolicy` - (Required) The JSON redrive policy for the SQS queue. Accepts two key/val pairs: `deadLetterTargetArn` and `maxReceiveCount`. Learn more in the [Amazon SQS dead-letter queues documentation](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html).

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import SQS Queue Redrive Policies using the queue URL. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SqsQueueRedrivePolicy } from "./.gen/providers/aws/sqs-queue-redrive-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    SqsQueueRedrivePolicy.generateConfigForImport(
      this,
      "test",
      "https://queue.amazonaws.com/123456789012/myqueue"
    );
  }
}

```

Using `terraform import`, import SQS Queue Redrive Policies using the queue URL. For example:

```console
% terraform import aws_sqs_queue_redrive_policy.test https://queue.amazonaws.com/123456789012/myqueue
```

<!-- cache-key: cdktf-0.20.8 input-b62138be20996236ab90f96e5e9187ba981c0f006b69a6a27bc2dbfad0f8f8ca -->