---
subcategory: "Audit Manager"
layout: "aws"
page_title: "AWS: aws_auditmanager_control"
description: |-
  Terraform resource for managing an AWS Audit Manager Control.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_auditmanager_control

Terraform resource for managing an AWS Audit Manager Control.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AuditmanagerControl } from "./.gen/providers/aws/auditmanager-control";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AuditmanagerControl(this, "example", {
      controlMappingSources: [
        {
          sourceName: "example",
          sourceSetUpOption: "Procedural_Controls_Mapping",
          sourceType: "MANUAL",
        },
      ],
      name: "example",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `name` - (Required) Name of the control.
* `controlMappingSources` - (Required) Data mapping sources. See [`controlMappingSources`](#control_mapping_sources) below.

The following arguments are optional:

* `actionPlanInstructions` - (Optional) Recommended actions to carry out if the control isn't fulfilled.
* `actionPlanTitle` - (Optional) Title of the action plan for remediating the control.
* `description` - (Optional) Description of the control.
* `tags` - (Optional) A map of tags to assign to the control. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `testingInformation` - (Optional) Steps to follow to determine if the control is satisfied.

### control_mapping_sources

The following arguments are required:

* `sourceName` - (Required) Name of the source.
* `sourceSetUpOption` - (Required) The setup option for the data source. This option reflects if the evidence collection is automated or manual. Valid values are `System_Controls_Mapping` (automated) and `Procedural_Controls_Mapping` (manual).
* `sourceType` - (Required) Type of data source for evidence collection. If `sourceSetUpOption` is manual, the only valid value is `MANUAL`. If `sourceSetUpOption` is automated, valid values are `AWS_Cloudtrail`, `AWS_Config`, `AWS_Security_Hub`, or `AWS_API_Call`.

The following arguments are optional:

* `sourceDescription` - (Optional) Description of the source.
* `sourceFrequency` - (Optional) Frequency of evidence collection. Valid values are `DAILY`, `WEEKLY`, or `MONTHLY`.
* `sourceKeyword` - (Optional) The keyword to search for in CloudTrail logs, Config rules, Security Hub checks, and Amazon Web Services API names. See [`sourceKeyword`](#source_keyword) below.
* `troubleshootingText` - (Optional) Instructions for troubleshooting the control.

### source_keyword

The following arguments are required:

* `keywordInputType` - (Required) Input method for the keyword. Valid values are `INPUT_TEXT`, `SELECT_FROM_LIST`, or `UPLOAD_FILE`.
* `keywordValue` - (Required) The value of the keyword that's used when mapping a control data source. For example, this can be a CloudTrail event name, a rule name for Config, a Security Hub control, or the name of an Amazon Web Services API call. See the [Audit Manager supported control data sources documentation](https://docs.aws.amazon.com/audit-manager/latest/userguide/control-data-sources.html) for more information.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of the control.
* `control_mapping_sources.*.source_id` - Unique identifier for the source.
* `id` - Unique identifier for the control.
* `type` - Type of control, such as a custom control or a standard control.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import an Audit Manager Control using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AuditmanagerControl } from "./.gen/providers/aws/auditmanager-control";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    AuditmanagerControl.generateConfigForImport(this, "example", "abc123-de45");
  }
}

```

Using `terraform import`, import an Audit Manager Control using the `id`. For example:

```console
% terraform import aws_auditmanager_control.example abc123-de45
```

<!-- cache-key: cdktf-0.20.8 input-bc2f89c5792b58fb108a1ff46386c011ac7aef5ec1461e6d9b303095ac1ea3b0 -->