---
subcategory: "Bedrock Agents"
layout: "aws"
page_title: "AWS: aws_bedrockagent_knowledge_base"
description: |-
  Terraform resource for managing an AWS Agents for Amazon Bedrock Knowledge Base.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_bedrockagent_knowledge_base

Terraform resource for managing an AWS Agents for Amazon Bedrock Knowledge Base.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BedrockagentKnowledgeBase } from "./.gen/providers/aws/bedrockagent-knowledge-base";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new BedrockagentKnowledgeBase(this, "example", {
      knowledgeBaseConfiguration: [
        {
          type: "VECTOR",
          vectorKnowledgeBaseConfiguration: [
            {
              embeddingModelArn:
                "arn:aws:bedrock:us-west-2::foundation-model/amazon.titan-embed-text-v2:0",
            },
          ],
        },
      ],
      name: "example",
      roleArn: Token.asString(awsIamRoleExample.arn),
      storageConfiguration: [
        {
          opensearchServerlessConfiguration: [
            {
              collectionArn:
                "arn:aws:aoss:us-west-2:123456789012:collection/142bezjddq707i5stcrf",
              fieldMapping: [
                {
                  metadataField: "AMAZON_BEDROCK_METADATA",
                  textField: "AMAZON_BEDROCK_TEXT_CHUNK",
                  vectorField: "bedrock-knowledge-base-default-vector",
                },
              ],
              vectorIndexName: "bedrock-knowledge-base-default-index",
            },
          ],
          type: "OPENSEARCH_SERVERLESS",
        },
      ],
    });
  }
}

```

### With Supplemental Data Storage Configuration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BedrockagentKnowledgeBase } from "./.gen/providers/aws/bedrockagent-knowledge-base";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new BedrockagentKnowledgeBase(this, "example", {
      knowledgeBaseConfiguration: [
        {
          type: "VECTOR",
          vectorKnowledgeBaseConfiguration: [
            {
              embeddingModelArn:
                "arn:aws:bedrock:us-west-2::foundation-model/amazon.titan-embed-text-v2:0",
              embedding_model_configuration: [
                {
                  bedrock_embedding_model_configuration: [
                    {
                      dimensions: 1024,
                      embedding_data_type: "FLOAT32",
                    },
                  ],
                },
              ],
              supplemental_data_storage_configuration: [
                {
                  storage_location: [
                    {
                      s3_location: [
                        {
                          uri: "s3://my-bucket/chunk-processor/",
                        },
                      ],
                      type: "S3",
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      name: "example",
      roleArn: Token.asString(awsIamRoleExample.arn),
      storageConfiguration: [
        {
          opensearchServerlessConfiguration: [
            {
              collectionArn:
                "arn:aws:aoss:us-west-2:123456789012:collection/142bezjddq707i5stcrf",
              fieldMapping: [
                {
                  metadataField: "AMAZON_BEDROCK_METADATA",
                  textField: "AMAZON_BEDROCK_TEXT_CHUNK",
                  vectorField: "bedrock-knowledge-base-default-vector",
                },
              ],
              vectorIndexName: "bedrock-knowledge-base-default-index",
            },
          ],
          type: "OPENSEARCH_SERVERLESS",
        },
      ],
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `knowledgeBaseConfiguration` - (Required, Forces new resource) Details about the embeddings configuration of the knowledge base. See [`knowledgeBaseConfiguration` block](#knowledge_base_configuration-block) for details.
* `name` - (Required) Name of the knowledge base.
* `roleArn` - (Required) ARN of the IAM role with permissions to invoke API operations on the knowledge base.
* `storageConfiguration` - (Required, Forces new resource) Details about the storage configuration of the knowledge base. See [`storageConfiguration` block](#storage_configuration-block) for details.

The following arguments are optional:

* `description` - (Optional) Description of the knowledge base.
* `tags` - (Optional) Map of tags assigned to the resource. If configured with a provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### `knowledgeBaseConfiguration` block

The `knowledgeBaseConfiguration` configuration block supports the following arguments:

* `type` - (Required) Type of data that the data source is converted into for the knowledge base. Valid Values: `VECTOR`.
* `vectorKnowledgeBaseConfiguration` - (Optional) Details about the embeddings model that'sused to convert the data source. See [`vectorKnowledgeBaseConfiguration` block](#vector_knowledge_base_configuration-block) for details.

### `vectorKnowledgeBaseConfiguration` block

The `vectorKnowledgeBaseConfiguration` configuration block supports the following arguments:

* `embeddingModelArn` - (Required) ARN of the model used to create vector embeddings for the knowledge base.
* `embedding_model_configuration` - (Optional) The embeddings model configuration details for the vector model used in Knowledge Base.  See [`embedding_model_configuration` block](#embedding_model_configuration-block) for details.
* `supplemental_data_storage_configuration` - (Optional) supplemental_data_storage_configuration.  See [`supplemental_data_storage_configuration` block](#supplemental_data_storage_configuration-block) for details.

### `embedding_model_configuration` block

The `embedding_model_configuration` configuration block supports the following arguments:

* `bedrock_embedding_model_configuration` - (Optional) The vector configuration details on the Bedrock embeddings model.  See [`bedrock_embedding_model_configuration` block](#bedrock_embedding_model_configuration-block) for details.

### `bedrock_embedding_model_configuration` block

The `bedrock_embedding_model_configuration` configuration block supports the following arguments:

* `dimensions` - (Optional) Dimension details for the vector configuration used on the Bedrock embeddings model.
* `embedding_data_type` - (Optional) Data type for the vectors when using a model to convert text into vector embeddings. The model must support the specified data type for vector embeddings.  Valid values are `FLOAT32` and `BINARY`.

### `supplemental_data_storage_configuration` block

The `supplemental_data_storage_configuration` configuration block supports the following arguments:

* `storageLocation` - (Required) A storage location specification for images extracted from multimodal documents in your data source.  See [`storageLocation` block](#storage_location-block) for details.

### `storageLocation` block

The `storageLocation` configuration block supports the following arguments:

* `type` - (Required) Storage service used for this location. `S3` is the only valid value.
* `s3Location` - (Optional) Contains information about the Amazon S3 location for the extracted images.  See [`s3Location` block](#s3_location-block) for details.

### `s3Location` block

The `s3Location` configuration block supports the following arguments:

* `uri` - (Required) URI of the location.

### `storageConfiguration` block

The `storageConfiguration` configuration block supports the following arguments:

* `type` - (Required) Vector store service in which the knowledge base is stored. Valid Values: `OPENSEARCH_SERVERLESS`, `PINECONE`, `REDIS_ENTERPRISE_CLOUD`, `RDS`.
* `opensearchServerlessConfiguration` - (Optional) The storage configuration of the knowledge base in Amazon OpenSearch Service. See [`opensearchServerlessConfiguration` block](#opensearch_serverless_configuration-block) for details.
* `pineconeConfiguration` - (Optional)  The storage configuration of the knowledge base in Pinecone. See [`pineconeConfiguration` block](#pinecone_configuration-block) for details.
* `rdsConfiguration` - (Optional) Details about the storage configuration of the knowledge base in Amazon RDS. For more information, see [Create a vector index in Amazon RDS](https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-setup.html). See [`rdsConfiguration` block](#rds_configuration-block) for details.
* `redisEnterpriseCloudConfiguration` - (Optional) The storage configuration of the knowledge base in Redis Enterprise Cloud. See [`redisEnterpriseCloudConfiguration` block](#redis_enterprise_cloud_configuration-block) for details.

### `opensearchServerlessConfiguration` block

The `opensearchServerlessConfiguration` configuration block supports the following arguments:

* `collectionArn` - (Required) ARN of the OpenSearch Service vector store.
* `fieldMapping` - (Required) The names of the fields to which to map information about the vector store. This block supports the following arguments:
    * `metadataField` - (Required) Name of the field in which Amazon Bedrock stores metadata about the vector store.
    * `textField` - (Required) Name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
    * `vectorField` - (Required) Name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.
* `vectorIndexName` - (Required) Name of the vector store.

### `pineconeConfiguration` block

The `pineconeConfiguration` configuration block supports the following arguments:

* `connectionString` - (Required) Endpoint URL for your index management page.
* `credentialsSecretArn` - (Required) ARN of the secret that you created in AWS Secrets Manager that is linked to your Pinecone API key.
* `fieldMapping` - (Required) The names of the fields to which to map information about the vector store. This block supports the following arguments:
    * `metadataField` - (Required) Name of the field in which Amazon Bedrock stores metadata about the vector store.
    * `textField` - (Required) Name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
* `namespace` - (Optional) Namespace to be used to write new data to your database.

### `rdsConfiguration` block

 The `rdsConfiguration` configuration block supports the following arguments:

* `credentialsSecretArn` - (Required) ARN of the secret that you created in AWS Secrets Manager that is linked to your Amazon RDS database.
* `databaseName` - (Required) Name of your Amazon RDS database.
* `fieldMapping` - (Required) Names of the fields to which to map information about the vector store. This block supports the following arguments:
    * `metadataField` - (Required) Name of the field in which Amazon Bedrock stores metadata about the vector store.
    * `primaryKeyField` - (Required) Name of the field in which Amazon Bedrock stores the ID for each entry.
    * `textField` - (Required) Name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
    * `vectorField` - (Required) Name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.
* `resourceArn` - (Required) ARN of the vector store.
* `tableName` - (Required) Name of the table in the database.

### `redisEnterpriseCloudConfiguration` block

The `redisEnterpriseCloudConfiguration` configuration block supports the following arguments:

* `credentialsSecretArn` - (Required) ARN of the secret that you created in AWS Secrets Manager that is linked to your Redis Enterprise Cloud database.
* `endpoint` - (Required) Endpoint URL of the Redis Enterprise Cloud database.
* `fieldMapping` - (Required) The names of the fields to which to map information about the vector store. This block supports the following arguments:
    * `metadataField` - (Required) Name of the field in which Amazon Bedrock stores metadata about the vector store.
    * `textField` - (Required) Name of the field in which Amazon Bedrock stores the raw text from your data. The text is split according to the chunking strategy you choose.
    * `vectorField` - (Required) Name of the field in which Amazon Bedrock stores the vector embeddings for your data sources.
* `vectorIndexName` - (Required) Name of the vector index.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the knowledge base.
* `createdAt` - Time at which the knowledge base was created.
* `id` - Unique identifier of the knowledge base.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).
* `updatedAt` - Time at which the knowledge base was last updated.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `update` - (Default `30m`)
* `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Agents for Amazon Bedrock Knowledge Base using the knowledge base ID. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { BedrockagentKnowledgeBase } from "./.gen/providers/aws/bedrockagent-knowledge-base";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    BedrockagentKnowledgeBase.generateConfigForImport(
      this,
      "example",
      "EMDPPAYPZI"
    );
  }
}

```

Using `terraform import`, import Agents for Amazon Bedrock Knowledge Base using the knowledge base ID. For example:

```console
% terraform import aws_bedrockagent_knowledge_base.example EMDPPAYPZI
```

<!-- cache-key: cdktf-0.20.8 input-65cd22ffe02afc9c69622cf824ae03fc810a40c9ed4cb62f0d1185cacfe1dd0b -->