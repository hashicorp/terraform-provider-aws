---
subcategory: "Lambda"
layout: "aws"
page_title: "AWS: aws_lambda_code_signing_config"
description: |-
  Manages an AWS Lambda Code Signing Config.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_lambda_code_signing_config

Manages an AWS Lambda Code Signing Config. Use this resource to define allowed signing profiles and code-signing validation policies for Lambda functions to ensure code integrity and authenticity.

For information about Lambda code signing configurations and how to use them, see [configuring code signing for Lambda functions](https://docs.aws.amazon.com/lambda/latest/dg/configuration-codesigning.html).

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaCodeSigningConfig } from "./.gen/providers/aws/lambda-code-signing-config";
import { SignerSigningProfile } from "./.gen/providers/aws/signer-signing-profile";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const dev = new SignerSigningProfile(this, "dev", {
      namePrefix: "dev_lambda_",
      platformId: "AWSLambda-SHA384-ECDSA",
      tags: {
        Environment: "development",
      },
    });
    const prod = new SignerSigningProfile(this, "prod", {
      namePrefix: "prod_lambda_",
      platformId: "AWSLambda-SHA384-ECDSA",
      tags: {
        Environment: "production",
      },
    });
    new LambdaCodeSigningConfig(this, "example", {
      allowedPublishers: {
        signingProfileVersionArns: [prod.versionArn, dev.versionArn],
      },
      description: "Code signing configuration for Lambda functions",
      policies: {
        untrustedArtifactOnDeployment: "Enforce",
      },
      tags: {
        Environment: "production",
        Purpose: "code-signing",
      },
    });
  }
}

```

### Warning Only Configuration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaCodeSigningConfig } from "./.gen/providers/aws/lambda-code-signing-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LambdaCodeSigningConfig(this, "example", {
      allowedPublishers: {
        signingProfileVersionArns: [dev.versionArn],
      },
      description: "Development code signing configuration",
      policies: {
        untrustedArtifactOnDeployment: "Warn",
      },
      tags: {
        Environment: "development",
        Purpose: "code-signing",
      },
    });
  }
}

```

### Multiple Environment Configuration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaCodeSigningConfig } from "./.gen/providers/aws/lambda-code-signing-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LambdaCodeSigningConfig(this, "dev", {
      allowedPublishers: {
        signingProfileVersionArns: [
          Token.asString(awsSignerSigningProfileDev.versionArn),
          test.versionArn,
        ],
      },
      description: "Development code signing configuration with warnings",
      policies: {
        untrustedArtifactOnDeployment: "Warn",
      },
      tags: {
        Environment: "development",
        Security: "flexible",
      },
    });
    new LambdaCodeSigningConfig(this, "prod", {
      allowedPublishers: {
        signingProfileVersionArns: [
          Token.asString(awsSignerSigningProfileProd.versionArn),
        ],
      },
      description:
        "Production code signing configuration with strict enforcement",
      policies: {
        untrustedArtifactOnDeployment: "Enforce",
      },
      tags: {
        Environment: "production",
        Security: "strict",
      },
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `allowedPublishers` - (Required) Configuration block of allowed publishers as signing profiles for this code signing configuration. [See below](#allowed_publishers-configuration-block).

The following arguments are optional:

* `description` - (Optional) Descriptive name for this code signing configuration.
* `policies` - (Optional) Configuration block of code signing policies that define the actions to take if the validation checks fail. [See below](#policies-configuration-block).
* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `tags` - (Optional) Map of tags to assign to the object. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### allowed_publishers Configuration Block

* `signingProfileVersionArns` - (Required) Set of ARNs for each of the signing profiles. A signing profile defines a trusted user who can sign a code package. Maximum of 20 signing profiles.

### policies Configuration Block

* `untrustedArtifactOnDeployment` - (Required) Code signing configuration policy for deployment validation failure. If you set the policy to `Enforce`, Lambda blocks the deployment request if code-signing validation checks fail. If you set the policy to `Warn`, Lambda allows the deployment and creates a CloudWatch log. Valid values: `Warn`, `Enforce`. Default value: `Warn`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the code signing configuration.
* `configId` - Unique identifier for the code signing configuration.
* `lastModified` - Date and time that the code signing configuration was last modified.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Code Signing Configs using their ARN. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaCodeSigningConfig } from "./.gen/providers/aws/lambda-code-signing-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    LambdaCodeSigningConfig.generateConfigForImport(
      this,
      "example",
      "arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-0f6c334abcdea4d8b"
    );
  }
}

```

For backwards compatibility, the following legacy `terraform import` command is also supported:

```console
% terraform import aws_lambda_code_signing_config.example arn:aws:lambda:us-west-2:123456789012:code-signing-config:csc-0f6c334abcdea4d8b
```

<!-- cache-key: cdktf-0.20.8 input-8e03a20225f2e822be30f35f7a1ec8e927795cedc33c156fb1702e29012b25ec -->