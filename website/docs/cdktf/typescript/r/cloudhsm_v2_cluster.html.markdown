---
subcategory: "CloudHSM"
layout: "aws"
page_title: "AWS: aws_cloudhsm_v2_cluster"
description: |-
  Provides a CloudHSM v2 resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cloudhsm_v2_cluster

Creates an Amazon CloudHSM v2 cluster.

For information about CloudHSM v2, see the
[AWS CloudHSM User Guide][1] and the [Amazon
CloudHSM API Reference][2].

~> **NOTE:** A CloudHSM Cluster can take several minutes to set up.
Practically no single attribute can be updated, except for `tags`.
If you need to delete a cluster, you have to remove its HSM modules first.
To initialize cluster, you have to add an HSM instance to the cluster, then sign CSR and upload it.

## Example Usage

The following example below creates a CloudHSM cluster.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformCount, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudhsmV2Cluster } from "./.gen/providers/aws/cloudhsm-v2-cluster";
import { DataAwsAvailabilityZones } from "./.gen/providers/aws/data-aws-availability-zones";
import { AwsProvider } from "./.gen/providers/aws/provider";
import { Subnet } from "./.gen/providers/aws/subnet";
import { Vpc } from "./.gen/providers/aws/vpc";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: awsRegion.stringValue,
    });
    const cloudhsmV2Vpc = new Vpc(this, "cloudhsm_v2_vpc", {
      cidrBlock: "10.0.0.0/16",
      tags: {
        Name: "example-aws_cloudhsm_v2_cluster",
      },
    });
    const available = new DataAwsAvailabilityZones(this, "available", {});
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const cloudhsmV2SubnetsCount = TerraformCount.of(Token.asNumber("2"));
    const cloudhsmV2Subnets = new Subnet(this, "cloudhsm_v2_subnets", {
      availabilityZone: Token.asString(
        Fn.element(
          available.names,
          Token.asNumber(cloudhsmV2SubnetsCount.index)
        )
      ),
      cidrBlock: Token.asString(
        Fn.element(subnets.value, Token.asNumber(cloudhsmV2SubnetsCount.index))
      ),
      mapPublicIpOnLaunch: false,
      tags: {
        Name: "example-aws_cloudhsm_v2_cluster",
      },
      vpcId: cloudhsmV2Vpc.id,
      count: cloudhsmV2SubnetsCount,
    });
    new CloudhsmV2Cluster(this, "cloudhsm_v2_cluster", {
      hsmType: "hsm1.medium",
      subnetIds: Token.asList(Fn.lookupNested(cloudhsmV2Subnets, ["*", "id"])),
      tags: {
        Name: "example-aws_cloudhsm_v2_cluster",
      },
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `sourceBackupIdentifier` - (Optional) ID of Cloud HSM v2 cluster backup to be restored.
* `hsmType` - (Required) The type of HSM module in the cluster. Currently, `hsm1.medium` and `hsm2m.medium` are supported.
* `subnetIds` - (Required) The IDs of subnets in which cluster will operate.
* `mode` - (Optional) The mode to use in the cluster. The allowed values are `FIPS` and `NON_FIPS`. This field is required if `hsmType` is `hsm2m.medium`.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `clusterId` - The id of the CloudHSM cluster.
* `clusterState` - The state of the CloudHSM cluster.
* `vpcId` - The id of the VPC that the CloudHSM cluster resides in.
* `securityGroupId` - The ID of the security group associated with the CloudHSM cluster.
* `clusterCertificates` - The list of cluster certificates.
    * `cluster_certificates.0.cluster_certificate` - The cluster certificate issued (signed) by the issuing certificate authority (CA) of the cluster's owner.
    * `cluster_certificates.0.cluster_csr` - The certificate signing request (CSR). Available only in `UNINITIALIZED` state after an HSM instance is added to the cluster.
    * `cluster_certificates.0.aws_hardware_certificate` - The HSM hardware certificate issued (signed) by AWS CloudHSM.
    * `cluster_certificates.0.hsm_certificate` - The HSM certificate issued (signed) by the HSM hardware.
    * `cluster_certificates.0.manufacturer_hardware_certificate` - The HSM hardware certificate issued (signed) by the hardware manufacturer.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

[1]: https://docs.aws.amazon.com/cloudhsm/latest/userguide/introduction.html
[2]: https://docs.aws.amazon.com/cloudhsm/latest/APIReference/Welcome.html

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import CloudHSM v2 Clusters using the cluster `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudhsmV2Cluster } from "./.gen/providers/aws/cloudhsm-v2-cluster";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    CloudhsmV2Cluster.generateConfigForImport(
      this,
      "testCluster",
      "cluster-aeb282a201"
    );
  }
}

```

Using `terraform import`, import CloudHSM v2 Clusters using the cluster `id`. For example:

```console
% terraform import aws_cloudhsm_v2_cluster.test_cluster cluster-aeb282a201
```

<!-- cache-key: cdktf-0.20.8 input-3208e14c04cfc617e88b434c8f4bbb8bbc097b0e47df7d25a430d89aae3136b1 -->