---
subcategory: "Directory Service"
layout: "aws"
page_title: "AWS: aws_directory_service_trust"
description: |-
  Manages a trust relationship between two Active Directory Directories.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_directory_service_trust

Manages a trust relationship between two Active Directory Directories.

The directories may either be both AWS Managed Microsoft AD domains or an AWS Managed Microsoft AD domain and a self-managed Active Directory Domain.

The Trust relationship must be configured on both sides of the relationship.
If a Trust has only been created on one side, it will be in the state `VerifyFailed`.
Once the second Trust is created, the first will update to the correct state.

## Example Usage

### Two-Way Trust

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DirectoryServiceDirectory } from "./.gen/providers/aws/directory-service-directory";
import { DirectoryServiceTrust } from "./.gen/providers/aws/directory-service-trust";
interface MyConfig {
  password: any;
  password1: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    const one = new DirectoryServiceDirectory(this, "one", {
      name: "one.example.com",
      type: "MicrosoftAD",
      password: config.password,
    });
    const two = new DirectoryServiceDirectory(this, "two", {
      name: "two.example.com",
      type: "MicrosoftAD",
      password: config.password1,
    });
    const awsDirectoryServiceTrustOne = new DirectoryServiceTrust(
      this,
      "one_2",
      {
        conditionalForwarderIpAddrs: two.dnsIpAddresses,
        directoryId: one.id,
        remoteDomainName: two.name,
        trustDirection: "Two-Way",
        trustPassword: "Some0therPassword",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDirectoryServiceTrustOne.overrideLogicalId("one");
    const awsDirectoryServiceTrustTwo = new DirectoryServiceTrust(
      this,
      "two_3",
      {
        conditionalForwarderIpAddrs: one.dnsIpAddresses,
        directoryId: two.id,
        remoteDomainName: one.name,
        trustDirection: "Two-Way",
        trustPassword: "Some0therPassword",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDirectoryServiceTrustTwo.overrideLogicalId("two");
  }
}

```

### One-Way Trust

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DirectoryServiceDirectory } from "./.gen/providers/aws/directory-service-directory";
import { DirectoryServiceTrust } from "./.gen/providers/aws/directory-service-trust";
interface MyConfig {
  password: any;
  password1: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    const one = new DirectoryServiceDirectory(this, "one", {
      name: "one.example.com",
      type: "MicrosoftAD",
      password: config.password,
    });
    const two = new DirectoryServiceDirectory(this, "two", {
      name: "two.example.com",
      type: "MicrosoftAD",
      password: config.password1,
    });
    const awsDirectoryServiceTrustOne = new DirectoryServiceTrust(
      this,
      "one_2",
      {
        conditionalForwarderIpAddrs: two.dnsIpAddresses,
        directoryId: one.id,
        remoteDomainName: two.name,
        trustDirection: "One-Way: Incoming",
        trustPassword: "Some0therPassword",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDirectoryServiceTrustOne.overrideLogicalId("one");
    const awsDirectoryServiceTrustTwo = new DirectoryServiceTrust(
      this,
      "two_3",
      {
        conditionalForwarderIpAddrs: one.dnsIpAddresses,
        directoryId: two.id,
        remoteDomainName: one.name,
        trustDirection: "One-Way: Outgoing",
        trustPassword: "Some0therPassword",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDirectoryServiceTrustTwo.overrideLogicalId("two");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `conditionalForwarderIpAddrs` - (Optional) Set of IPv4 addresses for the DNS server associated with the remote Directory.
  Can contain between 1 and 4 values.
* `deleteAssociatedConditionalForwarder` - (Optional) Whether to delete the conditional forwarder when deleting the Trust relationship.
* `directoryId` - (Required) ID of the Directory.
* `remoteDomainName` - (Required) Fully qualified domain name of the remote Directory.
* `selectiveAuth` - (Optional) Whether to enable selective authentication.
  Valid values are `Enabled` and `Disabled`.
  Default value is `Disabled`.
* `trustDirection` - (Required) The direction of the Trust relationship.
  Valid values are `One-Way: Outgoing`, `One-Way: Incoming`, and `Two-Way`.
* `trustPassword` - (Required) Password for the Trust.
  Does not need to match the passwords for either Directory.
  Can contain upper- and lower-case letters, numbers, and punctuation characters.
  May be up to 128 characters long.
* `trustType` - (Optional) Type of the Trust relationship.
  Valid values are `Forest` and `External`.
  Default value is `Forest`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `createdDateTime` - Date and time when the Trust was created.
* `id` - The Trust identifier.
* `lastUpdatedDateTime` - Date and time when the Trust was last updated.
* `stateLastUpdatedDateTime` - Date and time when the Trust state in `trustState` was last updated.
* `trustState` - State of the Trust relationship.
  One of `Created`, `VerifyFailed`,`Verified`, `UpdateFailed`,`Updated`,`Deleted`, or `Failed`.
* `trustStateReason` - Reason for the Trust state set in `trustState`.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import the Trust relationship using the directory ID and remote domain name, separated by a `/`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DirectoryServiceTrust } from "./.gen/providers/aws/directory-service-trust";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DirectoryServiceTrust.generateConfigForImport(
      this,
      "example",
      "d-926724cf57/directory.example.com"
    );
  }
}

```

Using `terraform import`, import the Trust relationship using the directory ID and remote domain name, separated by a `/`. For example:

```console
% terraform import aws_directory_service_trust.example d-926724cf57/directory.example.com
```

<!-- cache-key: cdktf-0.20.8 input-66aa03e6601035df60798595ea8787d00d4683201307e38bda224131aa72224e -->