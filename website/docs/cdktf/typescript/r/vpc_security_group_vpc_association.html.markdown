---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_vpc_security_group_vpc_association"
description: |-
  Terraform resource for managing Security Group VPC Associations.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_vpc_security_group_vpc_association

Terraform resource for managing Security Group VPC Associations.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VpcSecurityGroupVpcAssociation } from "./.gen/providers/aws/vpc-security-group-vpc-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new VpcSecurityGroupVpcAssociation(this, "example", {
      securityGroupId: "sg-05f1f54ab49bb39a3",
      vpcId: "vpc-01df9d105095412ba",
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `securityGroupId` - (Required) The ID of the security group.
* `vpcId` - (Required) The ID of the VPC to make the association with.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `state` - State of the VPC association. See the [AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_SecurityGroupVpcAssociation.html) for possible values.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `5m`)
* `delete` - (Default `5m`)

## Import

In Terraform v1.12.0 and later, the [`import` block](https://developer.hashicorp.com/terraform/language/import) can be used with the `identity` attribute. For example:

```terraform
import {
  to = aws_vpc_security_group_vpc_association.example
  identity = {
    vpc_id            = "vpc-67890"
    security_group_id = "sg-12345"
  }
}

resource "aws_vpc_security_group_vpc_association" "example" {
  ### Configuration omitted for brevity ###
}
```

### Identity Schema

#### Required

* `vpcId` (String) VPC ID.
* `securityGroupId` (String) Security Group ID.

#### Optional

* `accountId` (String) AWS Account where this resource is managed.
* `region` (String) Region where this resource is managed.

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import a Security Group VPC Association using the `securityGroupId` and `vpcId` arguments, separated by a comma (`,`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VpcSecurityGroupVpcAssociation } from "./.gen/providers/aws/vpc-security-group-vpc-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    VpcSecurityGroupVpcAssociation.generateConfigForImport(
      this,
      "example",
      "sg-12345,vpc-67890"
    );
  }
}

```

Using `terraform import`, import a Security Group VPC Association using the `securityGroupId` and `vpcId` arguments, separated by a comma (`,`). For example:

```console
% terraform import aws_vpc_security_group_vpc_association.example sg-12345,vpc-67890
```

<!-- cache-key: cdktf-0.20.8 input-04830f1b9a3984d65215e67daca6961a558f4b52a839c1240c688ad537001ef9 -->