---
subcategory: "SESv2 (Simple Email V2)"
layout: "aws"
page_title: "AWS: aws_sesv2_configuration_set_event_destination"
description: |-
  Terraform resource for managing an AWS SESv2 (Simple Email V2) Configuration Set Event Destination.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_sesv2_configuration_set_event_destination

Terraform resource for managing an AWS SESv2 (Simple Email V2) Configuration Set Event Destination.

## Example Usage

### CloudWatch Destination

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Sesv2ConfigurationSet } from "./.gen/providers/aws/sesv2-configuration-set";
import { Sesv2ConfigurationSetEventDestination } from "./.gen/providers/aws/sesv2-configuration-set-event-destination";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new Sesv2ConfigurationSet(this, "example", {
      configurationSetName: "example",
    });
    const awsSesv2ConfigurationSetEventDestinationExample =
      new Sesv2ConfigurationSetEventDestination(this, "example_1", {
        configurationSetName: example.configurationSetName,
        eventDestination: {
          cloudWatchDestination: {
            dimensionConfiguration: [
              {
                defaultDimensionValue: "example",
                dimensionName: "example",
                dimensionValueSource: "MESSAGE_TAG",
              },
            ],
          },
          enabled: true,
          matchingEventTypes: ["SEND"],
        },
        eventDestinationName: "example",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSesv2ConfigurationSetEventDestinationExample.overrideLogicalId(
      "example"
    );
  }
}

```

### EventBridge Destination

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsCloudwatchEventBus } from "./.gen/providers/aws/data-aws-cloudwatch-event-bus";
import { Sesv2ConfigurationSetEventDestination } from "./.gen/providers/aws/sesv2-configuration-set-event-destination";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const defaultVar = new DataAwsCloudwatchEventBus(this, "default", {
      name: "default",
    });
    new Sesv2ConfigurationSetEventDestination(this, "example", {
      configurationSetName: Token.asString(
        awsSesv2ConfigurationSetExample.configurationSetName
      ),
      eventDestination: {
        enabled: true,
        eventBridgeDestination: {
          eventBusArn: Token.asString(defaultVar.arn),
        },
        matchingEventTypes: ["SEND"],
      },
      eventDestinationName: "example",
    });
  }
}

```

### Kinesis Firehose Destination

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Sesv2ConfigurationSet } from "./.gen/providers/aws/sesv2-configuration-set";
import { Sesv2ConfigurationSetEventDestination } from "./.gen/providers/aws/sesv2-configuration-set-event-destination";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new Sesv2ConfigurationSet(this, "example", {
      configurationSetName: "example",
    });
    const awsSesv2ConfigurationSetEventDestinationExample =
      new Sesv2ConfigurationSetEventDestination(this, "example_1", {
        configurationSetName: example.configurationSetName,
        eventDestination: {
          enabled: true,
          kinesisFirehoseDestination: {
            deliveryStreamArn: Token.asString(
              awsKinesisFirehoseDeliveryStreamExample.arn
            ),
            iamRoleArn: Token.asString(awsIamRoleExample.arn),
          },
          matchingEventTypes: ["SEND"],
        },
        eventDestinationName: "example",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSesv2ConfigurationSetEventDestinationExample.overrideLogicalId(
      "example"
    );
  }
}

```

### Pinpoint Destination

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Sesv2ConfigurationSet } from "./.gen/providers/aws/sesv2-configuration-set";
import { Sesv2ConfigurationSetEventDestination } from "./.gen/providers/aws/sesv2-configuration-set-event-destination";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new Sesv2ConfigurationSet(this, "example", {
      configurationSetName: "example",
    });
    const awsSesv2ConfigurationSetEventDestinationExample =
      new Sesv2ConfigurationSetEventDestination(this, "example_1", {
        configurationSetName: example.configurationSetName,
        eventDestination: {
          enabled: true,
          matchingEventTypes: ["SEND"],
          pinpointDestination: {
            applicationArn: Token.asString(awsPinpointAppExample.arn),
          },
        },
        eventDestinationName: "example",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSesv2ConfigurationSetEventDestinationExample.overrideLogicalId(
      "example"
    );
  }
}

```

### SNS Destination

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Sesv2ConfigurationSet } from "./.gen/providers/aws/sesv2-configuration-set";
import { Sesv2ConfigurationSetEventDestination } from "./.gen/providers/aws/sesv2-configuration-set-event-destination";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new Sesv2ConfigurationSet(this, "example", {
      configurationSetName: "example",
    });
    const awsSesv2ConfigurationSetEventDestinationExample =
      new Sesv2ConfigurationSetEventDestination(this, "example_1", {
        configurationSetName: example.configurationSetName,
        eventDestination: {
          enabled: true,
          matchingEventTypes: ["SEND"],
          snsDestination: {
            topicArn: Token.asString(awsSnsTopicExample.arn),
          },
        },
        eventDestinationName: "example",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSesv2ConfigurationSetEventDestinationExample.overrideLogicalId(
      "example"
    );
  }
}

```

## Argument Reference

The following arguments are required:

* `configurationSetName` - (Required) The name of the configuration set.
* `eventDestination` - (Required) A name that identifies the event destination within the configuration set.
* `eventDestinationName` - (Required) An object that defines the event destination. See [`eventDestination` Block](#event_destination-block) for details.

### `eventDestination` Block

The `eventDestination` configuration block supports the following arguments:

* `matchingEventTypes` - (Required) - An array that specifies which events the Amazon SES API v2 should send to the destinations. Valid values: `SEND`, `REJECT`, `BOUNCE`, `COMPLAINT`, `DELIVERY`, `OPEN`, `CLICK`, `RENDERING_FAILURE`, `DELIVERY_DELAY`, `SUBSCRIPTION`.
* `cloudWatchDestination` - (Optional) An object that defines an Amazon CloudWatch destination for email events. See [`cloudWatchDestination` Block](#cloud_watch_destination-block) for details.
* `enabled` - (Optional) When the event destination is enabled, the specified event types are sent to the destinations. Default: `false`.
* `event_bridge_configuration` - (Optional) An object that defines an Amazon EventBridge destination for email events. You can use Amazon EventBridge to send notifications when certain email events occur. See [`event_bridge_configuration` Block](#event_bridge_configuration-block) for details.
* `kinesisFirehoseDestination` - (Optional) An object that defines an Amazon Kinesis Data Firehose destination for email events. See [`kinesisFirehoseDestination` Block](#kinesis_firehose_destination-block) for details.
* `pinpointDestination` - (Optional) An object that defines an Amazon Pinpoint project destination for email events. See [`pinpointDestination` Block](#pinpoint_destination-block) for details.
* `snsDestination` - (Optional) An object that defines an Amazon SNS destination for email events. See [`snsDestination` Block](#sns_destination-block) for details.

### `cloudWatchDestination` Block

The `cloudWatchDestination` configuration block supports the following arguments:

* `dimensionConfiguration` - (Required) An array of objects that define the dimensions to use when you send email events to Amazon CloudWatch. See [`dimensionConfiguration` Block](#dimension_configuration-block) for details.

### `dimensionConfiguration` Block

The `dimensionConfiguration` configuration block supports the following arguments:

* `defaultDimensionValue` - (Required) The default value of the dimension that is published to Amazon CloudWatch if you don't provide the value of the dimension when you send an email.
* `dimensionName` - (Required) The name of an Amazon CloudWatch dimension associated with an email sending metric.
* `dimensionValueSource` - (Required) The location where the Amazon SES API v2 finds the value of a dimension to publish to Amazon CloudWatch. Valid values: `MESSAGE_TAG`, `EMAIL_HEADER`, `LINK_TAG`.

### `event_bridge_configuration` Block

The `event_bridge_configuration` configuration block supports the following arguments:

* `eventBusArn` - (Required) The Amazon Resource Name (ARN) of the Amazon EventBridge bus to publish email events to. Only the default bus is supported.

### `kinesisFirehoseDestination` Block

The `kinesisFirehoseDestination` configuration block supports the following arguments:

* `deliveryStreamArn` - (Required) The Amazon Resource Name (ARN) of the Amazon Kinesis Data Firehose stream that the Amazon SES API v2 sends email events to.
* `iamRoleArn` - (Required) The Amazon Resource Name (ARN) of the IAM role that the Amazon SES API v2 uses to send email events to the Amazon Kinesis Data Firehose stream.

### `pinpointDestination` Block

The `pinpointDestination` configuration block supports the following arguments:

* `pinpoint_application_arn` - (Required) The Amazon Resource Name (ARN) of the Amazon Pinpoint project to send email events to.

### `snsDestination` Block

The `snsDestination` configuration block supports the following arguments:

* `topicArn` - (Required) The Amazon Resource Name (ARN) of the Amazon SNS topic to publish email events to.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - A pipe-delimited string combining `configurationSetName` and `eventDestinationName`.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import SESv2 (Simple Email V2) Configuration Set Event Destination using the `id` (`configuration_set_name|event_destination_name`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Sesv2ConfigurationSetEventDestination } from "./.gen/providers/aws/sesv2-configuration-set-event-destination";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    Sesv2ConfigurationSetEventDestination.generateConfigForImport(
      this,
      "example",
      "example_configuration_set|example_event_destination"
    );
  }
}

```

Using `terraform import`, import SESv2 (Simple Email V2) Configuration Set Event Destination using the `id` (`configuration_set_name|event_destination_name`). For example:

```console
% terraform import aws_sesv2_configuration_set_event_destination.example example_configuration_set|example_event_destination
```

<!-- cache-key: cdktf-0.20.1 input-ad803d58695c822a2da13de030073f010610f0df2e912a22f1eb1f723ce39809 -->