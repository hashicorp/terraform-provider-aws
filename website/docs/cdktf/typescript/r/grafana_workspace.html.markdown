---
subcategory: "Managed Grafana"
layout: "aws"
page_title: "AWS: aws_grafana_workspace"
description: |-
  Provides an Amazon Managed Grafana workspace resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_grafana_workspace

Provides an Amazon Managed Grafana workspace resource.

## Example Usage

### Basic configuration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GrafanaWorkspace } from "./.gen/providers/aws/grafana-workspace";
import { IamRole } from "./.gen/providers/aws/iam-role";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const assume = new IamRole(this, "assume", {
      assumeRolePolicy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: "sts:AssumeRole",
              Effect: "Allow",
              Principal: {
                Service: "grafana.amazonaws.com",
              },
              Sid: "",
            },
          ],
          Version: "2012-10-17",
        })
      ),
      name: "grafana-assume",
    });
    new GrafanaWorkspace(this, "example", {
      accountAccessType: "CURRENT_ACCOUNT",
      authenticationProviders: ["SAML"],
      permissionType: "SERVICE_MANAGED",
      roleArn: assume.arn,
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `accountAccessType` - (Required) The type of account access for the workspace. Valid values are `CURRENT_ACCOUNT` and `ORGANIZATION`. If `ORGANIZATION` is specified, then `organizationalUnits` must also be present.
* `authenticationProviders` - (Required) The authentication providers for the workspace. Valid values are `AWS_SSO`, `SAML`, or both.
* `permissionType` - (Required) The permission type of the workspace. If `SERVICE_MANAGED` is specified, the IAM roles and IAM policy attachments are generated automatically. If `CUSTOMER_MANAGED` is specified, the IAM roles and IAM policy attachments will not be created.

The following arguments are optional:

* `configuration` - (Optional) The configuration string for the workspace that you create. For more information about the format and configuration options available, see [Working in your Grafana workspace](https://docs.aws.amazon.com/grafana/latest/userguide/AMG-configure-workspace.html).
* `dataSources` - (Optional) The data sources for the workspace. Valid values are `AMAZON_OPENSEARCH_SERVICE`, `ATHENA`, `CLOUDWATCH`, `PROMETHEUS`, `REDSHIFT`, `SITEWISE`, `TIMESTREAM`, `XRAY`
* `description` - (Optional) The workspace description.
* `grafanaVersion` - (Optional) Specifies the version of Grafana to support in the new workspace. Supported values are `8.4`, `9.4` and `10.4`. If not specified, defaults to `9.4`.
* `name` - (Optional) The Grafana workspace name.
* `networkAccessControl` - (Optional) Configuration for network access to your workspace.See [Network Access Control](#network-access-control) below.
* `notificationDestinations` - (Optional) The notification destinations. If a data source is specified here, Amazon Managed Grafana will create IAM roles and permissions needed to use these destinations. Must be set to `SNS`.
* `organizationRoleName` - (Optional) The role name that the workspace uses to access resources through Amazon Organizations.
* `organizationalUnits` - (Optional) The Amazon Organizations organizational units that the workspace is authorized to use data sources from.
* `roleArn` - (Optional) The IAM role ARN that the workspace assumes.
* `stackSetName` - (Optional) The AWS CloudFormation stack set name that provisions IAM roles to be used by the workspace.
* `tags` - (Optional) Key-value mapping of resource tags. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `vpcConfiguration` - (Optional) The configuration settings for an Amazon VPC that contains data sources for your Grafana workspace to connect to. See [VPC Configuration](#vpc-configuration) below.

### Network Access Control

* `prefixListIds` - (Required) - An array of prefix list IDs.
* `vpceIds` - (Required) - An array of Amazon VPC endpoint IDs for the workspace. The only VPC endpoints that can be specified here are interface VPC endpoints for Grafana workspaces (using the com.amazonaws.[region].grafana-workspace service endpoint). Other VPC endpoints will be ignored.

### VPC Configuration

* `securityGroupIds` - (Required) - The list of Amazon EC2 security group IDs attached to the Amazon VPC for your Grafana workspace to connect.
* `subnetIds` - (Required) - The list of Amazon EC2 subnet IDs created in the Amazon VPC for your Grafana workspace to connect.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The Amazon Resource Name (ARN) of the Grafana workspace.
* `endpoint` - The endpoint of the Grafana workspace.
* `grafanaVersion` - The version of Grafana running on the workspace.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Grafana Workspace using the workspace's `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GrafanaWorkspace } from "./.gen/providers/aws/grafana-workspace";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    GrafanaWorkspace.generateConfigForImport(this, "example", "g-2054c75a02");
  }
}

```

Using `terraform import`, import Grafana Workspace using the workspace's `id`. For example:

```console
% terraform import aws_grafana_workspace.example g-2054c75a02
```

<!-- cache-key: cdktf-0.20.1 input-7495c5f13ac0a841311b7c1ed9f599029aaf6505a3718c8bd92bf5dc10f55092 -->