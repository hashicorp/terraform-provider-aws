---
subcategory: "API Gateway"
layout: "aws"
page_title: "AWS: aws_api_gateway_rest_api_put"
description: |-
  Terraform resource for updating an AWS API Gateway REST API.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_api_gateway_rest_api_put

Terraform resource for updating an AWS API Gateway REST API with a new API description.

~> **NOTE:** When importing an OpenAPI specification using the `body` argument, the `info.title` field updates the `name` of the [`aws_api_gateway_rest_api`](/docs/providers/aws/r/api_gateway_rest_api.html). If the imported `title` differs from the configured `name`, Terraform will report the difference.

## Example Usage

### Basic Usage

```terraform
resource "aws_api_gateway_rest_api_put" "example" {
  body = jsonencode({
    swagger = "2.0"
    info = {
      title   = "Example API"
      version = "v1"
    }
    schemes = ["https"]
    paths = {
      "/example" = {
        get = {
          responses = {
            "200" = {
              description = "OK"
            }
          }
          x-amazon-apigateway-integration = {
            httpMethod = "GET"
            type       = "HTTP"
            responses = {
              default = {
                statusCode = 200
              }
            }
            uri = "https://api.example.com/"
          }
        }
      }
    }
  })

  fail_on_warnings = true
  rest_api_id      = aws_api_gateway_rest_api.example.id
}
```

### Multi-stage

This example demonstrates how to use `aws_api_gateway_rest_api_put` to manage blue-green deployments and multi-stage APIs in Amazon API Gateway with Swagger/OpenAPI. The new resource provides native support for a simple and reliable process.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ApiGatewayDeployment } from "./.gen/providers/aws/api-gateway-deployment";
import { ApiGatewayRestApi } from "./.gen/providers/aws/api-gateway-rest-api";
import { ApiGatewayRestApiPut } from "./.gen/providers/aws/api-gateway-rest-api-put";
import { ApiGatewayStage } from "./.gen/providers/aws/api-gateway-stage";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new ApiGatewayRestApi(this, "example", {
      name: "Example API",
    });
    const examplev1 = new ApiGatewayRestApiPut(this, "examplev1", {
      body: Token.asString(Fn.file("v1.yaml")),
      failOnWarnings: true,
      lifecycle: {
        createBeforeDestroy: true,
      },
      restApiId: example.id,
      triggers: {
        redeployment: Token.asString(
          Fn.sha1(Token.asString(Fn.file("v1.yaml")))
        ),
      },
    });
    const awsApiGatewayDeploymentExamplev1 = new ApiGatewayDeployment(
      this,
      "examplev1_2",
      {
        lifecycle: {
          createBeforeDestroy: true,
        },
        restApiId: example.id,
        triggers: {
          redeployment: Token.asString(
            Fn.lookupNested(examplev1, ["triggers", "redeployment"])
          ),
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsApiGatewayDeploymentExamplev1.overrideLogicalId("examplev1");
    const awsApiGatewayStageExamplev1 = new ApiGatewayStage(
      this,
      "examplev1_3",
      {
        deploymentId: Token.asString(awsApiGatewayDeploymentExamplev1.id),
        restApiId: example.id,
        stageName: "v1",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsApiGatewayStageExamplev1.overrideLogicalId("examplev1");
    const examplev2 = new ApiGatewayRestApiPut(this, "examplev2", {
      body: Token.asString(Fn.file("v2.yaml")),
      dependsOn: [awsApiGatewayStageExamplev1],
      failOnWarnings: true,
      lifecycle: {
        createBeforeDestroy: true,
      },
      restApiId: example.id,
      triggers: {
        redeployment: Token.asString(
          Fn.sha1(Token.asString(Fn.file("v2.yaml")))
        ),
      },
    });
    const awsApiGatewayDeploymentExamplev2 = new ApiGatewayDeployment(
      this,
      "examplev2_5",
      {
        lifecycle: {
          createBeforeDestroy: true,
        },
        restApiId: example.id,
        triggers: {
          redeployment: Token.asString(
            Fn.lookupNested(examplev2, ["triggers", "redeployment"])
          ),
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsApiGatewayDeploymentExamplev2.overrideLogicalId("examplev2");
    const awsApiGatewayStageExamplev2 = new ApiGatewayStage(
      this,
      "examplev2_6",
      {
        deploymentId: Token.asString(awsApiGatewayDeploymentExamplev2.id),
        restApiId: example.id,
        stageName: "v2",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsApiGatewayStageExamplev2.overrideLogicalId("examplev2");
  }
}

```

## Argument Reference

The following arguments are required:

* `body` - (Required) PUT request body containing external API definitions. Currently, only OpenAPI definition JSON/YAML files are supported. The maximum size of the API definition file is 6MB.
* `restApiId` - (Required) Identifier of the associated REST API.

The following arguments are optional:

* `failOnWarnings` - (Optional) Whether to rollback the API update when a warning is encountered. The default value is `false`.
* `parameters` - (Optional) Map of customizations for importing the specification in the `body` argument. For example, to exclude DocumentationParts from an imported API, use `ignore = "documentation"`. Additional documentation, including other parameters such as `basepath`, can be found in the [API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api.html).
* `triggers` - (Optional) Map of arbitrary keys and values that, when changed, will trigger a redeployment. To force a redeployment without changing these keys/values, use the [`-replace` option](https://developer.hashicorp.com/terraform/cli/commands/plan#replace-address) with `terraform plan` or `terraform apply`.

## Attribute Reference

This resource exports no additional attributes.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `5m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import API Gateway REST API Put using the `restApiId`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ApiGatewayRestApiPut } from "./.gen/providers/aws/api-gateway-rest-api-put";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ApiGatewayRestApiPut.generateConfigForImport(
      this,
      "example",
      "import-id-12345678"
    );
  }
}

```

Using `terraform import`, import API Gateway REST API Put using the `restApiId`. For example:

```console
% terraform import aws_api_gateway_rest_api_put.example import-id-12345678
```

<!-- cache-key: cdktf-0.20.8 input-3b66a3cbdd7021bb92ce4fa519e4f789d32ba0f3a269754e6811f9adda9dd414 -->