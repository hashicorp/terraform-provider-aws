---
subcategory: "SNS (Simple Notification)"
layout: "aws"
page_title: "AWS: aws_sns_platform_application"
description: |-
  Provides an SNS platform application resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_sns_platform_application

Provides an SNS platform application resource

## Example Usage

### Apple Push Notification Service (APNS) using certificate-based authentication

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SnsPlatformApplication } from "./.gen/providers/aws/sns-platform-application";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new SnsPlatformApplication(this, "apns_application", {
      name: "apns_application",
      platform: "APNS",
      platformCredential: "<APNS PRIVATE KEY>",
      platformPrincipal: "<APNS CERTIFICATE>",
    });
  }
}

```

### Apple Push Notification Service (APNS) using token-based authentication

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SnsPlatformApplication } from "./.gen/providers/aws/sns-platform-application";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new SnsPlatformApplication(this, "apns_application", {
      applePlatformBundleId: "<APPLE BUNDLE ID>",
      applePlatformTeamId: "<APPLE TEAM ID>",
      name: "apns_application",
      platform: "APNS",
      platformCredential: "<APNS SIGNING KEY>",
      platformPrincipal: "<APNS SIGNING KEY ID>",
    });
  }
}

```

### Google Cloud Messaging (GCM)

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SnsPlatformApplication } from "./.gen/providers/aws/sns-platform-application";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new SnsPlatformApplication(this, "gcm_application", {
      name: "gcm_application",
      platform: "GCM",
      platformCredential: "<GCM API KEY>",
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The friendly name for the SNS platform application
* `platform` - (Required) The platform that the app is registered with. See [Platform][1] for supported platforms.
* `platformCredential` - (Required) Application Platform credential. See [Credential][1] for type of credential required for platform. The value of this attribute when stored into the Terraform state is only a hash of the real value, so therefore it is not practical to use this as an attribute for other resources.
* `eventDeliveryFailureTopicArn` - (Optional) The ARN of the SNS Topic triggered when a delivery to any of the platform endpoints associated with your platform application encounters a permanent failure.
* `eventEndpointCreatedTopicArn` - (Optional) The ARN of the SNS Topic triggered when a new platform endpoint is added to your platform application.
* `eventEndpointDeletedTopicArn` - (Optional) The ARN of the SNS Topic triggered when an existing platform endpoint is deleted from your platform application.
* `eventEndpointUpdatedTopicArn` - (Optional) The ARN of the SNS Topic triggered when an existing platform endpoint is changed from your platform application.
* `failureFeedbackRoleArn` - (Optional) The IAM role ARN permitted to receive failure feedback for this application and give SNS write access to use CloudWatch logs on your behalf.
* `platformPrincipal` - (Optional) Application Platform principal. See [Principal][2] for type of principal required for platform. The value of this attribute when stored into the Terraform state is only a hash of the real value, so therefore it is not practical to use this as an attribute for other resources.
* `successFeedbackRoleArn` - (Optional) The IAM role ARN permitted to receive success feedback for this application and give SNS write access to use CloudWatch logs on your behalf.
* `successFeedbackSampleRate` - (Optional) The sample rate percentage (0-100) of successfully delivered messages.

The following attributes are needed only when using APNS token credentials:

* `applePlatformTeamId` - (Required) The identifier that's assigned to your Apple developer account team. Must be 10 alphanumeric characters.
* `applePlatformBundleId` - (Required) The bundle identifier that's assigned to your iOS app. May only include alphanumeric characters, hyphens (-), and periods (.).

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ARN of the SNS platform application
* `arn` - The ARN of the SNS platform application

[1]: http://docs.aws.amazon.com/sns/latest/dg/mobile-push-send-register.html
[2]: http://docs.aws.amazon.com/sns/latest/api/API_CreatePlatformApplication.html

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import SNS platform applications using the ARN. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { SnsPlatformApplication } from "./.gen/providers/aws/sns-platform-application";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    SnsPlatformApplication.generateConfigForImport(
      this,
      "gcmApplication",
      "arn:aws:sns:us-west-2:123456789012:app/GCM/gcm_application"
    );
  }
}

```

Using `terraform import`, import SNS platform applications using the ARN. For example:

```console
% terraform import aws_sns_platform_application.gcm_application arn:aws:sns:us-west-2:123456789012:app/GCM/gcm_application
```

<!-- cache-key: cdktf-0.20.8 input-091a40bc776c6d9196d8c2d8a3184e775e9d9839b99e7f4cdc7a26bf6c561943 -->