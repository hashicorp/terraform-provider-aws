---
subcategory: "ACM PCA (Certificate Manager Private Certificate Authority)"
layout: "aws"
page_title: "AWS: aws_acmpca_certificate"
description: |-
  Provides a resource to issue a certificate using AWS Certificate Manager Private Certificate Authority (ACM PCA)
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_acmpca_certificate

Provides a resource to issue a certificate using AWS Certificate Manager Private Certificate Authority (ACM PCA).

Certificates created using `aws_acmpca_certificate` are not eligible for automatic renewal,
and must be replaced instead.
To issue a renewable certificate using an ACM PCA, create a [`aws_acm_certificate`](acm_certificate.html)
with the parameter `certificateAuthorityArn`.

## Example Usage

### Basic

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AcmpcaCertificate } from "./.gen/providers/aws/acmpca-certificate";
import { AcmpcaCertificateAuthority } from "./.gen/providers/aws/acmpca-certificate-authority";
import { CertRequest } from "./.gen/providers/tls/cert-request";
import { PrivateKey } from "./.gen/providers/tls/private-key";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: tls.
    For a more precise conversion please use the --provider flag in convert.*/
    const example = new AcmpcaCertificateAuthority(this, "example", {
      certificateAuthorityConfiguration: {
        keyAlgorithm: "RSA_4096",
        signingAlgorithm: "SHA512WITHRSA",
        subject: {
          commonName: "example.com",
        },
      },
      permanentDeletionTimeInDays: 7,
    });
    const key = new PrivateKey(this, "key", {
      algorithm: "RSA",
    });
    const csr = new CertRequest(this, "csr", {
      private_key_pem: key.privateKeyPem,
      subject: [
        {
          common_name: "example",
        },
      ],
    });
    const awsAcmpcaCertificateExample = new AcmpcaCertificate(
      this,
      "example_3",
      {
        certificateAuthorityArn: example.arn,
        certificateSigningRequest: Token.asString(csr.certRequestPem),
        signingAlgorithm: "SHA256WITHRSA",
        validity: {
          type: "YEARS",
          value: Token.asString(1),
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAcmpcaCertificateExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `certificateAuthorityArn` - (Required) ARN of the certificate authority.
* `certificateSigningRequest` - (Required) Certificate Signing Request in PEM format.
* `signingAlgorithm` - (Required) Algorithm to use to sign certificate requests. Valid values: `SHA256WITHRSA`, `SHA256WITHECDSA`, `SHA384WITHRSA`, `SHA384WITHECDSA`, `SHA512WITHRSA`, `SHA512WITHECDSA`.
* `validity` - (Required) Configures end of the validity period for the certificate. See [validity block](#validity-block) below.
* `templateArn` - (Optional) Template to use when issuing a certificate.
  See [ACM PCA Documentation](https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html) for more information.
* `apiPassthrough` - (Optional) Specifies X.509 certificate information to be included in the issued certificate. To use with API Passthrough templates

### validity block

* `type` - (Required) Determines how `value` is interpreted. Valid values: `DAYS`, `MONTHS`, `YEARS`, `ABSOLUTE`, `END_DATE`.
* `value` - (Required) If `type` is `DAYS`, `MONTHS`, or `YEARS`, the relative time until the certificate expires. If `type` is `ABSOLUTE`, the date in seconds since the Unix epoch. If `type` is `END_DATE`, the  date in RFC 3339 format.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the certificate.
* `certificate` - PEM-encoded certificate value.
* `certificateChain` - PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ACM PCA Certificates using their ARN. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AcmpcaCertificate } from "./.gen/providers/aws/acmpca-certificate";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    AcmpcaCertificate.generateConfigForImport(
      this,
      "cert",
      "arn:aws:acm-pca:eu-west-1:675225743824:certificate-authority/08319ede-83g9-1400-8f21-c7d12b2b6edb/certificate/a4e9c2aa4bcfab625g1b9136464cd3a"
    );
  }
}

```

Using `terraform import`, import ACM PCA Certificates using their ARN. For example:

```console
% terraform import aws_acmpca_certificate.cert arn:aws:acm-pca:eu-west-1:675225743824:certificate-authority/08319ede-83g9-1400-8f21-c7d12b2b6edb/certificate/a4e9c2aa4bcfab625g1b9136464cd3a
```

<!-- cache-key: cdktf-0.20.1 input-8d7847646fadad3366407a089a915a6efb6332c06ac3d98363d31e7d2c9bddea -->