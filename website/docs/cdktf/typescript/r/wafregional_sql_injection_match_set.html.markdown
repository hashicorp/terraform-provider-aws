---
subcategory: "WAF Classic Regional"
layout: "aws"
page_title: "AWS: aws_wafregional_sql_injection_match_set"
description: |-
  Provides a AWS WAF Regional SqlInjectionMatchSet resource for use with ALB.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_wafregional_sql_injection_match_set

Provides a WAF Regional SQL Injection Match Set Resource for use with Application Load Balancer.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { WafregionalSqlInjectionMatchSet } from "./.gen/providers/aws/wafregional-sql-injection-match-set";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new WafregionalSqlInjectionMatchSet(this, "sql_injection_match_set", {
      name: "tf-sql_injection_match_set",
      sqlInjectionMatchTuple: [
        {
          fieldToMatch: {
            type: "QUERY_STRING",
          },
          textTransformation: "URL_DECODE",
        },
      ],
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The name or description of the SizeConstraintSet.
* `sqlInjectionMatchTuple` - (Optional) The parts of web requests that you want AWS WAF to inspect for malicious SQL code and, if you want AWS WAF to inspect a header, the name of the header.

### Nested fields

### `sqlInjectionMatchTuple`

* `fieldToMatch` - (Required) Specifies where in a web request to look for snippets of malicious SQL code.
* `textTransformation` - (Required) Text transformations used to eliminate unusual formatting that attackers use in web requests in an effort to bypass AWS WAF.
  If you specify a transformation, AWS WAF performs the transformation on `fieldToMatch` before inspecting a request for a match.
  e.g., `CMD_LINE`, `HTML_ENTITY_DECODE` or `NONE`.
  See [docs](https://docs.aws.amazon.com/waf/latest/APIReference/API_regional_SqlInjectionMatchTuple.html#WAF-Type-regional_SqlInjectionMatchTuple-TextTransformation)
  for all supported values.

### `fieldToMatch`

* `data` - (Optional) When `type` is `HEADER`, enter the name of the header that you want to search, e.g., `User-Agent` or `Referer`.
  If `type` is any other value, omit this field.
* `type` - (Required) The part of the web request that you want AWS WAF to search for a specified string.
  e.g., `HEADER`, `METHOD` or `BODY`.
  See [docs](https://docs.aws.amazon.com/waf/latest/APIReference/API_regional_FieldToMatch.html)
  for all supported values.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the WAF SqlInjectionMatchSet.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import WAF Regional Sql Injection Match Set using the id. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { WafregionalSqlInjectionMatchSet } from "./.gen/providers/aws/wafregional-sql-injection-match-set";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    WafregionalSqlInjectionMatchSet.generateConfigForImport(
      this,
      "sqlInjectionMatchSet",
      "a1b2c3d4-d5f6-7777-8888-9999aaaabbbbcccc"
    );
  }
}

```

Using `terraform import`, import WAF Regional Sql Injection Match Set using the id. For example:

```console
% terraform import aws_wafregional_sql_injection_match_set.sql_injection_match_set a1b2c3d4-d5f6-7777-8888-9999aaaabbbbcccc
```

<!-- cache-key: cdktf-0.20.8 input-adfcd685dca95982844290477cadf9fa51737f4a170db60101e185299508456a -->