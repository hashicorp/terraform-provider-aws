---
subcategory: "CloudWatch Application Insights"
layout: "aws"
page_title: "AWS: aws_applicationinsights_application"
description: |-
  Provides a CloudWatch Application Insights Application resource
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_applicationinsights_application

Provides a ApplicationInsights Application resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ApplicationinsightsApplication } from "./.gen/providers/aws/applicationinsights-application";
import { ResourcegroupsGroup } from "./.gen/providers/aws/resourcegroups-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new ResourcegroupsGroup(this, "example", {
      name: "example",
      resourceQuery: {
        query: Token.asString(
          Fn.jsonencode({
            ResourceTypeFilters: ["AWS::EC2::Instance"],
            TagFilters: [
              {
                Key: "Stage",
                Values: ["Test"],
              },
            ],
          })
        ),
      },
    });
    const awsApplicationinsightsApplicationExample =
      new ApplicationinsightsApplication(this, "example_1", {
        resourceGroupName: example.name,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsApplicationinsightsApplicationExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `resourceGroupName` - (Required) Name of the resource group.

The following arguments are optional:

* `autoConfigEnabled` - (Optional)  Indicates whether Application Insights automatically configures unmonitored resources in the resource group.
* `autoCreate` - (Optional) Configures all of the resources in the resource group by applying the recommended configurations.
* `cweMonitorEnabled` - (Optional)  Indicates whether Application Insights can listen to CloudWatch events for the application resources, such as instance terminated, failed deployment, and others.
* `groupingType` - (Optional) Application Insights can create applications based on a resource group or on an account. To create an account-based application using all of the resources in the account, set this parameter to `ACCOUNT_BASED`.
* `opsCenterEnabled` - (Optional) When set to `true`, creates opsItems for any problems detected on an application.
* `opsItemSnsTopicArn` - (Optional) SNS topic provided to Application Insights that is associated to the created opsItem. Allows you to receive notifications for updates to the opsItem.
* `tags` - (Optional) Map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the Application.
* `id` - Name of the resource group.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ApplicationInsights Applications using the `resourceGroupName`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ApplicationinsightsApplication } from "./.gen/providers/aws/applicationinsights-application";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ApplicationinsightsApplication.generateConfigForImport(
      this,
      "some",
      "some-application"
    );
  }
}

```

Using `terraform import`, import ApplicationInsights Applications using the `resourceGroupName`. For example:

```console
% terraform import aws_applicationinsights_application.some some-application
```

<!-- cache-key: cdktf-0.20.8 input-30b40f9adb8f133c3e275766d86e95f547219ce5038fa7751ad75a6d3c0db957 -->