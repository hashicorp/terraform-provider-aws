---
subcategory: "Direct Connect"
layout: "aws"
page_title: "AWS: aws_dx_gateway_association"
description: |-
  Associates a Direct Connect Gateway with a VGW or transit gateway.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_dx_gateway_association

Associates a Direct Connect Gateway with a VGW or transit gateway.

To create a cross-account association, create an [`aws_dx_gateway_association_proposal` resource](/docs/providers/aws/r/dx_gateway_association_proposal.html)
in the AWS account that owns the VGW or transit gateway and then accept the proposal in the AWS account that owns the Direct Connect Gateway
by creating an `aws_dx_gateway_association` resource with the `proposalId` and `associatedGatewayOwnerAccountId` attributes set.

## Example Usage

### VPN Gateway Association

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DxGateway } from "./.gen/providers/aws/dx-gateway";
import { DxGatewayAssociation } from "./.gen/providers/aws/dx-gateway-association";
import { Vpc } from "./.gen/providers/aws/vpc";
import { VpnGateway } from "./.gen/providers/aws/vpn-gateway";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DxGateway(this, "example", {
      amazonSideAsn: "64512",
      name: "example",
    });
    const awsVpcExample = new Vpc(this, "example_1", {
      cidrBlock: "10.255.255.0/28",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcExample.overrideLogicalId("example");
    const awsVpnGatewayExample = new VpnGateway(this, "example_2", {
      vpcId: Token.asString(awsVpcExample.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpnGatewayExample.overrideLogicalId("example");
    const awsDxGatewayAssociationExample = new DxGatewayAssociation(
      this,
      "example_3",
      {
        associatedGatewayId: Token.asString(awsVpnGatewayExample.id),
        dxGatewayId: example.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDxGatewayAssociationExample.overrideLogicalId("example");
  }
}

```

### Transit Gateway Association

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DxGateway } from "./.gen/providers/aws/dx-gateway";
import { DxGatewayAssociation } from "./.gen/providers/aws/dx-gateway-association";
import { Ec2TransitGateway } from "./.gen/providers/aws/ec2-transit-gateway";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DxGateway(this, "example", {
      amazonSideAsn: "64512",
      name: "example",
    });
    const awsEc2TransitGatewayExample = new Ec2TransitGateway(
      this,
      "example_1",
      {}
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsEc2TransitGatewayExample.overrideLogicalId("example");
    const awsDxGatewayAssociationExample = new DxGatewayAssociation(
      this,
      "example_2",
      {
        allowedPrefixes: ["10.255.255.0/30", "10.255.255.8/30"],
        associatedGatewayId: Token.asString(awsEc2TransitGatewayExample.id),
        dxGatewayId: example.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDxGatewayAssociationExample.overrideLogicalId("example");
  }
}

```

### Allowed Prefixes

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DxGateway } from "./.gen/providers/aws/dx-gateway";
import { DxGatewayAssociation } from "./.gen/providers/aws/dx-gateway-association";
import { Vpc } from "./.gen/providers/aws/vpc";
import { VpnGateway } from "./.gen/providers/aws/vpn-gateway";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DxGateway(this, "example", {
      amazonSideAsn: "64512",
      name: "example",
    });
    const awsVpcExample = new Vpc(this, "example_1", {
      cidrBlock: "10.255.255.0/28",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpcExample.overrideLogicalId("example");
    const awsVpnGatewayExample = new VpnGateway(this, "example_2", {
      vpcId: Token.asString(awsVpcExample.id),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpnGatewayExample.overrideLogicalId("example");
    const awsDxGatewayAssociationExample = new DxGatewayAssociation(
      this,
      "example_3",
      {
        allowedPrefixes: ["210.52.109.0/24", "175.45.176.0/22"],
        associatedGatewayId: Token.asString(awsVpnGatewayExample.id),
        dxGatewayId: example.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDxGatewayAssociationExample.overrideLogicalId("example");
  }
}

```

A full example of how to create a VPN Gateway in one AWS account, create a Direct Connect Gateway in a second AWS account, and associate the VPN Gateway with the Direct Connect Gateway via the `aws_dx_gateway_association_proposal` and `aws_dx_gateway_association` resources can be found in [the `./examples/dx-gateway-cross-account-vgw-association` directory within the Github Repository](https://github.com/hashicorp/terraform-provider-aws/tree/main/examples/dx-gateway-cross-account-vgw-association).

## Argument Reference

~> **NOTE:** `dxGatewayId` and `associatedGatewayId` must be specified for single account Direct Connect gateway associations.

~> **NOTE:** If the `associatedGatewayId` is in another region, an [alias](https://developer.hashicorp.com/terraform/language/providers/configuration#alias-multiple-provider-configurations) in a new provider block for that region should be specified.

This resource supports the following arguments:

* `dxGatewayId` - (Required) The ID of the Direct Connect gateway.
* `associatedGatewayId` - (Optional) The ID of the VGW or transit gateway with which to associate the Direct Connect gateway.
Used for single account Direct Connect gateway associations.
* `associatedGatewayOwnerAccountId` - (Optional) The ID of the AWS account that owns the VGW or transit gateway with which to associate the Direct Connect gateway.
Used for cross-account Direct Connect gateway associations.
* `proposalId` - (Optional) The ID of the Direct Connect gateway association proposal.
Used for cross-account Direct Connect gateway associations.
* `allowedPrefixes` - (Optional) VPC prefixes (CIDRs) to advertise to the Direct Connect gateway. Defaults to the CIDR block of the VPC associated with the Virtual Gateway. To enable drift detection, must be configured.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the Direct Connect gateway association resource.
* `associatedGatewayType` - The type of the associated gateway, `transitGateway` or `virtualPrivateGateway`.
* `dxGatewayAssociationId` - The ID of the Direct Connect gateway association.
* `dxGatewayOwnerAccountId` - The ID of the AWS account that owns the Direct Connect gateway.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `30m`)
- `update` - (Default `30m`)
- `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Direct Connect gateway associations using `dxGatewayId` together with `associatedGatewayId`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DxGatewayAssociation } from "./.gen/providers/aws/dx-gateway-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DxGatewayAssociation.generateConfigForImport(
      this,
      "example",
      "345508c3-7215-4aef-9832-07c125d5bd0f/vgw-98765432"
    );
  }
}

```

Using `terraform import`, import Direct Connect gateway associations using `dxGatewayId` together with `associatedGatewayId`. For example:

```console
% terraform import aws_dx_gateway_association.example 345508c3-7215-4aef-9832-07c125d5bd0f/vgw-98765432
```

<!-- cache-key: cdktf-0.20.1 input-c28bf82c103aa1982a96936974596b9df68f54efdcdbc9af3d8eff96f3003ab8 -->