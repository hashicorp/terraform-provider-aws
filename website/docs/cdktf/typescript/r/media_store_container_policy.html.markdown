---
subcategory: "Elemental MediaStore"
layout: "aws"
page_title: "AWS: aws_media_store_container_policy"
description: |-
  Provides a MediaStore Container Policy.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_media_store_container_policy

Provides a MediaStore Container Policy.

~> **NOTE:** We suggest using [`jsonencode()`](https://developer.hashicorp.com/terraform/language/functions/jsonencode) or [`aws_iam_policy_document`](/docs/providers/aws/d/iam_policy_document.html) when assigning a value to `policy`. They seamlessly translate Terraform language into JSON, enabling you to maintain consistency within your configuration without the need for context switches. Also, you can sidestep potential complications arising from formatting discrepancies, whitespace inconsistencies, and other nuances inherent to JSON.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { DataAwsRegion } from "./.gen/providers/aws/data-aws-region";
import { MediaStoreContainer } from "./.gen/providers/aws/media-store-container";
import { MediaStoreContainerPolicy } from "./.gen/providers/aws/media-store-container-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new MediaStoreContainer(this, "example", {
      name: "example",
    });
    const current = new DataAwsCallerIdentity(this, "current", {});
    const dataAwsRegionCurrent = new DataAwsRegion(this, "current_2", {});
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsRegionCurrent.overrideLogicalId("current");
    const dataAwsIamPolicyDocumentExample = new DataAwsIamPolicyDocument(
      this,
      "example_3",
      {
        statement: [
          {
            actions: ["mediastore:*"],
            condition: [
              {
                test: "Bool",
                values: ["true"],
                variable: "aws:SecureTransport",
              },
            ],
            effect: "Allow",
            principals: [
              {
                identifiers: ["arn:aws:iam::${" + current.accountId + "}:root"],
                type: "AWS",
              },
            ],
            resources: [
              "arn:aws:mediastore:${" +
                dataAwsRegionCurrent.name +
                "}:${" +
                current.accountId +
                "}:container/${" +
                example.name +
                "}/*",
            ],
            sid: "MediaStoreFullAccess",
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsIamPolicyDocumentExample.overrideLogicalId("example");
    const awsMediaStoreContainerPolicyExample = new MediaStoreContainerPolicy(
      this,
      "example_4",
      {
        containerName: example.name,
        policy: Token.asString(dataAwsIamPolicyDocumentExample.json),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsMediaStoreContainerPolicyExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `containerName` - (Required) The name of the container.
* `policy` - (Required) The contents of the policy. For more information about building AWS IAM policy documents with Terraform, see the [AWS IAM Policy Document Guide](https://learn.hashicorp.com/terraform/aws/iam-policy).

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import MediaStore Container Policy using the MediaStore Container Name. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { MediaStoreContainerPolicy } from "./.gen/providers/aws/media-store-container-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    MediaStoreContainerPolicy.generateConfigForImport(
      this,
      "example",
      "example"
    );
  }
}

```

Using `terraform import`, import MediaStore Container Policy using the MediaStore Container Name. For example:

```console
% terraform import aws_media_store_container_policy.example example
```

<!-- cache-key: cdktf-0.20.1 input-9ed289864924023edb076e3fc25bf237e0f5f6970e7ef7c1126877959c4604d5 -->