---
subcategory: "Directory Service"
layout: "aws"
page_title: "AWS: aws_directory_service_region"
description: |-
    Manages a replicated Region and directory for Multi-Region replication.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_directory_service_region

Manages a replicated Region and directory for Multi-Region replication.
Multi-Region replication is only supported for the Enterprise Edition of AWS Managed Microsoft AD.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformCount, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsAvailabilityZones } from "./.gen/providers/aws/data-aws-availability-zones";
import { DataAwsRegion } from "./.gen/providers/aws/data-aws-region";
import { DirectoryServiceDirectory } from "./.gen/providers/aws/directory-service-directory";
import { DirectoryServiceRegion } from "./.gen/providers/aws/directory-service-region";
import { AwsProvider } from "./.gen/providers/aws/provider";
import { Subnet } from "./.gen/providers/aws/subnet";
import { Vpc } from "./.gen/providers/aws/vpc";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-west-2",
    });
    const secondary = new AwsProvider(this, "aws_1", {
      alias: "secondary",
      region: "us-east-2",
    });
    const example = new Vpc(this, "example", {
      cidrBlock: "10.0.0.0/16",
      tags: {
        Name: "Primary",
      },
    });
    const exampleSecondary = new Vpc(this, "example-secondary", {
      cidrBlock: "10.1.0.0/16",
      provider: secondary,
      tags: {
        Name: "Secondary",
      },
    });
    const available = new DataAwsAvailabilityZones(this, "available", {
      filter: [
        {
          name: "opt-in-status",
          values: ["opt-in-not-required"],
        },
      ],
      state: "available",
    });
    const availableSecondary = new DataAwsAvailabilityZones(
      this,
      "available-secondary",
      {
        filter: [
          {
            name: "opt-in-status",
            values: ["opt-in-not-required"],
          },
        ],
        provider: secondary,
        state: "available",
      }
    );
    const dataAwsRegionExample = new DataAwsRegion(this, "example_6", {
      provider: secondary,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsRegionExample.overrideLogicalId("example");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const exampleCount = TerraformCount.of(Token.asNumber("2"));
    const awsSubnetExample = new Subnet(this, "example_7", {
      availabilityZone: Token.asString(
        Fn.lookupNested(available.names, [exampleCount.index])
      ),
      cidrBlock: Token.asString(
        Fn.cidrsubnet(example.cidrBlock, 8, Token.asNumber(exampleCount.index))
      ),
      tags: {
        Name: "Primary",
      },
      vpcId: example.id,
      count: exampleCount,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSubnetExample.overrideLogicalId("example");
    /*In most cases loops should be handled in the programming language context and 
    not inside of the Terraform context. If you are looping over something external, e.g. a variable or a file input
    you should consider using a for loop. If you are looping over something only known to Terraform, e.g. a result of a data source
    you need to keep this like it is.*/
    const exampleSecondaryCount = TerraformCount.of(Token.asNumber("2"));
    const awsSubnetExampleSecondary = new Subnet(this, "example-secondary_8", {
      availabilityZone: Token.asString(
        Fn.lookupNested(availableSecondary.names, [exampleSecondaryCount.index])
      ),
      cidrBlock: Token.asString(
        Fn.cidrsubnet(
          exampleSecondary.cidrBlock,
          8,
          Token.asNumber(exampleSecondaryCount.index)
        )
      ),
      provider: secondary,
      tags: {
        Name: "Secondary",
      },
      vpcId: exampleSecondary.id,
      count: exampleSecondaryCount,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSubnetExampleSecondary.overrideLogicalId("example-secondary");
    const awsDirectoryServiceDirectoryExample = new DirectoryServiceDirectory(
      this,
      "example_9",
      {
        name: "example.com",
        password: "SuperSecretPassw0rd",
        type: "MicrosoftAD",
        vpcSettings: {
          subnetIds: Token.asList(
            Fn.lookupNested(awsSubnetExample, ["*", "id"])
          ),
          vpcId: example.id,
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDirectoryServiceDirectoryExample.overrideLogicalId("example");
    const awsDirectoryServiceRegionExample = new DirectoryServiceRegion(
      this,
      "example_10",
      {
        directoryId: Token.asString(awsDirectoryServiceDirectoryExample.id),
        regionName: Token.asString(dataAwsRegionExample.name),
        tags: {
          Name: "Secondary",
        },
        vpcSettings: {
          subnetIds: Token.asList(
            Fn.lookupNested(awsSubnetExampleSecondary, ["*", "id"])
          ),
          vpcId: exampleSecondary.id,
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDirectoryServiceRegionExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `desiredNumberOfDomainControllers` - (Optional) The number of domain controllers desired in the replicated directory. Minimum value of `2`.
* `directoryId` - (Required) The identifier of the directory to which you want to add Region replication.
* `regionName` - (Required) The name of the Region where you want to add domain controllers for replication.
* `tags` - (Optional) Map of tags to assign to this resource. If configured with a provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `vpcSettings` - (Required) VPC information in the replicated Region. Detailed below.

### `vpcSettings`

* `subnetIds` - (Required) The identifiers of the subnets for the directory servers.
* `vpcId` - (Optional) The identifier of the VPC in which to create the directory.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://www.terraform.io/docs/providers/aws/index.html#default_tags-configuration-block).

## Timeouts

`aws_directory_service_region` provides the following [Timeouts](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts) configuration options:

- `create` - (Default `180 minutes`) Used for Region addition
- `update` - (Default `90 minutes`) Used for replicated directory update
- `delete` - (Default `90 minutes`) Used for Region removal

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Replicated Regions using directory ID,Region name. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DirectoryServiceRegion } from "./.gen/providers/aws/directory-service-region";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DirectoryServiceRegion.generateConfigForImport(
      this,
      "example",
      "d-9267651497,us-east-2"
    );
  }
}

```

Using `terraform import`, import Replicated Regions using directory ID,Region name. For example:

```console
% terraform import aws_directory_service_region.example d-9267651497,us-east-2
```

<!-- cache-key: cdktf-0.20.8 input-20d7af9911cb4ea2ab9c63d5899325921c11d1438c0a0bd4b54c4be7952b8fff -->