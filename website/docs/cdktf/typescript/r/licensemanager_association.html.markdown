---
subcategory: "License Manager"
layout: "aws"
page_title: "AWS: aws_licensemanager_association"
description: |-
  Provides a License Manager association resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_licensemanager_association

Provides a License Manager association.

~> **Note:** License configurations can also be associated with launch templates by specifying the `license_specifications` block for an `aws_launch_template`.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsAmi } from "./.gen/providers/aws/data-aws-ami";
import { Instance } from "./.gen/providers/aws/instance";
import { LicensemanagerAssociation } from "./.gen/providers/aws/licensemanager-association";
import { LicensemanagerLicenseConfiguration } from "./.gen/providers/aws/licensemanager-license-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new LicensemanagerLicenseConfiguration(this, "example", {
      licenseCountingType: "Instance",
      name: "Example",
    });
    const dataAwsAmiExample = new DataAwsAmi(this, "example_1", {
      filter: [
        {
          name: "name",
          values: ["amzn-ami-vpc-nat*"],
        },
      ],
      mostRecent: true,
      owners: ["amazon"],
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsAmiExample.overrideLogicalId("example");
    const awsInstanceExample = new Instance(this, "example_2", {
      ami: Token.asString(dataAwsAmiExample.id),
      instanceType: "t2.micro",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsInstanceExample.overrideLogicalId("example");
    const awsLicensemanagerAssociationExample = new LicensemanagerAssociation(
      this,
      "example_3",
      {
        licenseConfigurationArn: example.arn,
        resourceArn: Token.asString(awsInstanceExample.arn),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsLicensemanagerAssociationExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `licenseConfigurationArn` - (Required) ARN of the license configuration.
* `resourceArn` - (Required) ARN of the resource associated with the license configuration.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The license configuration ARN.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import license configurations using `resource_arn,license_configuration_arn`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LicensemanagerAssociation } from "./.gen/providers/aws/licensemanager-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    LicensemanagerAssociation.generateConfigForImport(
      this,
      "example",
      "arn:aws:ec2:eu-west-1:123456789012:image/ami-123456789abcdef01,arn:aws:license-manager:eu-west-1:123456789012:license-configuration:lic-0123456789abcdef0123456789abcdef"
    );
  }
}

```

Using `terraform import`, import license configurations using `resource_arn,license_configuration_arn`. For example:

```console
% terraform import aws_licensemanager_association.example arn:aws:ec2:eu-west-1:123456789012:image/ami-123456789abcdef01,arn:aws:license-manager:eu-west-1:123456789012:license-configuration:lic-0123456789abcdef0123456789abcdef
```

<!-- cache-key: cdktf-0.20.8 input-8b8e9ddcd676f43167920f5782ed96b9679e5a610aa31170c5d53aa2d9e1453d -->