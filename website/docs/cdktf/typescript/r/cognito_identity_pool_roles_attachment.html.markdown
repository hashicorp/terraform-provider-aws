---
subcategory: "Cognito Identity"
layout: "aws"
page_title: "AWS: aws_cognito_identity_pool_roles_attachment"
description: |-
  Provides an AWS Cognito Identity Pool Roles Attachment.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cognito_identity_pool_roles_attachment

Provides an AWS Cognito Identity Pool Roles Attachment.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CognitoIdentityPool } from "./.gen/providers/aws/cognito-identity-pool";
import { CognitoIdentityPoolRolesAttachment } from "./.gen/providers/aws/cognito-identity-pool-roles-attachment";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicy } from "./.gen/providers/aws/iam-role-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const main = new CognitoIdentityPool(this, "main", {
      allowUnauthenticatedIdentities: false,
      identityPoolName: "identity pool",
      supportedLoginProviders: {
        "graph.facebook.com": "7346241598935555",
      },
    });
    const authenticated = new DataAwsIamPolicyDocument(this, "authenticated", {
      statement: [
        {
          actions: ["sts:AssumeRoleWithWebIdentity"],
          condition: [
            {
              test: "StringEquals",
              values: [main.id],
              variable: "cognito-identity.amazonaws.com:aud",
            },
            {
              test: "ForAnyValue:StringLike",
              values: ["authenticated"],
              variable: "cognito-identity.amazonaws.com:amr",
            },
          ],
          effect: "Allow",
          principals: [
            {
              identifiers: ["cognito-identity.amazonaws.com"],
              type: "Federated",
            },
          ],
        },
      ],
    });
    const authenticatedRolePolicy = new DataAwsIamPolicyDocument(
      this,
      "authenticated_role_policy",
      {
        statement: [
          {
            actions: [
              "mobileanalytics:PutEvents",
              "cognito-sync:*",
              "cognito-identity:*",
            ],
            effect: "Allow",
            resources: ["*"],
          },
        ],
      }
    );
    const awsIamRoleAuthenticated = new IamRole(this, "authenticated_3", {
      assumeRolePolicy: Token.asString(authenticated.json),
      name: "cognito_authenticated",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRoleAuthenticated.overrideLogicalId("authenticated");
    const awsIamRolePolicyAuthenticated = new IamRolePolicy(
      this,
      "authenticated_4",
      {
        name: "authenticated_policy",
        policy: Token.asString(authenticatedRolePolicy.json),
        role: Token.asString(awsIamRoleAuthenticated.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyAuthenticated.overrideLogicalId("authenticated");
    const awsCognitoIdentityPoolRolesAttachmentMain =
      new CognitoIdentityPoolRolesAttachment(this, "main_5", {
        identityPoolId: main.id,
        roleMapping: [
          {
            ambiguousRoleResolution: "AuthenticatedRole",
            identityProvider: "graph.facebook.com",
            mappingRule: [
              {
                claim: "isAdmin",
                matchType: "Equals",
                roleArn: Token.asString(awsIamRoleAuthenticated.arn),
                value: "paid",
              },
            ],
            type: "Rules",
          },
        ],
        roles: {
          authenticated: Token.asString(awsIamRoleAuthenticated.arn),
        },
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCognitoIdentityPoolRolesAttachmentMain.overrideLogicalId("main");
  }
}

```

## Argument Reference

The Cognito Identity Pool Roles Attachment argument layout is a structure composed of several sub-resources - these resources are laid out below.

* `identityPoolId` (Required) - An identity pool ID in the format `REGION_GUID`.
* `roleMapping` (Optional) - A List of [Role Mapping](#role-mappings).
* `roles` (Required) - The map of roles associated with this pool. For a given role, the key will be either "authenticated" or "unauthenticated" and the value will be the Role ARN.

#### Role Mappings

* `identityProvider` (Required) - A string identifying the identity provider, for example, "graph.facebook.com" or "cognito-idp.us-east-1.amazonaws.com/us-east-1_abcdefghi:app_client_id". Depends on `cognitoIdentityProviders` set on `aws_cognito_identity_pool` resource or a `aws_cognito_identity_provider` resource.
* `ambiguousRoleResolution` (Optional) - Specifies the action to be taken if either no rules match the claim value for the Rules type, or there is no cognito:preferred_role claim and there are multiple cognito:roles matches for the Token type. `Required` if you specify Token or Rules as the Type.
* `mappingRule` (Optional) - The [Rules Configuration](#rules-configuration) to be used for mapping users to roles. You can specify up to 25 rules per identity provider. Rules are evaluated in order. The first one to match specifies the role.
* `type` (Required) - The role mapping type.

#### Rules Configuration

* `claim` (Required) - The claim name that must be present in the token, for example, "isAdmin" or "paid".
* `matchType` (Required) - The match condition that specifies how closely the claim value in the IdP token must match Value.
* `roleArn` (Required) - The role ARN.
* `value` (Required) - A brief string that the claim must match, for example, "paid" or "yes".

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The identity pool ID.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Cognito Identity Pool Roles Attachment using the Identity Pool ID. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CognitoIdentityPoolRolesAttachment } from "./.gen/providers/aws/cognito-identity-pool-roles-attachment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    CognitoIdentityPoolRolesAttachment.generateConfigForImport(
      this,
      "example",
      "us-west-2:b64805ad-cb56-40ba-9ffc-f5d8207e6d42"
    );
  }
}

```

Using `terraform import`, import Cognito Identity Pool Roles Attachment using the Identity Pool ID. For example:

```console
% terraform import aws_cognito_identity_pool_roles_attachment.example us-west-2:b64805ad-cb56-40ba-9ffc-f5d8207e6d42
```

<!-- cache-key: cdktf-0.20.8 input-74c6734db32e60310fb7b71d1ef7e57fff3eb57e2065822e5e2535d8f77e6646 -->