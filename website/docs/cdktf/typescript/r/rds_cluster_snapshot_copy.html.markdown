---
subcategory: "RDS (Relational Database)"
layout: "aws"
page_title: "AWS: aws_rds_cluster_snapshot_copy"
description: |-
  Manages an RDS database cluster snapshot copy.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_rds_cluster_snapshot_copy

Manages an RDS database cluster snapshot copy. For managing RDS database instance snapshot copies, see the [`aws_db_snapshot_copy` resource](/docs/providers/aws/r/db_snapshot_copy.html).

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { RdsClusterSnapshotCopy } from "./.gen/providers/aws/";
import { DbClusterSnapshot } from "./.gen/providers/aws/db-cluster-snapshot";
import { RdsCluster } from "./.gen/providers/aws/rds-cluster";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new RdsCluster(this, "example", {
      clusterIdentifier: "aurora-cluster-demo",
      databaseName: "test",
      engine: "aurora-mysql",
      masterPassword: "avoid-plaintext-passwords",
      masterUsername: "tfacctest",
      skipFinalSnapshot: true,
    });
    const awsDbClusterSnapshotExample = new DbClusterSnapshot(
      this,
      "example_1",
      {
        dbClusterIdentifier: example.clusterIdentifier,
        dbClusterSnapshotIdentifier: "example",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDbClusterSnapshotExample.overrideLogicalId("example");
    const awsRdsClusterSnapshotCopyExample = new RdsClusterSnapshotCopy(
      this,
      "example_2",
      {
        source_db_cluster_snapshot_identifier:
          awsDbClusterSnapshotExample.dbClusterSnapshotArn,
        target_db_cluster_snapshot_identifier: "example-copy",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRdsClusterSnapshotCopyExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `source_db_cluster_snapshot_identifier` - (Required) Identifier of the source snapshot.
* `target_db_cluster_snapshot_identifier` - (Required) Identifier for the snapshot.

The following arguments are optional:

* `copyTags` - (Optional) Whether to copy existing tags. Defaults to `false`.
* `destinationRegion` - (Optional) The Destination region to place snapshot copy.
* `kmsKeyId` - (Optional) KMS key ID.
* `presignedUrl` - (Optional) URL that contains a Signature Version 4 signed request.
* `sharedAccounts` - (Optional) List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `allocatedStorage` - Specifies the allocated storage size in gigabytes (GB).
* `availabilityZones` - Specifies the the Availability Zones the DB cluster was located in at the time of the DB snapshot.
* `dbClusterSnapshotArn` - The Amazon Resource Name (ARN) for the DB cluster snapshot.
* `engine` - Specifies the name of the database engine.
* `engineVersion` - Specifies the version of the database engine.
* `id` - Cluster snapshot identifier.
* `kmsKeyId` - ARN for the KMS encryption key.
* `licenseModel` - License model information for the restored DB instance.
* `sharedAccounts` - (Optional) List of AWS Account IDs to share the snapshot with. Use `all` to make the snapshot public.
* `source_db_cluster_snapshot_identifier` - DB snapshot ARN that the DB cluster snapshot was copied from. It only has value in case of cross customer or cross region copy.
* `storageEncrypted` - Specifies whether the DB cluster snapshot is encrypted.
* `storageType` - Specifies the storage type associated with DB cluster snapshot.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).
* `vpcId` - Provides the VPC ID associated with the DB cluster snapshot.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `20m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_rds_cluster_snapshot_copy` using the snapshot identifier. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { RdsClusterSnapshotCopy } from "./.gen/providers/aws/";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    RdsClusterSnapshotCopy.generateConfigForImport(
      this,
      "example",
      "my-snapshot"
    );
  }
}

```

Using `terraform import`, import `aws_rds_cluster_snapshot_copy` using the `id`. For example:

```console
% terraform import aws_rds_cluster_snapshot_copy.example my-snapshot
```

<!-- cache-key: cdktf-0.20.8 input-d6335816ef7ea03e5adac4b22bb75f36f463f18eab6b7e938d2bbf6ef6d3ebcc -->