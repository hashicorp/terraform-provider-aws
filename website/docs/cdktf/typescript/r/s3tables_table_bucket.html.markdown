---
subcategory: "S3 Tables"
layout: "aws"
page_title: "AWS: aws_s3tables_table_bucket"
description: |-
  Terraform resource for managing an Amazon S3 Tables Table Bucket.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_s3tables_table_bucket

Terraform resource for managing an Amazon S3 Tables Table Bucket.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { S3TablesTableBucket } from "./.gen/providers/aws/s3-tables-table-bucket";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new S3TablesTableBucket(this, "example", {
      name: "example-bucket",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `name` - (Required, Forces new resource) Name of the table bucket.
  Must be between 3 and 63 characters in length.
  Can consist of lowercase letters, numbers, and hyphens, and must begin and end with a lowercase letter or number.
  A full list of bucket naming rules can be found in the [S3 Tables documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/s3-tables-buckets-naming.html#table-buckets-naming-rules).

The following arguments are optional:

* `encryptionConfiguration` - (Optional) A single table bucket encryption configuration object.
  [See `encryptionConfiguration` below](#encryption_configuration).
* `maintenanceConfiguration` - (Optional) A single table bucket maintenance configuration object.
  [See `maintenanceConfiguration` below](#maintenance_configuration).

### `encryptionConfiguration`

The `encryptionConfiguration` object supports the following arguments:

* `kmsKeyArn` - (Optional) The ARN of a KMS Key to be used with `aws:kms` `sseAlgorithm`
* `sseAlgorithm` - (Required) One of `aws:kms` or `AES256`

### `maintenanceConfiguration`

The `maintenanceConfiguration` object supports the following argument:

* `iceberg_unreferenced_file_removal` - (Required) A single Iceberg unreferenced file removal settings object.
  [See `iceberg_unreferenced_file_removal` below](#iceberg_unreferenced_file_removal).

### `iceberg_unreferenced_file_removal`

The `iceberg_unreferenced_file_removal` object supports the following arguments:

* `settings` - (Required) Settings object for unreferenced file removal.
  [See `iceberg_unreferenced_file_removal.settings` below](#iceberg_unreferenced_file_removalsettings).
* `status` - (Required) Whether the configuration is enabled.
  Valid values are `enabled` and `disabled`.

### `iceberg_unreferenced_file_removal.settings`

The `iceberg_unreferenced_file_removal.settings` object supports the following arguments:

* `non_current_days` - (Required) Data objects marked for deletion are deleted after this many days.
  Must be at least `1`.
* `unreferenced_days` - (Required) Unreferenced data objects are marked for deletion after this many days.
  Must be at least `1`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the table bucket.
* `createdAt` - Date and time when the bucket was created.
* `ownerAccountId` - Account ID of the account that owns the table bucket.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import S3 Tables Table Bucket using the `arn`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { S3TablesTableBucket } from "./.gen/providers/aws/s3-tables-table-bucket";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    S3TablesTableBucket.generateConfigForImport(
      this,
      "example",
      "arn:aws:s3tables:us-west-2:123456789012:bucket/example-bucket"
    );
  }
}

```

Using `terraform import`, import S3 Tables Table Bucket using the `arn`. For example:

```console
% terraform import aws_s3tables_table_bucket.example arn:aws:s3tables:us-west-2:123456789012:bucket/example-bucket
```

<!-- cache-key: cdktf-0.20.8 input-8d0657839c87ebec22da7f06db455d16615964442b20d77c5effdf431e3d4a03 -->