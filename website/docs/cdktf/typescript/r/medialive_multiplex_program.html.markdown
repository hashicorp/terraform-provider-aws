---
subcategory: "Elemental MediaLive"
layout: "aws"
page_title: "AWS: aws_medialive_multiplex_program"
description: |-
  Terraform resource for managing an AWS MediaLive MultiplexProgram.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_medialive_multiplex_program

Terraform resource for managing an AWS MediaLive MultiplexProgram.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsAvailabilityZones } from "./.gen/providers/aws/data-aws-availability-zones";
import { MedialiveMultiplex } from "./.gen/providers/aws/medialive-multiplex";
import { MedialiveMultiplexProgram } from "./.gen/providers/aws/medialive-multiplex-program";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const available = new DataAwsAvailabilityZones(this, "available", {
      state: "available",
    });
    const example = new MedialiveMultiplex(this, "example", {
      availabilityZones: [
        Token.asString(Fn.lookupNested(available.names, ["0"])),
        Token.asString(Fn.lookupNested(available.names, ["1"])),
      ],
      multiplexSettings: {
        maximumVideoBufferDelayMilliseconds: 1000,
        transportStreamBitrate: 1000000,
        transportStreamId: 1,
        transportStreamReservedBitrate: 1,
      },
      name: "example-multiplex-changed",
      startMultiplex: true,
      tags: {
        tag1: "value1",
      },
    });
    const awsMedialiveMultiplexProgramExample = new MedialiveMultiplexProgram(
      this,
      "example_2",
      {
        multiplexId: example.id,
        multiplexProgramSettings: [
          {
            preferredChannelPipeline: "CURRENTLY_ACTIVE",
            programNumber: 1,
            videoSettings: [
              {
                constantBitrate: 100000,
              },
            ],
          },
        ],
        programName: "example_program",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsMedialiveMultiplexProgramExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `multiplexId` - (Required) Multiplex ID.
* `programName` - (Required) Unique program name.
* `multiplexProgramSettings` - (Required) MultiplexProgram settings. See [Multiplex Program Settings](#multiple-program-settings) for more details.

The following arguments are optional:

### Multiple Program Settings

* `programNumber` - (Required) Unique program number.
* `preferredChannelPipeline` - (Required) Enum for preferred channel pipeline. Options are `CURRENTLY_ACTIVE`, `PIPELINE_0`, or `PIPELINE_1`.
* `serviceDescriptor` - (Optional) Service Descriptor. See [Service Descriptor](#service-descriptor) for more details.
* `videoSettings` - (Optional) Video settings. See [Video Settings](#video-settings) for more details.

### Service Descriptor

* `providerName` - (Required) Unique provider name.
* `serviceName` - (Required) Unique service name.

### Video Settings

* `constantBitrate` - (Optional) Constant bitrate value.
* `statmuxSettings` - (Optional) Statmux settings. See [Statmux Settings](#statmux-settings) for more details.

### Statmux Settings

* `minimumBitrate` - (Optional) Minimum bitrate.
* `maximumBitrate` - (Optional) Maximum bitrate.
* `priority` - (Optional) Priority value.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - ID of the MultiplexProgram.
* `example_attribute` - Concise description.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import MediaLive MultiplexProgram using the `id`, or a combination of "`programName`/`multiplexId`". For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { MedialiveMultiplexProgram } from "./.gen/providers/aws/medialive-multiplex-program";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    MedialiveMultiplexProgram.generateConfigForImport(
      this,
      "example",
      "example_program/1234567"
    );
  }
}

```

Using `terraform import`, import MediaLive MultiplexProgram using the `id`, or a combination of "`programName`/`multiplexId`". For example:

```console
% terraform import aws_medialive_multiplex_program.example example_program/1234567
```

<!-- cache-key: cdktf-0.20.8 input-d0f4d6ecf5fbb8e34c4bfcc4ff4baddff29c0893a211fa29af99ff4cfade72b1 -->