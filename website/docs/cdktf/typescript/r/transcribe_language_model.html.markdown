---
subcategory: "Transcribe"
layout: "aws"
page_title: "AWS: aws_transcribe_language_model"
description: |-
  Terraform resource for managing an AWS Transcribe LanguageModel.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_transcribe_language_model

Terraform resource for managing an AWS Transcribe LanguageModel.

-> This resource can take a significant amount of time to provision. See Language Model [FAQ](https://aws.amazon.com/transcribe/faqs/) for more details.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicy } from "./.gen/providers/aws/iam-role-policy";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3Object } from "./.gen/providers/aws/s3-object";
import { TranscribeLanguageModel } from "./.gen/providers/aws/transcribe-language-model";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new S3Bucket(this, "example", {
      bucket: "example-transcribe",
      forceDestroy: true,
    });
    new S3Object(this, "object", {
      bucket: example.id,
      key: "transcribe/test1.txt",
      source: "test1.txt",
    });
    const dataAwsIamPolicyDocumentExample = new DataAwsIamPolicyDocument(
      this,
      "example_2",
      {
        statement: [
          {
            actions: ["sts:AssumeRole"],
            principals: [
              {
                identifiers: ["transcribe.amazonaws.com"],
                type: "Service",
              },
            ],
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsIamPolicyDocumentExample.overrideLogicalId("example");
    const awsIamRoleExample = new IamRole(this, "example_3", {
      assumeRolePolicy: Token.asString(dataAwsIamPolicyDocumentExample.json),
      name: "example",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRoleExample.overrideLogicalId("example");
    new IamRolePolicy(this, "test_policy", {
      name: "example",
      policy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: ["s3:GetObject", "s3:ListBucket"],
              Effect: "Allow",
              Resource: ["*"],
            },
          ],
          Version: "2012-10-17",
        })
      ),
      role: Token.asString(awsIamRoleExample.id),
    });
    const awsTranscribeLanguageModelExample = new TranscribeLanguageModel(
      this,
      "example_5",
      {
        baseModelName: "NarrowBand",
        inputDataConfig: {
          dataAccessRoleArn: Token.asString(awsIamRoleExample.arn),
          s3Uri: "s3://${" + example.id + "}/transcribe/",
        },
        languageCode: "en-US",
        modelName: "example",
        tags: {
          ENVIRONMENT: "development",
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsTranscribeLanguageModelExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `baseModelName` - (Required) Name of reference base model.
* `inputDataConfig` - (Required) The input data config for the LanguageModel. See [Input Data Config](#input-data-config) for more details.
* `languageCode` - (Required) The language code you selected for your language model. Refer to the [supported languages](https://docs.aws.amazon.com/transcribe/latest/dg/supported-languages.html) page for accepted codes.
* `modelName` - (Required) The model name.

### Input Data Config

* `dataAccessRoleArn` - (Required) IAM role with access to S3 bucket.
* `s3Uri` - (Required) S3 URI where training data is located.
* `tuningDataS3Uri` - (Optional) S3 URI where tuning data is located.

The following arguments are optional:

* `tags` - (Optional) A map of tags to assign to the LanguageModel. If configured with a provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - LanguageModel name.
* `arn` - ARN of the LanguageModel.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `600m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Transcribe LanguageModel using the `modelName`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { TranscribeLanguageModel } from "./.gen/providers/aws/transcribe-language-model";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    TranscribeLanguageModel.generateConfigForImport(
      this,
      "example",
      "example-name"
    );
  }
}

```

Using `terraform import`, import Transcribe LanguageModel using the `modelName`. For example:

```console
% terraform import aws_transcribe_language_model.example example-name
```

<!-- cache-key: cdktf-0.20.8 input-85a81f3a3aae68cdb05de1abee14c19e807278023470592c0e052318dc2bff47 -->