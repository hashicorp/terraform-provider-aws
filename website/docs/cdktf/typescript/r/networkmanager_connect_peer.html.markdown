---
subcategory: "Network Manager"
layout: "aws"
page_title: "AWS: aws_networkmanager_connect_peer"
description: |-
  Manages an AWS Network Manager Connect Peer.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_networkmanager_connect_peer

Manages an AWS Network Manager Connect Peer.

Use this resource to create a Connect peer in AWS Network Manager. Connect peers establish BGP sessions with your on-premises networks through Connect attachments, enabling dynamic routing between your core network and external networks.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NetworkmanagerConnectAttachment } from "./.gen/providers/aws/networkmanager-connect-attachment";
import { NetworkmanagerConnectPeer } from "./.gen/providers/aws/networkmanager-connect-peer";
import { NetworkmanagerVpcAttachment } from "./.gen/providers/aws/networkmanager-vpc-attachment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new NetworkmanagerVpcAttachment(this, "example", {
      coreNetworkId: Token.asString(awsccNetworkmanagerCoreNetworkExample.id),
      subnetArns: Token.asList(Fn.lookupNested(awsSubnetExample, ["*", "arn"])),
      vpcArn: Token.asString(awsVpcExample.arn),
    });
    const awsNetworkmanagerConnectAttachmentExample =
      new NetworkmanagerConnectAttachment(this, "example_1", {
        coreNetworkId: Token.asString(awsccNetworkmanagerCoreNetworkExample.id),
        edgeLocation: example.edgeLocation,
        options: {
          protocol: "GRE",
        },
        transportAttachmentId: example.id,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNetworkmanagerConnectAttachmentExample.overrideLogicalId("example");
    const awsNetworkmanagerConnectPeerExample = new NetworkmanagerConnectPeer(
      this,
      "example_2",
      {
        bgpOptions: {
          peerAsn: 65000,
        },
        connectAttachmentId: Token.asString(
          awsNetworkmanagerConnectAttachmentExample.id
        ),
        insideCidrBlocks: ["172.16.0.0/16"],
        peerAddress: "127.0.0.1",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNetworkmanagerConnectPeerExample.overrideLogicalId("example");
  }
}

```

### Usage with attachment accepter

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NetworkmanagerAttachmentAccepter } from "./.gen/providers/aws/networkmanager-attachment-accepter";
import { NetworkmanagerConnectAttachment } from "./.gen/providers/aws/networkmanager-connect-attachment";
import { NetworkmanagerConnectPeer } from "./.gen/providers/aws/networkmanager-connect-peer";
import { NetworkmanagerVpcAttachment } from "./.gen/providers/aws/networkmanager-vpc-attachment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new NetworkmanagerVpcAttachment(this, "example", {
      coreNetworkId: Token.asString(awsccNetworkmanagerCoreNetworkExample.id),
      subnetArns: Token.asList(Fn.lookupNested(awsSubnetExample, ["*", "arn"])),
      vpcArn: Token.asString(awsVpcExample.arn),
    });
    const awsNetworkmanagerAttachmentAccepterExample =
      new NetworkmanagerAttachmentAccepter(this, "example_1", {
        attachmentId: example.id,
        attachmentType: example.attachmentType,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNetworkmanagerAttachmentAccepterExample.overrideLogicalId("example");
    const awsNetworkmanagerConnectAttachmentExample =
      new NetworkmanagerConnectAttachment(this, "example_2", {
        coreNetworkId: Token.asString(awsccNetworkmanagerCoreNetworkExample.id),
        dependsOn: [awsNetworkmanagerAttachmentAccepterExample],
        edgeLocation: example.edgeLocation,
        options: {
          protocol: "GRE",
        },
        transportAttachmentId: example.id,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNetworkmanagerConnectAttachmentExample.overrideLogicalId("example");
    const example2 = new NetworkmanagerAttachmentAccepter(this, "example2", {
      attachmentId: Token.asString(
        awsNetworkmanagerConnectAttachmentExample.id
      ),
      attachmentType: Token.asString(
        awsNetworkmanagerConnectAttachmentExample.attachmentType
      ),
    });
    const awsNetworkmanagerConnectPeerExample = new NetworkmanagerConnectPeer(
      this,
      "example_4",
      {
        bgpOptions: {
          peerAsn: 65500,
        },
        connectAttachmentId: Token.asString(
          awsNetworkmanagerConnectAttachmentExample.id
        ),
        dependsOn: [example2],
        insideCidrBlocks: ["172.16.0.0/16"],
        peerAddress: "127.0.0.1",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNetworkmanagerConnectPeerExample.overrideLogicalId("example");
  }
}

```

### Usage with a Tunnel-less Connect attachment

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NetworkmanagerConnectAttachment } from "./.gen/providers/aws/networkmanager-connect-attachment";
import { NetworkmanagerConnectPeer } from "./.gen/providers/aws/networkmanager-connect-peer";
import { NetworkmanagerVpcAttachment } from "./.gen/providers/aws/networkmanager-vpc-attachment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new NetworkmanagerVpcAttachment(this, "example", {
      coreNetworkId: Token.asString(awsccNetworkmanagerCoreNetworkExample.id),
      subnetArns: Token.asList(Fn.lookupNested(awsSubnetExample, ["*", "arn"])),
      vpcArn: Token.asString(awsVpcExample.arn),
    });
    const awsNetworkmanagerConnectAttachmentExample =
      new NetworkmanagerConnectAttachment(this, "example_1", {
        coreNetworkId: Token.asString(awsccNetworkmanagerCoreNetworkExample.id),
        edgeLocation: example.edgeLocation,
        options: {
          protocol: "NO_ENCAP",
        },
        transportAttachmentId: example.id,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNetworkmanagerConnectAttachmentExample.overrideLogicalId("example");
    const awsNetworkmanagerConnectPeerExample = new NetworkmanagerConnectPeer(
      this,
      "example_2",
      {
        bgpOptions: {
          peerAsn: 65000,
        },
        connectAttachmentId: Token.asString(
          awsNetworkmanagerConnectAttachmentExample.id
        ),
        peerAddress: "127.0.0.1",
        subnetArn: example2.arn,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNetworkmanagerConnectPeerExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `connectAttachmentId` - (Required) ID of the connection attachment.
* `peerAddress` - (Required) Connect peer address.

The following arguments are optional:

* `bgpOptions` - (Optional) Connect peer BGP options. See [bgp_options](#bgp_options) for more information.
* `coreNetworkAddress` - (Optional) Connect peer core network address.
* `insideCidrBlocks` - (Optional) Inside IP addresses used for BGP peering. Required when the Connect attachment protocol is `GRE`. See [`aws_networkmanager_connect_attachment`](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/networkmanager_connect_attachment) for details.
* `subnetArn` - (Optional) Subnet ARN for the Connect peer. Required when the Connect attachment protocol is `NO_ENCAP`. See [`aws_networkmanager_connect_attachment`](https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/networkmanager_connect_attachment) for details.
* `tags` - (Optional) Key-value tags for the attachment. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### bgp_options

* `peerAsn` - (Optional) Peer ASN.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the Connect peer.
* `configuration` - Configuration of the Connect peer.
* `connectPeerId` - ID of the Connect peer.
* `coreNetworkId` - ID of a core network.
* `createdAt` - Timestamp when the Connect peer was created.
* `edgeLocation` - Region where the peer is located.
* `state` - State of the Connect peer.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `10m`)
* `delete` - (Default `15m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_networkmanager_connect_peer` using the connect peer ID. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NetworkmanagerConnectPeer } from "./.gen/providers/aws/networkmanager-connect-peer";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    NetworkmanagerConnectPeer.generateConfigForImport(
      this,
      "example",
      "connect-peer-061f3e96275db1acc"
    );
  }
}

```

Using `terraform import`, import `aws_networkmanager_connect_peer` using the connect peer ID. For example:

```console
% terraform import aws_networkmanager_connect_peer.example connect-peer-061f3e96275db1acc
```

<!-- cache-key: cdktf-0.20.8 input-00f38b8ee9a4df94fe5653ee1ce5e977c919f030fcff28603d3064e8d8fa09d9 -->