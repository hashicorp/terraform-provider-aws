---
subcategory: "IAM (Identity & Access Management)"
layout: "aws"
page_title: "AWS: aws_iam_role_policy_attachment"
description: |-
  Attaches a Managed IAM Policy to an IAM role
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_iam_role_policy_attachment

Attaches a Managed IAM Policy to an IAM role

~> **NOTE:** The usage of this resource conflicts with the `aws_iam_policy_attachment` resource and will permanently show a difference if both are defined.

~> **NOTE:** For a given role, this resource is incompatible with using the [`aws_iam_role` resource](/docs/providers/aws/r/iam_role.html) `managedPolicyArns` argument. When using that argument and this resource, both will attempt to manage the role's managed policy attachments and Terraform will show a permanent difference.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamPolicy } from "./.gen/providers/aws/iam-policy";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicyAttachment } from "./.gen/providers/aws/iam-role-policy-attachment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const assumeRole = new DataAwsIamPolicyDocument(this, "assume_role", {
      statement: [
        {
          actions: ["sts:AssumeRole"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["ec2.amazonaws.com"],
              type: "Service",
            },
          ],
        },
      ],
    });
    const policy = new DataAwsIamPolicyDocument(this, "policy", {
      statement: [
        {
          actions: ["ec2:Describe*"],
          effect: "Allow",
          resources: ["*"],
        },
      ],
    });
    const awsIamPolicyPolicy = new IamPolicy(this, "policy_2", {
      description: "A test policy",
      name: "test-policy",
      policy: Token.asString(policy.json),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamPolicyPolicy.overrideLogicalId("policy");
    const role = new IamRole(this, "role", {
      assumeRolePolicy: Token.asString(assumeRole.json),
      name: "test-role",
    });
    new IamRolePolicyAttachment(this, "test-attach", {
      policyArn: Token.asString(awsIamPolicyPolicy.arn),
      role: role.name,
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `role`  (Required) - The name of the IAM role to which the policy should be applied
* `policyArn` (Required) - The ARN of the policy you want to apply

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import IAM role policy attachments using the role name and policy arn separated by `/`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamRolePolicyAttachment } from "./.gen/providers/aws/iam-role-policy-attachment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    IamRolePolicyAttachment.generateConfigForImport(
      this,
      "testAttach",
      "test-role/arn:aws:iam::xxxxxxxxxxxx:policy/test-policy"
    );
  }
}

```

Using `terraform import`, import IAM role policy attachments using the role name and policy arn separated by `/`. For example:

```console
% terraform import aws_iam_role_policy_attachment.test-attach test-role/arn:aws:iam::xxxxxxxxxxxx:policy/test-policy
```

<!-- cache-key: cdktf-0.20.8 input-8fa8f1d0aab28daaa2f2296516256e63edd3a1f444a588a760d3d43847fd78f4 -->