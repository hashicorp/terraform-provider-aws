---
subcategory: "Lambda"
layout: "aws"
page_title: "AWS: aws_lambda_function_event_invoke_config"
description: |-
  Manages an AWS Lambda Function Event Invoke Config.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_lambda_function_event_invoke_config

Manages an AWS Lambda Function Event Invoke Config. Use this resource to configure error handling and destinations for asynchronous Lambda function invocations.

More information about asynchronous invocations and the configurable values can be found in the [Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html).

## Example Usage

### Complete Error Handling and Destinations

~> **Note:** Ensure the Lambda Function IAM Role has necessary permissions for the destination, such as `sqs:SendMessage` or `sns:Publish`, otherwise the API will return a generic `InvalidParameterValueException: The destination ARN arn:PARTITION:SERVICE:REGION:ACCOUNT:RESOURCE is invalid.` error.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionEventInvokeConfig } from "./.gen/providers/aws/lambda-function-event-invoke-config";
import { SnsTopic } from "./.gen/providers/aws/sns-topic";
import { SqsQueue } from "./.gen/providers/aws/sqs-queue";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const success = new SnsTopic(this, "success", {
      name: "lambda-success-notifications",
      tags: {
        Environment: "production",
        Purpose: "lambda-success-notifications",
      },
    });
    const dlq = new SqsQueue(this, "dlq", {
      name: "lambda-dlq",
      tags: {
        Environment: "production",
        Purpose: "lambda-error-handling",
      },
    });
    new LambdaFunctionEventInvokeConfig(this, "example", {
      destinationConfig: {
        onFailure: {
          destination: dlq.arn,
        },
        onSuccess: {
          destination: success.arn,
        },
      },
      functionName: Token.asString(awsLambdaFunctionExample.functionName),
      maximumEventAgeInSeconds: 300,
      maximumRetryAttempts: 1,
    });
  }
}

```

### Error Handling Only

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionEventInvokeConfig } from "./.gen/providers/aws/lambda-function-event-invoke-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LambdaFunctionEventInvokeConfig(this, "example", {
      functionName: Token.asString(awsLambdaFunctionExample.functionName),
      maximumEventAgeInSeconds: 60,
      maximumRetryAttempts: 0,
    });
  }
}

```

### Configuration for Lambda Alias

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaAlias } from "./.gen/providers/aws/lambda-alias";
import { LambdaFunctionEventInvokeConfig } from "./.gen/providers/aws/lambda-function-event-invoke-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new LambdaAlias(this, "example", {
      description: "Production alias",
      functionName: Token.asString(awsLambdaFunctionExample.functionName),
      functionVersion: Token.asString(awsLambdaFunctionExample.version),
      name: "production",
    });
    const awsLambdaFunctionEventInvokeConfigExample =
      new LambdaFunctionEventInvokeConfig(this, "example_1", {
        destinationConfig: {
          onFailure: {
            destination: productionDlq.arn,
          },
        },
        functionName: Token.asString(awsLambdaFunctionExample.functionName),
        maximumEventAgeInSeconds: 1800,
        maximumRetryAttempts: 2,
        qualifier: example.name,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsLambdaFunctionEventInvokeConfigExample.overrideLogicalId("example");
  }
}

```

### Configuration for Published Version

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionEventInvokeConfig } from "./.gen/providers/aws/lambda-function-event-invoke-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LambdaFunctionEventInvokeConfig(this, "example", {
      destinationConfig: {
        onFailure: {
          destination: versionDlq.arn,
        },
        onSuccess: {
          destination: versionSuccess.arn,
        },
      },
      functionName: Token.asString(awsLambdaFunctionExample.functionName),
      maximumEventAgeInSeconds: 21600,
      maximumRetryAttempts: 2,
      qualifier: Token.asString(awsLambdaFunctionExample.version),
    });
  }
}

```

### Configuration for Latest Version

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionEventInvokeConfig } from "./.gen/providers/aws/lambda-function-event-invoke-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LambdaFunctionEventInvokeConfig(this, "example", {
      destinationConfig: {
        onFailure: {
          destination: devDlq.arn,
        },
      },
      functionName: Token.asString(awsLambdaFunctionExample.functionName),
      maximumEventAgeInSeconds: 120,
      maximumRetryAttempts: 0,
      qualifier: "$LATEST",
    });
  }
}

```

### Multiple Destination Types

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchEventBus } from "./.gen/providers/aws/cloudwatch-event-bus";
import { LambdaFunctionEventInvokeConfig } from "./.gen/providers/aws/lambda-function-event-invoke-config";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const lambdaFailures = new CloudwatchEventBus(this, "lambda_failures", {
      name: "lambda-failure-events",
    });
    const lambdaSuccessArchive = new S3Bucket(this, "lambda_success_archive", {
      bucket: "lambda-success-archive-${" + bucketSuffix.hex + "}",
    });
    new LambdaFunctionEventInvokeConfig(this, "example", {
      destinationConfig: {
        onFailure: {
          destination: lambdaFailures.arn,
        },
        onSuccess: {
          destination: lambdaSuccessArchive.arn,
        },
      },
      functionName: Token.asString(awsLambdaFunctionExample.functionName),
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `functionName` - (Required) Name or ARN of the Lambda Function, omitting any version or alias qualifier.

The following arguments are optional:

* `destinationConfig` - (Optional) Configuration block with destination configuration. [See below](#destination_config-configuration-block).
* `maximumEventAgeInSeconds` - (Optional) Maximum age of a request that Lambda sends to a function for processing in seconds. Valid values between 60 and 21600.
* `maximumRetryAttempts` - (Optional) Maximum number of times to retry when the function returns an error. Valid values between 0 and 2. Defaults to 2.
* `qualifier` - (Optional) Lambda Function published version, `$LATEST`, or Lambda Alias name.
* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).

### destination_config Configuration Block

~> **Note:** At least one of `onFailure` or `onSuccess` must be configured when using this configuration block, otherwise remove it completely to prevent perpetual differences in Terraform runs.

* `onFailure` - (Optional) Configuration block with destination configuration for failed asynchronous invocations. [See below](#destination_config-on_failure-configuration-block).
* `onSuccess` - (Optional) Configuration block with destination configuration for successful asynchronous invocations. [See below](#destination_config-on_success-configuration-block).

#### destination_config on_failure Configuration Block

* `destination` - (Required) ARN of the destination resource. See the [Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations) for acceptable resource types and associated IAM permissions.

#### destination_config on_success Configuration Block

* `destination` - (Required) ARN of the destination resource. See the [Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations) for acceptable resource types and associated IAM permissions.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Fully qualified Lambda Function name or ARN.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Lambda Function Event Invoke Configs using the fully qualified Function name or ARN. For example:

ARN without qualifier (all versions and aliases):

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionEventInvokeConfig } from "./.gen/providers/aws/lambda-function-event-invoke-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    LambdaFunctionEventInvokeConfig.generateConfigForImport(
      this,
      "example",
      "arn:aws:lambda:us-east-1:123456789012:function:example"
    );
  }
}

```

ARN with qualifier:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionEventInvokeConfig } from "./.gen/providers/aws/lambda-function-event-invoke-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    LambdaFunctionEventInvokeConfig.generateConfigForImport(
      this,
      "example",
      "arn:aws:lambda:us-east-1:123456789012:function:example:production"
    );
  }
}

```

Name without qualifier (all versions and aliases):

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionEventInvokeConfig } from "./.gen/providers/aws/lambda-function-event-invoke-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    LambdaFunctionEventInvokeConfig.generateConfigForImport(
      this,
      "example",
      "example"
    );
  }
}

```

Name with qualifier:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionEventInvokeConfig } from "./.gen/providers/aws/lambda-function-event-invoke-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    LambdaFunctionEventInvokeConfig.generateConfigForImport(
      this,
      "example",
      "example:production"
    );
  }
}

```

For backwards compatibility, the following legacy `terraform import` commands are also supported:

Using ARN without qualifier:

```console
% terraform import aws_lambda_function_event_invoke_config.example arn:aws:lambda:us-east-1:123456789012:function:example
```

Using ARN with qualifier:

```console
% terraform import aws_lambda_function_event_invoke_config.example arn:aws:lambda:us-east-1:123456789012:function:example:production
```

Name without qualifier (all versions and aliases):

```console
% terraform import aws_lambda_function_event_invoke_config.example example
```

Name with qualifier:

```console
% terraform import aws_lambda_function_event_invoke_config.example example:production
```

<!-- cache-key: cdktf-0.20.8 input-676a3b4001afa4a199f6a8d13832deb406f12599914af6c19f0ccab43ed751b0 -->