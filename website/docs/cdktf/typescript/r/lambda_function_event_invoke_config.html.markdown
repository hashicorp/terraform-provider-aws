---
subcategory: "Lambda"
layout: "aws"
page_title: "AWS: aws_lambda_function_event_invoke_config"
description: |-
  Manages an asynchronous invocation configuration for a Lambda Function or Alias.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_lambda_function_event_invoke_config

Manages an asynchronous invocation configuration for a Lambda Function or Alias. More information about asynchronous invocations and the configurable values can be found in the [Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html).

## Example Usage

### Destination Configuration

~> **NOTE:** Ensure the Lambda Function IAM Role has necessary permissions for the destination, such as `sqs:SendMessage` or `sns:Publish`, otherwise the API will return a generic `InvalidParameterValueException: The destination ARN arn:PARTITION:SERVICE:REGION:ACCOUNT:RESOURCE is invalid.` error.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionEventInvokeConfig } from "./.gen/providers/aws/lambda-function-event-invoke-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LambdaFunctionEventInvokeConfig(this, "example", {
      destinationConfig: {
        onFailure: {
          destination: Token.asString(awsSqsQueueExample.arn),
        },
        onSuccess: {
          destination: Token.asString(awsSnsTopicExample.arn),
        },
      },
      functionName: Token.asString(awsLambdaAliasExample.functionName),
    });
  }
}

```

### Error Handling Configuration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionEventInvokeConfig } from "./.gen/providers/aws/lambda-function-event-invoke-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LambdaFunctionEventInvokeConfig(this, "example", {
      functionName: Token.asString(awsLambdaAliasExample.functionName),
      maximumEventAgeInSeconds: 60,
      maximumRetryAttempts: 0,
    });
  }
}

```

### Configuration for Alias Name

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionEventInvokeConfig } from "./.gen/providers/aws/lambda-function-event-invoke-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LambdaFunctionEventInvokeConfig(this, "example", {
      functionName: Token.asString(awsLambdaAliasExample.functionName),
      qualifier: Token.asString(awsLambdaAliasExample.name),
    });
  }
}

```

### Configuration for Function Latest Unpublished Version

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionEventInvokeConfig } from "./.gen/providers/aws/lambda-function-event-invoke-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LambdaFunctionEventInvokeConfig(this, "example", {
      functionName: Token.asString(awsLambdaFunctionExample.functionName),
      qualifier: "$LATEST",
    });
  }
}

```

### Configuration for Function Published Version

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionEventInvokeConfig } from "./.gen/providers/aws/lambda-function-event-invoke-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new LambdaFunctionEventInvokeConfig(this, "example", {
      functionName: Token.asString(awsLambdaFunctionExample.functionName),
      qualifier: Token.asString(awsLambdaFunctionExample.version),
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `functionName` - (Required) Name or Amazon Resource Name (ARN) of the Lambda Function, omitting any version or alias qualifier.

The following arguments are optional:

* `destinationConfig` - (Optional) Configuration block with destination configuration. See below for details.
* `maximumEventAgeInSeconds` - (Optional) Maximum age of a request that Lambda sends to a function for processing in seconds. Valid values between 60 and 21600.
* `maximumRetryAttempts` - (Optional) Maximum number of times to retry when the function returns an error. Valid values between 0 and 2. Defaults to 2.
* `qualifier` - (Optional) Lambda Function published version, `$LATEST`, or Lambda Alias name.

### destination_config Configuration Block

~> **NOTE:** At least one of `onFailure` or `onSuccess` must be configured when using this configuration block, otherwise remove it completely to prevent perpetual differences in Terraform runs.

The following arguments are optional:

* `onFailure` - (Optional) Configuration block with destination configuration for failed asynchronous invocations. See below for details.
* `onSuccess` - (Optional) Configuration block with destination configuration for successful asynchronous invocations. See below for details.

#### destination_config on_failure Configuration Block

The following arguments are required:

* `destination` - (Required) Amazon Resource Name (ARN) of the destination resource. See the [Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations) for acceptable resource types and associated IAM permissions.

#### destination_config on_success Configuration Block

The following arguments are required:

* `destination` - (Required) Amazon Resource Name (ARN) of the destination resource. See the [Lambda Developer Guide](https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html#invocation-async-destinations) for acceptable resource types and associated IAM permissions.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Fully qualified Lambda Function name or Amazon Resource Name (ARN)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Lambda Function Event Invoke Configs using the fully qualified Function name or Amazon Resource Name (ARN). For example:

ARN without qualifier (all versions and aliases):

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionEventInvokeConfig } from "./.gen/providers/aws/lambda-function-event-invoke-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    LambdaFunctionEventInvokeConfig.generateConfigForImport(
      this,
      "example",
      "arn:aws:us-east-1:123456789012:function:my_function"
    );
  }
}

```

ARN with qualifier:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionEventInvokeConfig } from "./.gen/providers/aws/lambda-function-event-invoke-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    LambdaFunctionEventInvokeConfig.generateConfigForImport(
      this,
      "example",
      "arn:aws:us-east-1:123456789012:function:my_function:production"
    );
  }
}

```

Name without qualifier (all versions and aliases):

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionEventInvokeConfig } from "./.gen/providers/aws/lambda-function-event-invoke-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    LambdaFunctionEventInvokeConfig.generateConfigForImport(
      this,
      "example",
      "my_function"
    );
  }
}

```

Name with qualifier:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { LambdaFunctionEventInvokeConfig } from "./.gen/providers/aws/lambda-function-event-invoke-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    LambdaFunctionEventInvokeConfig.generateConfigForImport(
      this,
      "example",
      "my_function:production"
    );
  }
}

```

**Using `terraform import` to import** Lambda Function Event Invoke Configs using the fully qualified Function name or Amazon Resource Name (ARN). For example:

ARN without qualifier (all versions and aliases):

```console
% terraform import aws_lambda_function_event_invoke_config.example arn:aws:us-east-1:123456789012:function:my_function
```

ARN with qualifier:

```console
% terraform import aws_lambda_function_event_invoke_config.example arn:aws:us-east-1:123456789012:function:my_function:production
```

Name without qualifier (all versions and aliases):

```console
% terraform import aws_lambda_function_event_invoke_config.example my_function
```

Name with qualifier:

```console
% terraform import aws_lambda_function_event_invoke_config.example my_function:production
```

<!-- cache-key: cdktf-0.20.8 input-609bc5423f52ca1abd7ee524d562fbd117b6915dd9a7b4012b252b00f563c6ac -->