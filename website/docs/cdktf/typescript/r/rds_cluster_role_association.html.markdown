---
subcategory: "RDS (Relational Database)"
layout: "aws"
page_title: "AWS: aws_rds_cluster_role_association"
description: |-
  Manages a RDS DB Cluster association with an IAM Role.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_rds_cluster_role_association

Manages a RDS DB Cluster association with an IAM Role. Example use cases:

* [Creating an IAM Role to Allow Amazon Aurora to Access AWS Services](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Integrating.Authorizing.IAM.CreateRole.html)
* [Importing Amazon S3 Data into an RDS PostgreSQL DB Cluster](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PostgreSQL.S3Import.html)

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { RdsClusterRoleAssociation } from "./.gen/providers/aws/rds-cluster-role-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new RdsClusterRoleAssociation(this, "example", {
      dbClusterIdentifier: Token.asString(awsRdsClusterExample.id),
      featureName: "S3_INTEGRATION",
      roleArn: Token.asString(awsIamRoleExample.arn),
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `dbClusterIdentifier` - (Required) DB Cluster Identifier to associate with the IAM Role.
* `featureName` - (Required) Name of the feature for association. This can be found in the AWS documentation relevant to the integration or a full list is available in the `SupportedFeatureNames` list returned by [AWS CLI rds describe-db-engine-versions](https://docs.aws.amazon.com/cli/latest/reference/rds/describe-db-engine-versions.html).
* `roleArn` - (Required) Amazon Resource Name (ARN) of the IAM Role to associate with the DB Cluster.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - DB Cluster Identifier and IAM Role ARN separated by a comma (`,`)

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `10m`)
- `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_rds_cluster_role_association` using the DB Cluster Identifier and IAM Role ARN separated by a comma (`,`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { RdsClusterRoleAssociation } from "./.gen/providers/aws/rds-cluster-role-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    RdsClusterRoleAssociation.generateConfigForImport(
      this,
      "example",
      "my-db-cluster,arn:aws:iam::123456789012:role/my-role"
    );
  }
}

```

Using `terraform import`, import `aws_rds_cluster_role_association` using the DB Cluster Identifier and IAM Role ARN separated by a comma (`,`). For example:

```console
% terraform import aws_rds_cluster_role_association.example my-db-cluster,arn:aws:iam::123456789012:role/my-role
```

<!-- cache-key: cdktf-0.20.8 input-f164c7c9d93e5509da4cca9e9ef20bfa3b9c5d4d57057579c41a0162d8f04659 -->