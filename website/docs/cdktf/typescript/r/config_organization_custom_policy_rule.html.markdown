---
subcategory: "Config"
layout: "aws"
page_title: "AWS: aws_config_organization_custom_policy_rule"
description: |-
  Terraform resource for managing an AWS Config Organization Custom Policy.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_config_organization_custom_policy_rule

Manages a Config Organization Custom Policy Rule. More information about these rules can be found in the [Enabling AWS Config Rules Across all Accounts in Your Organization](https://docs.aws.amazon.com/config/latest/developerguide/config-rule-multi-account-deployment.html) and [AWS Config Managed Rules](https://docs.aws.amazon.com/config/latest/developerguide/evaluate-config_use-managed-rules.html) documentation. For working with Organization Managed Rules (those invoking an AWS managed rule), see the [`aws_config_organization_managed__rule` resource](/docs/providers/aws/r/config_organization_managed_rule.html).

~> **NOTE:** This resource must be created in the Organization master account and rules will include the master account unless its ID is added to the `excludedAccounts` argument.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConfigOrganizationCustomPolicyRule } from "./.gen/providers/aws/config-organization-custom-policy-rule";
interface MyConfig {
  triggerTypes: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new ConfigOrganizationCustomPolicyRule(this, "example", {
      name: "example_rule_name",
      policyRuntime: "guard-2.x.x",
      policyText:
        'let status = [\'ACTIVE\']\n\nrule tableisactive when\n    resourceType == "AWS::DynamoDB::Table" {\n    configuration.tableStatus == %status\n}\n\nrule checkcompliance when\n    resourceType == "AWS::DynamoDB::Table"\n    tableisactive {\n        let pitr = supplementaryConfiguration.ContinuousBackupsDescription.pointInTimeRecoveryDescription.pointInTimeRecoveryStatus\n        %pitr == "ENABLED"\n    }\n\n',
      resourceTypesScope: ["AWS::DynamoDB::Table"],
      triggerTypes: config.triggerTypes,
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `name` - (Required) name of the rule
* `policyText` - (Required) policy definition containing the logic for your organization AWS Config Custom Policy rule
* `policyRuntime` - (Required)  runtime system for your organization AWS Config Custom Policy rules
* `triggerTypes` - (Required) List of notification types that trigger AWS Config to run an evaluation for the rule. Valid values: `ConfigurationItemChangeNotification`, `OversizedConfigurationItemChangeNotification`

The following arguments are optional:

* `description` - (Optional) Description of the rule
* `debugLogDeliveryAccounts` - (Optional) List of AWS account identifiers to exclude from the rule
* `excludedAccounts` - (Optional) List of AWS account identifiers to exclude from the rule
* `inputParameters` - (Optional) A string in JSON format that is passed to the AWS Config Rule Lambda Function
* `maximumExecutionFrequency` - (Optional) Maximum frequency with which AWS Config runs evaluations for a rule, if the rule is triggered at a periodic frequency. Defaults to `TwentyFour_Hours` for periodic frequency triggered rules. Valid values: `One_Hour`, `Three_Hours`, `Six_Hours`, `Twelve_Hours`, or `TwentyFour_Hours`.
* `resourceIdScope` - (Optional) Identifier of the AWS resource to evaluate
* `resourceTypesScope` - (Optional) List of types of AWS resources to evaluate
* `tagKeyScope` - (Optional, Required if `tagValueScope` is configured) Tag key of AWS resources to evaluate
* `tagValueScope` - (Optional) Tag value of AWS resources to evaluate

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of the rule

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `20m`)
* `update` - (Default `20m`)
* `delete` - (Default `20m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import a Config Organization Custom Policy Rule using the `name` argument. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConfigOrganizationCustomPolicyRule } from "./.gen/providers/aws/config-organization-custom-policy-rule";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ConfigOrganizationCustomPolicyRule.generateConfigForImport(
      this,
      "example",
      "example_rule_name"
    );
  }
}

```

Using `terraform import`, import a Config Organization Custom Policy Rule using the `name` argument. For example:

```console
% terraform import aws_config_organization_custom_policy_rule.example example_rule_name
```

<!-- cache-key: cdktf-0.20.8 input-f90143a3072d513a2fe1459c4bfdb050b7dfd52b0b478cfb10ff823139422527 -->