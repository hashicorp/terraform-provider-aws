---
subcategory: "Verified Access"
layout: "aws"
page_title: "AWS: aws_verifiedaccess_instance"
description: |-
  Terraform resource for managing a Verified Access Instance.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_verifiedaccess_instance

Terraform resource for managing a Verified Access Instance.

## Example Usage

### Basic

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VerifiedaccessInstance } from "./.gen/providers/aws/verifiedaccess-instance";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new VerifiedaccessInstance(this, "example", {
      description: "example",
      tags: {
        Name: "example",
      },
    });
  }
}

```

### With `fipsEnabled`

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VerifiedaccessInstance } from "./.gen/providers/aws/verifiedaccess-instance";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new VerifiedaccessInstance(this, "example", {
      fipsEnabled: true,
    });
  }
}

```

## Argument Reference

The following arguments are optional:

* `description` - (Optional) A description for the AWS Verified Access Instance.
* `fipsEnabled` - (Optional, Forces new resource) Enable or disable support for Federal Information Processing Standards (FIPS) on the AWS Verified Access Instance.
* `tags` - (Optional) Key-value mapping of resource tags. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `creationTime` - The time that the Verified Access Instance was created.
* `id` - The ID of the AWS Verified Access Instance.
* `lastUpdatedTime` - The time that the Verified Access Instance was last updated.
* `verifiedAccessTrustProviders` - One or more blocks of providing information about the AWS Verified Access Trust Providers. See [verified_access_trust_providers](#verified_access_trust_providers) below for details.One or more blocks

### verified_access_trust_providers

Each `verifiedAccessTrustProviders` supports the following argument:

* `description` - The description of trust provider.
* `deviceTrustProviderType` - The type of device-based trust provider.
* `trustProviderType` - The type of trust provider (user- or device-based).
* `userTrustProviderType` - The type of user-based trust provider.
* `verified_access_trust_provider_id` - The ID of the trust provider.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Verified Access Instances using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VerifiedaccessInstance } from "./.gen/providers/aws/verifiedaccess-instance";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    VerifiedaccessInstance.generateConfigForImport(
      this,
      "example",
      "vai-1234567890abcdef0"
    );
  }
}

```

Using `terraform import`, import Verified Access Instances using the  `id`. For example:

```console
% terraform import aws_verifiedaccess_instance.example vai-1234567890abcdef0
```

<!-- cache-key: cdktf-0.20.8 input-c933a4a83a27d8a7c453603ace502b409683c5a0ec3444abd304067d056ba8ad -->