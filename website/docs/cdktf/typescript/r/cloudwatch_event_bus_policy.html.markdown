---
subcategory: "EventBridge"
layout: "aws"
page_title: "AWS: aws_cloudwatch_event_bus_policy"
description: |-
  Provides a resource to create an EventBridge policy to support cross-account events.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cloudwatch_event_bus_policy

Provides a resource to create an EventBridge resource policy to support cross-account events.

~> **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.

~> **Note:** The EventBridge bus policy resource  (`aws_cloudwatch_event_bus_policy`) is incompatible with the EventBridge permission resource (`aws_cloudwatch_event_permission`) and will overwrite permissions.

## Example Usage

### Account Access

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchEventBusPolicy } from "./.gen/providers/aws/cloudwatch-event-bus-policy";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new DataAwsIamPolicyDocument(this, "test", {
      statement: [
        {
          actions: ["events:PutEvents"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["123456789012"],
              type: "AWS",
            },
          ],
          resources: [
            "arn:aws:events:eu-west-1:123456789012:event-bus/default",
          ],
          sid: "DevAccountAccess",
        },
      ],
    });
    const awsCloudwatchEventBusPolicyTest = new CloudwatchEventBusPolicy(
      this,
      "test_1",
      {
        eventBusName: Token.asString(awsCloudwatchEventBusTest.name),
        policy: Token.asString(test.json),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCloudwatchEventBusPolicyTest.overrideLogicalId("test");
  }
}

```

### Organization Access

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchEventBusPolicy } from "./.gen/providers/aws/cloudwatch-event-bus-policy";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new DataAwsIamPolicyDocument(this, "test", {
      statement: [
        {
          actions: [
            "events:DescribeRule",
            "events:ListRules",
            "events:ListTargetsByRule",
            "events:ListTagsForResource",
          ],
          condition: [
            {
              test: "StringEquals",
              values: [example.id],
              variable: "aws:PrincipalOrgID",
            },
          ],
          effect: "Allow",
          principals: [
            {
              identifiers: ["*"],
              type: "AWS",
            },
          ],
          resources: [
            "arn:aws:events:eu-west-1:123456789012:rule/*",
            "arn:aws:events:eu-west-1:123456789012:event-bus/default",
          ],
          sid: "OrganizationAccess",
        },
      ],
    });
    const awsCloudwatchEventBusPolicyTest = new CloudwatchEventBusPolicy(
      this,
      "test_1",
      {
        eventBusName: Token.asString(awsCloudwatchEventBusTest.name),
        policy: Token.asString(test.json),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCloudwatchEventBusPolicyTest.overrideLogicalId("test");
  }
}

```

### Multiple Statements

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchEventBusPolicy } from "./.gen/providers/aws/cloudwatch-event-bus-policy";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new DataAwsIamPolicyDocument(this, "test", {
      statement: [
        {
          actions: ["events:PutEvents"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["123456789012"],
              type: "AWS",
            },
          ],
          resources: [
            "arn:aws:events:eu-west-1:123456789012:event-bus/default",
          ],
          sid: "DevAccountAccess",
        },
        {
          actions: [
            "events:DescribeRule",
            "events:ListRules",
            "events:ListTargetsByRule",
            "events:ListTagsForResource",
          ],
          condition: [
            {
              test: "StringEquals",
              values: [example.id],
              variable: "aws:PrincipalOrgID",
            },
          ],
          effect: "Allow",
          principals: [
            {
              identifiers: ["*"],
              type: "AWS",
            },
          ],
          resources: [
            "arn:aws:events:eu-west-1:123456789012:rule/*",
            "arn:aws:events:eu-west-1:123456789012:event-bus/default",
          ],
          sid: "OrganizationAccess",
        },
      ],
    });
    const awsCloudwatchEventBusPolicyTest = new CloudwatchEventBusPolicy(
      this,
      "test_1",
      {
        eventBusName: Token.asString(awsCloudwatchEventBusTest.name),
        policy: Token.asString(test.json),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCloudwatchEventBusPolicyTest.overrideLogicalId("test");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `policy` - (Required) The text of the policy. For more information about building AWS IAM policy documents with Terraform, see the [AWS IAM Policy Document Guide](https://learn.hashicorp.com/terraform/aws/iam-policy).
* `eventBusName` - (Optional) The name of the event bus to set the permissions on.
  If you omit this, the permissions are set on the `default` event bus.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The name of the EventBridge event bus.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import an EventBridge policy using the `eventBusName`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchEventBusPolicy } from "./.gen/providers/aws/cloudwatch-event-bus-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    CloudwatchEventBusPolicy.generateConfigForImport(
      this,
      "devAccountAccess",
      "example-event-bus"
    );
  }
}

```

Using `terraform import`, import an EventBridge policy using the `eventBusName`. For example:

```console
% terraform import aws_cloudwatch_event_bus_policy.DevAccountAccess example-event-bus
```

<!-- cache-key: cdktf-0.20.8 input-169b2e45e0cb69c0e508149ef8eef91ea77e8a9d2a0a5c4ea7af58d28ac95866 -->