---
subcategory: "CloudFront"
layout: "aws"
page_title: "AWS: aws_cloudfront_continuous_deployment_policy"
description: |-
  Terraform resource for managing an AWS CloudFront Continuous Deployment Policy.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cloudfront_continuous_deployment_policy

Terraform resource for managing an AWS CloudFront Continuous Deployment Policy.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudfrontContinuousDeploymentPolicy } from "./.gen/providers/aws/cloudfront-continuous-deployment-policy";
import { CloudfrontDistribution } from "./.gen/providers/aws/cloudfront-distribution";
interface MyConfig {
  defaultCacheBehavior: any;
  origin: any;
  restrictions: any;
  viewerCertificate: any;
  defaultCacheBehavior1: any;
  origin1: any;
  restrictions1: any;
  viewerCertificate1: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    const staging = new CloudfrontDistribution(this, "staging", {
      enabled: true,
      staging: true,
      defaultCacheBehavior: config.defaultCacheBehavior,
      origin: config.origin,
      restrictions: config.restrictions,
      viewerCertificate: config.viewerCertificate,
    });
    const example = new CloudfrontContinuousDeploymentPolicy(this, "example", {
      enabled: true,
      stagingDistributionDnsNames: [
        {
          items: [staging.domainName],
          quantity: 1,
        },
      ],
      trafficConfig: [
        {
          singleWeightConfig: [
            {
              weight: Token.asNumber("0.01"),
            },
          ],
          type: "SingleWeight",
        },
      ],
    });
    new CloudfrontDistribution(this, "production", {
      continuousDeploymentPolicyId: example.id,
      enabled: true,
      defaultCacheBehavior: config.defaultCacheBehavior1,
      origin: config.origin1,
      restrictions: config.restrictions1,
      viewerCertificate: config.viewerCertificate1,
    });
  }
}

```

### Single Weight Config with Session Stickiness

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudfrontContinuousDeploymentPolicy } from "./.gen/providers/aws/cloudfront-continuous-deployment-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new CloudfrontContinuousDeploymentPolicy(this, "example", {
      enabled: true,
      stagingDistributionDnsNames: [
        {
          items: [staging.domainName],
          quantity: 1,
        },
      ],
      trafficConfig: [
        {
          singleWeightConfig: [
            {
              sessionStickinessConfig: [
                {
                  idleTtl: 300,
                  maximumTtl: 600,
                },
              ],
              weight: Token.asNumber("0.01"),
            },
          ],
          type: "SingleWeight",
        },
      ],
    });
  }
}

```

### Single Header Config

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudfrontContinuousDeploymentPolicy } from "./.gen/providers/aws/cloudfront-continuous-deployment-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new CloudfrontContinuousDeploymentPolicy(this, "example", {
      enabled: true,
      stagingDistributionDnsNames: [
        {
          items: [staging.domainName],
          quantity: 1,
        },
      ],
      trafficConfig: [
        {
          singleHeaderConfig: [
            {
              header: "aws-cf-cd-example",
              value: "example",
            },
          ],
          type: "SingleHeader",
        },
      ],
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `enabled` - (Required) Whether this continuous deployment policy is enabled.
* `stagingDistributionDnsNames` - (Required) CloudFront domain name of the staging distribution. See [`stagingDistributionDnsNames`](#staging_distribution_dns_names).
* `trafficConfig` - (Required) Parameters for routing production traffic from primary to staging distributions. See [`trafficConfig`](#traffic_config).

### `stagingDistributionDnsNames`

* `items` - (Required) A list of CloudFront domain names for the staging distribution.
* `quantity` - (Required) Number of CloudFront domain names in the staging distribution.

### `trafficConfig`

* `type` - (Required) Type of traffic configuration. Valid values are `SingleWeight` and `SingleHeader`.
* `singleHeaderConfig` - (Optional) Determines which HTTP requests are sent to the staging distribution. See [`singleHeaderConfig`](#single_header_config).
* `singleWeightConfig` - (Optional) Contains the percentage of traffic to send to the staging distribution. See [`singleWeightConfig`](#single_weight_config).

### `singleHeaderConfig`

* `header` - (Required) Request header name to send to the staging distribution. The header must contain the prefix `aws-cf-cd-`.
* `value` - (Required) Request header value.

### `singleWeightConfig`

* `weight` - (Required) The percentage of traffic to send to a staging distribution, expressed as a decimal number between `0` and `.15`.
* `sessionStickinessConfig` - (Optional) Session stickiness provides the ability to define multiple requests from a single viewer as a single session. This prevents the potentially inconsistent experience of sending some of a given user's requests to the staging distribution, while others are sent to the primary distribution. Define the session duration using TTL values. See [`sessionStickinessConfig`](#session_stickiness_config).

### `sessionStickinessConfig`

* `idleTtl` - (Required) The amount of time in seconds after which sessions will cease if no requests are received. Valid values are `300` – `3600` (5–60 minutes). The value must be less than or equal to `maximumTtl`.
* `maximumTtl` - (Required) The maximum amount of time in seconds to consider requests from the viewer as being part of the same session. Valid values are `300` – `3600` (5–60 minutes). The value must be greater than or equal to `idleTtl`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `etag` - Current version of the continuous distribution policy.
* `id` - Identifier of the continuous deployment policy.
* `lastModifiedTime` - Date and time the continuous deployment policy was last modified.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import CloudFront Continuous Deployment Policy using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudfrontContinuousDeploymentPolicy } from "./.gen/providers/aws/cloudfront-continuous-deployment-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    CloudfrontContinuousDeploymentPolicy.generateConfigForImport(
      this,
      "example",
      "abcd-1234"
    );
  }
}

```

Using `terraform import`, import CloudFront Continuous Deployment Policy using the `id`. For example:

```console
% terraform import aws_cloudfront_continuous_deployment_policy.example abcd-1234 
```

<!-- cache-key: cdktf-0.20.8 input-10ca91c1c5f42a4e7c34b2e87eb874a6c1a113aec1a477105e5b977db0a0d32d -->