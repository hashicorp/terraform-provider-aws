---
subcategory: "EventBridge"
layout: "aws"
page_title: "AWS: aws_cloudwatch_event_archive"
description: |-
  Provides an EventBridge event archive resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cloudwatch_event_archive

Provides an EventBridge event archive resource.

~> **Note:** EventBridge was formerly known as CloudWatch Events. The functionality is identical.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchEventArchive } from "./.gen/providers/aws/cloudwatch-event-archive";
import { CloudwatchEventBus } from "./.gen/providers/aws/cloudwatch-event-bus";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const order = new CloudwatchEventBus(this, "order", {
      name: "orders",
    });
    const awsCloudwatchEventArchiveOrder = new CloudwatchEventArchive(
      this,
      "order_1",
      {
        eventSourceArn: order.arn,
        name: "order-archive",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCloudwatchEventArchiveOrder.overrideLogicalId("order");
  }
}

```

## Example Usage Optional Arguments

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchEventArchive } from "./.gen/providers/aws/cloudwatch-event-archive";
import { CloudwatchEventBus } from "./.gen/providers/aws/cloudwatch-event-bus";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const order = new CloudwatchEventBus(this, "order", {
      name: "orders",
    });
    const awsCloudwatchEventArchiveOrder = new CloudwatchEventArchive(
      this,
      "order_1",
      {
        description: "Archived events from order service",
        eventPattern: Token.asString(
          Fn.jsonencode({
            source: ["company.team.order"],
          })
        ),
        eventSourceArn: order.arn,
        name: "order-archive",
        retentionDays: 7,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCloudwatchEventArchiveOrder.overrideLogicalId("order");
  }
}

```

## Example Usage CMK Encryption

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchEventArchive } from "./.gen/providers/aws/cloudwatch-event-archive";
import { CloudwatchEventBus } from "./.gen/providers/aws/cloudwatch-event-bus";
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { DataAwsPartition } from "./.gen/providers/aws/data-aws-partition";
import { KmsKey } from "./.gen/providers/aws/kms-key";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new CloudwatchEventBus(this, "example", {
      name: "example",
    });
    const current = new DataAwsCallerIdentity(this, "current", {});
    const dataAwsPartitionCurrent = new DataAwsPartition(this, "current_2", {});
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsPartitionCurrent.overrideLogicalId("current");
    const awsKmsKeyExample = new KmsKey(this, "example_3", {
      deletionWindowInDays: 7,
      policy: Token.asString(
        Fn.jsonencode({
          Id: "key-policy-example",
          Statement: [
            {
              Action: "kms:*",
              Effect: "Allow",
              Principal: {
                AWS:
                  "arn:${" +
                  dataAwsPartitionCurrent.partition +
                  "}:iam::${" +
                  current.accountId +
                  "}:root",
              },
              Resource: "*",
              Sid: "Enable IAM User Permissions",
            },
            {
              Action: ["kms:DescribeKey"],
              Effect: "Allow",
              Principal: {
                Service: "events.amazonaws.com",
              },
              Resource: "*",
              Sid: "Allow describing of the key",
            },
            {
              Action: ["kms:GenerateDataKey", "kms:Decrypt", "kms:ReEncrypt*"],
              Condition: {
                StringEquals: {
                  "kms:EncryptionContext:aws:events:event-bus:arn": example.arn,
                },
              },
              Effect: "Allow",
              Principal: {
                Service: "events.amazonaws.com",
              },
              Resource: "*",
              Sid: "Allow use of the key",
            },
          ],
          Version: "2012-10-17",
        })
      ),
      tags: {
        EventBridgeApiDestinations: "true",
      },
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsKmsKeyExample.overrideLogicalId("example");
    const awsCloudwatchEventArchiveExample = new CloudwatchEventArchive(
      this,
      "example_4",
      {
        eventSourceArn: example.arn,
        kmsKeyIdentifier: Token.asString(awsKmsKeyExample.id),
        name: "example",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCloudwatchEventArchiveExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `region` - (Optional) Region where this resource will be [managed](https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints). Defaults to the Region set in the [provider configuration](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#aws-configuration-reference).
* `name` - (Required) Name of the archive. The archive name cannot exceed 48 characters.
* `eventSourceArn` - (Required) ARN of the event bus associated with the archive. Only events from this event bus are sent to the archive.
* `description` - (Optional) Description for the archive.
* `eventPattern` - (Optional) Event pattern to use to filter events sent to the archive. By default, it attempts to archive every event received in the `eventSourceArn`.
* `kmsKeyIdentifier` - (Optional) Identifier of the AWS KMS customer managed key for EventBridge to use, if you choose to use a customer managed key to encrypt this archive. The identifier can be the key Amazon Resource Name (ARN), KeyId, key alias, or key alias ARN.
* `retentionDays` - (Optional) The maximum number of days to retain events in the new event archive. By default, it archives indefinitely.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the archive.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import an EventBridge archive using the `name`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudwatchEventArchive } from "./.gen/providers/aws/cloudwatch-event-archive";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    CloudwatchEventArchive.generateConfigForImport(
      this,
      "importedEventArchive",
      "order-archive"
    );
  }
}

```

Using `terraform import`, import an EventBridge archive using the `name`. For example:

```console
% terraform import aws_cloudwatch_event_archive.imported_event_archive order-archive
```

<!-- cache-key: cdktf-0.20.8 input-685ee4807930fb6002c60880adb1a4918452c6805561c2b994e8ce44f85a6a77 -->