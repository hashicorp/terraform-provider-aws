---
subcategory: "IAM (Identity & Access Management)"
layout: "aws"
page_title: "AWS: aws_iam_user"
description: |-
  Provides an IAM user.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_iam_user

Provides an IAM user.

~> *NOTE:* If policies are attached to the user via the [`aws_iam_policy_attachment` resource](/docs/providers/aws/r/iam_policy_attachment.html) and you are modifying the user `name` or `path`, the `forceDestroy` argument must be set to `true` and applied before attempting the operation otherwise you will encounter a `DeleteConflict` error. The [`aws_iam_user_policy_attachment` resource (recommended)](/docs/providers/aws/r/iam_user_policy_attachment.html) does not have this requirement.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamAccessKey } from "./.gen/providers/aws/iam-access-key";
import { IamUser } from "./.gen/providers/aws/iam-user";
import { IamUserPolicy } from "./.gen/providers/aws/iam-user-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const lb = new IamUser(this, "lb", {
      name: "loadbalancer",
      path: "/system/",
      tags: {
        "tag-key": "tag-value",
      },
    });
    const lbRo = new DataAwsIamPolicyDocument(this, "lb_ro", {
      statement: [
        {
          actions: ["ec2:Describe*"],
          effect: "Allow",
          resources: ["*"],
        },
      ],
    });
    const awsIamAccessKeyLb = new IamAccessKey(this, "lb_2", {
      user: lb.name,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamAccessKeyLb.overrideLogicalId("lb");
    const awsIamUserPolicyLbRo = new IamUserPolicy(this, "lb_ro_3", {
      name: "test",
      policy: Token.asString(lbRo.json),
      user: lb.name,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamUserPolicyLbRo.overrideLogicalId("lb_ro");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The user's name. The name must consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: `=,.@-_.`. User names are not distinguished by case. For example, you cannot create users named both "TESTUSER" and "testuser".
* `path` - (Optional, default "/") Path in which to create the user.
* `permissionsBoundary` - (Optional) The ARN of the policy that is used to set the permissions boundary for the user.
* `forceDestroy` - (Optional, default false) When destroying this user, destroy even if it
  has non-Terraform-managed IAM access keys, login profile or MFA devices. Without `forceDestroy`
  a user with non-Terraform-managed access keys and login profile will fail to be destroyed.
* `tags` - Key-value map of tags for the IAM user. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - The ARN assigned by AWS for this user.
* `id` - The user's name.
* `name` - The user's name.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).
* `uniqueId` - The [unique ID][1] assigned by AWS.

  [1]: https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html#GUIDs

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import IAM Users using the `name`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamUser } from "./.gen/providers/aws/iam-user";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    IamUser.generateConfigForImport(this, "lb", "loadbalancer");
  }
}

```

Using `terraform import`, import IAM Users using the `name`. For example:

```console
% terraform import aws_iam_user.lb loadbalancer
```

<!-- cache-key: cdktf-0.20.8 input-3764b72389be63601b5f731331ce123e9f977757dd5f86aa6384cb4a060eb497 -->