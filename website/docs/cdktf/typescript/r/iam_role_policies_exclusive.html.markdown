---
subcategory: "IAM (Identity & Access Management)"
layout: "aws"
page_title: "AWS: aws_iam_role_policies_exclusive"
description: |-
  Terraform resource for maintaining exclusive management of inline policies assigned to an AWS IAM (Identity & Access Management) role.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_iam_role_policies_exclusive

Terraform resource for maintaining exclusive management of inline policies assigned to an AWS IAM (Identity & Access Management) role.

!> This resource takes exclusive ownership over inline policies assigned to a role. This includes removal of inline policies which are not explicitly configured. To prevent persistent drift, ensure any `aws_iam_role_policy` resources managed alongside this resource are included in the `policyNames` argument.

~> Destruction of this resource means Terraform will no longer manage reconciliation of the configured inline policy assignments. It __will not__ delete the configured policies from the role.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamRolePoliciesExclusive } from "./.gen/providers/aws/iam-role-policies-exclusive";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new IamRolePoliciesExclusive(this, "example", {
      policyNames: [Token.asString(awsIamRolePolicyExample.name)],
      roleName: Token.asString(awsIamRoleExample.name),
    });
  }
}

```

### Disallow Inline Policies

To automatically remove any configured inline policies, set the `policyNames` argument to an empty list.

~> This will not __prevent__ inline policies from being assigned to a role via Terraform (or any other interface). This resource enables bringing inline policy assignments into a configured state, however, this reconciliation happens only when `apply` is proactively run.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamRolePoliciesExclusive } from "./.gen/providers/aws/iam-role-policies-exclusive";
interface MyConfig {
  policyNames: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new IamRolePoliciesExclusive(this, "example", {
      policyNames: config.policyNames,
      roleName: Token.asString(awsIamRoleExample.name),
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `roleName` - (Required) IAM role name.
* `policyNames` - (Required) A list of inline policy names to be assigned to the role. Policies attached to this role but not configured in this argument will be removed.

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to exclusively manage inline policy assignments using the `roleName`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamRolePoliciesExclusive } from "./.gen/providers/aws/iam-role-policies-exclusive";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    IamRolePoliciesExclusive.generateConfigForImport(this, "example", "MyRole");
  }
}

```

Using `terraform import`, import exclusive management of inline policy assignments using the `roleName`. For example:

```console
% terraform import aws_iam_role_policies_exclusive.example MyRole
```

<!-- cache-key: cdktf-0.20.8 input-799d781656d27e350f72003d25ef25fe16df7fd00d772ab82ff638fda27109c8 -->