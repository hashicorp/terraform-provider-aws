---
subcategory: "CloudFront KeyValueStore"
layout: "aws"
page_title: "AWS: aws_cloudfrontkeyvaluestore_keys_exclusive"
description: |-
  Terraform resource for maintaining exclusive management of resource key value pairs defined in an AWS CloudFront KeyValueStore.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cloudfrontkeyvaluestore_keys_exclusive

Terraform resource for maintaining exclusive management of resource key value pairs defined in an AWS CloudFront KeyValueStore.

!> This resource takes exclusive ownership over key value pairs defined in a KeyValueStore. This includes removal of key value pairs which are not explicitly configured. To prevent persistent drift, ensure any [`aws_cloudfrontkeyvaluestore_key`](./cloudfrontkeyvaluestore_key.html.markdown) resources managed alongside this resource have an equivalent `resourceKeyValuePair` argument.

~> Destruction of this resource means Terraform will no longer manage reconciliation of the configured key value pairs. It __will not__ delete the configured key value pairs from the KeyValueStore.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudfrontKeyValueStore } from "./.gen/providers/aws/cloudfront-key-value-store";
import { CloudfrontkeyvaluestoreKeysExclusive } from "./.gen/providers/aws/cloudfrontkeyvaluestore-keys-exclusive";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new CloudfrontKeyValueStore(this, "example", {
      comment: "This is an example key value store",
      name: "ExampleKeyValueStore",
    });
    const awsCloudfrontkeyvaluestoreKeysExclusiveExample =
      new CloudfrontkeyvaluestoreKeysExclusive(this, "example_1", {
        keyValueStoreArn: example.arn,
        resourceKeyValuePair: [
          {
            key: "Test Key",
            value: "Test Value",
          },
        ],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCloudfrontkeyvaluestoreKeysExclusiveExample.overrideLogicalId("example");
  }
}

```

### Disallow Key Value Pairs

To automatically remove any configured key value pairs, omit a `resourceKeyValuePair` block.

~> This will not __prevent__ key value pairs from being defined in a KeyValueStore via Terraform (or any other interface). This resource enables bringing key value pairs into a configured state, however, this reconciliation happens only when `apply` is proactively run.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudfrontkeyvaluestoreKeysExclusive } from "./.gen/providers/aws/cloudfrontkeyvaluestore-keys-exclusive";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new CloudfrontkeyvaluestoreKeysExclusive(this, "example", {
      keyValueStoreArn: Token.asString(awsCloudfrontKeyValueStoreExample.arn),
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `keyValueStoreArn` - (Required) Amazon Resource Name (ARN) of the Key Value Store.

The following arguments are optional:

* `resourceKeyValuePair` - (Optional) A list of all resource key value pairs associated with the KeyValueStore.
See [`resourceKeyValuePair`](#resource_key_value_pair) below.

### `resourceKeyValuePair`

The following arguments are required:

* `key` - (Required) Key to put.
* `value` - (Required) Value to put.

## Attribute Reference

This resource exports no additional attributes.

* `totalSizeInBytes` - Total size of the Key Value Store in bytes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import AWS CloudFront KeyValueStore Key Value Pairs using the `keyValueStoreArn`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CloudfrontkeyvaluestoreKeysExclusive } from "./.gen/providers/aws/cloudfrontkeyvaluestore-keys-exclusive";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    CloudfrontkeyvaluestoreKeysExclusive.generateConfigForImport(
      this,
      "example",
      "arn:aws:cloudfront::111111111111:key-value-store/8562g61f-caba-2845-9d99-b97diwae5d3c"
    );
  }
}

```

Using `terraform import`, import AWS CloudFront KeyValueStore Key Value Pairs using the `keyValueStoreArn`. For example:

```console
% terraform import aws_cloudfrontkeyvaluestore_keys_exclusive.example arn:aws:cloudfront::111111111111:key-value-store/8562g61f-caba-2845-9d99-b97diwae5d3c
```

<!-- cache-key: cdktf-0.20.8 input-7100f8669b34b39c8aae382b1cfd1270ccdaeaf587b413344342e3277116bb79 -->