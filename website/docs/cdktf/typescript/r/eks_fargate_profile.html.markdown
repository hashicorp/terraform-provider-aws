---
subcategory: "EKS (Elastic Kubernetes)"
layout: "aws"
page_title: "AWS: aws_eks_fargate_profile"
description: |-
  Manages an EKS Fargate Profile
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_eks_fargate_profile

Manages an EKS Fargate Profile.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EksFargateProfile } from "./.gen/providers/aws/eks-fargate-profile";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new EksFargateProfile(this, "example", {
      clusterName: Token.asString(awsEksClusterExample.name),
      fargateProfileName: "example",
      podExecutionRoleArn: Token.asString(awsIamRoleExample.arn),
      selector: [
        {
          namespace: "example",
        },
      ],
      subnetIds: Token.asList(Fn.lookupNested(awsSubnetExample, ["*", "id"])),
    });
  }
}

```

### Example IAM Role for EKS Fargate Profile

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicyAttachment } from "./.gen/providers/aws/iam-role-policy-attachment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new IamRole(this, "example", {
      assumeRolePolicy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: "sts:AssumeRole",
              Effect: "Allow",
              Principal: {
                Service: "eks-fargate-pods.amazonaws.com",
              },
            },
          ],
          Version: "2012-10-17",
        })
      ),
      name: "eks-fargate-profile-example",
    });
    new IamRolePolicyAttachment(
      this,
      "example-AmazonEKSFargatePodExecutionRolePolicy",
      {
        policyArn:
          "arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy",
        role: example.name,
      }
    );
  }
}

```

## Argument Reference

The following arguments are required:

* `clusterName` – (Required) Name of the EKS Cluster.
* `fargateProfileName` – (Required) Name of the EKS Fargate Profile.
* `podExecutionRoleArn` – (Required) Amazon Resource Name (ARN) of the IAM Role that provides permissions for the EKS Fargate Profile.
* `selector` - (Required) Configuration block(s) for selecting Kubernetes Pods to execute with this EKS Fargate Profile. Detailed below.
* `subnetIds` – (Required) Identifiers of private EC2 Subnets to associate with the EKS Fargate Profile. These subnets must have the following resource tag: `kubernetes.io/cluster/CLUSTER_NAME` (where `CLUSTER_NAME` is replaced with the name of the EKS Cluster).

The following arguments are optional:

* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### selector Configuration Block

The following arguments are required:

* `namespace` - (Required) Kubernetes namespace for selection.

The following arguments are optional:

* `labels` - (Optional) Key-value map of Kubernetes labels for selection.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name (ARN) of the EKS Fargate Profile.
* `id` - EKS Cluster name and EKS Fargate Profile name separated by a colon (`:`).
* `status` - Status of the EKS Fargate Profile.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `10m`)
* `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import EKS Fargate Profiles using the `clusterName` and `fargateProfileName` separated by a colon (`:`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { EksFargateProfile } from "./.gen/providers/aws/eks-fargate-profile";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    EksFargateProfile.generateConfigForImport(
      this,
      "myFargateProfile",
      "my_cluster:my_fargate_profile"
    );
  }
}

```

Using `terraform import`, import EKS Fargate Profiles using the `clusterName` and `fargateProfileName` separated by a colon (`:`). For example:

```console
% terraform import aws_eks_fargate_profile.my_fargate_profile my_cluster:my_fargate_profile
```

<!-- cache-key: cdktf-0.20.8 input-ee13038385940c2fb85c18b1d27b8748e32f0bc1846a8217553b816df651bfa2 -->