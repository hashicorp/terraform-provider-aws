---
subcategory: "VPC (Virtual Private Cloud)"
layout: "aws"
page_title: "AWS: aws_nat_gateway"
description: |-
  Provides a resource to create a VPC NAT Gateway.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_nat_gateway

Provides a resource to create a VPC NAT Gateway.

## Example Usage

### Public NAT

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NatGateway } from "./.gen/providers/aws/nat-gateway";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new NatGateway(this, "example", {
      allocationId: Token.asString(awsEipExample.id),
      dependsOn: [awsInternetGatewayExample],
      subnetId: Token.asString(awsSubnetExample.id),
      tags: {
        Name: "gw NAT",
      },
    });
  }
}

```

### Public NAT with Secondary Private IP Addresses

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NatGateway } from "./.gen/providers/aws/nat-gateway";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new NatGateway(this, "example", {
      allocationId: Token.asString(awsEipExample.id),
      secondaryAllocationIds: [secondary.id],
      secondaryPrivateIpAddresses: ["10.0.1.5"],
      subnetId: Token.asString(awsSubnetExample.id),
    });
  }
}

```

### Private NAT

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NatGateway } from "./.gen/providers/aws/nat-gateway";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new NatGateway(this, "example", {
      connectivityType: "private",
      subnetId: Token.asString(awsSubnetExample.id),
    });
  }
}

```

### Private NAT with Secondary Private IP Addresses

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NatGateway } from "./.gen/providers/aws/nat-gateway";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new NatGateway(this, "example", {
      connectivityType: "private",
      secondaryPrivateIpAddressCount: 7,
      subnetId: Token.asString(awsSubnetExample.id),
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `allocationId` - (Optional) The Allocation ID of the Elastic IP address for the NAT Gateway. Required for `connectivityType` of `public`.
* `connectivityType` - (Optional) Connectivity type for the NAT Gateway. Valid values are `private` and `public`. Defaults to `public`.
* `privateIp` - (Optional) The private IPv4 address to assign to the NAT Gateway. If you don't provide an address, a private IPv4 address will be automatically assigned.
* `subnetId` - (Required) The Subnet ID of the subnet in which to place the NAT Gateway.
* `secondaryAllocationIds` - (Optional) A list of secondary allocation EIP IDs for this NAT Gateway.
* `secondaryPrivateIpAddressCount` - (Optional) [Private NAT Gateway only] The number of secondary private IPv4 addresses you want to assign to the NAT Gateway.
* `secondaryPrivateIpAddresses` - (Optional) A list of secondary private IPv4 addresses to assign to the NAT Gateway.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `associationId` - The association ID of the Elastic IP address that's associated with the NAT Gateway. Only available when `connectivityType` is `public`.
* `id` - The ID of the NAT Gateway.
* `networkInterfaceId` - The ID of the network interface associated with the NAT Gateway.
* `publicIp` - The Elastic IP address associated with the NAT Gateway.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `10m`)
- `update` - (Default `10m`)
- `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import NAT Gateways using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NatGateway } from "./.gen/providers/aws/nat-gateway";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    NatGateway.generateConfigForImport(
      this,
      "privateGw",
      "nat-05dba92075d71c408"
    );
  }
}

```

Using `terraform import`, import NAT Gateways using the `id`. For example:

```console
% terraform import aws_nat_gateway.private_gw nat-05dba92075d71c408
```

<!-- cache-key: cdktf-0.20.8 input-6e34b90b4993bab91f851a578e7ddb84ebd6aef6d8220655a1d5b45186bd1edf -->