---
subcategory: "RAM (Resource Access Manager)"
layout: "aws"
page_title: "AWS: aws_ram_resource_share_accepter"
description: |-
  Manages accepting a Resource Access Manager (RAM) Resource Share invitation.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ram_resource_share_accepter

Manage accepting a Resource Access Manager (RAM) Resource Share invitation. From a _receiver_ AWS account, accept an invitation to share resources that were shared by a _sender_ AWS account. To create a resource share in the _sender_, see the [`aws_ram_resource_share` resource](/docs/providers/aws/r/ram_resource_share.html).

~> **Note:** If both AWS accounts are in the same Organization and [RAM Sharing with AWS Organizations is enabled](https://docs.aws.amazon.com/ram/latest/userguide/getting-started-sharing.html#getting-started-sharing-orgs), this resource is not necessary as RAM Resource Share invitations are not used.

## Example Usage

This configuration provides an example of using multiple Terraform AWS providers to configure two different AWS accounts. In the _sender_ account, the configuration creates a `aws_ram_resource_share` and uses a data source in the _receiver_ account to create a `aws_ram_principal_association` resource with the _receiver's_ account ID. In the _receiver_ account, the configuration accepts the invitation to share resources with the `aws_ram_resource_share_accepter`.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { AwsProvider } from "./.gen/providers/aws/provider";
import { RamPrincipalAssociation } from "./.gen/providers/aws/ram-principal-association";
import { RamResourceShare } from "./.gen/providers/aws/ram-resource-share";
import { RamResourceShareAccepter } from "./.gen/providers/aws/ram-resource-share-accepter";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      profile: "profile2",
    });
    const alternate = new AwsProvider(this, "aws_1", {
      alias: "alternate",
      profile: "profile1",
    });
    const senderShare = new RamResourceShare(this, "sender_share", {
      allowExternalPrincipals: true,
      name: "tf-test-resource-share",
      provider: alternate,
      tags: {
        Name: "tf-test-resource-share",
      },
    });
    const receiver = new DataAwsCallerIdentity(this, "receiver", {});
    const senderInvite = new RamPrincipalAssociation(this, "sender_invite", {
      principal: Token.asString(receiver.accountId),
      provider: alternate,
      resourceShareArn: senderShare.arn,
    });
    new RamResourceShareAccepter(this, "receiver_accept", {
      shareArn: senderInvite.resourceShareArn,
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `shareArn` - (Required) The ARN of the resource share.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `invitationArn` - The ARN of the resource share invitation.
* `shareId` - The ID of the resource share as displayed in the console.
* `status` - The status of the resource share (ACTIVE, PENDING, FAILED, DELETING, DELETED).
* `receiverAccountId` - The account ID of the receiver account which accepts the invitation.
* `senderAccountId` - The account ID of the sender account which submits the invitation.
* `shareName` - The name of the resource share.
* `resources` - A list of the resource ARNs shared via the resource share.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import resource share accepters using the resource share ARN. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { RamResourceShareAccepter } from "./.gen/providers/aws/ram-resource-share-accepter";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    RamResourceShareAccepter.generateConfigForImport(
      this,
      "example",
      "arn:aws:ram:us-east-1:123456789012:resource-share/c4b56393-e8d9-89d9-6dc9-883752de4767"
    );
  }
}

```

Using `terraform import`, import resource share accepters using the resource share ARN. For example:

```console
% terraform import aws_ram_resource_share_accepter.example arn:aws:ram:us-east-1:123456789012:resource-share/c4b56393-e8d9-89d9-6dc9-883752de4767
```

<!-- cache-key: cdktf-0.20.8 input-20035f07d897cc355e9d9455de1abcd873b5f6ec8141f34f4260f32e299d71a7 -->