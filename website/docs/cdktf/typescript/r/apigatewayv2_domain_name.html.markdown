---
subcategory: "API Gateway V2"
layout: "aws"
page_title: "AWS: aws_apigatewayv2_domain_name"
description: |-
  Manages an Amazon API Gateway Version 2 domain name.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_apigatewayv2_domain_name

Manages an Amazon API Gateway Version 2 domain name.
More information can be found in the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html).

-> **Note:** This resource establishes ownership of and the TLS settings for
a particular domain name. An API stage can be associated with the domain name using the `aws_apigatewayv2_api_mapping` resource.

## Example Usage

### Basic

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Apigatewayv2DomainName } from "./.gen/providers/aws/apigatewayv2-domain-name";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new Apigatewayv2DomainName(this, "example", {
      domainName: "ws-api.example.com",
      domainNameConfiguration: {
        certificateArn: Token.asString(awsAcmCertificateExample.arn),
        endpointType: "REGIONAL",
        securityPolicy: "TLS_1_2",
      },
    });
  }
}

```

### Associated Route 53 Resource Record

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Apigatewayv2DomainName } from "./.gen/providers/aws/apigatewayv2-domain-name";
import { Route53Record } from "./.gen/providers/aws/route53-record";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new Apigatewayv2DomainName(this, "example", {
      domainName: "http-api.example.com",
      domainNameConfiguration: {
        certificateArn: Token.asString(awsAcmCertificateExample.arn),
        endpointType: "REGIONAL",
        securityPolicy: "TLS_1_2",
      },
    });
    const awsRoute53RecordExample = new Route53Record(this, "example_1", {
      alias: {
        evaluateTargetHealth: false,
        name: Token.asString(
          Fn.lookupNested(example.domainNameConfiguration, [
            "0",
            "target_domain_name",
          ])
        ),
        zoneId: Token.asString(
          Fn.lookupNested(example.domainNameConfiguration, [
            "0",
            "hosted_zone_id",
          ])
        ),
      },
      name: example.domainName,
      type: "A",
      zoneId: Token.asString(awsRoute53ZoneExample.zoneId),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRoute53RecordExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `domainName` - (Required) Domain name. Must be between 1 and 512 characters in length.
* `domainNameConfiguration` - (Required) Domain name configuration. See below.
* `mutualTlsAuthentication` - (Optional) Mutual TLS authentication configuration for the domain name.
* `tags` - (Optional) Map of tags to assign to the domain name. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### `domainNameConfiguration`

* `certificateArn` - (Required) ARN of an AWS-managed certificate that will be used by the endpoint for the domain name. AWS Certificate Manager is the only supported source. Use the [`aws_acm_certificate`](/docs/providers/aws/r/acm_certificate.html) resource to configure an ACM certificate.
* `endpointType` - (Required) Endpoint type. Valid values: `REGIONAL`.
* `hostedZoneId` - (Computed) Amazon Route 53 Hosted Zone ID of the endpoint.
* `ownershipVerificationCertificateArn` - (Optional) ARN of the AWS-issued certificate used to validate custom domain ownership (when `certificateArn` is issued via an ACM Private CA or `mutualTlsAuthentication` is configured with an ACM-imported certificate.)
* `securityPolicy` - (Required) Transport Layer Security (TLS) version of the [security policy](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-custom-domain-tls-version.html) for the domain name. Valid values: `TLS_1_2`.
* `targetDomainName` - (Computed) Target domain name.

### `mutualTlsAuthentication`

* `truststoreUri` - (Required) Amazon S3 URL that specifies the truststore for mutual TLS authentication, for example, `s3://bucket-name/key-name`. The truststore can contain certificates from public or private certificate authorities. To update the truststore, upload a new version to S3, and then update your custom domain name to use the new version.
* `truststoreVersion` - (Optional) Version of the S3 object that contains the truststore. To specify a version, you must have versioning enabled for the S3 bucket.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `apiMappingSelectionExpression` - [API mapping selection expression](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api-selection-expressions.html#apigateway-websocket-api-mapping-selection-expressions) for the domain name.
* `arn` - ARN of the domain name.
* `id` - Domain name identifier.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `10m`)
- `update` - (Default `60m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_apigatewayv2_domain_name` using the domain name. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Apigatewayv2DomainName } from "./.gen/providers/aws/apigatewayv2-domain-name";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    Apigatewayv2DomainName.generateConfigForImport(
      this,
      "example",
      "ws-api.example.com"
    );
  }
}

```

Using `terraform import`, import `aws_apigatewayv2_domain_name` using the domain name. For example:

```console
% terraform import aws_apigatewayv2_domain_name.example ws-api.example.com
```

<!-- cache-key: cdktf-0.20.8 input-590fddf6e18ec896623edea239e232e92d9d62cdcbd1d648d652e4699c95dd9a -->