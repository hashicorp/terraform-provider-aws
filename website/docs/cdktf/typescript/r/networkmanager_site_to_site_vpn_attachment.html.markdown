---
subcategory: "Network Manager"
layout: "aws"
page_title: "AWS: aws_networkmanager_site_to_site_vpn_attachment"
description: |-
  Terraform resource for managing an AWS Network Manager SiteToSiteAttachment.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_networkmanager_site_to_site_vpn_attachment

Terraform resource for managing an AWS Network Manager SiteToSiteAttachment.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NetworkmanagerSiteToSiteVpnAttachment } from "./.gen/providers/aws/networkmanager-site-to-site-vpn-attachment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new NetworkmanagerSiteToSiteVpnAttachment(this, "example", {
      coreNetworkId: Token.asString(awsccNetworkmanagerCoreNetworkExample.id),
      vpnConnectionArn: Token.asString(awsVpnConnectionExample.arn),
    });
  }
}

```

### Full Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CustomerGateway } from "./.gen/providers/aws/customer-gateway";
import { DataAwsNetworkmanagerCoreNetworkPolicyDocument } from "./.gen/providers/aws/data-aws-networkmanager-core-network-policy-document";
import { NetworkmanagerAttachmentAccepter } from "./.gen/providers/aws/networkmanager-attachment-accepter";
import { NetworkmanagerGlobalNetwork } from "./.gen/providers/aws/networkmanager-global-network";
import { NetworkmanagerSiteToSiteVpnAttachment } from "./.gen/providers/aws/networkmanager-site-to-site-vpn-attachment";
import { VpnConnection } from "./.gen/providers/aws/vpn-connection";
import { NetworkmanagerCoreNetwork } from "./.gen/providers/awscc/networkmanager-core-network";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    /*The following providers are missing schema information and might need manual adjustments to synthesize correctly: awscc.
    For a more precise conversion please use the --provider flag in convert.*/
    const test = new CustomerGateway(this, "test", {
      bgpAsn: Token.asString(65000),
      ipAddress: "172.0.0.1",
      type: "ipsec.1",
    });
    const awsNetworkmanagerGlobalNetworkTest = new NetworkmanagerGlobalNetwork(
      this,
      "test_1",
      {
        tags: {
          Name: "test",
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNetworkmanagerGlobalNetworkTest.overrideLogicalId("test");
    const awsVpnConnectionTest = new VpnConnection(this, "test_2", {
      customerGatewayId: test.id,
      tags: {
        Name: "test",
      },
      type: "ipsec.1",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsVpnConnectionTest.overrideLogicalId("test");
    const dataAwsNetworkmanagerCoreNetworkPolicyDocumentTest =
      new DataAwsNetworkmanagerCoreNetworkPolicyDocument(this, "test_3", {
        attachmentPolicies: [
          {
            action: {
              associationMethod: "constant",
              segment: "shared",
            },
            conditionLogic: "or",
            conditions: [
              {
                key: "segment",
                operator: "equals",
                type: "tag-value",
                value: "shared",
              },
            ],
            ruleNumber: 1,
          },
        ],
        coreNetworkConfiguration: [
          {
            asnRanges: ["64512-64555"],
            edgeLocations: [
              {
                asn: Token.asString(64512),
                location: Token.asString(current.name),
              },
            ],
            vpnEcmpSupport: false,
          },
        ],
        segmentActions: [
          {
            action: "share",
            mode: "attachment-route",
            segment: "shared",
            shareWith: ["*"],
          },
        ],
        segments: [
          {
            description: "SegmentForSharedServices",
            name: "shared",
            requireAttachmentAcceptance: true,
          },
        ],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsNetworkmanagerCoreNetworkPolicyDocumentTest.overrideLogicalId(
      "test"
    );
    const awsccNetworkmanagerCoreNetworkTest = new NetworkmanagerCoreNetwork(
      this,
      "test_4",
      {
        global_network_id: awsNetworkmanagerGlobalNetworkTest.id,
        policy_document: Fn.jsonencode(
          Fn.jsondecode(
            Token.asString(
              dataAwsNetworkmanagerCoreNetworkPolicyDocumentTest.json
            )
          )
        ),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsccNetworkmanagerCoreNetworkTest.overrideLogicalId("test");
    const awsNetworkmanagerSiteToSiteVpnAttachmentTest =
      new NetworkmanagerSiteToSiteVpnAttachment(this, "test_5", {
        coreNetworkId: Token.asString(awsccNetworkmanagerCoreNetworkTest.id),
        tags: {
          segment: "shared",
        },
        vpnConnectionArn: Token.asString(awsVpnConnectionTest.arn),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNetworkmanagerSiteToSiteVpnAttachmentTest.overrideLogicalId("test");
    const awsNetworkmanagerAttachmentAccepterTest =
      new NetworkmanagerAttachmentAccepter(this, "test_6", {
        attachmentId: Token.asString(
          awsNetworkmanagerSiteToSiteVpnAttachmentTest.id
        ),
        attachmentType: Token.asString(
          awsNetworkmanagerSiteToSiteVpnAttachmentTest.attachmentType
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNetworkmanagerAttachmentAccepterTest.overrideLogicalId("test");
  }
}

```

## Argument Reference

The following arguments are required:

- `coreNetworkId` - (Required) The ID of a core network for the VPN attachment.
- `vpnConnectionArn` - (Required) The ARN of the site-to-site VPN connection.

The following arguments are optional:

- `tags` - (Optional) Key-value tags for the attachment. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

- `arn` - The ARN of the attachment.
- `attachmentPolicyRuleNumber` - The policy rule number associated with the attachment.
- `attachmentType` - The type of attachment.
- `coreNetworkArn` - The ARN of a core network.
- `coreNetworkId` - The ID of a core network
- `edgeLocation` - The Region where the edge is located.
- `id` - The ID of the attachment.
- `ownerAccountId` - The ID of the attachment account owner.
- `resourceArn` - The attachment resource ARN.
- `segmentName` - The name of the segment attachment.
- `state` - The state of the attachment.
- `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_networkmanager_site_to_site_vpn_attachment` using the attachment ID. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NetworkmanagerSiteToSiteVpnAttachment } from "./.gen/providers/aws/networkmanager-site-to-site-vpn-attachment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    NetworkmanagerSiteToSiteVpnAttachment.generateConfigForImport(
      this,
      "example",
      "attachment-0f8fa60d2238d1bd8"
    );
  }
}

```

Using `terraform import`, import `aws_networkmanager_site_to_site_vpn_attachment` using the attachment ID. For example:

```console
% terraform import aws_networkmanager_site_to_site_vpn_attachment.example attachment-0f8fa60d2238d1bd8
```

<!-- cache-key: cdktf-0.20.8 input-e2c1657a1e8faf479a1e17a640451438473d4f57d01efa086cfe70b6d3e5057f -->