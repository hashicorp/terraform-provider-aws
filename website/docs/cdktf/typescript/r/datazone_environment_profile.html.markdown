---
subcategory: "DataZone"
layout: "aws"
page_title: "AWS: aws_datazone_environment_profile"
description: |-
  Terraform resource for managing an AWS DataZone Environment Profile.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_datazone_environment_profile

Terraform resource for managing an AWS DataZone Environment Profile.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { DataAwsDatazoneEnvironmentBlueprint } from "./.gen/providers/aws/data-aws-datazone-environment-blueprint";
import { DataAwsRegion } from "./.gen/providers/aws/data-aws-region";
import { DatazoneDomain } from "./.gen/providers/aws/datazone-domain";
import { DatazoneEnvironmentBlueprintConfiguration } from "./.gen/providers/aws/datazone-environment-blueprint-configuration";
import { DatazoneEnvironmentProfile } from "./.gen/providers/aws/datazone-environment-profile";
import { DatazoneProject } from "./.gen/providers/aws/datazone-project";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { SecurityGroup } from "./.gen/providers/aws/security-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const domainExecutionRole = new IamRole(this, "domain_execution_role", {
      assumeRolePolicy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: ["sts:AssumeRole", "sts:TagSession"],
              Effect: "Allow",
              Principal: {
                Service: "datazone.amazonaws.com",
              },
            },
            {
              Action: ["sts:AssumeRole", "sts:TagSession"],
              Effect: "Allow",
              Principal: {
                Service: "cloudformation.amazonaws.com",
              },
            },
          ],
          Version: "2012-10-17",
        })
      ),
      inlinePolicy: [
        {
          name: "example-name",
          policy: Token.asString(
            Fn.jsonencode({
              Statement: [
                {
                  Action: ["datazone:*", "ram:*", "sso:*", "kms:*"],
                  Effect: "Allow",
                  Resource: "*",
                },
              ],
              Version: "2012-10-17",
            })
          ),
        },
      ],
      name: "example-name",
    });
    new SecurityGroup(this, "test", {
      name: "example-name",
    });
    const dataAwsCallerIdentityTest = new DataAwsCallerIdentity(
      this,
      "test_2",
      {}
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsCallerIdentityTest.overrideLogicalId("test");
    const dataAwsRegionTest = new DataAwsRegion(this, "test_3", {});
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsRegionTest.overrideLogicalId("test");
    const awsDatazoneDomainTest = new DatazoneDomain(this, "test_4", {
      domainExecutionRole: domainExecutionRole.arn,
      name: "example-name",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDatazoneDomainTest.overrideLogicalId("test");
    const awsDatazoneProjectTest = new DatazoneProject(this, "test_5", {
      description: "desc",
      domainIdentifier: Token.asString(awsDatazoneDomainTest.id),
      glossaryTerms: ["2N8w6XJCwZf"],
      name: "example-name",
      skipDeletionCheck: true,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDatazoneProjectTest.overrideLogicalId("test");
    const dataAwsDatazoneEnvironmentBlueprintTest =
      new DataAwsDatazoneEnvironmentBlueprint(this, "test_6", {
        domainId: Token.asString(awsDatazoneDomainTest.id),
        managed: true,
        name: "DefaultDataLake",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsDatazoneEnvironmentBlueprintTest.overrideLogicalId("test");
    const awsDatazoneEnvironmentBlueprintConfigurationTest =
      new DatazoneEnvironmentBlueprintConfiguration(this, "test_7", {
        domainId: Token.asString(awsDatazoneDomainTest.id),
        enabledRegions: [Token.asString(dataAwsRegionTest.name)],
        environmentBlueprintId: Token.asString(
          dataAwsDatazoneEnvironmentBlueprintTest.id
        ),
        provisioningRoleArn: domainExecutionRole.arn,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDatazoneEnvironmentBlueprintConfigurationTest.overrideLogicalId("test");
    const awsDatazoneEnvironmentProfileTest = new DatazoneEnvironmentProfile(
      this,
      "test_8",
      {
        awsAccountId: Token.asString(dataAwsCallerIdentityTest.accountId),
        awsAccountRegion: Token.asString(dataAwsRegionTest.name),
        description: "description",
        domainIdentifier: Token.asString(awsDatazoneDomainTest.id),
        environmentBlueprintIdentifier: Token.asString(
          dataAwsDatazoneEnvironmentBlueprintTest.id
        ),
        name: "example-name",
        projectIdentifier: Token.asString(awsDatazoneProjectTest.id),
        userParameters: [
          {
            name: "consumerGlueDbName",
            value: "value",
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDatazoneEnvironmentProfileTest.overrideLogicalId("test");
  }
}

```

## Argument Reference

The following arguments are required:

* `awsAccountId` - (Required) -  Id of the AWS account being used.
* `awsAccountRegion` - (Required) -  Desired region for environment profile.
* `domainIdentifier` - (Required) -  Domain Identifier for environment profile.
* `name` - (Required) -  Name of the environment profile.
* `environmentBlueprintIdentifier` - (Required) -  ID of the blueprint which the environment will be created with.
* `projectIdentifier` - (Required) -  Project identifier for environment profile.

The following arguments are optional:

* `description` - (Optional) Description of environment profile.
* `userParameters` - (Optional) -  Array of user parameters of the environment profile with the following attributes:
    * `name` - (Required) -  Name of the environment profile parameter.
    * `value` - (Required) -  Value of the environment profile parameter.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `createdAt` - Creation time of environment profile.
* `createdBy` - Creator of environment profile.
* `id` - ID of environment profile.
* `updatedAt` - Time of last update to environment profile.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import DataZone Environment Profile using a comma-delimited string combining `id` and `domainIdentifier`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DatazoneEnvironmentProfile } from "./.gen/providers/aws/datazone-environment-profile";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DatazoneEnvironmentProfile.generateConfigForImport(
      this,
      "example",
      "environment_profile-id-12345678,domain-id-12345678"
    );
  }
}

```

Using `terraform import`, import DataZone Environment Profile using a comma-delimited string combining `id` and `domainIdentifier`. For example:

```console
% terraform import aws_datazone_environment_profile.example environment_profile-id-12345678,domain-id-12345678
```

<!-- cache-key: cdktf-0.20.1 input-b22b2c3dc82f15715181d2eb58f14799fba60665db5e68a9fc727b242fc3031f -->