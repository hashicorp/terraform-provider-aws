---
subcategory: "ACM PCA (Certificate Manager Private Certificate Authority)"
layout: "aws"
page_title: "AWS: aws_acmpca_certificate_authority_certificate"
description: |-
  Associates a certificate with an AWS Certificate Manager Private Certificate Authority
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_acmpca_certificate_authority_certificate

Associates a certificate with an AWS Certificate Manager Private Certificate Authority (ACM PCA Certificate Authority). An ACM PCA Certificate Authority is unable to issue certificates until it has a certificate associated with it. A root level ACM PCA Certificate Authority is able to self-sign its own root certificate.

## Example Usage

### Self-Signed Root Certificate Authority Certificate

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AcmpcaCertificate } from "./.gen/providers/aws/acmpca-certificate";
import { AcmpcaCertificateAuthority } from "./.gen/providers/aws/acmpca-certificate-authority";
import { AcmpcaCertificateAuthorityCertificate } from "./.gen/providers/aws/acmpca-certificate-authority-certificate";
import { DataAwsPartition } from "./.gen/providers/aws/data-aws-partition";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new AcmpcaCertificateAuthority(this, "example", {
      certificateAuthorityConfiguration: {
        keyAlgorithm: "RSA_4096",
        signingAlgorithm: "SHA512WITHRSA",
        subject: {
          commonName: "example.com",
        },
      },
      type: "ROOT",
    });
    const current = new DataAwsPartition(this, "current", {});
    const awsAcmpcaCertificateExample = new AcmpcaCertificate(
      this,
      "example_2",
      {
        certificateAuthorityArn: example.arn,
        certificateSigningRequest: example.certificateSigningRequest,
        signingAlgorithm: "SHA512WITHRSA",
        templateArn:
          "arn:${" +
          current.partition +
          "}:acm-pca:::template/RootCACertificate/V1",
        validity: {
          type: "YEARS",
          value: Token.asString(1),
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAcmpcaCertificateExample.overrideLogicalId("example");
    const awsAcmpcaCertificateAuthorityCertificateExample =
      new AcmpcaCertificateAuthorityCertificate(this, "example_3", {
        certificate: Token.asString(awsAcmpcaCertificateExample.certificate),
        certificateAuthorityArn: example.arn,
        certificateChain: Token.asString(
          awsAcmpcaCertificateExample.certificateChain
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAcmpcaCertificateAuthorityCertificateExample.overrideLogicalId(
      "example"
    );
  }
}

```

### Certificate for Subordinate Certificate Authority

Note that the certificate for the subordinate certificate authority must be issued by the root certificate authority using a signing request from the subordinate certificate authority.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AcmpcaCertificate } from "./.gen/providers/aws/acmpca-certificate";
import { AcmpcaCertificateAuthority } from "./.gen/providers/aws/acmpca-certificate-authority";
import { AcmpcaCertificateAuthorityCertificate } from "./.gen/providers/aws/acmpca-certificate-authority-certificate";
import { DataAwsPartition } from "./.gen/providers/aws/data-aws-partition";
interface MyConfig {
  certificateAuthorityArn: any;
  certificateSigningRequest: any;
  signingAlgorithm: any;
  validity: any;
  certificateAuthorityConfiguration: any;
  certificate: any;
  certificateAuthorityArn1: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new AcmpcaCertificate(this, "root", {
      certificateAuthorityArn: config.certificateAuthorityArn,
      certificateSigningRequest: config.certificateSigningRequest,
      signingAlgorithm: config.signingAlgorithm,
      validity: config.validity,
    });
    const awsAcmpcaCertificateAuthorityRoot = new AcmpcaCertificateAuthority(
      this,
      "root_1",
      {
        certificateAuthorityConfiguration:
          config.certificateAuthorityConfiguration,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAcmpcaCertificateAuthorityRoot.overrideLogicalId("root");
    const subordinate = new AcmpcaCertificateAuthority(this, "subordinate", {
      certificateAuthorityConfiguration: {
        keyAlgorithm: "RSA_2048",
        signingAlgorithm: "SHA512WITHRSA",
        subject: {
          commonName: "sub.example.com",
        },
      },
      type: "SUBORDINATE",
    });
    const awsAcmpcaCertificateAuthorityCertificateRoot =
      new AcmpcaCertificateAuthorityCertificate(this, "root_3", {
        certificate: config.certificate,
        certificateAuthorityArn: config.certificateAuthorityArn1,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAcmpcaCertificateAuthorityCertificateRoot.overrideLogicalId("root");
    const current = new DataAwsPartition(this, "current", {});
    const awsAcmpcaCertificateSubordinate = new AcmpcaCertificate(
      this,
      "subordinate_5",
      {
        certificateAuthorityArn: Token.asString(
          awsAcmpcaCertificateAuthorityRoot.arn
        ),
        certificateSigningRequest: subordinate.certificateSigningRequest,
        signingAlgorithm: "SHA512WITHRSA",
        templateArn:
          "arn:${" +
          current.partition +
          "}:acm-pca:::template/SubordinateCACertificate_PathLen0/V1",
        validity: {
          type: "YEARS",
          value: Token.asString(1),
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAcmpcaCertificateSubordinate.overrideLogicalId("subordinate");
    const awsAcmpcaCertificateAuthorityCertificateSubordinate =
      new AcmpcaCertificateAuthorityCertificate(this, "subordinate_6", {
        certificate: Token.asString(
          awsAcmpcaCertificateSubordinate.certificate
        ),
        certificateAuthorityArn: subordinate.arn,
        certificateChain: Token.asString(
          awsAcmpcaCertificateSubordinate.certificateChain
        ),
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAcmpcaCertificateAuthorityCertificateSubordinate.overrideLogicalId(
      "subordinate"
    );
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `certificate` - (Required) PEM-encoded certificate for the Certificate Authority.
* `certificateAuthorityArn` - (Required) ARN of the Certificate Authority.
* `certificateChain` - (Optional) PEM-encoded certificate chain that includes any intermediate certificates and chains up to root CA. Required for subordinate Certificate Authorities. Not allowed for root Certificate Authorities.

## Attribute Reference

This resource exports no additional attributes.

<!-- cache-key: cdktf-0.20.8 input-b19572b64df23c019471d3a64aa69d43a5eea5523748112a7c2283e9d3f7b724 -->