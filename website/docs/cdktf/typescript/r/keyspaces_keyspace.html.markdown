---
subcategory: "Keyspaces (for Apache Cassandra)"
layout: "aws"
page_title: "AWS: aws_keyspaces_keyspace"
description: |-
  Provides a Keyspaces Keyspace.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_keyspaces_keyspace

Provides a Keyspaces Keyspace.

More information about keyspaces can be found in the [Keyspaces User Guide](https://docs.aws.amazon.com/keyspaces/latest/devguide/what-is-keyspaces.html).

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { KeyspacesKeyspace } from "./.gen/providers/aws/keyspaces-keyspace";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new KeyspacesKeyspace(this, "example", {
      name: "my_keyspace",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `name` - (Required, Forces new resource) The name of the keyspace to be created.

The following arguments are optional:

* `replicationSpecification` - (Optional) The replication specification of the keyspace.
    * `regionList` - (Optional) Replication regions. If `replicationStrategy` is `MULTI_REGION`, `regionList` requires the current Region and at least one additional AWS Region where the keyspace is going to be replicated in.
    * `replicationStrategy` - (Required) Replication strategy. Valid values: `SINGLE_REGION` and `MULTI_REGION`.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The name of the keyspace.
* `arn` - The ARN of the keyspace.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `1m`)
- `delete` - (Default `1m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import a keyspace using the `name`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { KeyspacesKeyspace } from "./.gen/providers/aws/keyspaces-keyspace";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    KeyspacesKeyspace.generateConfigForImport(this, "example", "my_keyspace");
  }
}

```

Using `terraform import`, import a keyspace using the `name`. For example:

```console
% terraform import aws_keyspaces_keyspace.example my_keyspace
```

<!-- cache-key: cdktf-0.20.8 input-942a0ad45b13d481c598f1c37b3a8d0a11a9970cd14134de8a9095e677ec6acf -->