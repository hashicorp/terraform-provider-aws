---
subcategory: "Redshift"
layout: "aws"
page_title: "AWS: aws_redshift_integration"
description: |-
  Terraform resource for managing a DynamoDB zero-ETL integration or S3 event integration with Amazon Redshift.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_redshift_integration

Terraform resource for managing a DynamoDB zero-ETL integration or S3 event integration with Amazon Redshift. You can refer to the [User Guide](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/RedshiftforDynamoDB-zero-etl.html) for a DynamoDB zero-ETL integration or the [User Guide](https://docs.aws.amazon.com/redshift/latest/dg/loading-data-copy-job.html) for a S3 event integration.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DynamodbTable } from "./.gen/providers/aws/dynamodb-table";
import { RedshiftIntegration } from "./.gen/providers/aws/redshift-integration";
import { RedshiftserverlessNamespace } from "./.gen/providers/aws/redshiftserverless-namespace";
import { RedshiftserverlessWorkgroup } from "./.gen/providers/aws/redshiftserverless-workgroup";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new DynamodbTable(this, "example", {
      attribute: [
        {
          name: "example",
          type: "S",
        },
      ],
      hashKey: "example",
      name: "dynamodb-table-example",
      pointInTimeRecovery: {
        enabled: true,
      },
      readCapacity: 1,
      writeCapacity: 1,
    });
    const awsRedshiftserverlessNamespaceExample =
      new RedshiftserverlessNamespace(this, "example_1", {
        namespaceName: "redshift-example",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRedshiftserverlessNamespaceExample.overrideLogicalId("example");
    const awsRedshiftserverlessWorkgroupExample =
      new RedshiftserverlessWorkgroup(this, "example_2", {
        baseCapacity: 8,
        configParameter: [
          {
            parameterKey: "enable_case_sensitive_identifier",
            parameterValue: "true",
          },
        ],
        namespaceName: Token.asString(
          awsRedshiftserverlessNamespaceExample.namespaceName
        ),
        publiclyAccessible: false,
        subnetIds: [example1.id, example2.id, example3.id],
        workgroupName: "example-workgroup",
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRedshiftserverlessWorkgroupExample.overrideLogicalId("example");
    const awsRedshiftIntegrationExample = new RedshiftIntegration(
      this,
      "example_3",
      {
        integrationName: "example",
        sourceArn: example.arn,
        targetArn: Token.asString(awsRedshiftserverlessNamespaceExample.arn),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRedshiftIntegrationExample.overrideLogicalId("example");
  }
}

```

### Use own KMS key

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { KmsKey } from "./.gen/providers/aws/kms-key";
import { KmsKeyPolicy } from "./.gen/providers/aws/kms-key-policy";
import { RedshiftIntegration } from "./.gen/providers/aws/redshift-integration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new KmsKey(this, "example", {
      deletionWindowInDays: 10,
      description: "example",
    });
    const awsRedshiftIntegrationExample = new RedshiftIntegration(
      this,
      "example_1",
      {
        additionalEncryptionContext: {
          example: "test",
        },
        integrationName: "example",
        kmsKeyId: example.arn,
        sourceArn: Token.asString(awsDynamodbTableExample.arn),
        targetArn: Token.asString(awsRedshiftserverlessNamespaceExample.arn),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRedshiftIntegrationExample.overrideLogicalId("example");
    const current = new DataAwsCallerIdentity(this, "current", {});
    const awsKmsKeyPolicyExample = new KmsKeyPolicy(this, "example_3", {
      keyId: example.id,
      policy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: "kms:*",
              Effect: "Allow",
              Principal: {
                AWS: "arn:aws:iam::${" + current.accountId + "}:root",
              },
              Resource: "*",
            },
            {
              Action: ["kms:Decrypt", "kms:CreateGrant"],
              Condition: {
                ArnEquals: {
                  "aws:SourceArn":
                    "arn:aws:redshift:*:${" +
                    current.accountId +
                    "}:integration:*",
                },
                StringEquals: {
                  "aws:SourceAccount": current.accountId,
                },
              },
              Effect: "Allow",
              Principal: {
                Service: "redshift.amazonaws.com",
              },
              Resource: "*",
            },
          ],
          Version: "2008-10-17",
        })
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsKmsKeyPolicyExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

For more detailed documentation about each argument, refer to the [AWS official documentation](https://docs.aws.amazon.com/cli/latest/reference/redshift/create-integration.html).

The following arguments are required:

* `integrationName` - (Required) Name of the integration.
* `sourceArn` - (Required, Forces new resources) ARN of the database to use as the source for replication. You can specify a DynamoDB table or an S3 bucket.
* `targetArn` - (Required, Forces new resources) ARN of the Redshift data warehouse to use as the target for replication.

The following arguments are optional:

* `additionalEncryptionContext` - (Optional, Forces new resources) Set of non-secret keyâ€“value pairs that contains additional contextual information about the data.
For more information, see the [User Guide](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#encrypt_context).
You can only include this parameter if you specify the `kmsKeyId` parameter.
* `description` - (Optional) Description of the integration.
* `kmsKeyId` - (Optional, Forces new resources) KMS key identifier for the key to use to encrypt the integration.
If you don't specify an encryption key, Redshift uses a default AWS owned key.
You can only include this parameter if `sourceArn` references a DynamoDB table.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the Integration.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `update` - (Default `30m`)
* `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Redshift Integration using the `arn`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { RedshiftIntegration } from "./.gen/providers/aws/redshift-integration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    RedshiftIntegration.generateConfigForImport(
      this,
      "example",
      "arn:aws:redshift:us-west-2:123456789012:integration:abcdefgh-0000-1111-2222-123456789012"
    );
  }
}

```

Using `terraform import`, import Redshift Integration using the `arn`. For example:

```console
% terraform import aws_redshift_integration.example arn:aws:redshift:us-west-2:123456789012:integration:abcdefgh-0000-1111-2222-123456789012
```

<!-- cache-key: cdktf-0.20.8 input-23620b131b543b1b2a65e1e7448af54803dd1232ce5557352f0af751e8caf145 -->