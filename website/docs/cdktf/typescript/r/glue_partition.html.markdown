---
subcategory: "Glue"
layout: "aws"
page_title: "AWS: aws_glue_partition"
description: |-
  Provides a Glue Partition.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_glue_partition

Provides a Glue Partition Resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GluePartition } from "./.gen/providers/aws/glue-partition";
interface MyConfig {
  partitionValues: any;
}
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string, config: MyConfig) {
    super(scope, name);
    new GluePartition(this, "example", {
      databaseName: "some-database",
      tableName: "some-table",
      values: ["some-value"],
      partitionValues: config.partitionValues,
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `databaseName` - (Required) Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.
* `partitionValues` - (Required) The values that define the partition.
* `catalogId` - (Optional) ID of the Glue Catalog and database to create the table in. If omitted, this defaults to the AWS Account ID plus the database name.
* `storageDescriptor` - (Optional) A [storage descriptor](#storage_descriptor) object containing information about the physical storage of this table. You can refer to the [Glue Developer Guide](https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-catalog-tables.html#aws-glue-api-catalog-tables-StorageDescriptor) for a full explanation of this object.
* `parameters` - (Optional) Properties associated with this table, as a list of key-value pairs.

##### storage_descriptor

* `columns` - (Optional) A list of the [Columns](#column) in the table.
* `location` - (Optional) The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.
* `inputFormat` - (Optional) The input format: SequenceFileInputFormat (binary), or TextInputFormat, or a custom format.
* `outputFormat` - (Optional) The output format: SequenceFileOutputFormat (binary), or IgnoreKeyTextOutputFormat, or a custom format.
* `compressed` - (Optional) True if the data in the table is compressed, or False if not.
* `numberOfBuckets` - (Optional) Must be specified if the table contains any dimension columns.
* `serDeInfo` - (Optional) [Serialization/deserialization (SerDe)](#ser_de_info) information.
* `bucketColumns` - (Optional) A list of reducer grouping columns, clustering columns, and bucketing columns in the table.
* `sortColumns` - (Optional) A list of [Order](#sort_columns) objects specifying the sort order of each bucket in the table.
* `parameters` - (Optional) User-supplied properties in key-value form.
* `skewedInfo` - (Optional) Information about values that appear very frequently in a column (skewed values).
* `storedAsSubDirectories` - (Optional) True if the table data is stored in subdirectories, or False if not.

##### column

* `name` - (Required) The name of the Column.
* `type` - (Optional) The datatype of data in the Column.
* `comment` - (Optional) Free-form text comment.

##### ser_de_info

* `name` - (Optional) Name of the SerDe.
* `parameters` - (Optional) A map of initialization parameters for the SerDe, in key-value form.
* `serializationLibrary` - (Optional) Usually the class that implements the SerDe. An example is: org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe.

##### sort_columns

* `column` - (Required) The name of the column.
* `sortOrder` - (Required) Indicates that the column is sorted in ascending order (== 1), or in descending order (==0).

##### skewed_info

* `skewedColumnNames` - (Optional) A list of names of columns that contain skewed values.
* `skewedColumnValueLocationMaps` - (Optional) A list of values that appear so frequently as to be considered skewed.
* `skewedColumnValues` - (Optional) A map of skewed values to the columns that contain them.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - partition id.
* `creationTime` - The time at which the partition was created.
* `lastAnalyzedTime` - The last time at which column statistics were computed for this partition.
* `lastAccessedTime` - The last time at which the partition was accessed.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Glue Partitions using the catalog ID (usually AWS account ID), database name, table name and partition values. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { GluePartition } from "./.gen/providers/aws/glue-partition";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    GluePartition.generateConfigForImport(
      this,
      "part",
      "123456789012:MyDatabase:MyTable:val1#val2"
    );
  }
}

```

Using `terraform import`, import Glue Partitions using the catalog ID (usually AWS account ID), database name, table name and partition values. For example:

```console
% terraform import aws_glue_partition.part 123456789012:MyDatabase:MyTable:val1#val2
```

<!-- cache-key: cdktf-0.20.8 input-82eb5064cb5a885033f5995b599111156aaf6ca6d5bd48324fd36f1a445015f1 -->