---
subcategory: "Cognito IDP (Identity Provider)"
layout: "aws"
page_title: "AWS: aws_cognito_user_group"
description: |-
  Provides a Cognito User Group resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_cognito_user_group

Provides a Cognito User Group resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CognitoUserGroup } from "./.gen/providers/aws/cognito-user-group";
import { CognitoUserPool } from "./.gen/providers/aws/cognito-user-pool";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const main = new CognitoUserPool(this, "main", {
      name: "identity pool",
    });
    const groupRole = new DataAwsIamPolicyDocument(this, "group_role", {
      statement: [
        {
          actions: ["sts:AssumeRoleWithWebIdentity"],
          condition: [
            {
              test: "StringEquals",
              values: ["us-east-1:12345678-dead-beef-cafe-123456790ab"],
              variable: "cognito-identity.amazonaws.com:aud",
            },
            {
              test: "ForAnyValue:StringLike",
              values: ["authenticated"],
              variable: "cognito-identity.amazonaws.com:amr",
            },
          ],
          effect: "Allow",
          principals: [
            {
              identifiers: ["cognito-identity.amazonaws.com"],
              type: "Federated",
            },
          ],
        },
      ],
    });
    const awsIamRoleGroupRole = new IamRole(this, "group_role_2", {
      assumeRolePolicy: Token.asString(groupRole.json),
      name: "user-group-role",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRoleGroupRole.overrideLogicalId("group_role");
    const awsCognitoUserGroupMain = new CognitoUserGroup(this, "main_3", {
      description: "Managed by Terraform",
      name: "user-group",
      precedence: 42,
      roleArn: Token.asString(awsIamRoleGroupRole.arn),
      userPoolId: main.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCognitoUserGroupMain.overrideLogicalId("main");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The name of the user group.
* `userPoolId` - (Required) The user pool ID.
* `description` - (Optional) The description of the user group.
* `precedence` - (Optional) The precedence of the user group.
* `roleArn` - (Optional) The ARN of the IAM role to be associated with the user group.

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Cognito User Groups using the `userPoolId`/`name` attributes concatenated. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { CognitoUserGroup } from "./.gen/providers/aws/cognito-user-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    CognitoUserGroup.generateConfigForImport(
      this,
      "group",
      "us-east-1_vG78M4goG/user-group"
    );
  }
}

```

Using `terraform import`, import Cognito User Groups using the `userPoolId`/`name` attributes concatenated. For example:

```console
% terraform import aws_cognito_user_group.group us-east-1_vG78M4goG/user-group
```

<!-- cache-key: cdktf-0.20.8 input-cc1b14439a5de34e3245c86b3fde6854b55b9ec7ad46bd038fb95fabbe714a37 -->