---
subcategory: "Route 53 Resolver"
layout: "aws"
page_title: "AWS: aws_route53_resolver_firewall_rule"
description: |-
  Provides a Route 53 Resolver DNS Firewall rule resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_route53_resolver_firewall_rule

Provides a Route 53 Resolver DNS Firewall rule resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Route53ResolverFirewallDomainList } from "./.gen/providers/aws/route53-resolver-firewall-domain-list";
import { Route53ResolverFirewallRule } from "./.gen/providers/aws/route53-resolver-firewall-rule";
import { Route53ResolverFirewallRuleGroup } from "./.gen/providers/aws/route53-resolver-firewall-rule-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new Route53ResolverFirewallDomainList(this, "example", {
      domains: ["example.com"],
      name: "example",
      tags: {},
    });
    const awsRoute53ResolverFirewallRuleGroupExample =
      new Route53ResolverFirewallRuleGroup(this, "example_1", {
        name: "example",
        tags: {},
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRoute53ResolverFirewallRuleGroupExample.overrideLogicalId("example");
    const awsRoute53ResolverFirewallRuleExample =
      new Route53ResolverFirewallRule(this, "example_2", {
        action: "BLOCK",
        blockOverrideDnsType: "CNAME",
        blockOverrideDomain: "example.com",
        blockOverrideTtl: 1,
        blockResponse: "OVERRIDE",
        firewallDomainListId: example.id,
        firewallRuleGroupId: Token.asString(
          awsRoute53ResolverFirewallRuleGroupExample.id
        ),
        name: "example",
        priority: 100,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRoute53ResolverFirewallRuleExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) A name that lets you identify the rule, to manage and use it.
* `action` - (Required) The action that DNS Firewall should take on a DNS query when it matches one of the domains in the rule's domain list. Valid values: `ALLOW`, `BLOCK`, `ALERT`.
* `blockOverrideDnsType` - (Required if `blockResponse` is `OVERRIDE`) The DNS record's type. This determines the format of the record value that you provided in BlockOverrideDomain. Value values: `CNAME`.
* `blockOverrideDomain` - (Required if `blockResponse` is `OVERRIDE`) The custom DNS record to send back in response to the query.
* `blockOverrideTtl` - (Required if `blockResponse` is `OVERRIDE`) The recommended amount of time, in seconds, for the DNS resolver or web browser to cache the provided override record. Minimum value of 0. Maximum value of 604800.
* `blockResponse` - (Required if `action` is `BLOCK`) The way that you want DNS Firewall to block the request. Valid values: `NODATA`, `NXDOMAIN`, `OVERRIDE`.
* `firewallDomainListId` - (Required) The ID of the domain list that you want to use in the rule.
* `firewallDomainRedirectionAction` - (Optional) Evaluate DNS redirection in the DNS redirection chain, such as CNAME, DNAME, ot ALIAS. Valid values are `INSPECT_REDIRECTION_DOMAIN` and `TRUST_REDIRECTION_DOMAIN`. Default value is `INSPECT_REDIRECTION_DOMAIN`.
* `firewallRuleGroupId` - (Required) The unique identifier of the firewall rule group where you want to create the rule.
* `priority` - (Required) The setting that determines the processing order of the rule in the rule group. DNS Firewall processes the rules in a rule group by order of priority, starting from the lowest setting.
* `qType` - (Optional) The query type you want the rule to evaluate. Additional details can be found [here](https://en.wikipedia.org/wiki/List_of_DNS_record_types)

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the rule.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import  Route 53 Resolver DNS Firewall rules using the Route 53 Resolver DNS Firewall rule group ID and domain list ID separated by ':'. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Route53ResolverFirewallRule } from "./.gen/providers/aws/route53-resolver-firewall-rule";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    Route53ResolverFirewallRule.generateConfigForImport(
      this,
      "example",
      "rslvr-frg-0123456789abcdef:rslvr-fdl-0123456789abcdef"
    );
  }
}

```

Using `terraform import`, import  Route 53 Resolver DNS Firewall rules using the Route 53 Resolver DNS Firewall rule group ID and domain list ID separated by ':'. For example:

```console
% terraform import aws_route53_resolver_firewall_rule.example rslvr-frg-0123456789abcdef:rslvr-fdl-0123456789abcdef
```

<!-- cache-key: cdktf-0.20.1 input-d458f15a90a09c2af72b36e34a6381be867e94e3cadbae033820a2e3273fe68d -->