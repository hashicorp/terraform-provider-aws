---
subcategory: "FSx"
layout: "aws"
page_title: "AWS: aws_fsx_openzfs_snapshot"
description: |-
  Manages an Amazon FSx for OpenZFS snapshot.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_fsx_openzfs_snapshot

Manages an Amazon FSx for OpenZFS volume.
See the [FSx OpenZFS User Guide](https://docs.aws.amazon.com/fsx/latest/OpenZFSGuide/what-is-fsx.html) for more information.

## Example Usage

### Root volume Example

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { FsxOpenzfsFileSystem } from "./.gen/providers/aws/fsx-openzfs-file-system";
import { FsxOpenzfsSnapshot } from "./.gen/providers/aws/fsx-openzfs-snapshot";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new FsxOpenzfsFileSystem(this, "example", {
      deploymentType: "SINGLE_AZ_1",
      storageCapacity: 64,
      subnetIds: [Token.asString(awsSubnetExample.id)],
      throughputCapacity: 64,
    });
    const awsFsxOpenzfsSnapshotExample = new FsxOpenzfsSnapshot(
      this,
      "example_1",
      {
        name: "example",
        volumeId: example.rootVolumeId,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsFsxOpenzfsSnapshotExample.overrideLogicalId("example");
  }
}

```

### Child volume Example

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { FsxOpenzfsFileSystem } from "./.gen/providers/aws/fsx-openzfs-file-system";
import { FsxOpenzfsSnapshot } from "./.gen/providers/aws/fsx-openzfs-snapshot";
import { FsxOpenzfsVolume } from "./.gen/providers/aws/fsx-openzfs-volume";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new FsxOpenzfsFileSystem(this, "example", {
      deploymentType: "SINGLE_AZ_1",
      storageCapacity: 64,
      subnetIds: [Token.asString(awsSubnetExample.id)],
      throughputCapacity: 64,
    });
    const awsFsxOpenzfsVolumeExample = new FsxOpenzfsVolume(this, "example_1", {
      name: "example",
      parentVolumeId: example.rootVolumeId,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsFsxOpenzfsVolumeExample.overrideLogicalId("example");
    const awsFsxOpenzfsSnapshotExample = new FsxOpenzfsSnapshot(
      this,
      "example_2",
      {
        name: "example",
        volumeId: Token.asString(awsFsxOpenzfsVolumeExample.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsFsxOpenzfsSnapshotExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The name of the Snapshot. You can use a maximum of 203 alphanumeric characters plus either _ or -  or : or . for the name.
* `tags` - (Optional) A map of tags to assign to the file system. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level. If you have set `copyTagsToBackups` to true, and you specify one or more tags, no existing file system tags are copied from the file system to the backup.
* `volumeId` - (Optional) The ID of the volume to snapshot. This can be the root volume or a child volume.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - Amazon Resource Name of the snapshot.
* `id` - Identifier of the snapshot, e.g., `fsvolsnap-12345678`
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `delete` - (Default `30m`)
* `update` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import FSx OpenZFS snapshot using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { FsxOpenzfsSnapshot } from "./.gen/providers/aws/fsx-openzfs-snapshot";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    FsxOpenzfsSnapshot.generateConfigForImport(
      this,
      "example",
      "fs-543ab12b1ca672f33"
    );
  }
}

```

Using `terraform import`, import FSx OpenZFS snapshot using the `id`. For example:

```console
% terraform import aws_fsx_openzfs_snapshot.example fs-543ab12b1ca672f33
```

<!-- cache-key: cdktf-0.20.8 input-f33ba26e8f39726647995a0b6dacb8d0a5084b4411c18471d481f35f094019e6 -->