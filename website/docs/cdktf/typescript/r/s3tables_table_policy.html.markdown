---
subcategory: "S3 Tables"
layout: "aws"
page_title: "AWS: aws_s3tables_table_policy"
description: |-
  Terraform resource for managing an Amazon S3 Tables Table Policy.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_s3tables_table_policy

Terraform resource for managing an Amazon S3 Tables Table Policy.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { S3TablesNamespace } from "./.gen/providers/aws/s3-tables-namespace";
import { S3TablesTable } from "./.gen/providers/aws/s3-tables-table";
import { S3TablesTableBucket } from "./.gen/providers/aws/s3-tables-table-bucket";
import { S3TablesTablePolicy } from "./.gen/providers/aws/s3-tables-table-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new S3TablesTableBucket(this, "example", {
      name: "example-bucket",
    });
    const dataAwsIamPolicyDocumentExample = new DataAwsIamPolicyDocument(
      this,
      "example_1",
      {
        statement: [{}],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsIamPolicyDocumentExample.overrideLogicalId("example");
    const awsS3TablesNamespaceExample = new S3TablesNamespace(
      this,
      "example_2",
      {
        namespace: ["example-namespace"],
        tableBucketArn: example.arn,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3TablesNamespaceExample.overrideLogicalId("example");
    const awsS3TablesTableExample = new S3TablesTable(this, "example_3", {
      format: "ICEBERG",
      name: "example-table",
      namespace: awsS3TablesNamespaceExample,
      tableBucketArn: Token.asString(
        awsS3TablesNamespaceExample.tableBucketArn
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3TablesTableExample.overrideLogicalId("example");
    const awsS3TablesTablePolicyExample = new S3TablesTablePolicy(
      this,
      "example_4",
      {
        name: test.name,
        namespace: test.namespace,
        resourcePolicy: Token.asString(dataAwsIamPolicyDocumentExample.json),
        tableBucketArn: test.tableBucketArn,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3TablesTablePolicyExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `resourcePolicy` - (Required) Amazon Web Services resource-based policy document in JSON format.
* `name` - (Required, Forces new resource) Name of the table.
  Must be between 1 and 255 characters in length.
  Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
* `namespace` - (Required, Forces new resource) Name of the namespace for this table.
  Must be between 1 and 255 characters in length.
  Can consist of lowercase letters, numbers, and underscores, and must begin and end with a lowercase letter or number.
* `tableBucketArn` - (Required, Forces new resource) ARN referencing the Table Bucket that contains this Namespace.

## Attribute Reference

This resource exports no additional attributes.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import S3 Tables Table Policy using the `tableBucketArn`, the value of `namespace`, and the value of `name`, separated by a semicolon (`;`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { S3TablesTablePolicy } from "./.gen/providers/aws/s3-tables-table-policy";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    S3TablesTablePolicy.generateConfigForImport(
      this,
      "example",
      "arn:aws:s3tables:us-west-2:123456789012:bucket/example-bucket;example-namespace;example-table"
    );
  }
}

```

Using `terraform import`, import S3 Tables Table Policy using the `tableBucketArn`, the value of `namespace`, and the value of `name`, separated by a semicolon (`;`). For example:

```console
% terraform import aws_s3tables_table_policy.example 'arn:aws:s3tables:us-west-2:123456789012:bucket/example-bucket;example-namespace;example-table'
```

<!-- cache-key: cdktf-0.20.8 input-8a785b6f52d0ea0fd3ea7c49dc448a77c5d6b604d2d3279af70874b10ee9c3bd -->