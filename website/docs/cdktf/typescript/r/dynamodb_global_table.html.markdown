---
subcategory: "DynamoDB"
layout: "aws"
page_title: "AWS: aws_dynamodb_global_table"
description: |-
  Manages DynamoDB Global Tables V1 (version 2017.11.29)
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_dynamodb_global_table

Manages [DynamoDB Global Tables V1 (version 2017.11.29)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html). These are layered on top of existing DynamoDB Tables.

~> **NOTE:** To instead manage [DynamoDB Global Tables V2 (version 2019.11.21)](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html), use the [`aws_dynamodb_table` resource](/docs/providers/aws/r/dynamodb_table.html) `replica` configuration block.

~> Note: There are many restrictions before you can properly create DynamoDB Global Tables in multiple regions. See the [AWS DynamoDB Global Table Requirements](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables_reqs_bestpractices.html) for more information.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DynamodbGlobalTable } from "./.gen/providers/aws/dynamodb-global-table";
import { DynamodbTable } from "./.gen/providers/aws/dynamodb-table";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const usEast1 = new AwsProvider(this, "aws", {
      alias: "us-east-1",
      region: "us-east-1",
    });
    const usWest2 = new AwsProvider(this, "aws_1", {
      alias: "us-west-2",
      region: "us-west-2",
    });
    const awsDynamodbTableUsEast1 = new DynamodbTable(this, "us-east-1", {
      attribute: [
        {
          name: "myAttribute",
          type: "S",
        },
      ],
      hashKey: "myAttribute",
      name: "myTable",
      provider: usEast1,
      readCapacity: 1,
      streamEnabled: true,
      streamViewType: "NEW_AND_OLD_IMAGES",
      writeCapacity: 1,
    });
    const awsDynamodbTableUsWest2 = new DynamodbTable(this, "us-west-2", {
      attribute: [
        {
          name: "myAttribute",
          type: "S",
        },
      ],
      hashKey: "myAttribute",
      name: "myTable",
      provider: usWest2,
      readCapacity: 1,
      streamEnabled: true,
      streamViewType: "NEW_AND_OLD_IMAGES",
      writeCapacity: 1,
    });
    new DynamodbGlobalTable(this, "myTable", {
      dependsOn: [awsDynamodbTableUsEast1, awsDynamodbTableUsWest2],
      name: "myTable",
      provider: usEast1,
      replica: [
        {
          regionName: "us-east-1",
        },
        {
          regionName: "us-west-2",
        },
      ],
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Required) The name of the global table. Must match underlying DynamoDB Table names in all regions.
* `replica` - (Required) Underlying DynamoDB Table. At least 1 replica must be defined. See below.

### Nested Fields

#### `replica`

* `regionName` - (Required) AWS region name of replica DynamoDB TableE.g., `us-east-1`

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The name of the DynamoDB Global Table
* `arn` - The ARN of the DynamoDB Global Table

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import DynamoDB Global Tables using the global table name. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DynamodbGlobalTable } from "./.gen/providers/aws/dynamodb-global-table";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DynamodbGlobalTable.generateConfigForImport(this, "myTable", "MyTable");
  }
}

```

Using `terraform import`, import DynamoDB Global Tables using the global table name. For example:

```console
% terraform import aws_dynamodb_global_table.MyTable MyTable
```

<!-- cache-key: cdktf-0.20.8 input-36c3419a203344c40c1651647342ffb9754b89e09585c7824bc0dc4a9fd6a617 -->