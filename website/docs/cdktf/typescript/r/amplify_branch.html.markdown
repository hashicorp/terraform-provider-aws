---
subcategory: "Amplify"
layout: "aws"
page_title: "AWS: aws_amplify_branch"
description: |-
  Provides an Amplify Branch resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_amplify_branch

Provides an Amplify Branch resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AmplifyApp } from "./.gen/providers/aws/amplify-app";
import { AmplifyBranch } from "./.gen/providers/aws/amplify-branch";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new AmplifyApp(this, "example", {
      name: "app",
    });
    new AmplifyBranch(this, "master", {
      appId: example.id,
      branchName: "master",
      environmentVariables: {
        REACT_APP_API_SERVER: "https://api.example.com",
      },
      framework: "React",
      stage: "PRODUCTION",
    });
  }
}

```

### Basic Authentication

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AmplifyApp } from "./.gen/providers/aws/amplify-app";
import { AmplifyBranch } from "./.gen/providers/aws/amplify-branch";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new AmplifyApp(this, "example", {
      name: "app",
    });
    new AmplifyBranch(this, "master", {
      appId: example.id,
      basicAuthCredentials: Token.asString(
        Fn.base64encode("username:password")
      ),
      branchName: "master",
      enableBasicAuth: true,
    });
  }
}

```

### Notifications

Amplify Console uses EventBridge (formerly known as CloudWatch Events) and SNS for email notifications.  To implement the same functionality, you need to set `enableNotification` in a `aws_amplify_branch` resource, as well as creating an EventBridge Rule, an SNS topic, and SNS subscriptions.

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AmplifyApp } from "./.gen/providers/aws/amplify-app";
import { AmplifyBranch } from "./.gen/providers/aws/amplify-branch";
import { CloudwatchEventRule } from "./.gen/providers/aws/cloudwatch-event-rule";
import { CloudwatchEventTarget } from "./.gen/providers/aws/cloudwatch-event-target";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { SnsTopic } from "./.gen/providers/aws/sns-topic";
import { SnsTopicPolicy } from "./.gen/providers/aws/sns-topic-policy";
import { SnsTopicSubscription } from "./.gen/providers/aws/sns-topic-subscription";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new AmplifyApp(this, "example", {
      name: "app",
    });
    const master = new AmplifyBranch(this, "master", {
      appId: example.id,
      branchName: "master",
      enableNotification: true,
    });
    const amplifyAppMaster = new CloudwatchEventRule(
      this,
      "amplify_app_master",
      {
        description:
          "AWS Amplify build notifications for :  App: ${" +
          app.id +
          "} Branch: ${" +
          master.branchName +
          "}",
        eventPattern: Token.asString(
          Fn.jsonencode({
            detail: {
              appId: [example.id],
              branchName: [master.branchName],
              jobStatus: ["SUCCEED", "FAILED", "STARTED"],
            },
            "detail-type": ["Amplify Deployment Status Change"],
            source: ["aws.amplify"],
          })
        ),
        name:
          "amplify-${" +
          app.id +
          "}-${" +
          master.branchName +
          "}-branch-notification",
      }
    );
    const awsSnsTopicAmplifyAppMaster = new SnsTopic(
      this,
      "amplify_app_master_3",
      {
        name: "amplify-${" + app.id + "}_${" + master.branchName + "}",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSnsTopicAmplifyAppMaster.overrideLogicalId("amplify_app_master");
    new SnsTopicSubscription(this, "this", {
      endpoint: "user@acme.com",
      protocol: "email",
      topicArn: Token.asString(awsSnsTopicAmplifyAppMaster.arn),
    });
    const dataAwsIamPolicyDocumentAmplifyAppMaster =
      new DataAwsIamPolicyDocument(this, "amplify_app_master_5", {
        statement: [
          {
            actions: ["SNS:Publish"],
            effect: "Allow",
            principals: [
              {
                identifiers: ["events.amazonaws.com"],
                type: "Service",
              },
            ],
            resources: [Token.asString(awsSnsTopicAmplifyAppMaster.arn)],
            sid: "Allow_Publish_Events ${" + master.arn + "}",
          },
        ],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsIamPolicyDocumentAmplifyAppMaster.overrideLogicalId(
      "amplify_app_master"
    );
    const awsCloudwatchEventTargetAmplifyAppMaster = new CloudwatchEventTarget(
      this,
      "amplify_app_master_6",
      {
        arn: Token.asString(awsSnsTopicAmplifyAppMaster.arn),
        inputTransformer: {
          inputPaths: {
            appId: "$.detail.appId",
            branch: "$.detail.branchName",
            jobId: "$.detail.jobId",
            region: "$.region",
            status: "$.detail.jobStatus",
          },
          inputTemplate:
            '\\"Build notification from the AWS Amplify Console for app: https://<branch>.<appId>.amplifyapp.com/. Your build status is <status>. Go to https://console.aws.amazon.com/amplify/home?region=<region>#<appId>/<branch>/<jobId> to view details on your build. \\"',
        },
        rule: amplifyAppMaster.name,
        targetId: master.branchName,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsCloudwatchEventTargetAmplifyAppMaster.overrideLogicalId(
      "amplify_app_master"
    );
    const awsSnsTopicPolicyAmplifyAppMaster = new SnsTopicPolicy(
      this,
      "amplify_app_master_7",
      {
        arn: Token.asString(awsSnsTopicAmplifyAppMaster.arn),
        policy: Token.asString(dataAwsIamPolicyDocumentAmplifyAppMaster.json),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSnsTopicPolicyAmplifyAppMaster.overrideLogicalId("amplify_app_master");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `appId` - (Required) Unique ID for an Amplify app.
* `branchName` - (Required) Name for the branch.
* `backendEnvironmentArn` - (Optional) ARN for a backend environment that is part of an Amplify app.
* `basicAuthCredentials` - (Optional) Basic authorization credentials for the branch.
* `description` - (Optional) Description for the branch.
* `displayName` - (Optional) Display name for a branch. This is used as the default domain prefix.
* `enableAutoBuild` - (Optional) Enables auto building for the branch.
* `enableBasicAuth` - (Optional) Enables basic authorization for the branch.
* `enableNotification` - (Optional) Enables notifications for the branch.
* `enablePerformanceMode` - (Optional) Enables performance mode for the branch.
* `enablePullRequestPreview` - (Optional) Enables pull request previews for this branch.
* `environmentVariables` - (Optional) Environment variables for the branch.
* `framework` - (Optional) Framework for the branch.
* `pullRequestEnvironmentName` - (Optional) Amplify environment name for the pull request.
* `stage` - (Optional) Describes the current stage for the branch. Valid values: `PRODUCTION`, `BETA`, `DEVELOPMENT`, `EXPERIMENTAL`, `PULL_REQUEST`.
* `tags` - (Optional) Key-value mapping of resource tags. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `ttl` - (Optional) Content Time To Live (TTL) for the website in seconds.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN for the branch.
* `associatedResources` - A list of custom resources that are linked to this branch.
* `customDomains` - Custom domains for the branch.
* `destinationBranch` - Destination branch if the branch is a pull request branch.
* `sourceBranch` - Source branch if the branch is a pull request branch.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Amplify branch using `appId` and `branchName`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AmplifyBranch } from "./.gen/providers/aws/amplify-branch";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    AmplifyBranch.generateConfigForImport(
      this,
      "master",
      "d2ypk4k47z8u6/master"
    );
  }
}

```

Using `terraform import`, import Amplify branch using `appId` and `branchName`. For example:

```console
% terraform import aws_amplify_branch.master d2ypk4k47z8u6/master
```

<!-- cache-key: cdktf-0.20.8 input-18bb34f7ab2ddc6f2adc5f5bfbff608bb9af62203731b97b751ed9bb930f797a -->