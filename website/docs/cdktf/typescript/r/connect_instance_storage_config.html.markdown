---
subcategory: "Connect"
layout: "aws"
page_title: "AWS: aws_connect_instance_storage_config"
description: |-
  Provides details about a specific Amazon Connect Instance Storage Config.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_connect_instance_storage_config

Provides an Amazon Connect Instance Storage Config resource. For more information see
[Amazon Connect: Getting Started](https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-get-started.html)

## Example Usage

### Storage Config Kinesis Firehose Config

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConnectInstanceStorageConfig } from "./.gen/providers/aws/connect-instance-storage-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ConnectInstanceStorageConfig(this, "example", {
      instanceId: Token.asString(awsConnectInstanceExample.id),
      resourceType: "CONTACT_TRACE_RECORDS",
      storageConfig: {
        kinesisFirehoseConfig: {
          firehoseArn: Token.asString(
            awsKinesisFirehoseDeliveryStreamExample.arn
          ),
        },
        storageType: "KINESIS_FIREHOSE",
      },
    });
  }
}

```

### Storage Config Kinesis Stream Config

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConnectInstanceStorageConfig } from "./.gen/providers/aws/connect-instance-storage-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ConnectInstanceStorageConfig(this, "example", {
      instanceId: Token.asString(awsConnectInstanceExample.id),
      resourceType: "CONTACT_TRACE_RECORDS",
      storageConfig: {
        kinesisStreamConfig: {
          streamArn: Token.asString(awsKinesisStreamExample.arn),
        },
        storageType: "KINESIS_STREAM",
      },
    });
  }
}

```

### Storage Config Kinesis Video Stream Config

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConnectInstanceStorageConfig } from "./.gen/providers/aws/connect-instance-storage-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ConnectInstanceStorageConfig(this, "example", {
      instanceId: Token.asString(awsConnectInstanceExample.id),
      resourceType: "MEDIA_STREAMS",
      storageConfig: {
        kinesisVideoStreamConfig: {
          encryptionConfig: {
            encryptionType: "KMS",
            keyId: Token.asString(awsKmsKeyExample.arn),
          },
          prefix: "example",
          retentionPeriodHours: 3,
        },
        storageType: "KINESIS_VIDEO_STREAM",
      },
    });
  }
}

```

### Storage Config S3 Config

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConnectInstanceStorageConfig } from "./.gen/providers/aws/connect-instance-storage-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ConnectInstanceStorageConfig(this, "example", {
      instanceId: Token.asString(awsConnectInstanceExample.id),
      resourceType: "CHAT_TRANSCRIPTS",
      storageConfig: {
        s3Config: {
          bucketName: Token.asString(awsS3BucketExample.id),
          bucketPrefix: "example",
        },
        storageType: "S3",
      },
    });
  }
}

```

### Storage Config S3 Config with Encryption Config

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConnectInstanceStorageConfig } from "./.gen/providers/aws/connect-instance-storage-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ConnectInstanceStorageConfig(this, "example", {
      instanceId: Token.asString(awsConnectInstanceExample.id),
      resourceType: "CHAT_TRANSCRIPTS",
      storageConfig: {
        s3Config: {
          bucketName: Token.asString(awsS3BucketExample.id),
          bucketPrefix: "example",
          encryptionConfig: {
            encryptionType: "KMS",
            keyId: Token.asString(awsKmsKeyExample.arn),
          },
        },
        storageType: "S3",
      },
    });
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `instanceId` - (Required) Specifies the identifier of the hosting Amazon Connect Instance.
* `resourceType` - (Required) A valid resource type. Valid Values: `AGENT_EVENTS` | `ATTACHMENTS` | `CALL_RECORDINGS` | `CHAT_TRANSCRIPTS` | `CONTACT_EVALUATIONS` | `CONTACT_TRACE_RECORDS` | `MEDIA_STREAMS` | `REAL_TIME_CONTACT_ANALYSIS_SEGMENTS` | `SCHEDULED_REPORTS` | `SCREEN_RECORDINGS`.
* `storageConfig` - (Required) Specifies the storage configuration options for the Connect Instance. [Documented below](#storage_config).

### `storageConfig`

The `storageConfig` configuration block supports the following arguments:

* `kinesisFirehoseConfig` - (Required if `type` is set to `KINESIS_FIREHOSE`) A block that specifies the configuration of the Kinesis Firehose delivery stream. [Documented below](#kinesis_firehose_config).
* `kinesisStreamConfig` - (Required if `type` is set to `KINESIS_STREAM`) A block that specifies the configuration of the Kinesis data stream. [Documented below](#kinesis_stream_config).
* `kinesisVideoStreamConfig` - (Required if `type` is set to `KINESIS_VIDEO_STREAM`) A block that specifies the configuration of the Kinesis video stream. [Documented below](#kinesis_video_stream_config).
* `s3Config` - (Required if `type` is set to `S3`) A block that specifies the configuration of S3 Bucket. [Documented below](#s3_config).
* `storageType` - (Required) A valid storage type. Valid Values: `S3` | `KINESIS_VIDEO_STREAM` | `KINESIS_STREAM` | `KINESIS_FIREHOSE`.

#### `kinesisFirehoseConfig`

The `kinesisFirehoseConfig` configuration block supports the following arguments:

* `firehoseArn` - (Required) The Amazon Resource Name (ARN) of the delivery stream.

#### `kinesisStreamConfig`

The `kinesisStreamConfig` configuration block supports the following arguments:

* `streamArn` - (Required) The Amazon Resource Name (ARN) of the data stream.

#### `kinesisVideoStreamConfig`

The `kinesisVideoStreamConfig` configuration block supports the following arguments:

* `encryptionConfig` - (Required) The encryption configuration. [Documented below](#encryption_config).
* `prefix` - (Required) The prefix of the video stream. Minimum length of `1`. Maximum length of `128`. When read from the state, the value returned is `<prefix>-connect-<connect_instance_alias>-contact-` since the API appends additional details to the `prefix`.
* `retentionPeriodHours` - (Required) The number of hours data is retained in the stream. Kinesis Video Streams retains the data in a data store that is associated with the stream. Minimum value of `0`. Maximum value of `87600`. A value of `0`, indicates that the stream does not persist data.

#### `s3Config`

The `s3Config` configuration block supports the following arguments:

* `bucketName` - (Required) The S3 bucket name.
* `bucketPrefix` - (Required) The S3 bucket prefix.
* `encryptionConfig` - (Optional) The encryption configuration. [Documented below](#encryption_config).

#### `encryptionConfig`

The `encryptionConfig` configuration block supports the following arguments:

* `encryptionType` - (Required) The type of encryption. Valid Values: `KMS`.
* `keyId` - (Required) The full ARN of the encryption key. Be sure to provide the full ARN of the encryption key, not just the ID.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `associationId` - The existing association identifier that uniquely identifies the resource type and storage config for the given instance ID.
* `id` - The identifier of the hosting Amazon Connect Instance, `associationId`, and `resourceType` separated by a colon (`:`).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Amazon Connect Instance Storage Configs using the `instanceId`, `associationId`, and `resourceType` separated by a colon (`:`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConnectInstanceStorageConfig } from "./.gen/providers/aws/connect-instance-storage-config";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ConnectInstanceStorageConfig.generateConfigForImport(
      this,
      "example",
      "f1288a1f-6193-445a-b47e-af739b2:c1d4e5f6-1b3c-1b3c-1b3c-c1d4e5f6c1d4e5:CHAT_TRANSCRIPTS"
    );
  }
}

```

Using `terraform import`, import Amazon Connect Instance Storage Configs using the `instanceId`, `associationId`, and `resourceType` separated by a colon (`:`). For example:

```console
% terraform import aws_connect_instance_storage_config.example f1288a1f-6193-445a-b47e-af739b2:c1d4e5f6-1b3c-1b3c-1b3c-c1d4e5f6c1d4e5:CHAT_TRANSCRIPTS
```

<!-- cache-key: cdktf-0.20.8 input-f61d343b420a3f570c17898dc773fd2fccd8d832985461fc87179d145f2b2518 -->