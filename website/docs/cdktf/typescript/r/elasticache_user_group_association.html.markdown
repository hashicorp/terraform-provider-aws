---
subcategory: "ElastiCache"
layout: "aws"
page_title: "AWS: aws_elasticache_user_group_association"
description: |-
  Associate an ElastiCache user and user group.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_elasticache_user_group_association

Associate an existing ElastiCache user and an existing user group.

~> Terraform will detect changes in the `aws_elasticache_user_group` since `aws_elasticache_user_group_association` changes the user IDs associated with the user group. You can ignore these changes with the `lifecycle` `ignore_changes` meta argument as shown in the example.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ElasticacheUser } from "./.gen/providers/aws/elasticache-user";
import { ElasticacheUserGroup } from "./.gen/providers/aws/elasticache-user-group";
import { ElasticacheUserGroupAssociation } from "./.gen/providers/aws/elasticache-user-group-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const defaultVar = new ElasticacheUser(this, "default", {
      accessString:
        "on ~app::* -@all +@read +@hash +@bitmap +@geo -setbit -bitfield -hset -hsetnx -hmset -hincrby -hincrbyfloat -hdel -bitop -geoadd -georadius -georadiusbymember",
      engine: "REDIS",
      passwords: ["password123456789"],
      userId: "defaultUserID",
      userName: "default",
    });
    const example = new ElasticacheUser(this, "example", {
      accessString:
        "on ~app::* -@all +@read +@hash +@bitmap +@geo -setbit -bitfield -hset -hsetnx -hmset -hincrby -hincrbyfloat -hdel -bitop -geoadd -georadius -georadiusbymember",
      engine: "REDIS",
      passwords: ["password123456789"],
      userId: "exampleUserID",
      userName: "exampleuser",
    });
    const awsElasticacheUserGroupExample = new ElasticacheUserGroup(
      this,
      "example_2",
      {
        engine: "REDIS",
        lifecycle: {
          ignoreChanges: [userIds],
        },
        userGroupId: "userGroupId",
        userIds: [defaultVar.userId],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsElasticacheUserGroupExample.overrideLogicalId("example");
    const awsElasticacheUserGroupAssociationExample =
      new ElasticacheUserGroupAssociation(this, "example_3", {
        userGroupId: Token.asString(awsElasticacheUserGroupExample.userGroupId),
        userId: example.userId,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsElasticacheUserGroupAssociationExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `userGroupId` - (Required) ID of the user group.
* `userId` - (Required) ID of the user to associated with the user group.

## Attribute Reference

This resource exports no additional attributes.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `10m`)
* `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ElastiCache user group associations using the `userGroupId` and `userId`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ElasticacheUserGroupAssociation } from "./.gen/providers/aws/elasticache-user-group-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ElasticacheUserGroupAssociation.generateConfigForImport(
      this,
      "example",
      "userGoupId1,userId"
    );
  }
}

```

Using `terraform import`, import ElastiCache user group associations using the `userGroupId` and `userId`. For example:

```console
% terraform import aws_elasticache_user_group_association.example userGoupId1,userId
```

<!-- cache-key: cdktf-0.20.1 input-3339413e7f428981aaae7e8893e86bdecb98d0c269d68abccc1d0e2642de7dc7 -->