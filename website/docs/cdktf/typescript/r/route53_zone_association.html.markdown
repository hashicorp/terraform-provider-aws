---
subcategory: "Route 53"
layout: "aws"
page_title: "AWS: aws_route53_zone_association"
description: |-
  Manages a Route53 Hosted Zone VPC association
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_route53_zone_association

Manages a Route53 Hosted Zone VPC association. VPC associations can only be made on private zones. See the [`aws_route53_vpc_association_authorization` resource](route53_vpc_association_authorization.html) for setting up cross-account associations.

~> **NOTE:** Unless explicit association ordering is required (e.g., a separate cross-account association authorization), usage of this resource is not recommended. Use the `vpc` configuration blocks available within the [`aws_route53_zone` resource](/docs/providers/aws/r/route53_zone.html) instead.

~> **NOTE:** Terraform provides both this standalone Zone VPC Association resource and exclusive VPC associations defined in-line in the [`aws_route53_zone` resource](/docs/providers/aws/r/route53_zone.html) via `vpc` configuration blocks. At this time, you cannot use those in-line VPC associations in conjunction with this resource and the same zone ID otherwise it will cause a perpetual difference in plan output. You can optionally use the generic Terraform resource [lifecycle configuration block](https://www.terraform.io/docs/configuration/meta-arguments/lifecycle.html) with `ignore_changes` in the `aws_route53_zone` resource to manage additional associations via this resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Route53Zone } from "./.gen/providers/aws/route53-zone";
import { Route53ZoneAssociation } from "./.gen/providers/aws/route53-zone-association";
import { Vpc } from "./.gen/providers/aws/vpc";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const primary = new Vpc(this, "primary", {
      cidrBlock: "10.6.0.0/16",
      enableDnsHostnames: true,
      enableDnsSupport: true,
    });
    const secondary = new Vpc(this, "secondary", {
      cidrBlock: "10.7.0.0/16",
      enableDnsHostnames: true,
      enableDnsSupport: true,
    });
    const example = new Route53Zone(this, "example", {
      lifecycle: {
        ignoreChanges: [vpc],
      },
      name: "example.com",
      vpc: [
        {
          vpcId: primary.id,
        },
      ],
    });
    const awsRoute53ZoneAssociationSecondary = new Route53ZoneAssociation(
      this,
      "secondary_3",
      {
        vpcId: secondary.id,
        zoneId: example.zoneId,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRoute53ZoneAssociationSecondary.overrideLogicalId("secondary");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `zoneId` - (Required) The private hosted zone to associate.
* `vpcId` - (Required) The VPC to associate with the private hosted zone.
* `vpcRegion` - (Optional) The VPC's region. Defaults to the region of the AWS provider.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The calculated unique identifier for the association.
* `owningAccount` - The account ID of the account that created the hosted zone.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Route 53 Hosted Zone Associations using the Hosted Zone ID and VPC ID, separated by a colon (`:`). For example:

The VPC is in the same region where you have configured the Terraform AWS Provider:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Route53ZoneAssociation } from "./.gen/providers/aws/route53-zone-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    Route53ZoneAssociation.generateConfigForImport(
      this,
      "example",
      "Z123456ABCDEFG:vpc-12345678"
    );
  }
}

```

The VPC is _not_ in the same region where you have configured the Terraform AWS Provider:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Route53ZoneAssociation } from "./.gen/providers/aws/route53-zone-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    Route53ZoneAssociation.generateConfigForImport(
      this,
      "example",
      "Z123456ABCDEFG:vpc-12345678:us-east-2"
    );
  }
}

```

**Using `terraform import` to import** Route 53 Hosted Zone Associations using the Hosted Zone ID and VPC ID, separated by a colon (`:`). For example:

The VPC is in the same region where you have configured the Terraform AWS Provider:

```console
% terraform import aws_route53_zone_association.example Z123456ABCDEFG:vpc-12345678
```

The VPC is _not_ in the same region where you have configured the Terraform AWS Provider:

```console
% terraform import aws_route53_zone_association.example Z123456ABCDEFG:vpc-12345678:us-east-2
```

<!-- cache-key: cdktf-0.20.8 input-062f0d7494a763d26f38527047af28c7a1a99d322901f96a55935e7336484f49 -->