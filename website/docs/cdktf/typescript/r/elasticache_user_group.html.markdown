---
subcategory: "ElastiCache"
layout: "aws"
page_title: "AWS: aws_elasticache_user_group"
description: |-
  Provides an ElastiCache user group.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_elasticache_user_group

Provides an ElastiCache user group resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ElasticacheUser } from "./.gen/providers/aws/elasticache-user";
import { ElasticacheUserGroup } from "./.gen/providers/aws/elasticache-user-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new ElasticacheUser(this, "test", {
      accessString:
        "on ~app::* -@all +@read +@hash +@bitmap +@geo -setbit -bitfield -hset -hsetnx -hmset -hincrby -hincrbyfloat -hdel -bitop -geoadd -georadius -georadiusbymember",
      engine: "REDIS",
      passwords: ["password123456789"],
      userId: "testUserId",
      userName: "default",
    });
    const awsElasticacheUserGroupTest = new ElasticacheUserGroup(
      this,
      "test_1",
      {
        engine: "REDIS",
        userGroupId: "userGroupId",
        userIds: [test.userId],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsElasticacheUserGroupTest.overrideLogicalId("test");
  }
}

```

## Argument Reference

The following arguments are required:

* `engine` - (Required) The current supported value are `REDIS`, `VALKEY`.
* `userGroupId` - (Required) The ID of the user group.

The following arguments are optional:

* `userIds` - (Optional) The list of user IDs that belong to the user group.
* `tags` - (Optional) Key-value map of resource tags. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The user group identifier.
* `arn` - The ARN that identifies the user group.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import ElastiCache user groups using the `userGroupId`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ElasticacheUserGroup } from "./.gen/providers/aws/elasticache-user-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ElasticacheUserGroup.generateConfigForImport(
      this,
      "myUserGroup",
      "userGoupId1"
    );
  }
}

```

Using `terraform import`, import ElastiCache user groups using the `userGroupId`. For example:

```console
% terraform import aws_elasticache_user_group.my_user_group userGoupId1
```

<!-- cache-key: cdktf-0.20.8 input-5d472f4a97f4cb6d500729bf944ccf66216f5257161de9e5de0cde3b98205f12 -->