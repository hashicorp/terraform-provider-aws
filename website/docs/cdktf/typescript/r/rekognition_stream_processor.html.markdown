---
subcategory: "Rekognition"
layout: "aws"
page_title: "AWS: aws_rekognition_stream_processor"
description: |-
  Terraform resource for managing an AWS Rekognition Stream Processor.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_rekognition_stream_processor

Terraform resource for managing an AWS Rekognition Stream Processor.

~> This resource must be configured specifically for your use case, and not all options are compatible with one another. See [Stream Processor API documentation](https://docs.aws.amazon.com/rekognition/latest/APIReference/API_CreateStreamProcessor.html#rekognition-CreateStreamProcessor-request-Input) for configuration information.

~> Stream Processors configured for Face Recognition cannot have _any_ properties updated after the fact, and it will result in an AWS API error.

## Example Usage

### Label Detection

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamRole } from "./.gen/providers/aws/iam-role";
import { KinesisVideoStream } from "./.gen/providers/aws/kinesis-video-stream";
import { RekognitionStreamProcessor } from "./.gen/providers/aws/rekognition-stream-processor";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { SnsTopic } from "./.gen/providers/aws/sns-topic";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new KinesisVideoStream(this, "example", {
      dataRetentionInHours: 1,
      deviceName: "kinesis-video-device-name",
      mediaType: "video/h264",
      name: "example-kinesis-input",
    });
    const awsS3BucketExample = new S3Bucket(this, "example_1", {
      bucket: "example-bucket",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsS3BucketExample.overrideLogicalId("example");
    const awsSnsTopicExample = new SnsTopic(this, "example_2", {
      name: "example-topic",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSnsTopicExample.overrideLogicalId("example");
    const awsIamRoleExample = new IamRole(this, "example_3", {
      assumeRolePolicy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: "sts:AssumeRole",
              Effect: "Allow",
              Principal: {
                Service: "rekognition.amazonaws.com",
              },
            },
          ],
          Version: "2012-10-17",
        })
      ),
      inlinePolicy: [
        {
          name: "Rekognition-Access",
          policy: Token.asString(
            Fn.jsonencode({
              Statement: [
                {
                  Action: ["s3:PutObject"],
                  Effect: "Allow",
                  Resource: ["${" + awsS3BucketExample.arn + "}/*"],
                },
                {
                  Action: ["sns:Publish"],
                  Effect: "Allow",
                  Resource: [awsSnsTopicExample.arn],
                },
                {
                  Action: ["kinesis:Get*", "kinesis:DescribeStreamSummary"],
                  Effect: "Allow",
                  Resource: [example.arn],
                },
              ],
              Version: "2012-10-17",
            })
          ),
        },
      ],
      name: "example-role",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRoleExample.overrideLogicalId("example");
    const awsRekognitionStreamProcessorExample = new RekognitionStreamProcessor(
      this,
      "example_4",
      {
        dataSharingPreference: [
          {
            optIn: false,
          },
        ],
        input: [
          {
            kinesisVideoStream: [
              {
                arn: example.arn,
              },
            ],
          },
        ],
        name: "example-processor",
        notificationChannel: [
          {
            snsTopicArn: Token.asString(awsSnsTopicExample.arn),
          },
        ],
        output: [
          {
            s3Destination: [
              {
                bucket: Token.asString(awsS3BucketExample.bucket),
              },
            ],
          },
        ],
        roleArn: Token.asString(awsIamRoleExample.arn),
        settings: [
          {
            connectedHome: [
              {
                labels: ["PERSON", "PET"],
              },
            ],
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRekognitionStreamProcessorExample.overrideLogicalId("example");
  }
}

```

### Face Detection Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { IamRole } from "./.gen/providers/aws/iam-role";
import { KinesisStream } from "./.gen/providers/aws/kinesis-stream";
import { KinesisVideoStream } from "./.gen/providers/aws/kinesis-video-stream";
import { RekognitionCollection } from "./.gen/providers/aws/rekognition-collection";
import { RekognitionStreamProcessor } from "./.gen/providers/aws/rekognition-stream-processor";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new KinesisStream(this, "example", {
      name: "terraform-kinesis-example",
      shardCount: 1,
    });
    const awsKinesisVideoStreamExample = new KinesisVideoStream(
      this,
      "example_1",
      {
        dataRetentionInHours: 1,
        deviceName: "kinesis-video-device-name",
        mediaType: "video/h264",
        name: "example-kinesis-input",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsKinesisVideoStreamExample.overrideLogicalId("example");
    const awsRekognitionCollectionExample = new RekognitionCollection(
      this,
      "example_2",
      {
        collectionId: "example-collection",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRekognitionCollectionExample.overrideLogicalId("example");
    const awsIamRoleExample = new IamRole(this, "example_3", {
      assumeRolePolicy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: "sts:AssumeRole",
              Effect: "Allow",
              Principal: {
                Service: "rekognition.amazonaws.com",
              },
            },
          ],
          Version: "2012-10-17",
        })
      ),
      inlinePolicy: [
        {
          name: "Rekognition-Access",
          policy: Token.asString(
            Fn.jsonencode({
              Statement: [
                {
                  Action: ["kinesis:Get*", "kinesis:DescribeStreamSummary"],
                  Effect: "Allow",
                  Resource: [awsKinesisVideoStreamExample.arn],
                },
                {
                  Action: ["kinesis:PutRecord"],
                  Effect: "Allow",
                  Resource: [example.arn],
                },
              ],
              Version: "2012-10-17",
            })
          ),
        },
      ],
      name: "example-role",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRoleExample.overrideLogicalId("example");
    const awsRekognitionStreamProcessorExample = new RekognitionStreamProcessor(
      this,
      "example_4",
      {
        dataSharingPreference: [
          {
            optIn: false,
          },
        ],
        input: [
          {
            kinesisVideoStream: [
              {
                arn: Token.asString(awsKinesisVideoStreamExample.arn),
              },
            ],
          },
        ],
        name: "example-processor",
        output: [
          {
            kinesisDataStream: [
              {
                arn: example.arn,
              },
            ],
          },
        ],
        regionsOfInterest: [
          {
            polygon: [
              {
                x: 0.5,
                y: 0.5,
              },
              {
                x: 0.5,
                y: 0.5,
              },
              {
                x: 0.5,
                y: 0.5,
              },
            ],
          },
        ],
        roleArn: Token.asString(awsIamRoleExample.arn),
        settings: [
          {
            faceSearch: [
              {
                collectionId: Token.asString(
                  awsRekognitionCollectionExample.id
                ),
              },
            ],
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRekognitionStreamProcessorExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `input` - (Required) Input video stream. See [`input`](#input).
* `name` - (Required) The name of the Stream Processor.
* `output` - (Required) Kinesis data stream stream or Amazon S3 bucket location to which Amazon Rekognition Video puts the analysis results. See [`output`](#output).
* `roleArn` - (Required) The Amazon Resource Number (ARN) of the IAM role that allows access to the stream processor. The IAM role provides Rekognition read permissions for a Kinesis stream. It also provides write permissions to an Amazon S3 bucket and Amazon Simple Notification Service topic for a label detection stream processor. This is required for both face search and label detection stream processors.
* `settings` - (Required) Input parameters used in a streaming video analyzed by a stream processor. See [`settings`](#settings).

The following arguments are optional:

* `dataSharingPreference` - (Optional) See [`dataSharingPreference`](#data_sharing_preference).
* `kmsKeyId` - (Optional) Optional parameter for label detection stream processors.
* `notificationChannel` - (Optional) The Amazon Simple Notification Service topic to which Amazon Rekognition publishes the completion status. See [`notificationChannel`](#notification_channel).
* `regionsOfInterest` - (Optional) Specifies locations in the frames where Amazon Rekognition checks for objects or people. See [`regionsOfInterest`](#regions_of_interest).
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

### `input`

* `kinesisVideoStream` - (Optional) Kinesis input stream. See [`kinesisVideoStream`](#kinesis_video_stream).

### `kinesisVideoStream`

* `arn` - (Optional) ARN of the Kinesis video stream stream that streams the source video.

### `output`

* `kinesisDataStream` - (Optional) The Amazon Kinesis Data Streams stream to which the Amazon Rekognition stream processor streams the analysis results. See [`kinesisDataStream`](#kinesis_data_stream).
* `s3Destination` - (Optional) The Amazon S3 bucket location to which Amazon Rekognition publishes the detailed inference results of a video analysis operation. See [`s3Destination`](#s3_destination).

### `kinesisDataStream`

* `arn` - (Optional) ARN of the output Amazon Kinesis Data Streams stream.

### `s3Destination`

* `bucket` - (Optional) Name of the Amazon S3 bucket you want to associate with the streaming video project.
* `key_prefixx` - (Optional) Prefix value of the location within the bucket that you want the information to be published to.

### `dataSharingPreference`

* `optIn` - (Optional) Whether you are sharing data with Rekognition to improve model performance.

### `regionsOfInterest`

* `boundingBox` - (Optional) Box representing a region of interest on screen. Only 1 per region is allowed. See [`boundingBox`](#bounding_box).
* `polygon` - (Optional) Shape made up of up to 10 Point objects to define a region of interest. See [`polygon`](#polygon).

### `boundingBox`

A region can only have a single `boundingBox`

* `height` - (Required) Height of the bounding box as a ratio of the overall image height.
* `wight` - (Required) Width of the bounding box as a ratio of the overall image width.
* `left` - (Required) Left coordinate of the bounding box as a ratio of overall image width.
* `top` - (Required) Top coordinate of the bounding box as a ratio of overall image height.

### `polygon`

If using `polygon`, a minimum of 3 per region is required, with a maximum of 10.

* `x` - (Required) The value of the X coordinate for a point on a Polygon.
* `y` - (Required) The value of the Y coordinate for a point on a Polygon.

### `notificationChannel`

* `snsTopicArn` - (Required) The Amazon Resource Number (ARN) of the Amazon Amazon Simple Notification Service topic to which Amazon Rekognition posts the completion status.

### `settings`

* `connectedHome` - (Optional) Label detection settings to use on a streaming video. See [`connectedHome`](#connected_home).
* `faceSearch` - (Optional) Input face recognition parameters for an Amazon Rekognition stream processor. See [`faceSearch`](#face_search).

### `connectedHome`

* `labels` - (Required) Specifies what you want to detect in the video, such as people, packages, or pets. The current valid labels you can include in this list are: `PERSON`, `PET`, `PACKAGE`, and `ALL`.
* `minConfidence` - (Optional) Minimum confidence required to label an object in the video.

### `faceSearch`

* `collectionId` - (Optional) ID of a collection that contains faces that you want to search for.
* `faceMatchThreshold` - (Optional) Minimum face match confidence score that must be met to return a result for a recognized face.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `streamProcessorArn` - ARN of the Stream Processor.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `update` - (Default `30m`)
* `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Rekognition Stream Processor using the `name`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { RekognitionStreamProcessor } from "./.gen/providers/aws/rekognition-stream-processor";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    RekognitionStreamProcessor.generateConfigForImport(
      this,
      "example",
      "my-stream"
    );
  }
}

```

Using `terraform import`, import Rekognition Stream Processor using the `name`. For example:

```console
% terraform import aws_rekognition_stream_processor.example my-stream 
```

<!-- cache-key: cdktf-0.20.1 input-b3270ebf829691bb33fec57b588e584a3c7fc51a209426c171b198c7a90bc81f -->