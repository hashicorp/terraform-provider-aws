---
subcategory: "API Gateway"
layout: "aws"
page_title: "AWS: aws_api_gateway_authorizer"
description: |-
  Provides an API Gateway Authorizer.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_api_gateway_authorizer

Provides an API Gateway Authorizer.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ApiGatewayAuthorizer } from "./.gen/providers/aws/api-gateway-authorizer";
import { ApiGatewayRestApi } from "./.gen/providers/aws/api-gateway-rest-api";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicy } from "./.gen/providers/aws/iam-role-policy";
import { LambdaFunction } from "./.gen/providers/aws/lambda-function";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const demo = new ApiGatewayRestApi(this, "demo", {
      name: "auth-demo",
    });
    const invocationAssumeRole = new DataAwsIamPolicyDocument(
      this,
      "invocation_assume_role",
      {
        statement: [
          {
            actions: ["sts:AssumeRole"],
            effect: "Allow",
            principals: [
              {
                identifiers: ["apigateway.amazonaws.com"],
                type: "Service",
              },
            ],
          },
        ],
      }
    );
    const lambdaAssumeRole = new DataAwsIamPolicyDocument(
      this,
      "lambda_assume_role",
      {
        statement: [
          {
            actions: ["sts:AssumeRole"],
            effect: "Allow",
            principals: [
              {
                identifiers: ["lambda.amazonaws.com"],
                type: "Service",
              },
            ],
          },
        ],
      }
    );
    const invocationRole = new IamRole(this, "invocation_role", {
      assumeRolePolicy: Token.asString(invocationAssumeRole.json),
      name: "api_gateway_auth_invocation",
      path: "/",
    });
    const lambda = new IamRole(this, "lambda", {
      assumeRolePolicy: Token.asString(lambdaAssumeRole.json),
      name: "demo-lambda",
    });
    const authorizer = new LambdaFunction(this, "authorizer", {
      filename: "lambda-function.zip",
      functionName: "api_gateway_authorizer",
      handler: "exports.example",
      role: lambda.arn,
      sourceCodeHash: Token.asString(
        Fn.filebase64sha256("lambda-function.zip")
      ),
    });
    const invocationPolicy = new DataAwsIamPolicyDocument(
      this,
      "invocation_policy",
      {
        statement: [
          {
            actions: ["lambda:InvokeFunction"],
            effect: "Allow",
            resources: [authorizer.arn],
          },
        ],
      }
    );
    const awsApiGatewayAuthorizerDemo = new ApiGatewayAuthorizer(
      this,
      "demo_7",
      {
        authorizerCredentials: invocationRole.arn,
        authorizerUri: authorizer.invokeArn,
        name: "demo",
        restApiId: demo.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsApiGatewayAuthorizerDemo.overrideLogicalId("demo");
    const awsIamRolePolicyInvocationPolicy = new IamRolePolicy(
      this,
      "invocation_policy_8",
      {
        name: "default",
        policy: Token.asString(invocationPolicy.json),
        role: invocationRole.id,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyInvocationPolicy.overrideLogicalId("invocation_policy");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `authorizerUri` - (Optional, required for type `TOKEN`/`REQUEST`) Authorizer's Uniform Resource Identifier (URI). This must be a well-formed Lambda function URI in the form of `arn:aws:apigateway:{region}:lambda:path/{service_api}`,
 e.g., `arn:aws:apigateway:us-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:us-west-2:012345678912:function:my-function/invocations`
* `name` - (Required) Name of the authorizer
* `restApiId` - (Required) ID of the associated REST API
* `identitySource` - (Optional) Source of the identity in an incoming request. Defaults to `method.request.header.Authorization`. For `REQUEST` type, this may be a comma-separated list of values, including headers, query string parameters and stage variables - e.g., `"method.request.header.SomeHeaderName,method.request.querystring.SomeQueryStringName,stageVariables.SomeStageVariableName"`
* `type` - (Optional) Type of the authorizer. Possible values are `TOKEN` for a Lambda function using a single authorization token submitted in a custom header, `REQUEST` for a Lambda function using incoming request parameters, or `COGNITO_USER_POOLS` for using an Amazon Cognito user pool. Defaults to `TOKEN`.
* `authorizerCredentials` - (Optional) Credentials required for the authorizer. To specify an IAM Role for API Gateway to assume, use the IAM Role ARN.
* `authorizerResultTtlInSeconds` - (Optional) TTL of cached authorizer results in seconds. Defaults to `300`.
* `identityValidationExpression` - (Optional) Validation expression for the incoming identity. For `TOKEN` type, this value should be a regular expression. The incoming token from the client is matched against this expression, and will proceed if the token matches. If the token doesn't match, the client receives a 401 Unauthorized response.
* `providerArns` - (Optional, required for type `COGNITO_USER_POOLS`) List of the Amazon Cognito user pool ARNs. Each element is of this format: `arn:aws:cognito-idp:{region}:{account_id}:userpool/{user_pool_id}`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the API Gateway Authorizer
* `id` - Authorizer identifier.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import AWS API Gateway Authorizer using the `REST-API-ID/AUTHORIZER-ID`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ApiGatewayAuthorizer } from "./.gen/providers/aws/api-gateway-authorizer";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ApiGatewayAuthorizer.generateConfigForImport(
      this,
      "authorizer",
      "12345abcde/example"
    );
  }
}

```

Using `terraform import`, import AWS API Gateway Authorizer using the `REST-API-ID/AUTHORIZER-ID`. For example:

```console
% terraform import aws_api_gateway_authorizer.authorizer 12345abcde/example
```

<!-- cache-key: cdktf-0.20.8 input-2079e78abb2de34b252c2d1829bd6d6c7b5e8eea6a54c81a845e12111109c59f -->