---
subcategory: "Network Firewall"
layout: "aws"
page_title: "AWS: aws_networkfirewall_tls_inspection_configuration"
description: |-
  Terraform resource for managing an AWS Network Firewall TLS Inspection Configuration.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_networkfirewall_tls_inspection_configuration

Terraform resource for managing an AWS Network Firewall TLS Inspection Configuration.

## Example Usage

~> **NOTE:** You must configure either inbound inspection, outbound inspection, or both.

### Basic inbound/ingress inspection

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NetworkfirewallTlsInspectionConfiguration } from "./.gen/providers/aws/";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new NetworkfirewallTlsInspectionConfiguration(this, "example", {
      description: "example",
      encryption_configuration: [
        {
          key_id: "AWS_OWNED_KMS_KEY",
          type: "AWS_OWNED_KMS_KEY",
        },
      ],
      name: "example",
      tls_inspection_configuration: [
        {
          server_certificate_configuration: [
            {
              scope: [
                {
                  destination: [
                    {
                      address_definition: "0.0.0.0/0",
                    },
                  ],
                  destination_ports: [
                    {
                      from_port: 443,
                      to_port: 443,
                    },
                  ],
                  protocols: [6],
                  source: [
                    {
                      address_definition: "0.0.0.0/0",
                    },
                  ],
                  source_ports: [
                    {
                      from_port: 0,
                      to_port: 65535,
                    },
                  ],
                },
              ],
              server_certificate: [
                {
                  resource_arn: example1.arn,
                },
              ],
            },
          ],
        },
      ],
    });
  }
}

```

### Basic outbound/engress inspection

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NetworkfirewallTlsInspectionConfiguration } from "./.gen/providers/aws/";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new NetworkfirewallTlsInspectionConfiguration(this, "example", {
      description: "example",
      encryption_configuration: [
        {
          key_id: "AWS_OWNED_KMS_KEY",
          type: "AWS_OWNED_KMS_KEY",
        },
      ],
      name: "example",
      tls_inspection_configuration: [
        {
          server_certificate_configuration: [
            {
              certificate_authority_arn: example1.arn,
              check_certificate_revocation_status: [
                {
                  revoked_status_action: "REJECT",
                  unknown_status_action: "PASS",
                },
              ],
              scope: [
                {
                  destination: [
                    {
                      address_definition: "0.0.0.0/0",
                    },
                  ],
                  destination_ports: [
                    {
                      from_port: 443,
                      to_port: 443,
                    },
                  ],
                  protocols: [6],
                  source: [
                    {
                      address_definition: "0.0.0.0/0",
                    },
                  ],
                  source_ports: [
                    {
                      from_port: 0,
                      to_port: 65535,
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
    });
  }
}

```

### Inbound with encryption configuration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NetworkfirewallTlsInspectionConfiguration } from "./.gen/providers/aws/";
import { KmsKey } from "./.gen/providers/aws/kms-key";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new KmsKey(this, "example", {
      deletionWindowInDays: 7,
      description: "example",
    });
    const awsNetworkfirewallTlsInspectionConfigurationExample =
      new NetworkfirewallTlsInspectionConfiguration(this, "example_1", {
        description: "example",
        encryption_configuration: [
          {
            key_id: example.arn,
            type: "CUSTOMER_KMS",
          },
        ],
        name: "example",
        tls_inspection_configuration: [
          {
            server_certificate_configuration: [
              {
                scopes: [
                  {
                    destination_ports: [
                      {
                        from_port: 443,
                        to_port: 443,
                      },
                    ],
                    destinations: [
                      {
                        address_definition: "0.0.0.0/0",
                      },
                    ],
                    protocols: [6],
                    source_ports: [
                      {
                        from_port: 0,
                        to_port: 65535,
                      },
                    ],
                    sources: [
                      {
                        address_definition: "0.0.0.0/0",
                      },
                    ],
                  },
                ],
                server_certificate: [
                  {
                    resource_arn: example1.arn,
                  },
                ],
              },
            ],
          },
        ],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNetworkfirewallTlsInspectionConfigurationExample.overrideLogicalId(
      "example"
    );
  }
}

```

### Outbound with encryption configuration

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NetworkfirewallTlsInspectionConfiguration } from "./.gen/providers/aws/";
import { KmsKey } from "./.gen/providers/aws/kms-key";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new KmsKey(this, "example", {
      deletionWindowInDays: 7,
      description: "example",
    });
    const awsNetworkfirewallTlsInspectionConfigurationExample =
      new NetworkfirewallTlsInspectionConfiguration(this, "example_1", {
        description: "example",
        encryption_configuration: [
          {
            key_id: example.arn,
            type: "CUSTOMER_KMS",
          },
        ],
        name: "example",
        tls_inspection_configuration: [
          {
            server_certificate_configurations: [
              {
                certificate_authority_arn: example1.arn,
                check_certificate_revocation_status: [
                  {
                    revoked_status_action: "REJECT",
                    unknown_status_action: "PASS",
                  },
                ],
                scope: [
                  {
                    destination: [
                      {
                        address_definition: "0.0.0.0/0",
                      },
                    ],
                    destination_ports: [
                      {
                        from_port: 443,
                        to_port: 443,
                      },
                    ],
                    protocols: [6],
                    source: [
                      {
                        address_definition: "0.0.0.0/0",
                      },
                    ],
                    source_ports: [
                      {
                        from_port: 0,
                        to_port: 65535,
                      },
                    ],
                  },
                ],
              },
            ],
          },
        ],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsNetworkfirewallTlsInspectionConfigurationExample.overrideLogicalId(
      "example"
    );
  }
}

```

### Combined inbound and outbound

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NetworkfirewallTlsInspectionConfiguration } from "./.gen/providers/aws/";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new NetworkfirewallTlsInspectionConfiguration(this, "example", {
      description: "example",
      encryption_configuration: [
        {
          key_id: "AWS_OWNED_KMS_KEY",
          type: "AWS_OWNED_KMS_KEY",
        },
      ],
      name: "example",
      tls_inspection_configuration: [
        {
          server_certificate_configuration: [
            {
              certificate_authority_arn: example1.arn,
              check_certificate_revocation_status: [
                {
                  revoked_status_action: "REJECT",
                  unknown_status_action: "PASS",
                },
              ],
              scope: [
                {
                  destination: [
                    {
                      address_definition: "0.0.0.0/0",
                    },
                  ],
                  destination_ports: [
                    {
                      from_port: 443,
                      to_port: 443,
                    },
                  ],
                  protocols: [6],
                  source: [
                    {
                      address_definition: "0.0.0.0/0",
                    },
                  ],
                  source_ports: [
                    {
                      from_port: 0,
                      to_port: 65535,
                    },
                  ],
                },
              ],
              server_certificate: [
                {
                  resource_arn: example2.arn,
                },
              ],
            },
          ],
        },
      ],
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `name` - (Required, Forces new resource) Descriptive name of the TLS inspection configuration.
* `tls_inspection_configuration` - (Required) TLS inspection configuration block. Detailed below.

The following arguments are optional:

* `description` - (Optional) Description of the TLS inspection configuration.
* `encryptionConfiguration` - (Optional) Encryption configuration block. Detailed below.

### Encryption Configuration

* `keyId` - (Optional) ARN of the Amazon Web Services Key Management Service (KMS) customer managed key.
* `type` - (Optional) Type of KMS key to use for encryption of your Network Firewall resources. Valid values: `AWS_OWNED_KMS_KEY`, `CUSTOMER_KMS`.

### TLS Inspection Configuration

* `server_certificate_configuration` - (Required) Server certificate configurations that are associated with the TLS configuration. Detailed below.

### Server Certificate Configuration

The `server_certificate_configuration` block supports the following arguments:

* `certificateAuthorityArn` - (Optional) ARN of the imported certificate authority (CA) certificate within Certificate Manager (ACM) to use for outbound SSL/TLS inspection. See [Using SSL/TLS certificates with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection-certificate-requirements.html) for limitations on CA certificates.
* `check_certificate_revocation_status` (Optional) - Check Certificate Revocation Status block. Detailed below.
* `scope` (Required) - Scope block. Detailed below.
* `serverCertificate` - (Optional) Server certificates to use for inbound SSL/TLS inspection. See [Using SSL/TLS certificates with TLS inspection configurations](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection-certificate-requirements.html).

### Check Certificate Revocation Status

The `check_certificate_revocation_status` block supports the following arguments:

~> **NOTE  To check the certificate revocation status, you must also specify a `certificateAuthorityArn` in `server_certificate_configuration`.

`revoked_status_action` - (Optional) how Network Firewall processes traffic when it determines that the certificate presented by the server in the SSL/TLS connection has a revoked status. See [Checking certificate revocation status](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection-certificate-requirements.html#tls-inspection-check-certificate-revocation-status) for details. Valid values: `PASS`, `DROP`, `REJECT`.
`unknown_status_action` - (Optional) How Network Firewall processes traffic when it determines that the certificate presented by the server in the SSL/TLS connection has an unknown status, or a status that cannot be determined for any other reason, including when the service is unable to connect to the OCSP and CRL endpoints for the certificate. See [Checking certificate revocation status](https://docs.aws.amazon.com/network-firewall/latest/developerguide/tls-inspection-certificate-requirements.html#tls-inspection-check-certificate-revocation-status) for details. Valid values: `PASS`, `DROP`, `REJECT`.

### Scopes

The `scope` block supports the following arguments:

* `destination` - (Required) Set of configuration blocks describing the destination IP address and address ranges to inspect for, in CIDR notation. If not specified, this matches with any destination address. See [Destination](#destination) below for details.
* `destination_ports` - (Optional) Set of configuration blocks describing the destination ports to inspect for. If not specified, this matches with any destination port. See [Destination Ports](#destination-ports) below for details.
* `protocols` - (Optional) Set of protocols to inspect for, specified using the protocol's assigned internet protocol number (IANA). Network Firewall currently supports TCP only. Valid values: `6`
* `source` - (Optional) Set of configuration blocks describing the source IP address and address ranges to inspect for, in CIDR notation. If not specified, this matches with any source address. See [Source](#source) below for details.
* `source_ports` - (Optional) Set of configuration blocks describing the source ports to inspect for. If not specified, this matches with any source port. See [Source Ports](#source-ports) below for details.

### Destination

The `destination` block supports the following argument:

* `addressDefinition` - (Required)  An IP address or a block of IP addresses in CIDR notation. AWS Network Firewall supports all address ranges for IPv4.

### Destination Ports

The `destination_ports` block supports the following arguments:

* `from_ports` - (Required) The lower limit of the port range. This must be less than or equal to the `toPort`.
* `to_ports` - (Optional) The upper limit of the port range. This must be greater than or equal to the `fromPort`.

### Source

The `source` block supports the following argument:

* `addressDefinition` - (Required)  An IP address or a block of IP addresses in CIDR notation. AWS Network Firewall supports all address ranges for IPv4.

### Source Ports

The `source_ports` block supports the following arguments:

* `fromPort` - (Required) The lower limit of the port range. This must be less than or equal to the `toPort`.
* `toPort` - (Optional) The upper limit of the port range. This must be greater than or equal to the `fromPort`.

### Server Certificates

The `serverCertificate` block supports the following arguments:

* `resourceArn` - (Optional) ARN of the Certificate Manager SSL/TLS server certificate that's used for inbound SSL/TLS inspection.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the TLS Inspection Configuration.
* `certificateAuthority` - Certificate Manager certificate block. See [Certificate Authority](#certificate-authority) below for details.
* `certificates` - List of certificate blocks describing certificates associated with the TLS inspection configuration. See [Certificates](#certificates) below for details.
* `number_of_associations` - Number of firewall policies that use this TLS inspection configuration.
* `tls_inspection_configuration_id` - A unique identifier for the TLS inspection configuration.
* `updateToken` - String token used when updating the rule group.

### Certificate Authority

The `certificateAuthority` block exports the following attributes:

* `certificateArn` - ARN of the certificate.
* `certificate_serial` -  Serial number of the certificate.
* `status` - Status of the certificate.
* `statusMessage` - Details about the certificate status, including information about certificate errors.

### Certificates

The `certificates` block exports the following attributes:

* `certificateArn` - ARN of the certificate.
* `certificate_serial` -  Serial number of the certificate.
* `status` - Status of the certificate.
* `statusMessage` - Details about the certificate status, including information about certificate errors.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30m`)
* `update` - (Default `30m`)
* `delete` - (Default `30m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Network Firewall TLS Inspection Configuration using the `arn`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { NetworkfirewallTlsInspectionConfiguration } from "./.gen/providers/aws/";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    NetworkfirewallTlsInspectionConfiguration.generateConfigForImport(
      this,
      "example",
      "arn:aws:network-firewall::<region>:<account_id>:tls-configuration/example"
    );
  }
}

```

Using `terraform import`, import Network Firewall TLS Inspection Configuration using the `arn`. For example:

```console
% terraform import aws_networkfirewall_tls_inspection_configuration.example arn:aws:network-firewall::<region>:<account_id>:tls-configuration/example
```

<!-- cache-key: cdktf-0.20.1 input-a6cbd3c0919ebf7b4427b805db64d4ea8ed7025bb8d8161a1265dea1453f11dd -->