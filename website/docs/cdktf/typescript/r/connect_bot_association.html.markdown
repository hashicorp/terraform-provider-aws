---
subcategory: "Connect"
layout: "aws"
page_title: "AWS: aws_connect_bot_association"
description: |-
  Associates an Amazon Connect instance to an Amazon Lex (V1) bot
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_connect_bot_association

Allows the specified Amazon Connect instance to access the specified Amazon Lex (V1) bot. For more information see
[Amazon Connect: Getting Started](https://docs.aws.amazon.com/connect/latest/adminguide/amazon-connect-get-started.html) and [Add an Amazon Lex bot](https://docs.aws.amazon.com/connect/latest/adminguide/amazon-lex.html).

~> **NOTE:** This resource only currently supports Amazon Lex (V1) Associations.

## Example Usage

### Basic

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConnectBotAssociation } from "./.gen/providers/aws/connect-bot-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new ConnectBotAssociation(this, "example", {
      instanceId: Token.asString(awsConnectInstanceExample.id),
      lexBot: {
        lexRegion: "us-west-2",
        name: "Test",
      },
    });
  }
}

```

### Including a sample Lex bot

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConnectBotAssociation } from "./.gen/providers/aws/connect-bot-association";
import { DataAwsRegion } from "./.gen/providers/aws/data-aws-region";
import { LexBot } from "./.gen/providers/aws/lex-bot";
import { LexIntent } from "./.gen/providers/aws/lex-intent";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new LexIntent(this, "example", {
      createVersion: true,
      fulfillmentActivity: {
        type: "ReturnIntent",
      },
      name: "connect_lex_intent",
      sampleUtterances: ["I would like to pick up flowers."],
    });
    const current = new DataAwsRegion(this, "current", {});
    const awsLexBotExample = new LexBot(this, "example_2", {
      abortStatement: {
        message: [
          {
            content: "Sorry, I am not able to assist at this time.",
            contentType: "PlainText",
          },
        ],
      },
      childDirected: false,
      clarificationPrompt: {
        maxAttempts: 2,
        message: [
          {
            content: "I didn't understand you, what would you like to do?",
            contentType: "PlainText",
          },
        ],
      },
      intent: [
        {
          intentName: example.name,
          intentVersion: "1",
        },
      ],
      name: "connect_lex_bot",
      processBehavior: "BUILD",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsLexBotExample.overrideLogicalId("example");
    const awsConnectBotAssociationExample = new ConnectBotAssociation(
      this,
      "example_3",
      {
        instanceId: Token.asString(awsConnectInstanceExample.id),
        lexBot: {
          lexRegion: Token.asString(current.name),
          name: Token.asString(awsLexBotExample.name),
        },
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsConnectBotAssociationExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `instanceId` - (Required) The identifier of the Amazon Connect instance. You can find the instanceId in the ARN of the instance.
* `lexBot` - (Required) Configuration information of an Amazon Lex (V1) bot. Detailed below.

### lex_bot

The `lexBot` configuration block supports the following:

* `name` - (Required) The name of the Amazon Lex (V1) bot.
* `lexRegion` - (Optional) The Region that the Amazon Lex (V1) bot was created in. Defaults to current region.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The Amazon Connect instance ID, Lex (V1) bot name, and Lex (V1) bot region separated by colons (`:`).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_connect_bot_association` using the Amazon Connect instance ID, Lex (V1) bot name, and Lex (V1) bot region separated by colons (`:`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConnectBotAssociation } from "./.gen/providers/aws/connect-bot-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ConnectBotAssociation.generateConfigForImport(
      this,
      "example",
      "aaaaaaaa-bbbb-cccc-dddd-111111111111:Example:us-west-2"
    );
  }
}

```

Using `terraform import`, import `aws_connect_bot_association` using the Amazon Connect instance ID, Lex (V1) bot name, and Lex (V1) bot region separated by colons (`:`). For example:

```console
% terraform import aws_connect_bot_association.example aaaaaaaa-bbbb-cccc-dddd-111111111111:Example:us-west-2
```

<!-- cache-key: cdktf-0.20.8 input-a2f9c06dc453656a33c733da12968f311c1fb8ca4fa4a21171e1bb6249dad8c8 -->