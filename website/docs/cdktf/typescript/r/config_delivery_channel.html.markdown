---
subcategory: "Config"
layout: "aws"
page_title: "AWS: aws_config_delivery_channel"
description: |-
  Provides an AWS Config Delivery Channel.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_config_delivery_channel

Provides an AWS Config Delivery Channel.

~> **Note:** Delivery Channel requires a [Configuration Recorder](/docs/providers/aws/r/config_configuration_recorder.html) to be present. Use of `dependsOn` (as shown below) is recommended to avoid race conditions.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConfigConfigurationRecorder } from "./.gen/providers/aws/config-configuration-recorder";
import { ConfigDeliveryChannel } from "./.gen/providers/aws/config-delivery-channel";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { IamRolePolicy } from "./.gen/providers/aws/iam-role-policy";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const b = new S3Bucket(this, "b", {
      bucket: "example-awsconfig",
      forceDestroy: true,
    });
    const assumeRole = new DataAwsIamPolicyDocument(this, "assume_role", {
      statement: [
        {
          actions: ["sts:AssumeRole"],
          effect: "Allow",
          principals: [
            {
              identifiers: ["config.amazonaws.com"],
              type: "Service",
            },
          ],
        },
      ],
    });
    const p = new DataAwsIamPolicyDocument(this, "p", {
      statement: [
        {
          actions: ["s3:*"],
          effect: "Allow",
          resources: [b.arn, "${" + b.arn + "}/*"],
        },
      ],
    });
    const r = new IamRole(this, "r", {
      assumeRolePolicy: Token.asString(assumeRole.json),
      name: "awsconfig-example",
    });
    const awsIamRolePolicyP = new IamRolePolicy(this, "p_4", {
      name: "awsconfig-example",
      policy: Token.asString(p.json),
      role: r.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRolePolicyP.overrideLogicalId("p");
    const foo = new ConfigConfigurationRecorder(this, "foo", {
      name: "example",
      roleArn: r.arn,
    });
    const awsConfigDeliveryChannelFoo = new ConfigDeliveryChannel(
      this,
      "foo_6",
      {
        dependsOn: [foo],
        name: "example",
        s3BucketName: b.bucket,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsConfigDeliveryChannelFoo.overrideLogicalId("foo");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `name` - (Optional) The name of the delivery channel. Defaults to `default`. Changing it recreates the resource.
* `s3BucketName` - (Required) The name of the S3 bucket used to store the configuration history.
* `s3KeyPrefix` - (Optional) The prefix for the specified S3 bucket.
* `s3KmsKeyArn` - (Optional) The ARN of the AWS KMS key used to encrypt objects delivered by AWS Config. Must belong to the same Region as the destination S3 bucket.
* `snsTopicArn` - (Optional) The ARN of the SNS topic that AWS Config delivers notifications to.
* `snapshotDeliveryProperties` - (Optional) Options for how AWS Config delivers configuration snapshots. See below

### `snapshotDeliveryProperties`

* `deliveryFrequency` - (Optional) - The frequency with which AWS Config recurringly delivers configuration snapshotsE.g., `One_Hour` or `Three_Hours`. Valid values are listed [here](https://docs.aws.amazon.com/config/latest/APIReference/API_ConfigSnapshotDeliveryProperties.html#API_ConfigSnapshotDeliveryProperties_Contents).

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The name of the delivery channel.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Delivery Channel using the name. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { ConfigDeliveryChannel } from "./.gen/providers/aws/config-delivery-channel";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    ConfigDeliveryChannel.generateConfigForImport(this, "foo", "example");
  }
}

```

Using `terraform import`, import Delivery Channel using the name. For example:

```console
% terraform import aws_config_delivery_channel.foo example
```

<!-- cache-key: cdktf-0.20.8 input-54435b5e17865652d2b4e1be7bdaf36c37288ea5a996a242391550ce3763b0a2 -->