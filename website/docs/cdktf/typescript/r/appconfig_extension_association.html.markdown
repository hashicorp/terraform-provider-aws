---
subcategory: "AppConfig"
layout: "aws"
page_title: "AWS: aws_appconfig_extension_association"
description: |-
  Associates an AppConfig Extension with a Resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_appconfig_extension_association

Associates an AppConfig Extension with a Resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppconfigApplication } from "./.gen/providers/aws/appconfig-application";
import { AppconfigExtension } from "./.gen/providers/aws/appconfig-extension";
import { AppconfigExtensionAssociation } from "./.gen/providers/aws/appconfig-extension-association";
import { DataAwsIamPolicyDocument } from "./.gen/providers/aws/data-aws-iam-policy-document";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { SnsTopic } from "./.gen/providers/aws/sns-topic";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const test = new AppconfigApplication(this, "test", {
      name: "test",
    });
    const awsSnsTopicTest = new SnsTopic(this, "test_1", {
      name: "test",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSnsTopicTest.overrideLogicalId("test");
    const dataAwsIamPolicyDocumentTest = new DataAwsIamPolicyDocument(
      this,
      "test_2",
      {
        statement: [
          {
            actions: ["sts:AssumeRole"],
            principals: [
              {
                identifiers: ["appconfig.amazonaws.com"],
                type: "Service",
              },
            ],
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsIamPolicyDocumentTest.overrideLogicalId("test");
    const awsIamRoleTest = new IamRole(this, "test_3", {
      assumeRolePolicy: Token.asString(dataAwsIamPolicyDocumentTest.json),
      name: "test",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsIamRoleTest.overrideLogicalId("test");
    const awsAppconfigExtensionTest = new AppconfigExtension(this, "test_4", {
      actionPoint: [
        {
          action: [
            {
              name: "test",
              roleArn: Token.asString(awsIamRoleTest.arn),
              uri: Token.asString(awsSnsTopicTest.arn),
            },
          ],
          point: "ON_DEPLOYMENT_COMPLETE",
        },
      ],
      description: "test description",
      name: "test",
      tags: {
        Type: "AppConfig Extension",
      },
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAppconfigExtensionTest.overrideLogicalId("test");
    const awsAppconfigExtensionAssociationTest =
      new AppconfigExtensionAssociation(this, "test_5", {
        extensionArn: Token.asString(awsAppconfigExtensionTest.arn),
        resourceArn: test.arn,
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAppconfigExtensionAssociationTest.overrideLogicalId("test");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `extensionArn` - (Required) The ARN of the extension defined in the association.
* `resourceArn` - (Optional) The ARN of the application, configuration profile, or environment to associate with the extension.
* `parameters` - (Optional) The parameter names and values defined for the association.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the AppConfig Extension Association.
* `id` - AppConfig Extension Association ID.
* `extensionVersion` - The version number for the extension defined in the association.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import AppConfig Extension Associations using their extension association ID. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AppconfigExtensionAssociation } from "./.gen/providers/aws/appconfig-extension-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    AppconfigExtensionAssociation.generateConfigForImport(
      this,
      "example",
      "71rxuzt"
    );
  }
}

```

Using `terraform import`, import AppConfig Extension Associations using their extension association ID. For example:

```console
% terraform import aws_appconfig_extension_association.example 71rxuzt
```

<!-- cache-key: cdktf-0.20.8 input-17365f1464d46d38d1dcf2819aa51132f201f9fd4618e6d0e60185e1fad561f2 -->