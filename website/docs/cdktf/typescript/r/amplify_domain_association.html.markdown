---
subcategory: "Amplify"
layout: "aws"
page_title: "AWS: aws_amplify_domain_association"
description: |-
  Provides an Amplify Domain Association resource.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_amplify_domain_association

Provides an Amplify Domain Association resource.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AmplifyApp } from "./.gen/providers/aws/amplify-app";
import { AmplifyBranch } from "./.gen/providers/aws/amplify-branch";
import { AmplifyDomainAssociation } from "./.gen/providers/aws/amplify-domain-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new AmplifyApp(this, "example", {
      customRule: [
        {
          source: "https://example.com",
          status: "302",
          target: "https://www.example.com",
        },
      ],
      name: "app",
    });
    const master = new AmplifyBranch(this, "master", {
      appId: example.id,
      branchName: "master",
    });
    const awsAmplifyDomainAssociationExample = new AmplifyDomainAssociation(
      this,
      "example_2",
      {
        appId: example.id,
        domainName: "example.com",
        subDomain: [
          {
            branchName: master.branchName,
            prefix: "",
          },
          {
            branchName: master.branchName,
            prefix: "www",
          },
        ],
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAmplifyDomainAssociationExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `appId` - (Required) Unique ID for an Amplify app.
* `certificateSettings` - (Optional) The type of SSL/TLS certificate to use for your custom domain. If you don't specify a certificate type, Amplify uses the default certificate that it provisions and manages for you.
* `domainName` - (Required) Domain name for the domain association.
* `enableAutoSubDomain` - (Optional) Enables the automated creation of subdomains for branches.
* `subDomain` - (Required) Setting for the subdomain. Documented below.
* `waitForVerification` - (Optional) If enabled, the resource will wait for the domain association status to change to `PENDING_DEPLOYMENT` or `AVAILABLE`. Setting this to `false` will skip the process. Default: `true`.

The `certificateSettings` configuration block supports the following arguments:

* `type` - (Required) The certificate type. Valid values are `AMPLIFY_MANAGED` and `CUSTOM`.
* `customCertificateArn` - (Optional) The Amazon resource name (ARN) for the custom certificate.

The `subDomain` configuration block supports the following arguments:

* `branchName` - (Required) Branch name setting for the subdomain.
* `prefix` - (Required) Prefix setting for the subdomain.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN for the domain association.
* `certificateVerificationDnsRecord` - DNS records for certificate verification in a space-delimited format (`<record> CNAME <target>`).

The `subDomain` configuration block exports the following attributes:

* `dnsRecord` - DNS record for the subdomain in a space-prefixed and space-delimited format (` CNAME <target>`).
* `verified` - Verified status of the subdomain.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import Amplify domain association using `appId` and `domainName`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { AmplifyDomainAssociation } from "./.gen/providers/aws/amplify-domain-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    AmplifyDomainAssociation.generateConfigForImport(
      this,
      "app",
      "d2ypk4k47z8u6/example.com"
    );
  }
}

```

Using `terraform import`, import Amplify domain association using `appId` and `domainName`. For example:

```console
% terraform import aws_amplify_domain_association.app d2ypk4k47z8u6/example.com
```

<!-- cache-key: cdktf-0.20.1 input-be62188dd78c2bc3fe33b226ce5b4ddaa94e43d964007891a09d32a8b7f4f2bc -->