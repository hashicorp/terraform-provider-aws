---
subcategory: "Transit Gateway"
layout: "aws"
page_title: "AWS: aws_ec2_transit_gateway_peering_attachment"
description: |-
  Manages an EC2 Transit Gateway Peering Attachment
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_ec2_transit_gateway_peering_attachment

Manages an EC2 Transit Gateway Peering Attachment.
For examples of custom route table association and propagation, see the [EC2 Transit Gateway Networking Examples Guide](https://docs.aws.amazon.com/vpc/latest/tgw/TGW_Scenarios.html).

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsRegion } from "./.gen/providers/aws/data-aws-region";
import { Ec2TransitGateway } from "./.gen/providers/aws/ec2-transit-gateway";
import { Ec2TransitGatewayPeeringAttachment } from "./.gen/providers/aws/ec2-transit-gateway-peering-attachment";
import { AwsProvider } from "./.gen/providers/aws/provider";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const local = new AwsProvider(this, "aws", {
      alias: "local",
      region: "us-east-1",
    });
    const peer = new AwsProvider(this, "aws_1", {
      alias: "peer",
      region: "us-west-2",
    });
    const awsEc2TransitGatewayLocal = new Ec2TransitGateway(this, "local", {
      provider: local,
      tags: {
        Name: "Local TGW",
      },
    });
    const awsEc2TransitGatewayPeer = new Ec2TransitGateway(this, "peer", {
      provider: peer,
      tags: {
        Name: "Peer TGW",
      },
    });
    const dataAwsRegionPeer = new DataAwsRegion(this, "peer_4", {
      provider: peer,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    dataAwsRegionPeer.overrideLogicalId("peer");
    new Ec2TransitGatewayPeeringAttachment(this, "example", {
      peerAccountId: Token.asString(awsEc2TransitGatewayPeer.ownerId),
      peerRegion: Token.asString(dataAwsRegionPeer.name),
      peerTransitGatewayId: Token.asString(awsEc2TransitGatewayPeer.id),
      tags: {
        Name: "TGW Peering Requestor",
      },
      transitGatewayId: Token.asString(awsEc2TransitGatewayLocal.id),
    });
  }
}

```

A full example of how to create a Transit Gateway in one AWS account, share it with a second AWS account, and attach a to a Transit Gateway in the second account via the `aws_ec2_transit_gateway_peering_attachment` resource can be found in [the `./examples/transit-gateway-cross-account-peering-attachment` directory within the Github Repository](https://github.com/hashicorp/terraform-provider-aws/tree/main/examples/transit-gateway-cross-account-peering-attachment).

## Argument Reference

This resource supports the following arguments:

* `peerAccountId` - (Optional) Account ID of EC2 Transit Gateway to peer with. Defaults to the account ID the [AWS provider][1] is currently connected to.
* `peerRegion` - (Required) Region of EC2 Transit Gateway to peer with.
* `peerTransitGatewayId` - (Required) Identifier of EC2 Transit Gateway to peer with.
* `options` - (Optional) Describes whether dynamic routing is enabled or disabled for the transit gateway peering request. See [options](#options) below for more details!
* `tags` - (Optional) Key-value tags for the EC2 Transit Gateway Peering Attachment. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `transitGatewayId` - (Required) Identifier of EC2 Transit Gateway.

### options

The `options` block supports the following:

* `dynamicRouting` - (Optional) Indicates whether dynamic routing is enabled or disabled.. Supports `enable` and `disable`.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - EC2 Transit Gateway Attachment identifier
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import `aws_ec2_transit_gateway_peering_attachment` using the EC2 Transit Gateway Attachment identifier. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Ec2TransitGatewayPeeringAttachment } from "./.gen/providers/aws/ec2-transit-gateway-peering-attachment";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    Ec2TransitGatewayPeeringAttachment.generateConfigForImport(
      this,
      "example",
      "tgw-attach-12345678"
    );
  }
}

```

Using `terraform import`, import `aws_ec2_transit_gateway_peering_attachment` using the EC2 Transit Gateway Attachment identifier. For example:

```console
% terraform import aws_ec2_transit_gateway_peering_attachment.example tgw-attach-12345678
```

[1]: /docs/providers/aws/index.html

<!-- cache-key: cdktf-0.20.1 input-41020aee510c0b05bb83970e5a2476a6ad33b6555e1212019aa8de77dffc534d -->