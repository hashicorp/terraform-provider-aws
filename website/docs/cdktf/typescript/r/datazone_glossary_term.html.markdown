---
subcategory: "DataZone"
layout: "aws"
page_title: "AWS: aws_datazone_glossary_term"
description: |-
  Terraform resource for managing an AWS DataZone Glossary Term.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_datazone_glossary_term

Terraform resource for managing an AWS DataZone Glossary Term.

## Example Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DatazoneDomain } from "./.gen/providers/aws/datazone-domain";
import { DatazoneGlossary } from "./.gen/providers/aws/datazone-glossary";
import { DatazoneGlossaryTerm } from "./.gen/providers/aws/datazone-glossary-term";
import { DatazoneProject } from "./.gen/providers/aws/datazone-project";
import { IamRole } from "./.gen/providers/aws/iam-role";
import { SecurityGroup } from "./.gen/providers/aws/security-group";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const example = new IamRole(this, "example", {
      assumeRolePolicy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: ["sts:AssumeRole", "sts:TagSession"],
              Effect: "Allow",
              Principal: {
                Service: "datazone.amazonaws.com",
              },
            },
            {
              Action: ["sts:AssumeRole", "sts:TagSession"],
              Effect: "Allow",
              Principal: {
                Service: "cloudformation.amazonaws.com",
              },
            },
          ],
          Version: "2012-10-17",
        })
      ),
      inlinePolicy: [
        {
          name: "example",
          policy: Token.asString(
            Fn.jsonencode({
              Statement: [
                {
                  Action: ["datazone:*", "ram:*", "sso:*", "kms:*"],
                  Effect: "Allow",
                  Resource: "*",
                },
              ],
              Version: "2012-10-17",
            })
          ),
        },
      ],
      name: "example",
    });
    const awsSecurityGroupExample = new SecurityGroup(this, "example_1", {
      name: "example_name",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSecurityGroupExample.overrideLogicalId("example");
    const awsDatazoneDomainExample = new DatazoneDomain(this, "example_2", {
      domainExecutionRole: example.arn,
      name: "example_name",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDatazoneDomainExample.overrideLogicalId("example");
    const awsDatazoneProjectExample = new DatazoneProject(this, "example_3", {
      domainIdentifier: Token.asString(awsDatazoneDomainExample.id),
      glossaryTerms: ["2N8w6XJCwZf"],
      name: "example",
      skipDeletionCheck: true,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDatazoneProjectExample.overrideLogicalId("example");
    const awsDatazoneGlossaryExample = new DatazoneGlossary(this, "example_4", {
      description: "description",
      domainIdentifier: Token.asString(
        awsDatazoneProjectExample.domainIdentifier
      ),
      name: "example",
      owningProjectIdentifier: Token.asString(awsDatazoneProjectExample.id),
      status: "ENABLED",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDatazoneGlossaryExample.overrideLogicalId("example");
    const awsDatazoneGlossaryTermExample = new DatazoneGlossaryTerm(
      this,
      "example_5",
      {
        domainIdentifier: Token.asString(awsDatazoneDomainExample.id),
        glossaryIdentifier: Token.asString(awsDatazoneGlossaryExample.id),
        name: "example",
        status: "ENABLED",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsDatazoneGlossaryTermExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

The following arguments are required:

* `domainIdentifier` - (Required) Identifier of domain.
* `glossaryIdentifier` - (Required) Identifier of glossary.
* `name` - (Required) Name of glossary term.

The following arguments are optional:

* `longDescription` - (Optional) Long description of entry.
* `shortDescription` - (Optional) Short description of entry.
* `status` - (Optional) If glossary term is ENABLED or DISABLED.
* `termRelations` - (Optional) Object classifying the term relations through the following attributes:
    * `classifies` - (Optional) String array that calssifies the term relations.
    * `is_as` - (Optional) The isA property of the term relations.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - Id of the glossary term.
* `createdAt` - Time of glossary term creation.
* `createdBy` - Creator of glossary term.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `30s`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import DataZone Glossary Term using a comma-delimited string combining the `domainIdentifier`, `id`, and the `glossaryIdentifier`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DatazoneGlossaryTerm } from "./.gen/providers/aws/datazone-glossary-term";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    DatazoneGlossaryTerm.generateConfigForImport(
      this,
      "example",
      "domain_identifier,id,glossary_identifier"
    );
  }
}

```

Using `terraform import`, import DataZone Glossary Term using a comma-delimited string combining the `domainIdentifier`, `id`, and the `glossaryIdentifier`. For example:

```console
% terraform import aws_datazone_glossary_term.example domain-id,glossary-term-id,glossary-id
```

<!-- cache-key: cdktf-0.20.1 input-c37c106222a8610b78c71f287b61a97f73ed65e0fcf11dc9955f4ce2e9b9506c -->