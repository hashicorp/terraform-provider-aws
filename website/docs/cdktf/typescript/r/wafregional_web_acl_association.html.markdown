---
subcategory: "WAF Classic Regional"
layout: "aws"
page_title: "AWS: aws_wafregional_web_acl_association"
description: |-
  Manages an association with WAF Regional Web ACL
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_wafregional_web_acl_association

Manages an association with WAF Regional Web ACL.

-> **Note:** An Application Load Balancer can only be associated with one WAF Regional WebACL.

## Example Usage

### Application Load Balancer Association

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Alb } from "./.gen/providers/aws/alb";
import { DataAwsAvailabilityZones } from "./.gen/providers/aws/data-aws-availability-zones";
import { Subnet } from "./.gen/providers/aws/subnet";
import { Vpc } from "./.gen/providers/aws/vpc";
import { WafregionalIpset } from "./.gen/providers/aws/wafregional-ipset";
import { WafregionalRule } from "./.gen/providers/aws/wafregional-rule";
import { WafregionalWebAcl } from "./.gen/providers/aws/wafregional-web-acl";
import { WafregionalWebAclAssociation } from "./.gen/providers/aws/wafregional-web-acl-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const foo = new Vpc(this, "foo", {
      cidrBlock: "10.1.0.0/16",
    });
    const ipset = new WafregionalIpset(this, "ipset", {
      ipSetDescriptor: [
        {
          type: "IPV4",
          value: "192.0.7.0/24",
        },
      ],
      name: "tfIPSet",
    });
    const awsWafregionalRuleFoo = new WafregionalRule(this, "foo_2", {
      metricName: "tfWAFRule",
      name: "tfWAFRule",
      predicate: [
        {
          dataId: ipset.id,
          negated: false,
          type: "IPMatch",
        },
      ],
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsWafregionalRuleFoo.overrideLogicalId("foo");
    const awsWafregionalWebAclFoo = new WafregionalWebAcl(this, "foo_3", {
      defaultAction: {
        type: "ALLOW",
      },
      metricName: "foo",
      name: "foo",
      rule: [
        {
          action: {
            type: "BLOCK",
          },
          priority: 1,
          ruleId: Token.asString(awsWafregionalRuleFoo.id),
        },
      ],
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsWafregionalWebAclFoo.overrideLogicalId("foo");
    const available = new DataAwsAvailabilityZones(this, "available", {});
    const bar = new Subnet(this, "bar", {
      availabilityZone: Token.asString(Fn.lookupNested(available.names, ["1"])),
      cidrBlock: "10.1.2.0/24",
      vpcId: foo.id,
    });
    const awsSubnetFoo = new Subnet(this, "foo_6", {
      availabilityZone: Token.asString(Fn.lookupNested(available.names, ["0"])),
      cidrBlock: "10.1.1.0/24",
      vpcId: foo.id,
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsSubnetFoo.overrideLogicalId("foo");
    const awsAlbFoo = new Alb(this, "foo_7", {
      internal: true,
      subnets: [Token.asString(awsSubnetFoo.id), bar.id],
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsAlbFoo.overrideLogicalId("foo");
    const awsWafregionalWebAclAssociationFoo = new WafregionalWebAclAssociation(
      this,
      "foo_8",
      {
        resourceArn: Token.asString(awsAlbFoo.arn),
        webAclId: Token.asString(awsWafregionalWebAclFoo.id),
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsWafregionalWebAclAssociationFoo.overrideLogicalId("foo");
  }
}

```

### API Gateway Association

```terraform
resource "aws_wafregional_ipset" "ipset" {
  name = "tfIPSet"

  ip_set_descriptor {
    type  = "IPV4"
    value = "192.0.7.0/24"
  }
}

resource "aws_wafregional_rule" "foo" {
  name        = "tfWAFRule"
  metric_name = "tfWAFRule"

  predicate {
    data_id = aws_wafregional_ipset.ipset.id
    negated = false
    type    = "IPMatch"
  }
}

resource "aws_wafregional_web_acl" "foo" {
  name        = "foo"
  metric_name = "foo"

  default_action {
    type = "ALLOW"
  }

  rule {
    action {
      type = "BLOCK"
    }

    priority = 1
    rule_id  = aws_wafregional_rule.foo.id
  }
}

resource "aws_api_gateway_rest_api" "example" {
  body = jsonencode({
    openapi = "3.0.1"
    info = {
      title   = "example"
      version = "1.0"
    }
    paths = {
      "/path1" = {
        get = {
          x-amazon-apigateway-integration = {
            httpMethod           = "GET"
            payloadFormatVersion = "1.0"
            type                 = "HTTP_PROXY"
            uri                  = "https://ip-ranges.amazonaws.com/ip-ranges.json"
          }
        }
      }
    }
  })

  name = "example"
}

resource "aws_api_gateway_deployment" "example" {
  rest_api_id = aws_api_gateway_rest_api.example.id

  triggers = {
    redeployment = sha1(jsonencode(aws_api_gateway_rest_api.example.body))
  }

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_api_gateway_stage" "example" {
  deployment_id = aws_api_gateway_deployment.example.id
  rest_api_id   = aws_api_gateway_rest_api.example.id
  stage_name    = "example"
}

resource "aws_wafregional_web_acl_association" "association" {
  resource_arn = aws_api_gateway_stage.example.arn
  web_acl_id   = aws_wafregional_web_acl.foo.id
}
```

## Argument Reference

This resource supports the following arguments:

* `webAclId` - (Required) The ID of the WAF Regional WebACL to create an association.
* `resourceArn` - (Required) ARN of the resource to associate with. For example, an Application Load Balancer or API Gateway Stage.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The ID of the association

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

- `create` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import WAF Regional Web ACL Association using their `web_acl_id:resource_arn`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { WafregionalWebAclAssociation } from "./.gen/providers/aws/wafregional-web-acl-association";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    WafregionalWebAclAssociation.generateConfigForImport(
      this,
      "foo",
      "web_acl_id:resource_arn"
    );
  }
}

```

Using `terraform import`, import WAF Regional Web ACL Association using their `web_acl_id:resource_arn`. For example:

```console
% terraform import aws_wafregional_web_acl_association.foo web_acl_id:resource_arn
```

<!-- cache-key: cdktf-0.20.1 input-748840947a2a9cc391b869f3bab0bc54cc54f0f6f837b68a1e0e5c25081b9174 -->