---
subcategory: "VPC Lattice"
layout: "aws"
page_title: "AWS: aws_vpclattice_resource_configuration"
description: |-
  Terraform resource for managing an AWS VPC Lattice Resource Configuration.
---

<!-- Please do not edit this file, it is generated. -->
# Resource: aws_vpclattice_resource_configuration

Terraform resource for managing an AWS VPC Lattice Resource Configuration.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VpclatticeResourceConfiguration } from "./.gen/providers/aws/vpclattice-resource-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new VpclatticeResourceConfiguration(this, "example", {
      name: "Example",
      portRanges: ["80"],
      protocol: "TCP",
      resourceConfigurationDefinition: [
        {
          dnsResource: [
            {
              domainName: "example.com",
              ipAddressType: "IPV4",
            },
          ],
        },
      ],
      resourceGatewayIdentifier: Token.asString(
        awsVpclatticeResourceGatewayExample.id
      ),
      tags: {
        Environment: "Example",
      },
    });
  }
}

```

### IP Address Example

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VpclatticeResourceConfiguration } from "./.gen/providers/aws/vpclattice-resource-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new VpclatticeResourceConfiguration(this, "example", {
      name: "Example",
      portRanges: ["80"],
      protocol: "TCP",
      resourceConfigurationDefinition: [
        {
          ipResource: [
            {
              ipAddress: "10.0.0.1",
            },
          ],
        },
      ],
      resourceGatewayIdentifier: Token.asString(
        awsVpclatticeResourceGatewayExample.id
      ),
      tags: {
        Environment: "Example",
      },
    });
  }
}

```

### ARN Example

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VpclatticeResourceConfiguration } from "./.gen/providers/aws/vpclattice-resource-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new VpclatticeResourceConfiguration(this, "test", {
      name: "Example",
      resourceConfigurationDefinition: [
        {
          arnResource: [
            {
              arn: example.arn,
            },
          ],
        },
      ],
      resourceGatewayIdentifier: Token.asString(
        awsVpclatticeResourceGatewayTest.id
      ),
      type: "ARN",
    });
  }
}

```

## Argument Reference

The following arguments are required:

* `name` - (Required) Name for the Resource Configuration.
* `portRanges` - (Required) Port ranges to access the Resource either single port `80` or range `80-81` range.
* `resourceConfigurationDefinition` - (Required) Details of the Resource Configuration. See [`resourceConfigurationDefinition` Block](#resource_configuration_definition-block) for details.

The following arguments are optional:

* `allowAssociationToShareableServiceNetwork` (Optional) Allow or Deny the association of this resource to a shareable service network.
* `protocol` - (Optional) Protocol for the Resource `TCP` is currently the only supported value.  MUST be specified if `resourceConfigurationGroupId` is not.
* `resourceConfigurationGroupId` (Optional) ID of Resource Configuration where `type` is `CHILD`.
* `resourceGatewayIdentifier` - (Optional) ID of the Resource Gateway used to access the resource. MUST be specified if `resourceConfigurationGroupId` is not.
* `tags` - (Optional) Key-value mapping of resource tags. If configured with a provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `type` - (Optional) Type of Resource Configuration. Must be one of `GROUP`, `CHILD`, `SINGLE`, `ARN`.

### `resourceConfigurationDefinition` Block

One of `dnsResource`, `ipResource`, `arnResource` must be specified.

The following arguments are optional:

* `arnResource` - (Optional) Resource DNS Configuration. See [`arnResource` Block](#arn_resource-block) for details.
* `dnsResource` - (Optional) Resource DNS Configuration. See [`dnsResource` Block](#dns_resource-block) for details.
* `ipResource` - (Optional) Resource DNS Configuration. See [`ipResource` Block](#ip_resource-block) for details.

### `arnResource` Block

The following arguments are required:

* `arn` - (Required) The ARN of the Resource for this configuration.

### `dnsResource` Block

The following arguments are required:

* `domainName` - (Required) The hostname of the Resource for this configuration.
* `ipAddressType` - (Required) The IP Address type either `IPV4` or `IPV6`

### `ipResource` Block

The following arguments are required:

* `ipAddress` - (Required) The IP Address of the Resource for this configuration.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `arn` - ARN of the resource gateway.
* `id` - ID of the resource gateway.
* `tagsAll` - Map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](/docs/providers/aws/index.html#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `10m`)
* `update` - (Default `10m`)
* `delete` - (Default `10m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import VPC Lattice Resource Configuration using the `id`. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { VpclatticeResourceConfiguration } from "./.gen/providers/aws/vpclattice-resource-configuration";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    VpclatticeResourceConfiguration.generateConfigForImport(
      this,
      "example",
      "rcfg-1234567890abcdef1"
    );
  }
}

```

Using `terraform import`, import VPC Lattice Resource Configuration using the `id`. For example:

```console
% terraform import aws_vpclattice_resource_configuration.example rcfg-1234567890abcdef1
```

<!-- cache-key: cdktf-0.20.8 input-19d894b121c68ef0ef68c13df29b8aa4ac401323432e5b0a6c22cbd001b7733f -->