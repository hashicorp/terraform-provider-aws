---
subcategory: "OpenSearch"
layout: "aws"
page_title: "AWS: aws_opensearch_package"
description: |-
  Terraform resource for managing an AWS OpenSearch package.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_opensearch_package

Manages an AWS Opensearch Package.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Fn, Token, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { OpensearchPackage } from "./.gen/providers/aws/opensearch-package";
import { S3Bucket } from "./.gen/providers/aws/s3-bucket";
import { S3Object } from "./.gen/providers/aws/s3-object";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    const myOpensearchPackages = new S3Bucket(this, "my_opensearch_packages", {
      bucket: "my-opensearch-packages",
    });
    const example = new S3Object(this, "example", {
      bucket: myOpensearchPackages.bucket,
      etag: Token.asString(Fn.filemd5("./example.txt")),
      key: "example.txt",
      source: "./example.txt",
    });
    const awsOpensearchPackageExample = new OpensearchPackage(
      this,
      "example_2",
      {
        packageName: "example-txt",
        packageSource: {
          s3BucketName: myOpensearchPackages.bucket,
          s3Key: example.key,
        },
        packageType: "TXT-DICTIONARY",
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsOpensearchPackageExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `packageName` - (Required, Forces new resource) Unique name for the package.
* `packageType` - (Required, Forces new resource) The type of package.
* `packageSource` - (Required, Forces new resource) Configuration block for the package source options.
* `packageDescription` - (Optional, Forces new resource) Description of the package.

### package_source

* `s3BucketName` - (Required, Forces new resource) The name of the Amazon S3 bucket containing the package.
* `s3Key` - (Required, Forces new resource) Key (file name) of the package.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `id` - The Id of the package.
* `availablePackageVersion` - The current version of the package.

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import AWS Opensearch Packages using the Package ID. For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { OpensearchPackage } from "./.gen/providers/aws/opensearch-package";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    OpensearchPackage.generateConfigForImport(this, "example", "package-id");
  }
}

```

Using `terraform import`, import AWS Opensearch Packages using the Package ID. For example:

```console
% terraform import aws_opensearch_package.example package-id
```

<!-- cache-key: cdktf-0.20.8 input-2ab49a0830ef6a746b9a1be0c59b35031692a911e2d8fee6ae0c1e34af4efbe8 -->