---
subcategory: "Route 53 Domains"
layout: "aws"
page_title: "AWS: aws_route53domains_delegation_signer_record"
description: |-
  Provides a resource to manage a delegation signer record in the parent DNS zone for domains registered with Route53.
---


<!-- Please do not edit this file, it is generated. -->
# Resource: aws_route53domains_delegation_signer_record

Provides a resource to manage a [delegation signer record](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec-enable-signing.html#dns-configuring-dnssec-enable-signing-step-1) in the parent DNS zone for domains registered with Route53.

## Example Usage

### Basic Usage

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { Token, Fn, TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { DataAwsCallerIdentity } from "./.gen/providers/aws/data-aws-caller-identity";
import { KmsKey } from "./.gen/providers/aws/kms-key";
import { AwsProvider } from "./.gen/providers/aws/provider";
import { Route53DomainsDelegationSignerRecord } from "./.gen/providers/aws/route53-domains-delegation-signer-record";
import { Route53HostedZoneDnssec } from "./.gen/providers/aws/route53-hosted-zone-dnssec";
import { Route53KeySigningKey } from "./.gen/providers/aws/route53-key-signing-key";
import { Route53Zone } from "./.gen/providers/aws/route53-zone";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    new AwsProvider(this, "aws", {
      region: "us-east-1",
    });
    const example = new Route53KeySigningKey(this, "example", {
      hostedZoneId: test.id,
      keyManagementServiceArn: Token.asString(awsKmsKeyTest.arn),
      name: "example",
    });
    const awsRoute53ZoneExample = new Route53Zone(this, "example_2", {
      name: "example.com",
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRoute53ZoneExample.overrideLogicalId("example");
    const awsRoute53DomainsDelegationSignerRecordExample =
      new Route53DomainsDelegationSignerRecord(this, "example_3", {
        domainName: "example.com",
        signingAttributes: [
          {
            algorithm: example.signingAlgorithmType,
            flags: example.flag,
            publicKey: example.publicKey,
          },
        ],
      });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRoute53DomainsDelegationSignerRecordExample.overrideLogicalId("example");
    const current = new DataAwsCallerIdentity(this, "current", {});
    const awsKmsKeyExample = new KmsKey(this, "example_5", {
      customerMasterKeySpec: "ECC_NIST_P256",
      deletionWindowInDays: 7,
      keyUsage: "SIGN_VERIFY",
      policy: Token.asString(
        Fn.jsonencode({
          Statement: [
            {
              Action: ["kms:DescribeKey", "kms:GetPublicKey", "kms:Sign"],
              Condition: {
                ArnLike: {
                  "aws:SourceArn": "arn:aws:route53:::hostedzone/*",
                },
                StringEquals: {
                  "aws:SourceAccount": current.accountId,
                },
              },
              Effect: "Allow",
              Principal: {
                Service: "dnssec-route53.amazonaws.com",
              },
              Resource: "*",
              Sid: "Allow Route 53 DNSSEC Service",
            },
            {
              Action: "kms:CreateGrant",
              Condition: {
                Bool: {
                  "kms:GrantIsForAWSResource": "true",
                },
              },
              Effect: "Allow",
              Principal: {
                Service: "dnssec-route53.amazonaws.com",
              },
              Resource: "*",
              Sid: "Allow Route 53 DNSSEC Service to CreateGrant",
            },
            {
              Action: "kms:*",
              Effect: "Allow",
              Principal: {
                AWS: "arn:aws:iam::${" + current.accountId + "}:root",
              },
              Resource: "*",
              Sid: "Enable IAM User Permissions",
            },
          ],
          Version: "2012-10-17",
        })
      ),
    });
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsKmsKeyExample.overrideLogicalId("example");
    const awsRoute53HostedZoneDnssecExample = new Route53HostedZoneDnssec(
      this,
      "example_6",
      {
        dependsOn: [example],
        hostedZoneId: example.hostedZoneId,
      }
    );
    /*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
    awsRoute53HostedZoneDnssecExample.overrideLogicalId("example");
  }
}

```

## Argument Reference

This resource supports the following arguments:

* `domainName` - (Required) The name of the domain that will have its parent DNS zone updated with the Delegation Signer record.
* `signingAttributes` - (Required) The information about a key, including the algorithm, public key-value, and flags.
    * `algorithm` - (Required) Algorithm which was used to generate the digest from the public key.
    * `flags` - (Required) Defines the type of key. It can be either a KSK (key-signing-key, value `257`) or ZSK (zone-signing-key, value `256`).
    * `publicKey` - (Required) The base64-encoded public key part of the key pair that is passed to the registry.

## Attribute Reference

This resource exports the following attributes in addition to the arguments above:

* `dnssecKeyId` - An ID assigned to the created DS record.

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `5m`)
* `delete` - (Default `5m`)

## Import

In Terraform v1.5.0 and later, use an [`import` block](https://developer.hashicorp.com/terraform/language/import) to import delegation signer records using the domain name and DNSSEC key ID, separated by a comma (`,`). For example:

```typescript
// DO NOT EDIT. Code generated by 'cdktf convert' - Please report bugs at https://cdk.tf/bug
import { Construct } from "constructs";
import { TerraformStack } from "cdktf";
/*
 * Provider bindings are generated by running `cdktf get`.
 * See https://cdk.tf/provider-generation for more details.
 */
import { Route53DomainsDelegationSignerRecord } from "./.gen/providers/aws/route53-domains-delegation-signer-record";
class MyConvertedCode extends TerraformStack {
  constructor(scope: Construct, name: string) {
    super(scope, name);
    Route53DomainsDelegationSignerRecord.generateConfigForImport(
      this,
      "example",
      "example.com,40DE3534F5324DBDAC598ACEDB5B1E26A5368732D9C791D1347E4FBDDF6FC343"
    );
  }
}

```

Using `terraform import`, import delegation signer records using the domain name and DNSSEC key ID, separated by a comma (`,`). For example:

```console
% terraform import aws_route53domains_delegation_signer_record.example example.com,40DE3534F5324DBDAC598ACEDB5B1E26A5368732D9C791D1347E4FBDDF6FC343
```

<!-- cache-key: cdktf-0.20.1 input-18adaa1f2f39deab53694174e88364e593a87bd3a2e99e0fee8e10a7150a478e -->