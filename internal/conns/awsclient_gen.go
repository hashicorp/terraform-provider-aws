// Code generated by internal/generate/awsclient/main.go; DO NOT EDIT.
package conns

import (
	"context"

	accessanalyzer_sdkv2 "github.com/aws/aws-sdk-go-v2/service/accessanalyzer"
	account_sdkv2 "github.com/aws/aws-sdk-go-v2/service/account"
	acm_sdkv2 "github.com/aws/aws-sdk-go-v2/service/acm"
	acmpca_sdkv2 "github.com/aws/aws-sdk-go-v2/service/acmpca"
	amp_sdkv2 "github.com/aws/aws-sdk-go-v2/service/amp"
	amplify_sdkv2 "github.com/aws/aws-sdk-go-v2/service/amplify"
	apigateway_sdkv2 "github.com/aws/aws-sdk-go-v2/service/apigateway"
	apigatewayv2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/apigatewayv2"
	appconfig_sdkv2 "github.com/aws/aws-sdk-go-v2/service/appconfig"
	appfabric_sdkv2 "github.com/aws/aws-sdk-go-v2/service/appfabric"
	appflow_sdkv2 "github.com/aws/aws-sdk-go-v2/service/appflow"
	appintegrations_sdkv2 "github.com/aws/aws-sdk-go-v2/service/appintegrations"
	applicationautoscaling_sdkv2 "github.com/aws/aws-sdk-go-v2/service/applicationautoscaling"
	applicationinsights_sdkv2 "github.com/aws/aws-sdk-go-v2/service/applicationinsights"
	apprunner_sdkv2 "github.com/aws/aws-sdk-go-v2/service/apprunner"
	appstream_sdkv2 "github.com/aws/aws-sdk-go-v2/service/appstream"
	athena_sdkv2 "github.com/aws/aws-sdk-go-v2/service/athena"
	auditmanager_sdkv2 "github.com/aws/aws-sdk-go-v2/service/auditmanager"
	autoscaling_sdkv2 "github.com/aws/aws-sdk-go-v2/service/autoscaling"
	autoscalingplans_sdkv2 "github.com/aws/aws-sdk-go-v2/service/autoscalingplans"
	batch_sdkv2 "github.com/aws/aws-sdk-go-v2/service/batch"
	bcmdataexports_sdkv2 "github.com/aws/aws-sdk-go-v2/service/bcmdataexports"
	bedrock_sdkv2 "github.com/aws/aws-sdk-go-v2/service/bedrock"
	bedrockagent_sdkv2 "github.com/aws/aws-sdk-go-v2/service/bedrockagent"
	budgets_sdkv2 "github.com/aws/aws-sdk-go-v2/service/budgets"
	chatbot_sdkv2 "github.com/aws/aws-sdk-go-v2/service/chatbot"
	chimesdkmediapipelines_sdkv2 "github.com/aws/aws-sdk-go-v2/service/chimesdkmediapipelines"
	chimesdkvoice_sdkv2 "github.com/aws/aws-sdk-go-v2/service/chimesdkvoice"
	cleanrooms_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cleanrooms"
	cloud9_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloud9"
	cloudcontrol_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudcontrol"
	cloudformation_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudformation"
	cloudfront_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudfront"
	cloudfrontkeyvaluestore_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudfrontkeyvaluestore"
	cloudhsmv2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudhsmv2"
	cloudsearch_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudsearch"
	cloudtrail_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudtrail"
	cloudwatch_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudwatch"
	cloudwatchlogs_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cloudwatchlogs"
	codeartifact_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codeartifact"
	codebuild_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codebuild"
	codecatalyst_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codecatalyst"
	codecommit_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codecommit"
	codedeploy_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codedeploy"
	codeguruprofiler_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codeguruprofiler"
	codegurureviewer_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codegurureviewer"
	codepipeline_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codepipeline"
	codestarconnections_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codestarconnections"
	codestarnotifications_sdkv2 "github.com/aws/aws-sdk-go-v2/service/codestarnotifications"
	cognitoidentity_sdkv2 "github.com/aws/aws-sdk-go-v2/service/cognitoidentity"
	comprehend_sdkv2 "github.com/aws/aws-sdk-go-v2/service/comprehend"
	computeoptimizer_sdkv2 "github.com/aws/aws-sdk-go-v2/service/computeoptimizer"
	configservice_sdkv2 "github.com/aws/aws-sdk-go-v2/service/configservice"
	connectcases_sdkv2 "github.com/aws/aws-sdk-go-v2/service/connectcases"
	controltower_sdkv2 "github.com/aws/aws-sdk-go-v2/service/controltower"
	costandusagereportservice_sdkv2 "github.com/aws/aws-sdk-go-v2/service/costandusagereportservice"
	costexplorer_sdkv2 "github.com/aws/aws-sdk-go-v2/service/costexplorer"
	costoptimizationhub_sdkv2 "github.com/aws/aws-sdk-go-v2/service/costoptimizationhub"
	customerprofiles_sdkv2 "github.com/aws/aws-sdk-go-v2/service/customerprofiles"
	datasync_sdkv2 "github.com/aws/aws-sdk-go-v2/service/datasync"
	datazone_sdkv2 "github.com/aws/aws-sdk-go-v2/service/datazone"
	dax_sdkv2 "github.com/aws/aws-sdk-go-v2/service/dax"
	devicefarm_sdkv2 "github.com/aws/aws-sdk-go-v2/service/devicefarm"
	devopsguru_sdkv2 "github.com/aws/aws-sdk-go-v2/service/devopsguru"
	directoryservice_sdkv2 "github.com/aws/aws-sdk-go-v2/service/directoryservice"
	dlm_sdkv2 "github.com/aws/aws-sdk-go-v2/service/dlm"
	docdb_sdkv2 "github.com/aws/aws-sdk-go-v2/service/docdb"
	docdbelastic_sdkv2 "github.com/aws/aws-sdk-go-v2/service/docdbelastic"
	drs_sdkv2 "github.com/aws/aws-sdk-go-v2/service/drs"
	dynamodb_sdkv2 "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	ec2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ec2"
	ecr_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ecr"
	ecrpublic_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ecrpublic"
	ecs_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ecs"
	eks_sdkv2 "github.com/aws/aws-sdk-go-v2/service/eks"
	elasticache_sdkv2 "github.com/aws/aws-sdk-go-v2/service/elasticache"
	elasticbeanstalk_sdkv2 "github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk"
	elasticloadbalancingv2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	emr_sdkv2 "github.com/aws/aws-sdk-go-v2/service/emr"
	emrserverless_sdkv2 "github.com/aws/aws-sdk-go-v2/service/emrserverless"
	eventbridge_sdkv2 "github.com/aws/aws-sdk-go-v2/service/eventbridge"
	evidently_sdkv2 "github.com/aws/aws-sdk-go-v2/service/evidently"
	finspace_sdkv2 "github.com/aws/aws-sdk-go-v2/service/finspace"
	firehose_sdkv2 "github.com/aws/aws-sdk-go-v2/service/firehose"
	fis_sdkv2 "github.com/aws/aws-sdk-go-v2/service/fis"
	fms_sdkv2 "github.com/aws/aws-sdk-go-v2/service/fms"
	glacier_sdkv2 "github.com/aws/aws-sdk-go-v2/service/glacier"
	globalaccelerator_sdkv2 "github.com/aws/aws-sdk-go-v2/service/globalaccelerator"
	groundstation_sdkv2 "github.com/aws/aws-sdk-go-v2/service/groundstation"
	guardduty_sdkv2 "github.com/aws/aws-sdk-go-v2/service/guardduty"
	healthlake_sdkv2 "github.com/aws/aws-sdk-go-v2/service/healthlake"
	iam_sdkv2 "github.com/aws/aws-sdk-go-v2/service/iam"
	identitystore_sdkv2 "github.com/aws/aws-sdk-go-v2/service/identitystore"
	inspector2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/inspector2"
	internetmonitor_sdkv2 "github.com/aws/aws-sdk-go-v2/service/internetmonitor"
	ivschat_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ivschat"
	kafka_sdkv2 "github.com/aws/aws-sdk-go-v2/service/kafka"
	kendra_sdkv2 "github.com/aws/aws-sdk-go-v2/service/kendra"
	keyspaces_sdkv2 "github.com/aws/aws-sdk-go-v2/service/keyspaces"
	kinesis_sdkv2 "github.com/aws/aws-sdk-go-v2/service/kinesis"
	kms_sdkv2 "github.com/aws/aws-sdk-go-v2/service/kms"
	lakeformation_sdkv2 "github.com/aws/aws-sdk-go-v2/service/lakeformation"
	lambda_sdkv2 "github.com/aws/aws-sdk-go-v2/service/lambda"
	launchwizard_sdkv2 "github.com/aws/aws-sdk-go-v2/service/launchwizard"
	lexmodelsv2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/lexmodelsv2"
	lightsail_sdkv2 "github.com/aws/aws-sdk-go-v2/service/lightsail"
	lookoutmetrics_sdkv2 "github.com/aws/aws-sdk-go-v2/service/lookoutmetrics"
	m2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/m2"
	mediaconnect_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mediaconnect"
	mediaconvert_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mediaconvert"
	medialive_sdkv2 "github.com/aws/aws-sdk-go-v2/service/medialive"
	mediapackage_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mediapackage"
	mediapackagev2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mediapackagev2"
	mediastore_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mediastore"
	mq_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mq"
	mwaa_sdkv2 "github.com/aws/aws-sdk-go-v2/service/mwaa"
	neptunegraph_sdkv2 "github.com/aws/aws-sdk-go-v2/service/neptunegraph"
	oam_sdkv2 "github.com/aws/aws-sdk-go-v2/service/oam"
	opensearchserverless_sdkv2 "github.com/aws/aws-sdk-go-v2/service/opensearchserverless"
	organizations_sdkv2 "github.com/aws/aws-sdk-go-v2/service/organizations"
	osis_sdkv2 "github.com/aws/aws-sdk-go-v2/service/osis"
	paymentcryptography_sdkv2 "github.com/aws/aws-sdk-go-v2/service/paymentcryptography"
	pcaconnectorad_sdkv2 "github.com/aws/aws-sdk-go-v2/service/pcaconnectorad"
	pipes_sdkv2 "github.com/aws/aws-sdk-go-v2/service/pipes"
	polly_sdkv2 "github.com/aws/aws-sdk-go-v2/service/polly"
	pricing_sdkv2 "github.com/aws/aws-sdk-go-v2/service/pricing"
	qbusiness_sdkv2 "github.com/aws/aws-sdk-go-v2/service/qbusiness"
	qldb_sdkv2 "github.com/aws/aws-sdk-go-v2/service/qldb"
	ram_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ram"
	rbin_sdkv2 "github.com/aws/aws-sdk-go-v2/service/rbin"
	rds_sdkv2 "github.com/aws/aws-sdk-go-v2/service/rds"
	redshift_sdkv2 "github.com/aws/aws-sdk-go-v2/service/redshift"
	redshiftdata_sdkv2 "github.com/aws/aws-sdk-go-v2/service/redshiftdata"
	redshiftserverless_sdkv2 "github.com/aws/aws-sdk-go-v2/service/redshiftserverless"
	rekognition_sdkv2 "github.com/aws/aws-sdk-go-v2/service/rekognition"
	resourceexplorer2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/resourceexplorer2"
	resourcegroups_sdkv2 "github.com/aws/aws-sdk-go-v2/service/resourcegroups"
	resourcegroupstaggingapi_sdkv2 "github.com/aws/aws-sdk-go-v2/service/resourcegroupstaggingapi"
	rolesanywhere_sdkv2 "github.com/aws/aws-sdk-go-v2/service/rolesanywhere"
	route53_sdkv2 "github.com/aws/aws-sdk-go-v2/service/route53"
	route53domains_sdkv2 "github.com/aws/aws-sdk-go-v2/service/route53domains"
	route53profiles_sdkv2 "github.com/aws/aws-sdk-go-v2/service/route53profiles"
	s3_sdkv2 "github.com/aws/aws-sdk-go-v2/service/s3"
	s3control_sdkv2 "github.com/aws/aws-sdk-go-v2/service/s3control"
	scheduler_sdkv2 "github.com/aws/aws-sdk-go-v2/service/scheduler"
	schemas_sdkv2 "github.com/aws/aws-sdk-go-v2/service/schemas"
	secretsmanager_sdkv2 "github.com/aws/aws-sdk-go-v2/service/secretsmanager"
	securityhub_sdkv2 "github.com/aws/aws-sdk-go-v2/service/securityhub"
	securitylake_sdkv2 "github.com/aws/aws-sdk-go-v2/service/securitylake"
	servicecatalogappregistry_sdkv2 "github.com/aws/aws-sdk-go-v2/service/servicecatalogappregistry"
	servicediscovery_sdkv2 "github.com/aws/aws-sdk-go-v2/service/servicediscovery"
	servicequotas_sdkv2 "github.com/aws/aws-sdk-go-v2/service/servicequotas"
	sesv2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/sesv2"
	shield_sdkv2 "github.com/aws/aws-sdk-go-v2/service/shield"
	signer_sdkv2 "github.com/aws/aws-sdk-go-v2/service/signer"
	sns_sdkv2 "github.com/aws/aws-sdk-go-v2/service/sns"
	sqs_sdkv2 "github.com/aws/aws-sdk-go-v2/service/sqs"
	ssm_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ssm"
	ssmcontacts_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ssmcontacts"
	ssmincidents_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ssmincidents"
	ssmsap_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ssmsap"
	sso_sdkv2 "github.com/aws/aws-sdk-go-v2/service/sso"
	ssoadmin_sdkv2 "github.com/aws/aws-sdk-go-v2/service/ssoadmin"
	sts_sdkv2 "github.com/aws/aws-sdk-go-v2/service/sts"
	swf_sdkv2 "github.com/aws/aws-sdk-go-v2/service/swf"
	synthetics_sdkv2 "github.com/aws/aws-sdk-go-v2/service/synthetics"
	timestreaminfluxdb_sdkv2 "github.com/aws/aws-sdk-go-v2/service/timestreaminfluxdb"
	timestreamwrite_sdkv2 "github.com/aws/aws-sdk-go-v2/service/timestreamwrite"
	transcribe_sdkv2 "github.com/aws/aws-sdk-go-v2/service/transcribe"
	transfer_sdkv2 "github.com/aws/aws-sdk-go-v2/service/transfer"
	verifiedpermissions_sdkv2 "github.com/aws/aws-sdk-go-v2/service/verifiedpermissions"
	vpclattice_sdkv2 "github.com/aws/aws-sdk-go-v2/service/vpclattice"
	waf_sdkv2 "github.com/aws/aws-sdk-go-v2/service/waf"
	wafregional_sdkv2 "github.com/aws/aws-sdk-go-v2/service/wafregional"
	wafv2_sdkv2 "github.com/aws/aws-sdk-go-v2/service/wafv2"
	wellarchitected_sdkv2 "github.com/aws/aws-sdk-go-v2/service/wellarchitected"
	workspaces_sdkv2 "github.com/aws/aws-sdk-go-v2/service/workspaces"
	workspacesweb_sdkv2 "github.com/aws/aws-sdk-go-v2/service/workspacesweb"
	xray_sdkv2 "github.com/aws/aws-sdk-go-v2/service/xray"
	appmesh_sdkv1 "github.com/aws/aws-sdk-go/service/appmesh"
	appsync_sdkv1 "github.com/aws/aws-sdk-go/service/appsync"
	backup_sdkv1 "github.com/aws/aws-sdk-go/service/backup"
	batch_sdkv1 "github.com/aws/aws-sdk-go/service/batch"
	chime_sdkv1 "github.com/aws/aws-sdk-go/service/chime"
	cloudwatchrum_sdkv1 "github.com/aws/aws-sdk-go/service/cloudwatchrum"
	cognitoidentityprovider_sdkv1 "github.com/aws/aws-sdk-go/service/cognitoidentityprovider"
	connect_sdkv1 "github.com/aws/aws-sdk-go/service/connect"
	databasemigrationservice_sdkv1 "github.com/aws/aws-sdk-go/service/databasemigrationservice"
	dataexchange_sdkv1 "github.com/aws/aws-sdk-go/service/dataexchange"
	datapipeline_sdkv1 "github.com/aws/aws-sdk-go/service/datapipeline"
	detective_sdkv1 "github.com/aws/aws-sdk-go/service/detective"
	directconnect_sdkv1 "github.com/aws/aws-sdk-go/service/directconnect"
	directoryservice_sdkv1 "github.com/aws/aws-sdk-go/service/directoryservice"
	ec2_sdkv1 "github.com/aws/aws-sdk-go/service/ec2"
	ecs_sdkv1 "github.com/aws/aws-sdk-go/service/ecs"
	efs_sdkv1 "github.com/aws/aws-sdk-go/service/efs"
	elasticache_sdkv1 "github.com/aws/aws-sdk-go/service/elasticache"
	elasticsearchservice_sdkv1 "github.com/aws/aws-sdk-go/service/elasticsearchservice"
	elastictranscoder_sdkv1 "github.com/aws/aws-sdk-go/service/elastictranscoder"
	elb_sdkv1 "github.com/aws/aws-sdk-go/service/elb"
	elbv2_sdkv1 "github.com/aws/aws-sdk-go/service/elbv2"
	emr_sdkv1 "github.com/aws/aws-sdk-go/service/emr"
	emrcontainers_sdkv1 "github.com/aws/aws-sdk-go/service/emrcontainers"
	fsx_sdkv1 "github.com/aws/aws-sdk-go/service/fsx"
	gamelift_sdkv1 "github.com/aws/aws-sdk-go/service/gamelift"
	glue_sdkv1 "github.com/aws/aws-sdk-go/service/glue"
	greengrass_sdkv1 "github.com/aws/aws-sdk-go/service/greengrass"
	guardduty_sdkv1 "github.com/aws/aws-sdk-go/service/guardduty"
	imagebuilder_sdkv1 "github.com/aws/aws-sdk-go/service/imagebuilder"
	inspector_sdkv1 "github.com/aws/aws-sdk-go/service/inspector"
	iot_sdkv1 "github.com/aws/aws-sdk-go/service/iot"
	iotanalytics_sdkv1 "github.com/aws/aws-sdk-go/service/iotanalytics"
	iotevents_sdkv1 "github.com/aws/aws-sdk-go/service/iotevents"
	ivs_sdkv1 "github.com/aws/aws-sdk-go/service/ivs"
	kafkaconnect_sdkv1 "github.com/aws/aws-sdk-go/service/kafkaconnect"
	kinesisanalytics_sdkv1 "github.com/aws/aws-sdk-go/service/kinesisanalytics"
	kinesisanalyticsv2_sdkv1 "github.com/aws/aws-sdk-go/service/kinesisanalyticsv2"
	kinesisvideo_sdkv1 "github.com/aws/aws-sdk-go/service/kinesisvideo"
	lexmodelbuildingservice_sdkv1 "github.com/aws/aws-sdk-go/service/lexmodelbuildingservice"
	licensemanager_sdkv1 "github.com/aws/aws-sdk-go/service/licensemanager"
	locationservice_sdkv1 "github.com/aws/aws-sdk-go/service/locationservice"
	macie2_sdkv1 "github.com/aws/aws-sdk-go/service/macie2"
	managedgrafana_sdkv1 "github.com/aws/aws-sdk-go/service/managedgrafana"
	memorydb_sdkv1 "github.com/aws/aws-sdk-go/service/memorydb"
	neptune_sdkv1 "github.com/aws/aws-sdk-go/service/neptune"
	networkfirewall_sdkv1 "github.com/aws/aws-sdk-go/service/networkfirewall"
	networkmanager_sdkv1 "github.com/aws/aws-sdk-go/service/networkmanager"
	opensearchservice_sdkv1 "github.com/aws/aws-sdk-go/service/opensearchservice"
	opsworks_sdkv1 "github.com/aws/aws-sdk-go/service/opsworks"
	outposts_sdkv1 "github.com/aws/aws-sdk-go/service/outposts"
	pinpoint_sdkv1 "github.com/aws/aws-sdk-go/service/pinpoint"
	quicksight_sdkv1 "github.com/aws/aws-sdk-go/service/quicksight"
	rds_sdkv1 "github.com/aws/aws-sdk-go/service/rds"
	redshift_sdkv1 "github.com/aws/aws-sdk-go/service/redshift"
	redshiftserverless_sdkv1 "github.com/aws/aws-sdk-go/service/redshiftserverless"
	route53recoverycontrolconfig_sdkv1 "github.com/aws/aws-sdk-go/service/route53recoverycontrolconfig"
	route53recoveryreadiness_sdkv1 "github.com/aws/aws-sdk-go/service/route53recoveryreadiness"
	route53resolver_sdkv1 "github.com/aws/aws-sdk-go/service/route53resolver"
	s3outposts_sdkv1 "github.com/aws/aws-sdk-go/service/s3outposts"
	sagemaker_sdkv1 "github.com/aws/aws-sdk-go/service/sagemaker"
	serverlessapplicationrepository_sdkv1 "github.com/aws/aws-sdk-go/service/serverlessapplicationrepository"
	servicecatalog_sdkv1 "github.com/aws/aws-sdk-go/service/servicecatalog"
	ses_sdkv1 "github.com/aws/aws-sdk-go/service/ses"
	sfn_sdkv1 "github.com/aws/aws-sdk-go/service/sfn"
	simpledb_sdkv1 "github.com/aws/aws-sdk-go/service/simpledb"
	storagegateway_sdkv1 "github.com/aws/aws-sdk-go/service/storagegateway"
	worklink_sdkv1 "github.com/aws/aws-sdk-go/service/worklink"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/names"
)

func (c *AWSClient) ACMClient(ctx context.Context) *acm_sdkv2.Client {
	return errs.Must(client[*acm_sdkv2.Client](ctx, c, names.ACM, make(map[string]any)))
}

func (c *AWSClient) ACMPCAClient(ctx context.Context) *acmpca_sdkv2.Client {
	return errs.Must(client[*acmpca_sdkv2.Client](ctx, c, names.ACMPCA, make(map[string]any)))
}

func (c *AWSClient) AMPClient(ctx context.Context) *amp_sdkv2.Client {
	return errs.Must(client[*amp_sdkv2.Client](ctx, c, names.AMP, make(map[string]any)))
}

func (c *AWSClient) APIGatewayClient(ctx context.Context) *apigateway_sdkv2.Client {
	return errs.Must(client[*apigateway_sdkv2.Client](ctx, c, names.APIGateway, make(map[string]any)))
}

func (c *AWSClient) APIGatewayV2Client(ctx context.Context) *apigatewayv2_sdkv2.Client {
	return errs.Must(client[*apigatewayv2_sdkv2.Client](ctx, c, names.APIGatewayV2, make(map[string]any)))
}

func (c *AWSClient) AccessAnalyzerClient(ctx context.Context) *accessanalyzer_sdkv2.Client {
	return errs.Must(client[*accessanalyzer_sdkv2.Client](ctx, c, names.AccessAnalyzer, make(map[string]any)))
}

func (c *AWSClient) AccountClient(ctx context.Context) *account_sdkv2.Client {
	return errs.Must(client[*account_sdkv2.Client](ctx, c, names.Account, make(map[string]any)))
}

func (c *AWSClient) AmplifyClient(ctx context.Context) *amplify_sdkv2.Client {
	return errs.Must(client[*amplify_sdkv2.Client](ctx, c, names.Amplify, make(map[string]any)))
}

func (c *AWSClient) AppAutoScalingClient(ctx context.Context) *applicationautoscaling_sdkv2.Client {
	return errs.Must(client[*applicationautoscaling_sdkv2.Client](ctx, c, names.AppAutoScaling, make(map[string]any)))
}

func (c *AWSClient) AppConfigClient(ctx context.Context) *appconfig_sdkv2.Client {
	return errs.Must(client[*appconfig_sdkv2.Client](ctx, c, names.AppConfig, make(map[string]any)))
}

func (c *AWSClient) AppFabricClient(ctx context.Context) *appfabric_sdkv2.Client {
	return errs.Must(client[*appfabric_sdkv2.Client](ctx, c, names.AppFabric, make(map[string]any)))
}

func (c *AWSClient) AppFlowClient(ctx context.Context) *appflow_sdkv2.Client {
	return errs.Must(client[*appflow_sdkv2.Client](ctx, c, names.AppFlow, make(map[string]any)))
}

func (c *AWSClient) AppIntegrationsClient(ctx context.Context) *appintegrations_sdkv2.Client {
	return errs.Must(client[*appintegrations_sdkv2.Client](ctx, c, names.AppIntegrations, make(map[string]any)))
}

func (c *AWSClient) AppMeshConn(ctx context.Context) *appmesh_sdkv1.AppMesh {
	return errs.Must(conn[*appmesh_sdkv1.AppMesh](ctx, c, names.AppMesh, make(map[string]any)))
}

func (c *AWSClient) AppRunnerClient(ctx context.Context) *apprunner_sdkv2.Client {
	return errs.Must(client[*apprunner_sdkv2.Client](ctx, c, names.AppRunner, make(map[string]any)))
}

func (c *AWSClient) AppStreamClient(ctx context.Context) *appstream_sdkv2.Client {
	return errs.Must(client[*appstream_sdkv2.Client](ctx, c, names.AppStream, make(map[string]any)))
}

func (c *AWSClient) AppSyncConn(ctx context.Context) *appsync_sdkv1.AppSync {
	return errs.Must(conn[*appsync_sdkv1.AppSync](ctx, c, names.AppSync, make(map[string]any)))
}

func (c *AWSClient) ApplicationInsightsClient(ctx context.Context) *applicationinsights_sdkv2.Client {
	return errs.Must(client[*applicationinsights_sdkv2.Client](ctx, c, names.ApplicationInsights, make(map[string]any)))
}

func (c *AWSClient) AthenaClient(ctx context.Context) *athena_sdkv2.Client {
	return errs.Must(client[*athena_sdkv2.Client](ctx, c, names.Athena, make(map[string]any)))
}

func (c *AWSClient) AuditManagerClient(ctx context.Context) *auditmanager_sdkv2.Client {
	return errs.Must(client[*auditmanager_sdkv2.Client](ctx, c, names.AuditManager, make(map[string]any)))
}

func (c *AWSClient) AutoScalingClient(ctx context.Context) *autoscaling_sdkv2.Client {
	return errs.Must(client[*autoscaling_sdkv2.Client](ctx, c, names.AutoScaling, make(map[string]any)))
}

func (c *AWSClient) AutoScalingPlansClient(ctx context.Context) *autoscalingplans_sdkv2.Client {
	return errs.Must(client[*autoscalingplans_sdkv2.Client](ctx, c, names.AutoScalingPlans, make(map[string]any)))
}

func (c *AWSClient) BCMDataExportsClient(ctx context.Context) *bcmdataexports_sdkv2.Client {
	return errs.Must(client[*bcmdataexports_sdkv2.Client](ctx, c, names.BCMDataExports, make(map[string]any)))
}

func (c *AWSClient) BackupConn(ctx context.Context) *backup_sdkv1.Backup {
	return errs.Must(conn[*backup_sdkv1.Backup](ctx, c, names.Backup, make(map[string]any)))
}

func (c *AWSClient) BatchConn(ctx context.Context) *batch_sdkv1.Batch {
	return errs.Must(conn[*batch_sdkv1.Batch](ctx, c, names.Batch, make(map[string]any)))
}

func (c *AWSClient) BatchClient(ctx context.Context) *batch_sdkv2.Client {
	return errs.Must(client[*batch_sdkv2.Client](ctx, c, names.Batch, make(map[string]any)))
}

func (c *AWSClient) BedrockClient(ctx context.Context) *bedrock_sdkv2.Client {
	return errs.Must(client[*bedrock_sdkv2.Client](ctx, c, names.Bedrock, make(map[string]any)))
}

func (c *AWSClient) BedrockAgentClient(ctx context.Context) *bedrockagent_sdkv2.Client {
	return errs.Must(client[*bedrockagent_sdkv2.Client](ctx, c, names.BedrockAgent, make(map[string]any)))
}

func (c *AWSClient) BudgetsClient(ctx context.Context) *budgets_sdkv2.Client {
	return errs.Must(client[*budgets_sdkv2.Client](ctx, c, names.Budgets, make(map[string]any)))
}

func (c *AWSClient) CEClient(ctx context.Context) *costexplorer_sdkv2.Client {
	return errs.Must(client[*costexplorer_sdkv2.Client](ctx, c, names.CE, make(map[string]any)))
}

func (c *AWSClient) CURClient(ctx context.Context) *costandusagereportservice_sdkv2.Client {
	return errs.Must(client[*costandusagereportservice_sdkv2.Client](ctx, c, names.CUR, make(map[string]any)))
}

func (c *AWSClient) ChatbotClient(ctx context.Context) *chatbot_sdkv2.Client {
	return errs.Must(client[*chatbot_sdkv2.Client](ctx, c, names.Chatbot, make(map[string]any)))
}

func (c *AWSClient) ChimeConn(ctx context.Context) *chime_sdkv1.Chime {
	return errs.Must(conn[*chime_sdkv1.Chime](ctx, c, names.Chime, make(map[string]any)))
}

func (c *AWSClient) ChimeSDKMediaPipelinesClient(ctx context.Context) *chimesdkmediapipelines_sdkv2.Client {
	return errs.Must(client[*chimesdkmediapipelines_sdkv2.Client](ctx, c, names.ChimeSDKMediaPipelines, make(map[string]any)))
}

func (c *AWSClient) ChimeSDKVoiceClient(ctx context.Context) *chimesdkvoice_sdkv2.Client {
	return errs.Must(client[*chimesdkvoice_sdkv2.Client](ctx, c, names.ChimeSDKVoice, make(map[string]any)))
}

func (c *AWSClient) CleanRoomsClient(ctx context.Context) *cleanrooms_sdkv2.Client {
	return errs.Must(client[*cleanrooms_sdkv2.Client](ctx, c, names.CleanRooms, make(map[string]any)))
}

func (c *AWSClient) Cloud9Client(ctx context.Context) *cloud9_sdkv2.Client {
	return errs.Must(client[*cloud9_sdkv2.Client](ctx, c, names.Cloud9, make(map[string]any)))
}

func (c *AWSClient) CloudControlClient(ctx context.Context) *cloudcontrol_sdkv2.Client {
	return errs.Must(client[*cloudcontrol_sdkv2.Client](ctx, c, names.CloudControl, make(map[string]any)))
}

func (c *AWSClient) CloudFormationClient(ctx context.Context) *cloudformation_sdkv2.Client {
	return errs.Must(client[*cloudformation_sdkv2.Client](ctx, c, names.CloudFormation, make(map[string]any)))
}

func (c *AWSClient) CloudFrontClient(ctx context.Context) *cloudfront_sdkv2.Client {
	return errs.Must(client[*cloudfront_sdkv2.Client](ctx, c, names.CloudFront, make(map[string]any)))
}

func (c *AWSClient) CloudFrontKeyValueStoreClient(ctx context.Context) *cloudfrontkeyvaluestore_sdkv2.Client {
	return errs.Must(client[*cloudfrontkeyvaluestore_sdkv2.Client](ctx, c, names.CloudFrontKeyValueStore, make(map[string]any)))
}

func (c *AWSClient) CloudHSMV2Client(ctx context.Context) *cloudhsmv2_sdkv2.Client {
	return errs.Must(client[*cloudhsmv2_sdkv2.Client](ctx, c, names.CloudHSMV2, make(map[string]any)))
}

func (c *AWSClient) CloudSearchClient(ctx context.Context) *cloudsearch_sdkv2.Client {
	return errs.Must(client[*cloudsearch_sdkv2.Client](ctx, c, names.CloudSearch, make(map[string]any)))
}

func (c *AWSClient) CloudTrailClient(ctx context.Context) *cloudtrail_sdkv2.Client {
	return errs.Must(client[*cloudtrail_sdkv2.Client](ctx, c, names.CloudTrail, make(map[string]any)))
}

func (c *AWSClient) CloudWatchClient(ctx context.Context) *cloudwatch_sdkv2.Client {
	return errs.Must(client[*cloudwatch_sdkv2.Client](ctx, c, names.CloudWatch, make(map[string]any)))
}

func (c *AWSClient) CodeArtifactClient(ctx context.Context) *codeartifact_sdkv2.Client {
	return errs.Must(client[*codeartifact_sdkv2.Client](ctx, c, names.CodeArtifact, make(map[string]any)))
}

func (c *AWSClient) CodeBuildClient(ctx context.Context) *codebuild_sdkv2.Client {
	return errs.Must(client[*codebuild_sdkv2.Client](ctx, c, names.CodeBuild, make(map[string]any)))
}

func (c *AWSClient) CodeCatalystClient(ctx context.Context) *codecatalyst_sdkv2.Client {
	return errs.Must(client[*codecatalyst_sdkv2.Client](ctx, c, names.CodeCatalyst, make(map[string]any)))
}

func (c *AWSClient) CodeCommitClient(ctx context.Context) *codecommit_sdkv2.Client {
	return errs.Must(client[*codecommit_sdkv2.Client](ctx, c, names.CodeCommit, make(map[string]any)))
}

func (c *AWSClient) CodeGuruProfilerClient(ctx context.Context) *codeguruprofiler_sdkv2.Client {
	return errs.Must(client[*codeguruprofiler_sdkv2.Client](ctx, c, names.CodeGuruProfiler, make(map[string]any)))
}

func (c *AWSClient) CodeGuruReviewerClient(ctx context.Context) *codegurureviewer_sdkv2.Client {
	return errs.Must(client[*codegurureviewer_sdkv2.Client](ctx, c, names.CodeGuruReviewer, make(map[string]any)))
}

func (c *AWSClient) CodePipelineClient(ctx context.Context) *codepipeline_sdkv2.Client {
	return errs.Must(client[*codepipeline_sdkv2.Client](ctx, c, names.CodePipeline, make(map[string]any)))
}

func (c *AWSClient) CodeStarConnectionsClient(ctx context.Context) *codestarconnections_sdkv2.Client {
	return errs.Must(client[*codestarconnections_sdkv2.Client](ctx, c, names.CodeStarConnections, make(map[string]any)))
}

func (c *AWSClient) CodeStarNotificationsClient(ctx context.Context) *codestarnotifications_sdkv2.Client {
	return errs.Must(client[*codestarnotifications_sdkv2.Client](ctx, c, names.CodeStarNotifications, make(map[string]any)))
}

func (c *AWSClient) CognitoIDPConn(ctx context.Context) *cognitoidentityprovider_sdkv1.CognitoIdentityProvider {
	return errs.Must(conn[*cognitoidentityprovider_sdkv1.CognitoIdentityProvider](ctx, c, names.CognitoIDP, make(map[string]any)))
}

func (c *AWSClient) CognitoIdentityClient(ctx context.Context) *cognitoidentity_sdkv2.Client {
	return errs.Must(client[*cognitoidentity_sdkv2.Client](ctx, c, names.CognitoIdentity, make(map[string]any)))
}

func (c *AWSClient) ComprehendClient(ctx context.Context) *comprehend_sdkv2.Client {
	return errs.Must(client[*comprehend_sdkv2.Client](ctx, c, names.Comprehend, make(map[string]any)))
}

func (c *AWSClient) ComputeOptimizerClient(ctx context.Context) *computeoptimizer_sdkv2.Client {
	return errs.Must(client[*computeoptimizer_sdkv2.Client](ctx, c, names.ComputeOptimizer, make(map[string]any)))
}

func (c *AWSClient) ConfigServiceClient(ctx context.Context) *configservice_sdkv2.Client {
	return errs.Must(client[*configservice_sdkv2.Client](ctx, c, names.ConfigService, make(map[string]any)))
}

func (c *AWSClient) ConnectConn(ctx context.Context) *connect_sdkv1.Connect {
	return errs.Must(conn[*connect_sdkv1.Connect](ctx, c, names.Connect, make(map[string]any)))
}

func (c *AWSClient) ConnectCasesClient(ctx context.Context) *connectcases_sdkv2.Client {
	return errs.Must(client[*connectcases_sdkv2.Client](ctx, c, names.ConnectCases, make(map[string]any)))
}

func (c *AWSClient) ControlTowerClient(ctx context.Context) *controltower_sdkv2.Client {
	return errs.Must(client[*controltower_sdkv2.Client](ctx, c, names.ControlTower, make(map[string]any)))
}

func (c *AWSClient) CostOptimizationHubClient(ctx context.Context) *costoptimizationhub_sdkv2.Client {
	return errs.Must(client[*costoptimizationhub_sdkv2.Client](ctx, c, names.CostOptimizationHub, make(map[string]any)))
}

func (c *AWSClient) CustomerProfilesClient(ctx context.Context) *customerprofiles_sdkv2.Client {
	return errs.Must(client[*customerprofiles_sdkv2.Client](ctx, c, names.CustomerProfiles, make(map[string]any)))
}

func (c *AWSClient) DAXClient(ctx context.Context) *dax_sdkv2.Client {
	return errs.Must(client[*dax_sdkv2.Client](ctx, c, names.DAX, make(map[string]any)))
}

func (c *AWSClient) DLMClient(ctx context.Context) *dlm_sdkv2.Client {
	return errs.Must(client[*dlm_sdkv2.Client](ctx, c, names.DLM, make(map[string]any)))
}

func (c *AWSClient) DMSConn(ctx context.Context) *databasemigrationservice_sdkv1.DatabaseMigrationService {
	return errs.Must(conn[*databasemigrationservice_sdkv1.DatabaseMigrationService](ctx, c, names.DMS, make(map[string]any)))
}

func (c *AWSClient) DRSClient(ctx context.Context) *drs_sdkv2.Client {
	return errs.Must(client[*drs_sdkv2.Client](ctx, c, names.DRS, make(map[string]any)))
}

func (c *AWSClient) DSConn(ctx context.Context) *directoryservice_sdkv1.DirectoryService {
	return errs.Must(conn[*directoryservice_sdkv1.DirectoryService](ctx, c, names.DS, make(map[string]any)))
}

func (c *AWSClient) DSClient(ctx context.Context) *directoryservice_sdkv2.Client {
	return errs.Must(client[*directoryservice_sdkv2.Client](ctx, c, names.DS, make(map[string]any)))
}

func (c *AWSClient) DataExchangeConn(ctx context.Context) *dataexchange_sdkv1.DataExchange {
	return errs.Must(conn[*dataexchange_sdkv1.DataExchange](ctx, c, names.DataExchange, make(map[string]any)))
}

func (c *AWSClient) DataPipelineConn(ctx context.Context) *datapipeline_sdkv1.DataPipeline {
	return errs.Must(conn[*datapipeline_sdkv1.DataPipeline](ctx, c, names.DataPipeline, make(map[string]any)))
}

func (c *AWSClient) DataSyncClient(ctx context.Context) *datasync_sdkv2.Client {
	return errs.Must(client[*datasync_sdkv2.Client](ctx, c, names.DataSync, make(map[string]any)))
}

func (c *AWSClient) DataZoneClient(ctx context.Context) *datazone_sdkv2.Client {
	return errs.Must(client[*datazone_sdkv2.Client](ctx, c, names.DataZone, make(map[string]any)))
}

func (c *AWSClient) DeployClient(ctx context.Context) *codedeploy_sdkv2.Client {
	return errs.Must(client[*codedeploy_sdkv2.Client](ctx, c, names.Deploy, make(map[string]any)))
}

func (c *AWSClient) DetectiveConn(ctx context.Context) *detective_sdkv1.Detective {
	return errs.Must(conn[*detective_sdkv1.Detective](ctx, c, names.Detective, make(map[string]any)))
}

func (c *AWSClient) DevOpsGuruClient(ctx context.Context) *devopsguru_sdkv2.Client {
	return errs.Must(client[*devopsguru_sdkv2.Client](ctx, c, names.DevOpsGuru, make(map[string]any)))
}

func (c *AWSClient) DeviceFarmClient(ctx context.Context) *devicefarm_sdkv2.Client {
	return errs.Must(client[*devicefarm_sdkv2.Client](ctx, c, names.DeviceFarm, make(map[string]any)))
}

func (c *AWSClient) DirectConnectConn(ctx context.Context) *directconnect_sdkv1.DirectConnect {
	return errs.Must(conn[*directconnect_sdkv1.DirectConnect](ctx, c, names.DirectConnect, make(map[string]any)))
}

func (c *AWSClient) DocDBClient(ctx context.Context) *docdb_sdkv2.Client {
	return errs.Must(client[*docdb_sdkv2.Client](ctx, c, names.DocDB, make(map[string]any)))
}

func (c *AWSClient) DocDBElasticClient(ctx context.Context) *docdbelastic_sdkv2.Client {
	return errs.Must(client[*docdbelastic_sdkv2.Client](ctx, c, names.DocDBElastic, make(map[string]any)))
}

func (c *AWSClient) DynamoDBClient(ctx context.Context) *dynamodb_sdkv2.Client {
	return errs.Must(client[*dynamodb_sdkv2.Client](ctx, c, names.DynamoDB, make(map[string]any)))
}

func (c *AWSClient) EC2Conn(ctx context.Context) *ec2_sdkv1.EC2 {
	return errs.Must(conn[*ec2_sdkv1.EC2](ctx, c, names.EC2, make(map[string]any)))
}

func (c *AWSClient) EC2Client(ctx context.Context) *ec2_sdkv2.Client {
	return errs.Must(client[*ec2_sdkv2.Client](ctx, c, names.EC2, make(map[string]any)))
}

func (c *AWSClient) ECRClient(ctx context.Context) *ecr_sdkv2.Client {
	return errs.Must(client[*ecr_sdkv2.Client](ctx, c, names.ECR, make(map[string]any)))
}

func (c *AWSClient) ECRPublicClient(ctx context.Context) *ecrpublic_sdkv2.Client {
	return errs.Must(client[*ecrpublic_sdkv2.Client](ctx, c, names.ECRPublic, make(map[string]any)))
}

func (c *AWSClient) ECSConn(ctx context.Context) *ecs_sdkv1.ECS {
	return errs.Must(conn[*ecs_sdkv1.ECS](ctx, c, names.ECS, make(map[string]any)))
}

func (c *AWSClient) ECSClient(ctx context.Context) *ecs_sdkv2.Client {
	return errs.Must(client[*ecs_sdkv2.Client](ctx, c, names.ECS, make(map[string]any)))
}

func (c *AWSClient) EFSConn(ctx context.Context) *efs_sdkv1.EFS {
	return errs.Must(conn[*efs_sdkv1.EFS](ctx, c, names.EFS, make(map[string]any)))
}

func (c *AWSClient) EKSClient(ctx context.Context) *eks_sdkv2.Client {
	return errs.Must(client[*eks_sdkv2.Client](ctx, c, names.EKS, make(map[string]any)))
}

func (c *AWSClient) ELBConn(ctx context.Context) *elb_sdkv1.ELB {
	return errs.Must(conn[*elb_sdkv1.ELB](ctx, c, names.ELB, make(map[string]any)))
}

func (c *AWSClient) ELBV2Conn(ctx context.Context) *elbv2_sdkv1.ELBV2 {
	return errs.Must(conn[*elbv2_sdkv1.ELBV2](ctx, c, names.ELBV2, make(map[string]any)))
}

func (c *AWSClient) ELBV2Client(ctx context.Context) *elasticloadbalancingv2_sdkv2.Client {
	return errs.Must(client[*elasticloadbalancingv2_sdkv2.Client](ctx, c, names.ELBV2, make(map[string]any)))
}

func (c *AWSClient) EMRConn(ctx context.Context) *emr_sdkv1.EMR {
	return errs.Must(conn[*emr_sdkv1.EMR](ctx, c, names.EMR, make(map[string]any)))
}

func (c *AWSClient) EMRClient(ctx context.Context) *emr_sdkv2.Client {
	return errs.Must(client[*emr_sdkv2.Client](ctx, c, names.EMR, make(map[string]any)))
}

func (c *AWSClient) EMRContainersConn(ctx context.Context) *emrcontainers_sdkv1.EMRContainers {
	return errs.Must(conn[*emrcontainers_sdkv1.EMRContainers](ctx, c, names.EMRContainers, make(map[string]any)))
}

func (c *AWSClient) EMRServerlessClient(ctx context.Context) *emrserverless_sdkv2.Client {
	return errs.Must(client[*emrserverless_sdkv2.Client](ctx, c, names.EMRServerless, make(map[string]any)))
}

func (c *AWSClient) ElastiCacheConn(ctx context.Context) *elasticache_sdkv1.ElastiCache {
	return errs.Must(conn[*elasticache_sdkv1.ElastiCache](ctx, c, names.ElastiCache, make(map[string]any)))
}

func (c *AWSClient) ElastiCacheClient(ctx context.Context) *elasticache_sdkv2.Client {
	return errs.Must(client[*elasticache_sdkv2.Client](ctx, c, names.ElastiCache, make(map[string]any)))
}

func (c *AWSClient) ElasticBeanstalkClient(ctx context.Context) *elasticbeanstalk_sdkv2.Client {
	return errs.Must(client[*elasticbeanstalk_sdkv2.Client](ctx, c, names.ElasticBeanstalk, make(map[string]any)))
}

func (c *AWSClient) ElasticTranscoderConn(ctx context.Context) *elastictranscoder_sdkv1.ElasticTranscoder {
	return errs.Must(conn[*elastictranscoder_sdkv1.ElasticTranscoder](ctx, c, names.ElasticTranscoder, make(map[string]any)))
}

func (c *AWSClient) ElasticsearchConn(ctx context.Context) *elasticsearchservice_sdkv1.ElasticsearchService {
	return errs.Must(conn[*elasticsearchservice_sdkv1.ElasticsearchService](ctx, c, names.Elasticsearch, make(map[string]any)))
}

func (c *AWSClient) EventsClient(ctx context.Context) *eventbridge_sdkv2.Client {
	return errs.Must(client[*eventbridge_sdkv2.Client](ctx, c, names.Events, make(map[string]any)))
}

func (c *AWSClient) EvidentlyClient(ctx context.Context) *evidently_sdkv2.Client {
	return errs.Must(client[*evidently_sdkv2.Client](ctx, c, names.Evidently, make(map[string]any)))
}

func (c *AWSClient) FISClient(ctx context.Context) *fis_sdkv2.Client {
	return errs.Must(client[*fis_sdkv2.Client](ctx, c, names.FIS, make(map[string]any)))
}

func (c *AWSClient) FMSClient(ctx context.Context) *fms_sdkv2.Client {
	return errs.Must(client[*fms_sdkv2.Client](ctx, c, names.FMS, make(map[string]any)))
}

func (c *AWSClient) FSxConn(ctx context.Context) *fsx_sdkv1.FSx {
	return errs.Must(conn[*fsx_sdkv1.FSx](ctx, c, names.FSx, make(map[string]any)))
}

func (c *AWSClient) FinSpaceClient(ctx context.Context) *finspace_sdkv2.Client {
	return errs.Must(client[*finspace_sdkv2.Client](ctx, c, names.FinSpace, make(map[string]any)))
}

func (c *AWSClient) FirehoseClient(ctx context.Context) *firehose_sdkv2.Client {
	return errs.Must(client[*firehose_sdkv2.Client](ctx, c, names.Firehose, make(map[string]any)))
}

func (c *AWSClient) GameLiftConn(ctx context.Context) *gamelift_sdkv1.GameLift {
	return errs.Must(conn[*gamelift_sdkv1.GameLift](ctx, c, names.GameLift, make(map[string]any)))
}

func (c *AWSClient) GlacierClient(ctx context.Context) *glacier_sdkv2.Client {
	return errs.Must(client[*glacier_sdkv2.Client](ctx, c, names.Glacier, make(map[string]any)))
}

func (c *AWSClient) GlobalAcceleratorClient(ctx context.Context) *globalaccelerator_sdkv2.Client {
	return errs.Must(client[*globalaccelerator_sdkv2.Client](ctx, c, names.GlobalAccelerator, make(map[string]any)))
}

func (c *AWSClient) GlueConn(ctx context.Context) *glue_sdkv1.Glue {
	return errs.Must(conn[*glue_sdkv1.Glue](ctx, c, names.Glue, make(map[string]any)))
}

func (c *AWSClient) GrafanaConn(ctx context.Context) *managedgrafana_sdkv1.ManagedGrafana {
	return errs.Must(conn[*managedgrafana_sdkv1.ManagedGrafana](ctx, c, names.Grafana, make(map[string]any)))
}

func (c *AWSClient) GreengrassConn(ctx context.Context) *greengrass_sdkv1.Greengrass {
	return errs.Must(conn[*greengrass_sdkv1.Greengrass](ctx, c, names.Greengrass, make(map[string]any)))
}

func (c *AWSClient) GroundStationClient(ctx context.Context) *groundstation_sdkv2.Client {
	return errs.Must(client[*groundstation_sdkv2.Client](ctx, c, names.GroundStation, make(map[string]any)))
}

func (c *AWSClient) GuardDutyConn(ctx context.Context) *guardduty_sdkv1.GuardDuty {
	return errs.Must(conn[*guardduty_sdkv1.GuardDuty](ctx, c, names.GuardDuty, make(map[string]any)))
}

func (c *AWSClient) GuardDutyClient(ctx context.Context) *guardduty_sdkv2.Client {
	return errs.Must(client[*guardduty_sdkv2.Client](ctx, c, names.GuardDuty, make(map[string]any)))
}

func (c *AWSClient) HealthLakeClient(ctx context.Context) *healthlake_sdkv2.Client {
	return errs.Must(client[*healthlake_sdkv2.Client](ctx, c, names.HealthLake, make(map[string]any)))
}

func (c *AWSClient) IAMClient(ctx context.Context) *iam_sdkv2.Client {
	return errs.Must(client[*iam_sdkv2.Client](ctx, c, names.IAM, make(map[string]any)))
}

func (c *AWSClient) IVSConn(ctx context.Context) *ivs_sdkv1.IVS {
	return errs.Must(conn[*ivs_sdkv1.IVS](ctx, c, names.IVS, make(map[string]any)))
}

func (c *AWSClient) IVSChatClient(ctx context.Context) *ivschat_sdkv2.Client {
	return errs.Must(client[*ivschat_sdkv2.Client](ctx, c, names.IVSChat, make(map[string]any)))
}

func (c *AWSClient) IdentityStoreClient(ctx context.Context) *identitystore_sdkv2.Client {
	return errs.Must(client[*identitystore_sdkv2.Client](ctx, c, names.IdentityStore, make(map[string]any)))
}

func (c *AWSClient) ImageBuilderConn(ctx context.Context) *imagebuilder_sdkv1.Imagebuilder {
	return errs.Must(conn[*imagebuilder_sdkv1.Imagebuilder](ctx, c, names.ImageBuilder, make(map[string]any)))
}

func (c *AWSClient) InspectorConn(ctx context.Context) *inspector_sdkv1.Inspector {
	return errs.Must(conn[*inspector_sdkv1.Inspector](ctx, c, names.Inspector, make(map[string]any)))
}

func (c *AWSClient) Inspector2Client(ctx context.Context) *inspector2_sdkv2.Client {
	return errs.Must(client[*inspector2_sdkv2.Client](ctx, c, names.Inspector2, make(map[string]any)))
}

func (c *AWSClient) InternetMonitorClient(ctx context.Context) *internetmonitor_sdkv2.Client {
	return errs.Must(client[*internetmonitor_sdkv2.Client](ctx, c, names.InternetMonitor, make(map[string]any)))
}

func (c *AWSClient) IoTConn(ctx context.Context) *iot_sdkv1.IoT {
	return errs.Must(conn[*iot_sdkv1.IoT](ctx, c, names.IoT, make(map[string]any)))
}

func (c *AWSClient) IoTAnalyticsConn(ctx context.Context) *iotanalytics_sdkv1.IoTAnalytics {
	return errs.Must(conn[*iotanalytics_sdkv1.IoTAnalytics](ctx, c, names.IoTAnalytics, make(map[string]any)))
}

func (c *AWSClient) IoTEventsConn(ctx context.Context) *iotevents_sdkv1.IoTEvents {
	return errs.Must(conn[*iotevents_sdkv1.IoTEvents](ctx, c, names.IoTEvents, make(map[string]any)))
}

func (c *AWSClient) KMSClient(ctx context.Context) *kms_sdkv2.Client {
	return errs.Must(client[*kms_sdkv2.Client](ctx, c, names.KMS, make(map[string]any)))
}

func (c *AWSClient) KafkaClient(ctx context.Context) *kafka_sdkv2.Client {
	return errs.Must(client[*kafka_sdkv2.Client](ctx, c, names.Kafka, make(map[string]any)))
}

func (c *AWSClient) KafkaConnectConn(ctx context.Context) *kafkaconnect_sdkv1.KafkaConnect {
	return errs.Must(conn[*kafkaconnect_sdkv1.KafkaConnect](ctx, c, names.KafkaConnect, make(map[string]any)))
}

func (c *AWSClient) KendraClient(ctx context.Context) *kendra_sdkv2.Client {
	return errs.Must(client[*kendra_sdkv2.Client](ctx, c, names.Kendra, make(map[string]any)))
}

func (c *AWSClient) KeyspacesClient(ctx context.Context) *keyspaces_sdkv2.Client {
	return errs.Must(client[*keyspaces_sdkv2.Client](ctx, c, names.Keyspaces, make(map[string]any)))
}

func (c *AWSClient) KinesisClient(ctx context.Context) *kinesis_sdkv2.Client {
	return errs.Must(client[*kinesis_sdkv2.Client](ctx, c, names.Kinesis, make(map[string]any)))
}

func (c *AWSClient) KinesisAnalyticsConn(ctx context.Context) *kinesisanalytics_sdkv1.KinesisAnalytics {
	return errs.Must(conn[*kinesisanalytics_sdkv1.KinesisAnalytics](ctx, c, names.KinesisAnalytics, make(map[string]any)))
}

func (c *AWSClient) KinesisAnalyticsV2Conn(ctx context.Context) *kinesisanalyticsv2_sdkv1.KinesisAnalyticsV2 {
	return errs.Must(conn[*kinesisanalyticsv2_sdkv1.KinesisAnalyticsV2](ctx, c, names.KinesisAnalyticsV2, make(map[string]any)))
}

func (c *AWSClient) KinesisVideoConn(ctx context.Context) *kinesisvideo_sdkv1.KinesisVideo {
	return errs.Must(conn[*kinesisvideo_sdkv1.KinesisVideo](ctx, c, names.KinesisVideo, make(map[string]any)))
}

func (c *AWSClient) LakeFormationClient(ctx context.Context) *lakeformation_sdkv2.Client {
	return errs.Must(client[*lakeformation_sdkv2.Client](ctx, c, names.LakeFormation, make(map[string]any)))
}

func (c *AWSClient) LambdaClient(ctx context.Context) *lambda_sdkv2.Client {
	return errs.Must(client[*lambda_sdkv2.Client](ctx, c, names.Lambda, make(map[string]any)))
}

func (c *AWSClient) LaunchWizardClient(ctx context.Context) *launchwizard_sdkv2.Client {
	return errs.Must(client[*launchwizard_sdkv2.Client](ctx, c, names.LaunchWizard, make(map[string]any)))
}

func (c *AWSClient) LexModelsConn(ctx context.Context) *lexmodelbuildingservice_sdkv1.LexModelBuildingService {
	return errs.Must(conn[*lexmodelbuildingservice_sdkv1.LexModelBuildingService](ctx, c, names.LexModels, make(map[string]any)))
}

func (c *AWSClient) LexV2ModelsClient(ctx context.Context) *lexmodelsv2_sdkv2.Client {
	return errs.Must(client[*lexmodelsv2_sdkv2.Client](ctx, c, names.LexV2Models, make(map[string]any)))
}

func (c *AWSClient) LicenseManagerConn(ctx context.Context) *licensemanager_sdkv1.LicenseManager {
	return errs.Must(conn[*licensemanager_sdkv1.LicenseManager](ctx, c, names.LicenseManager, make(map[string]any)))
}

func (c *AWSClient) LightsailClient(ctx context.Context) *lightsail_sdkv2.Client {
	return errs.Must(client[*lightsail_sdkv2.Client](ctx, c, names.Lightsail, make(map[string]any)))
}

func (c *AWSClient) LocationConn(ctx context.Context) *locationservice_sdkv1.LocationService {
	return errs.Must(conn[*locationservice_sdkv1.LocationService](ctx, c, names.Location, make(map[string]any)))
}

func (c *AWSClient) LogsClient(ctx context.Context) *cloudwatchlogs_sdkv2.Client {
	return errs.Must(client[*cloudwatchlogs_sdkv2.Client](ctx, c, names.Logs, make(map[string]any)))
}

func (c *AWSClient) LookoutMetricsClient(ctx context.Context) *lookoutmetrics_sdkv2.Client {
	return errs.Must(client[*lookoutmetrics_sdkv2.Client](ctx, c, names.LookoutMetrics, make(map[string]any)))
}

func (c *AWSClient) M2Client(ctx context.Context) *m2_sdkv2.Client {
	return errs.Must(client[*m2_sdkv2.Client](ctx, c, names.M2, make(map[string]any)))
}

func (c *AWSClient) MQClient(ctx context.Context) *mq_sdkv2.Client {
	return errs.Must(client[*mq_sdkv2.Client](ctx, c, names.MQ, make(map[string]any)))
}

func (c *AWSClient) MWAAClient(ctx context.Context) *mwaa_sdkv2.Client {
	return errs.Must(client[*mwaa_sdkv2.Client](ctx, c, names.MWAA, make(map[string]any)))
}

func (c *AWSClient) Macie2Conn(ctx context.Context) *macie2_sdkv1.Macie2 {
	return errs.Must(conn[*macie2_sdkv1.Macie2](ctx, c, names.Macie2, make(map[string]any)))
}

func (c *AWSClient) MediaConnectClient(ctx context.Context) *mediaconnect_sdkv2.Client {
	return errs.Must(client[*mediaconnect_sdkv2.Client](ctx, c, names.MediaConnect, make(map[string]any)))
}

func (c *AWSClient) MediaConvertClient(ctx context.Context) *mediaconvert_sdkv2.Client {
	return errs.Must(client[*mediaconvert_sdkv2.Client](ctx, c, names.MediaConvert, make(map[string]any)))
}

func (c *AWSClient) MediaLiveClient(ctx context.Context) *medialive_sdkv2.Client {
	return errs.Must(client[*medialive_sdkv2.Client](ctx, c, names.MediaLive, make(map[string]any)))
}

func (c *AWSClient) MediaPackageClient(ctx context.Context) *mediapackage_sdkv2.Client {
	return errs.Must(client[*mediapackage_sdkv2.Client](ctx, c, names.MediaPackage, make(map[string]any)))
}

func (c *AWSClient) MediaPackageV2Client(ctx context.Context) *mediapackagev2_sdkv2.Client {
	return errs.Must(client[*mediapackagev2_sdkv2.Client](ctx, c, names.MediaPackageV2, make(map[string]any)))
}

func (c *AWSClient) MediaStoreClient(ctx context.Context) *mediastore_sdkv2.Client {
	return errs.Must(client[*mediastore_sdkv2.Client](ctx, c, names.MediaStore, make(map[string]any)))
}

func (c *AWSClient) MemoryDBConn(ctx context.Context) *memorydb_sdkv1.MemoryDB {
	return errs.Must(conn[*memorydb_sdkv1.MemoryDB](ctx, c, names.MemoryDB, make(map[string]any)))
}

func (c *AWSClient) NeptuneConn(ctx context.Context) *neptune_sdkv1.Neptune {
	return errs.Must(conn[*neptune_sdkv1.Neptune](ctx, c, names.Neptune, make(map[string]any)))
}

func (c *AWSClient) NeptuneGraphClient(ctx context.Context) *neptunegraph_sdkv2.Client {
	return errs.Must(client[*neptunegraph_sdkv2.Client](ctx, c, names.NeptuneGraph, make(map[string]any)))
}

func (c *AWSClient) NetworkFirewallConn(ctx context.Context) *networkfirewall_sdkv1.NetworkFirewall {
	return errs.Must(conn[*networkfirewall_sdkv1.NetworkFirewall](ctx, c, names.NetworkFirewall, make(map[string]any)))
}

func (c *AWSClient) NetworkManagerConn(ctx context.Context) *networkmanager_sdkv1.NetworkManager {
	return errs.Must(conn[*networkmanager_sdkv1.NetworkManager](ctx, c, names.NetworkManager, make(map[string]any)))
}

func (c *AWSClient) ObservabilityAccessManagerClient(ctx context.Context) *oam_sdkv2.Client {
	return errs.Must(client[*oam_sdkv2.Client](ctx, c, names.ObservabilityAccessManager, make(map[string]any)))
}

func (c *AWSClient) OpenSearchConn(ctx context.Context) *opensearchservice_sdkv1.OpenSearchService {
	return errs.Must(conn[*opensearchservice_sdkv1.OpenSearchService](ctx, c, names.OpenSearch, make(map[string]any)))
}

func (c *AWSClient) OpenSearchIngestionClient(ctx context.Context) *osis_sdkv2.Client {
	return errs.Must(client[*osis_sdkv2.Client](ctx, c, names.OpenSearchIngestion, make(map[string]any)))
}

func (c *AWSClient) OpenSearchServerlessClient(ctx context.Context) *opensearchserverless_sdkv2.Client {
	return errs.Must(client[*opensearchserverless_sdkv2.Client](ctx, c, names.OpenSearchServerless, make(map[string]any)))
}

func (c *AWSClient) OpsWorksConn(ctx context.Context) *opsworks_sdkv1.OpsWorks {
	return errs.Must(conn[*opsworks_sdkv1.OpsWorks](ctx, c, names.OpsWorks, make(map[string]any)))
}

func (c *AWSClient) OrganizationsClient(ctx context.Context) *organizations_sdkv2.Client {
	return errs.Must(client[*organizations_sdkv2.Client](ctx, c, names.Organizations, make(map[string]any)))
}

func (c *AWSClient) OutpostsConn(ctx context.Context) *outposts_sdkv1.Outposts {
	return errs.Must(conn[*outposts_sdkv1.Outposts](ctx, c, names.Outposts, make(map[string]any)))
}

func (c *AWSClient) PCAConnectorADClient(ctx context.Context) *pcaconnectorad_sdkv2.Client {
	return errs.Must(client[*pcaconnectorad_sdkv2.Client](ctx, c, names.PCAConnectorAD, make(map[string]any)))
}

func (c *AWSClient) PaymentCryptographyClient(ctx context.Context) *paymentcryptography_sdkv2.Client {
	return errs.Must(client[*paymentcryptography_sdkv2.Client](ctx, c, names.PaymentCryptography, make(map[string]any)))
}

func (c *AWSClient) PinpointConn(ctx context.Context) *pinpoint_sdkv1.Pinpoint {
	return errs.Must(conn[*pinpoint_sdkv1.Pinpoint](ctx, c, names.Pinpoint, make(map[string]any)))
}

func (c *AWSClient) PipesClient(ctx context.Context) *pipes_sdkv2.Client {
	return errs.Must(client[*pipes_sdkv2.Client](ctx, c, names.Pipes, make(map[string]any)))
}

func (c *AWSClient) PollyClient(ctx context.Context) *polly_sdkv2.Client {
	return errs.Must(client[*polly_sdkv2.Client](ctx, c, names.Polly, make(map[string]any)))
}

func (c *AWSClient) PricingClient(ctx context.Context) *pricing_sdkv2.Client {
	return errs.Must(client[*pricing_sdkv2.Client](ctx, c, names.Pricing, make(map[string]any)))
}

func (c *AWSClient) QBusinessClient(ctx context.Context) *qbusiness_sdkv2.Client {
	return errs.Must(client[*qbusiness_sdkv2.Client](ctx, c, names.QBusiness, make(map[string]any)))
}

func (c *AWSClient) QLDBClient(ctx context.Context) *qldb_sdkv2.Client {
	return errs.Must(client[*qldb_sdkv2.Client](ctx, c, names.QLDB, make(map[string]any)))
}

func (c *AWSClient) QuickSightConn(ctx context.Context) *quicksight_sdkv1.QuickSight {
	return errs.Must(conn[*quicksight_sdkv1.QuickSight](ctx, c, names.QuickSight, make(map[string]any)))
}

func (c *AWSClient) RAMClient(ctx context.Context) *ram_sdkv2.Client {
	return errs.Must(client[*ram_sdkv2.Client](ctx, c, names.RAM, make(map[string]any)))
}

func (c *AWSClient) RBinClient(ctx context.Context) *rbin_sdkv2.Client {
	return errs.Must(client[*rbin_sdkv2.Client](ctx, c, names.RBin, make(map[string]any)))
}

func (c *AWSClient) RDSConn(ctx context.Context) *rds_sdkv1.RDS {
	return errs.Must(conn[*rds_sdkv1.RDS](ctx, c, names.RDS, make(map[string]any)))
}

func (c *AWSClient) RDSClient(ctx context.Context) *rds_sdkv2.Client {
	return errs.Must(client[*rds_sdkv2.Client](ctx, c, names.RDS, make(map[string]any)))
}

func (c *AWSClient) RUMConn(ctx context.Context) *cloudwatchrum_sdkv1.CloudWatchRUM {
	return errs.Must(conn[*cloudwatchrum_sdkv1.CloudWatchRUM](ctx, c, names.RUM, make(map[string]any)))
}

func (c *AWSClient) RedshiftConn(ctx context.Context) *redshift_sdkv1.Redshift {
	return errs.Must(conn[*redshift_sdkv1.Redshift](ctx, c, names.Redshift, make(map[string]any)))
}

func (c *AWSClient) RedshiftClient(ctx context.Context) *redshift_sdkv2.Client {
	return errs.Must(client[*redshift_sdkv2.Client](ctx, c, names.Redshift, make(map[string]any)))
}

func (c *AWSClient) RedshiftDataClient(ctx context.Context) *redshiftdata_sdkv2.Client {
	return errs.Must(client[*redshiftdata_sdkv2.Client](ctx, c, names.RedshiftData, make(map[string]any)))
}

func (c *AWSClient) RedshiftServerlessConn(ctx context.Context) *redshiftserverless_sdkv1.RedshiftServerless {
	return errs.Must(conn[*redshiftserverless_sdkv1.RedshiftServerless](ctx, c, names.RedshiftServerless, make(map[string]any)))
}

func (c *AWSClient) RedshiftServerlessClient(ctx context.Context) *redshiftserverless_sdkv2.Client {
	return errs.Must(client[*redshiftserverless_sdkv2.Client](ctx, c, names.RedshiftServerless, make(map[string]any)))
}

func (c *AWSClient) RekognitionClient(ctx context.Context) *rekognition_sdkv2.Client {
	return errs.Must(client[*rekognition_sdkv2.Client](ctx, c, names.Rekognition, make(map[string]any)))
}

func (c *AWSClient) ResourceExplorer2Client(ctx context.Context) *resourceexplorer2_sdkv2.Client {
	return errs.Must(client[*resourceexplorer2_sdkv2.Client](ctx, c, names.ResourceExplorer2, make(map[string]any)))
}

func (c *AWSClient) ResourceGroupsClient(ctx context.Context) *resourcegroups_sdkv2.Client {
	return errs.Must(client[*resourcegroups_sdkv2.Client](ctx, c, names.ResourceGroups, make(map[string]any)))
}

func (c *AWSClient) ResourceGroupsTaggingAPIClient(ctx context.Context) *resourcegroupstaggingapi_sdkv2.Client {
	return errs.Must(client[*resourcegroupstaggingapi_sdkv2.Client](ctx, c, names.ResourceGroupsTaggingAPI, make(map[string]any)))
}

func (c *AWSClient) RolesAnywhereClient(ctx context.Context) *rolesanywhere_sdkv2.Client {
	return errs.Must(client[*rolesanywhere_sdkv2.Client](ctx, c, names.RolesAnywhere, make(map[string]any)))
}

func (c *AWSClient) Route53Client(ctx context.Context) *route53_sdkv2.Client {
	return errs.Must(client[*route53_sdkv2.Client](ctx, c, names.Route53, make(map[string]any)))
}

func (c *AWSClient) Route53DomainsClient(ctx context.Context) *route53domains_sdkv2.Client {
	return errs.Must(client[*route53domains_sdkv2.Client](ctx, c, names.Route53Domains, make(map[string]any)))
}

func (c *AWSClient) Route53ProfilesClient(ctx context.Context) *route53profiles_sdkv2.Client {
	return errs.Must(client[*route53profiles_sdkv2.Client](ctx, c, names.Route53Profiles, make(map[string]any)))
}

func (c *AWSClient) Route53RecoveryControlConfigConn(ctx context.Context) *route53recoverycontrolconfig_sdkv1.Route53RecoveryControlConfig {
	return errs.Must(conn[*route53recoverycontrolconfig_sdkv1.Route53RecoveryControlConfig](ctx, c, names.Route53RecoveryControlConfig, make(map[string]any)))
}

func (c *AWSClient) Route53RecoveryReadinessConn(ctx context.Context) *route53recoveryreadiness_sdkv1.Route53RecoveryReadiness {
	return errs.Must(conn[*route53recoveryreadiness_sdkv1.Route53RecoveryReadiness](ctx, c, names.Route53RecoveryReadiness, make(map[string]any)))
}

func (c *AWSClient) Route53ResolverConn(ctx context.Context) *route53resolver_sdkv1.Route53Resolver {
	return errs.Must(conn[*route53resolver_sdkv1.Route53Resolver](ctx, c, names.Route53Resolver, make(map[string]any)))
}

func (c *AWSClient) S3Client(ctx context.Context) *s3_sdkv2.Client {
	return errs.Must(client[*s3_sdkv2.Client](ctx, c, names.S3, make(map[string]any)))
}

func (c *AWSClient) S3ControlClient(ctx context.Context) *s3control_sdkv2.Client {
	return errs.Must(client[*s3control_sdkv2.Client](ctx, c, names.S3Control, make(map[string]any)))
}

func (c *AWSClient) S3OutpostsConn(ctx context.Context) *s3outposts_sdkv1.S3Outposts {
	return errs.Must(conn[*s3outposts_sdkv1.S3Outposts](ctx, c, names.S3Outposts, make(map[string]any)))
}

func (c *AWSClient) SESConn(ctx context.Context) *ses_sdkv1.SES {
	return errs.Must(conn[*ses_sdkv1.SES](ctx, c, names.SES, make(map[string]any)))
}

func (c *AWSClient) SESV2Client(ctx context.Context) *sesv2_sdkv2.Client {
	return errs.Must(client[*sesv2_sdkv2.Client](ctx, c, names.SESV2, make(map[string]any)))
}

func (c *AWSClient) SFNConn(ctx context.Context) *sfn_sdkv1.SFN {
	return errs.Must(conn[*sfn_sdkv1.SFN](ctx, c, names.SFN, make(map[string]any)))
}

func (c *AWSClient) SNSClient(ctx context.Context) *sns_sdkv2.Client {
	return errs.Must(client[*sns_sdkv2.Client](ctx, c, names.SNS, make(map[string]any)))
}

func (c *AWSClient) SQSClient(ctx context.Context) *sqs_sdkv2.Client {
	return errs.Must(client[*sqs_sdkv2.Client](ctx, c, names.SQS, make(map[string]any)))
}

func (c *AWSClient) SSMClient(ctx context.Context) *ssm_sdkv2.Client {
	return errs.Must(client[*ssm_sdkv2.Client](ctx, c, names.SSM, make(map[string]any)))
}

func (c *AWSClient) SSMContactsClient(ctx context.Context) *ssmcontacts_sdkv2.Client {
	return errs.Must(client[*ssmcontacts_sdkv2.Client](ctx, c, names.SSMContacts, make(map[string]any)))
}

func (c *AWSClient) SSMIncidentsClient(ctx context.Context) *ssmincidents_sdkv2.Client {
	return errs.Must(client[*ssmincidents_sdkv2.Client](ctx, c, names.SSMIncidents, make(map[string]any)))
}

func (c *AWSClient) SSMSAPClient(ctx context.Context) *ssmsap_sdkv2.Client {
	return errs.Must(client[*ssmsap_sdkv2.Client](ctx, c, names.SSMSAP, make(map[string]any)))
}

func (c *AWSClient) SSOClient(ctx context.Context) *sso_sdkv2.Client {
	return errs.Must(client[*sso_sdkv2.Client](ctx, c, names.SSO, make(map[string]any)))
}

func (c *AWSClient) SSOAdminClient(ctx context.Context) *ssoadmin_sdkv2.Client {
	return errs.Must(client[*ssoadmin_sdkv2.Client](ctx, c, names.SSOAdmin, make(map[string]any)))
}

func (c *AWSClient) STSClient(ctx context.Context) *sts_sdkv2.Client {
	return errs.Must(client[*sts_sdkv2.Client](ctx, c, names.STS, make(map[string]any)))
}

func (c *AWSClient) SWFClient(ctx context.Context) *swf_sdkv2.Client {
	return errs.Must(client[*swf_sdkv2.Client](ctx, c, names.SWF, make(map[string]any)))
}

func (c *AWSClient) SageMakerConn(ctx context.Context) *sagemaker_sdkv1.SageMaker {
	return errs.Must(conn[*sagemaker_sdkv1.SageMaker](ctx, c, names.SageMaker, make(map[string]any)))
}

func (c *AWSClient) SchedulerClient(ctx context.Context) *scheduler_sdkv2.Client {
	return errs.Must(client[*scheduler_sdkv2.Client](ctx, c, names.Scheduler, make(map[string]any)))
}

func (c *AWSClient) SchemasClient(ctx context.Context) *schemas_sdkv2.Client {
	return errs.Must(client[*schemas_sdkv2.Client](ctx, c, names.Schemas, make(map[string]any)))
}

func (c *AWSClient) SecretsManagerClient(ctx context.Context) *secretsmanager_sdkv2.Client {
	return errs.Must(client[*secretsmanager_sdkv2.Client](ctx, c, names.SecretsManager, make(map[string]any)))
}

func (c *AWSClient) SecurityHubClient(ctx context.Context) *securityhub_sdkv2.Client {
	return errs.Must(client[*securityhub_sdkv2.Client](ctx, c, names.SecurityHub, make(map[string]any)))
}

func (c *AWSClient) SecurityLakeClient(ctx context.Context) *securitylake_sdkv2.Client {
	return errs.Must(client[*securitylake_sdkv2.Client](ctx, c, names.SecurityLake, make(map[string]any)))
}

func (c *AWSClient) ServerlessRepoConn(ctx context.Context) *serverlessapplicationrepository_sdkv1.ServerlessApplicationRepository {
	return errs.Must(conn[*serverlessapplicationrepository_sdkv1.ServerlessApplicationRepository](ctx, c, names.ServerlessRepo, make(map[string]any)))
}

func (c *AWSClient) ServiceCatalogConn(ctx context.Context) *servicecatalog_sdkv1.ServiceCatalog {
	return errs.Must(conn[*servicecatalog_sdkv1.ServiceCatalog](ctx, c, names.ServiceCatalog, make(map[string]any)))
}

func (c *AWSClient) ServiceCatalogAppRegistryClient(ctx context.Context) *servicecatalogappregistry_sdkv2.Client {
	return errs.Must(client[*servicecatalogappregistry_sdkv2.Client](ctx, c, names.ServiceCatalogAppRegistry, make(map[string]any)))
}

func (c *AWSClient) ServiceDiscoveryClient(ctx context.Context) *servicediscovery_sdkv2.Client {
	return errs.Must(client[*servicediscovery_sdkv2.Client](ctx, c, names.ServiceDiscovery, make(map[string]any)))
}

func (c *AWSClient) ServiceQuotasClient(ctx context.Context) *servicequotas_sdkv2.Client {
	return errs.Must(client[*servicequotas_sdkv2.Client](ctx, c, names.ServiceQuotas, make(map[string]any)))
}

func (c *AWSClient) ShieldClient(ctx context.Context) *shield_sdkv2.Client {
	return errs.Must(client[*shield_sdkv2.Client](ctx, c, names.Shield, make(map[string]any)))
}

func (c *AWSClient) SignerClient(ctx context.Context) *signer_sdkv2.Client {
	return errs.Must(client[*signer_sdkv2.Client](ctx, c, names.Signer, make(map[string]any)))
}

func (c *AWSClient) SimpleDBConn(ctx context.Context) *simpledb_sdkv1.SimpleDB {
	return errs.Must(conn[*simpledb_sdkv1.SimpleDB](ctx, c, names.SimpleDB, make(map[string]any)))
}

func (c *AWSClient) StorageGatewayConn(ctx context.Context) *storagegateway_sdkv1.StorageGateway {
	return errs.Must(conn[*storagegateway_sdkv1.StorageGateway](ctx, c, names.StorageGateway, make(map[string]any)))
}

func (c *AWSClient) SyntheticsClient(ctx context.Context) *synthetics_sdkv2.Client {
	return errs.Must(client[*synthetics_sdkv2.Client](ctx, c, names.Synthetics, make(map[string]any)))
}

func (c *AWSClient) TimestreamInfluxDBClient(ctx context.Context) *timestreaminfluxdb_sdkv2.Client {
	return errs.Must(client[*timestreaminfluxdb_sdkv2.Client](ctx, c, names.TimestreamInfluxDB, make(map[string]any)))
}

func (c *AWSClient) TimestreamWriteClient(ctx context.Context) *timestreamwrite_sdkv2.Client {
	return errs.Must(client[*timestreamwrite_sdkv2.Client](ctx, c, names.TimestreamWrite, make(map[string]any)))
}

func (c *AWSClient) TranscribeClient(ctx context.Context) *transcribe_sdkv2.Client {
	return errs.Must(client[*transcribe_sdkv2.Client](ctx, c, names.Transcribe, make(map[string]any)))
}

func (c *AWSClient) TransferClient(ctx context.Context) *transfer_sdkv2.Client {
	return errs.Must(client[*transfer_sdkv2.Client](ctx, c, names.Transfer, make(map[string]any)))
}

func (c *AWSClient) VPCLatticeClient(ctx context.Context) *vpclattice_sdkv2.Client {
	return errs.Must(client[*vpclattice_sdkv2.Client](ctx, c, names.VPCLattice, make(map[string]any)))
}

func (c *AWSClient) VerifiedPermissionsClient(ctx context.Context) *verifiedpermissions_sdkv2.Client {
	return errs.Must(client[*verifiedpermissions_sdkv2.Client](ctx, c, names.VerifiedPermissions, make(map[string]any)))
}

func (c *AWSClient) WAFClient(ctx context.Context) *waf_sdkv2.Client {
	return errs.Must(client[*waf_sdkv2.Client](ctx, c, names.WAF, make(map[string]any)))
}

func (c *AWSClient) WAFRegionalClient(ctx context.Context) *wafregional_sdkv2.Client {
	return errs.Must(client[*wafregional_sdkv2.Client](ctx, c, names.WAFRegional, make(map[string]any)))
}

func (c *AWSClient) WAFV2Client(ctx context.Context) *wafv2_sdkv2.Client {
	return errs.Must(client[*wafv2_sdkv2.Client](ctx, c, names.WAFV2, make(map[string]any)))
}

func (c *AWSClient) WellArchitectedClient(ctx context.Context) *wellarchitected_sdkv2.Client {
	return errs.Must(client[*wellarchitected_sdkv2.Client](ctx, c, names.WellArchitected, make(map[string]any)))
}

func (c *AWSClient) WorkLinkConn(ctx context.Context) *worklink_sdkv1.WorkLink {
	return errs.Must(conn[*worklink_sdkv1.WorkLink](ctx, c, names.WorkLink, make(map[string]any)))
}

func (c *AWSClient) WorkSpacesClient(ctx context.Context) *workspaces_sdkv2.Client {
	return errs.Must(client[*workspaces_sdkv2.Client](ctx, c, names.WorkSpaces, make(map[string]any)))
}

func (c *AWSClient) WorkSpacesWebClient(ctx context.Context) *workspacesweb_sdkv2.Client {
	return errs.Must(client[*workspacesweb_sdkv2.Client](ctx, c, names.WorkSpacesWeb, make(map[string]any)))
}

func (c *AWSClient) XRayClient(ctx context.Context) *xray_sdkv2.Client {
	return errs.Must(client[*xray_sdkv2.Client](ctx, c, names.XRay, make(map[string]any)))
}
