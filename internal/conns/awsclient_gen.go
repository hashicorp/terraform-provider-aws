// Code generated by internal/generate/awsclient/main.go; DO NOT EDIT.
package conns

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/accessanalyzer"
	"github.com/aws/aws-sdk-go-v2/service/account"
	"github.com/aws/aws-sdk-go-v2/service/acm"
	"github.com/aws/aws-sdk-go-v2/service/acmpca"
	"github.com/aws/aws-sdk-go-v2/service/amp"
	"github.com/aws/aws-sdk-go-v2/service/amplify"
	"github.com/aws/aws-sdk-go-v2/service/apigateway"
	"github.com/aws/aws-sdk-go-v2/service/apigatewayv2"
	"github.com/aws/aws-sdk-go-v2/service/appconfig"
	"github.com/aws/aws-sdk-go-v2/service/appfabric"
	"github.com/aws/aws-sdk-go-v2/service/appflow"
	"github.com/aws/aws-sdk-go-v2/service/appintegrations"
	"github.com/aws/aws-sdk-go-v2/service/applicationautoscaling"
	"github.com/aws/aws-sdk-go-v2/service/applicationinsights"
	"github.com/aws/aws-sdk-go-v2/service/applicationsignals"
	"github.com/aws/aws-sdk-go-v2/service/appmesh"
	"github.com/aws/aws-sdk-go-v2/service/apprunner"
	"github.com/aws/aws-sdk-go-v2/service/appstream"
	"github.com/aws/aws-sdk-go-v2/service/appsync"
	"github.com/aws/aws-sdk-go-v2/service/athena"
	"github.com/aws/aws-sdk-go-v2/service/auditmanager"
	"github.com/aws/aws-sdk-go-v2/service/autoscaling"
	"github.com/aws/aws-sdk-go-v2/service/autoscalingplans"
	"github.com/aws/aws-sdk-go-v2/service/backup"
	"github.com/aws/aws-sdk-go-v2/service/batch"
	"github.com/aws/aws-sdk-go-v2/service/bcmdataexports"
	"github.com/aws/aws-sdk-go-v2/service/bedrock"
	"github.com/aws/aws-sdk-go-v2/service/bedrockagent"
	"github.com/aws/aws-sdk-go-v2/service/billing"
	"github.com/aws/aws-sdk-go-v2/service/budgets"
	"github.com/aws/aws-sdk-go-v2/service/chatbot"
	"github.com/aws/aws-sdk-go-v2/service/chime"
	"github.com/aws/aws-sdk-go-v2/service/chimesdkmediapipelines"
	"github.com/aws/aws-sdk-go-v2/service/chimesdkvoice"
	"github.com/aws/aws-sdk-go-v2/service/cleanrooms"
	"github.com/aws/aws-sdk-go-v2/service/cloud9"
	"github.com/aws/aws-sdk-go-v2/service/cloudcontrol"
	"github.com/aws/aws-sdk-go-v2/service/cloudformation"
	"github.com/aws/aws-sdk-go-v2/service/cloudfront"
	"github.com/aws/aws-sdk-go-v2/service/cloudfrontkeyvaluestore"
	"github.com/aws/aws-sdk-go-v2/service/cloudhsmv2"
	"github.com/aws/aws-sdk-go-v2/service/cloudsearch"
	"github.com/aws/aws-sdk-go-v2/service/cloudtrail"
	"github.com/aws/aws-sdk-go-v2/service/cloudwatch"
	"github.com/aws/aws-sdk-go-v2/service/cloudwatchlogs"
	"github.com/aws/aws-sdk-go-v2/service/codeartifact"
	"github.com/aws/aws-sdk-go-v2/service/codebuild"
	"github.com/aws/aws-sdk-go-v2/service/codecatalyst"
	"github.com/aws/aws-sdk-go-v2/service/codecommit"
	"github.com/aws/aws-sdk-go-v2/service/codeconnections"
	"github.com/aws/aws-sdk-go-v2/service/codedeploy"
	"github.com/aws/aws-sdk-go-v2/service/codeguruprofiler"
	"github.com/aws/aws-sdk-go-v2/service/codegurureviewer"
	"github.com/aws/aws-sdk-go-v2/service/codepipeline"
	"github.com/aws/aws-sdk-go-v2/service/codestarconnections"
	"github.com/aws/aws-sdk-go-v2/service/codestarnotifications"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentity"
	"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider"
	"github.com/aws/aws-sdk-go-v2/service/comprehend"
	"github.com/aws/aws-sdk-go-v2/service/computeoptimizer"
	"github.com/aws/aws-sdk-go-v2/service/configservice"
	"github.com/aws/aws-sdk-go-v2/service/connect"
	"github.com/aws/aws-sdk-go-v2/service/connectcases"
	"github.com/aws/aws-sdk-go-v2/service/controltower"
	"github.com/aws/aws-sdk-go-v2/service/costandusagereportservice"
	"github.com/aws/aws-sdk-go-v2/service/costexplorer"
	"github.com/aws/aws-sdk-go-v2/service/costoptimizationhub"
	"github.com/aws/aws-sdk-go-v2/service/customerprofiles"
	"github.com/aws/aws-sdk-go-v2/service/databasemigrationservice"
	"github.com/aws/aws-sdk-go-v2/service/databrew"
	"github.com/aws/aws-sdk-go-v2/service/dataexchange"
	"github.com/aws/aws-sdk-go-v2/service/datapipeline"
	"github.com/aws/aws-sdk-go-v2/service/datasync"
	"github.com/aws/aws-sdk-go-v2/service/datazone"
	"github.com/aws/aws-sdk-go-v2/service/dax"
	"github.com/aws/aws-sdk-go-v2/service/detective"
	"github.com/aws/aws-sdk-go-v2/service/devicefarm"
	"github.com/aws/aws-sdk-go-v2/service/devopsguru"
	"github.com/aws/aws-sdk-go-v2/service/directconnect"
	"github.com/aws/aws-sdk-go-v2/service/directoryservice"
	"github.com/aws/aws-sdk-go-v2/service/dlm"
	"github.com/aws/aws-sdk-go-v2/service/docdb"
	"github.com/aws/aws-sdk-go-v2/service/docdbelastic"
	"github.com/aws/aws-sdk-go-v2/service/drs"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/aws/aws-sdk-go-v2/service/ecr"
	"github.com/aws/aws-sdk-go-v2/service/ecrpublic"
	"github.com/aws/aws-sdk-go-v2/service/ecs"
	"github.com/aws/aws-sdk-go-v2/service/efs"
	"github.com/aws/aws-sdk-go-v2/service/eks"
	"github.com/aws/aws-sdk-go-v2/service/elasticache"
	"github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancing"
	"github.com/aws/aws-sdk-go-v2/service/elasticloadbalancingv2"
	"github.com/aws/aws-sdk-go-v2/service/elasticsearchservice"
	"github.com/aws/aws-sdk-go-v2/service/elastictranscoder"
	"github.com/aws/aws-sdk-go-v2/service/emr"
	"github.com/aws/aws-sdk-go-v2/service/emrcontainers"
	"github.com/aws/aws-sdk-go-v2/service/emrserverless"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge"
	"github.com/aws/aws-sdk-go-v2/service/evidently"
	"github.com/aws/aws-sdk-go-v2/service/finspace"
	"github.com/aws/aws-sdk-go-v2/service/firehose"
	"github.com/aws/aws-sdk-go-v2/service/fis"
	"github.com/aws/aws-sdk-go-v2/service/fms"
	"github.com/aws/aws-sdk-go-v2/service/fsx"
	"github.com/aws/aws-sdk-go-v2/service/gamelift"
	"github.com/aws/aws-sdk-go-v2/service/glacier"
	"github.com/aws/aws-sdk-go-v2/service/globalaccelerator"
	"github.com/aws/aws-sdk-go-v2/service/glue"
	"github.com/aws/aws-sdk-go-v2/service/grafana"
	"github.com/aws/aws-sdk-go-v2/service/greengrass"
	"github.com/aws/aws-sdk-go-v2/service/groundstation"
	"github.com/aws/aws-sdk-go-v2/service/guardduty"
	"github.com/aws/aws-sdk-go-v2/service/healthlake"
	"github.com/aws/aws-sdk-go-v2/service/iam"
	"github.com/aws/aws-sdk-go-v2/service/identitystore"
	"github.com/aws/aws-sdk-go-v2/service/imagebuilder"
	"github.com/aws/aws-sdk-go-v2/service/inspector"
	"github.com/aws/aws-sdk-go-v2/service/inspector2"
	"github.com/aws/aws-sdk-go-v2/service/internetmonitor"
	"github.com/aws/aws-sdk-go-v2/service/invoicing"
	"github.com/aws/aws-sdk-go-v2/service/iot"
	"github.com/aws/aws-sdk-go-v2/service/iotanalytics"
	"github.com/aws/aws-sdk-go-v2/service/iotevents"
	"github.com/aws/aws-sdk-go-v2/service/ivs"
	"github.com/aws/aws-sdk-go-v2/service/ivschat"
	"github.com/aws/aws-sdk-go-v2/service/kafka"
	"github.com/aws/aws-sdk-go-v2/service/kafkaconnect"
	"github.com/aws/aws-sdk-go-v2/service/kendra"
	"github.com/aws/aws-sdk-go-v2/service/keyspaces"
	"github.com/aws/aws-sdk-go-v2/service/kinesis"
	"github.com/aws/aws-sdk-go-v2/service/kinesisanalytics"
	"github.com/aws/aws-sdk-go-v2/service/kinesisanalyticsv2"
	"github.com/aws/aws-sdk-go-v2/service/kinesisvideo"
	"github.com/aws/aws-sdk-go-v2/service/kms"
	"github.com/aws/aws-sdk-go-v2/service/lakeformation"
	"github.com/aws/aws-sdk-go-v2/service/lambda"
	"github.com/aws/aws-sdk-go-v2/service/launchwizard"
	"github.com/aws/aws-sdk-go-v2/service/lexmodelbuildingservice"
	"github.com/aws/aws-sdk-go-v2/service/lexmodelsv2"
	"github.com/aws/aws-sdk-go-v2/service/licensemanager"
	"github.com/aws/aws-sdk-go-v2/service/lightsail"
	"github.com/aws/aws-sdk-go-v2/service/location"
	"github.com/aws/aws-sdk-go-v2/service/lookoutmetrics"
	"github.com/aws/aws-sdk-go-v2/service/m2"
	"github.com/aws/aws-sdk-go-v2/service/macie2"
	"github.com/aws/aws-sdk-go-v2/service/mediaconnect"
	"github.com/aws/aws-sdk-go-v2/service/mediaconvert"
	"github.com/aws/aws-sdk-go-v2/service/medialive"
	"github.com/aws/aws-sdk-go-v2/service/mediapackage"
	"github.com/aws/aws-sdk-go-v2/service/mediapackagev2"
	"github.com/aws/aws-sdk-go-v2/service/mediastore"
	"github.com/aws/aws-sdk-go-v2/service/memorydb"
	"github.com/aws/aws-sdk-go-v2/service/mgn"
	"github.com/aws/aws-sdk-go-v2/service/mq"
	"github.com/aws/aws-sdk-go-v2/service/mwaa"
	"github.com/aws/aws-sdk-go-v2/service/neptune"
	"github.com/aws/aws-sdk-go-v2/service/neptunegraph"
	"github.com/aws/aws-sdk-go-v2/service/networkfirewall"
	"github.com/aws/aws-sdk-go-v2/service/networkmanager"
	"github.com/aws/aws-sdk-go-v2/service/networkmonitor"
	"github.com/aws/aws-sdk-go-v2/service/oam"
	"github.com/aws/aws-sdk-go-v2/service/opensearch"
	"github.com/aws/aws-sdk-go-v2/service/opensearchserverless"
	"github.com/aws/aws-sdk-go-v2/service/opsworks"
	"github.com/aws/aws-sdk-go-v2/service/organizations"
	"github.com/aws/aws-sdk-go-v2/service/osis"
	"github.com/aws/aws-sdk-go-v2/service/outposts"
	"github.com/aws/aws-sdk-go-v2/service/paymentcryptography"
	"github.com/aws/aws-sdk-go-v2/service/pcaconnectorad"
	"github.com/aws/aws-sdk-go-v2/service/pcs"
	"github.com/aws/aws-sdk-go-v2/service/pinpoint"
	"github.com/aws/aws-sdk-go-v2/service/pinpointsmsvoicev2"
	"github.com/aws/aws-sdk-go-v2/service/pipes"
	"github.com/aws/aws-sdk-go-v2/service/polly"
	"github.com/aws/aws-sdk-go-v2/service/pricing"
	"github.com/aws/aws-sdk-go-v2/service/qbusiness"
	"github.com/aws/aws-sdk-go-v2/service/qldb"
	"github.com/aws/aws-sdk-go-v2/service/quicksight"
	"github.com/aws/aws-sdk-go-v2/service/ram"
	"github.com/aws/aws-sdk-go-v2/service/rbin"
	"github.com/aws/aws-sdk-go-v2/service/rds"
	"github.com/aws/aws-sdk-go-v2/service/redshift"
	"github.com/aws/aws-sdk-go-v2/service/redshiftdata"
	"github.com/aws/aws-sdk-go-v2/service/redshiftserverless"
	"github.com/aws/aws-sdk-go-v2/service/rekognition"
	"github.com/aws/aws-sdk-go-v2/service/resiliencehub"
	"github.com/aws/aws-sdk-go-v2/service/resourceexplorer2"
	"github.com/aws/aws-sdk-go-v2/service/resourcegroups"
	"github.com/aws/aws-sdk-go-v2/service/resourcegroupstaggingapi"
	"github.com/aws/aws-sdk-go-v2/service/rolesanywhere"
	"github.com/aws/aws-sdk-go-v2/service/route53"
	"github.com/aws/aws-sdk-go-v2/service/route53domains"
	"github.com/aws/aws-sdk-go-v2/service/route53profiles"
	"github.com/aws/aws-sdk-go-v2/service/route53recoverycontrolconfig"
	"github.com/aws/aws-sdk-go-v2/service/route53recoveryreadiness"
	"github.com/aws/aws-sdk-go-v2/service/route53resolver"
	"github.com/aws/aws-sdk-go-v2/service/rum"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3control"
	"github.com/aws/aws-sdk-go-v2/service/s3outposts"
	"github.com/aws/aws-sdk-go-v2/service/s3tables"
	"github.com/aws/aws-sdk-go-v2/service/sagemaker"
	"github.com/aws/aws-sdk-go-v2/service/scheduler"
	"github.com/aws/aws-sdk-go-v2/service/schemas"
	"github.com/aws/aws-sdk-go-v2/service/secretsmanager"
	"github.com/aws/aws-sdk-go-v2/service/securityhub"
	"github.com/aws/aws-sdk-go-v2/service/securitylake"
	"github.com/aws/aws-sdk-go-v2/service/serverlessapplicationrepository"
	"github.com/aws/aws-sdk-go-v2/service/servicecatalog"
	"github.com/aws/aws-sdk-go-v2/service/servicecatalogappregistry"
	"github.com/aws/aws-sdk-go-v2/service/servicediscovery"
	"github.com/aws/aws-sdk-go-v2/service/servicequotas"
	"github.com/aws/aws-sdk-go-v2/service/ses"
	"github.com/aws/aws-sdk-go-v2/service/sesv2"
	"github.com/aws/aws-sdk-go-v2/service/sfn"
	"github.com/aws/aws-sdk-go-v2/service/shield"
	"github.com/aws/aws-sdk-go-v2/service/signer"
	"github.com/aws/aws-sdk-go-v2/service/sns"
	"github.com/aws/aws-sdk-go-v2/service/sqs"
	"github.com/aws/aws-sdk-go-v2/service/ssm"
	"github.com/aws/aws-sdk-go-v2/service/ssmcontacts"
	"github.com/aws/aws-sdk-go-v2/service/ssmincidents"
	"github.com/aws/aws-sdk-go-v2/service/ssmquicksetup"
	"github.com/aws/aws-sdk-go-v2/service/ssmsap"
	"github.com/aws/aws-sdk-go-v2/service/sso"
	"github.com/aws/aws-sdk-go-v2/service/ssoadmin"
	"github.com/aws/aws-sdk-go-v2/service/storagegateway"
	"github.com/aws/aws-sdk-go-v2/service/sts"
	"github.com/aws/aws-sdk-go-v2/service/swf"
	"github.com/aws/aws-sdk-go-v2/service/synthetics"
	"github.com/aws/aws-sdk-go-v2/service/taxsettings"
	"github.com/aws/aws-sdk-go-v2/service/timestreaminfluxdb"
	"github.com/aws/aws-sdk-go-v2/service/timestreamquery"
	"github.com/aws/aws-sdk-go-v2/service/timestreamwrite"
	"github.com/aws/aws-sdk-go-v2/service/transcribe"
	"github.com/aws/aws-sdk-go-v2/service/transfer"
	"github.com/aws/aws-sdk-go-v2/service/verifiedpermissions"
	"github.com/aws/aws-sdk-go-v2/service/vpclattice"
	"github.com/aws/aws-sdk-go-v2/service/waf"
	"github.com/aws/aws-sdk-go-v2/service/wafregional"
	"github.com/aws/aws-sdk-go-v2/service/wafv2"
	"github.com/aws/aws-sdk-go-v2/service/wellarchitected"
	"github.com/aws/aws-sdk-go-v2/service/worklink"
	"github.com/aws/aws-sdk-go-v2/service/workspaces"
	"github.com/aws/aws-sdk-go-v2/service/workspacesweb"
	"github.com/aws/aws-sdk-go-v2/service/xray"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
	"github.com/hashicorp/terraform-provider-aws/names"
)

func (c *AWSClient) ACMClient(ctx context.Context) *acm.Client {
	return errs.Must(client[*acm.Client](ctx, c, names.ACM, make(map[string]any)))
}

func (c *AWSClient) ACMPCAClient(ctx context.Context) *acmpca.Client {
	return errs.Must(client[*acmpca.Client](ctx, c, names.ACMPCA, make(map[string]any)))
}

func (c *AWSClient) AMPClient(ctx context.Context) *amp.Client {
	return errs.Must(client[*amp.Client](ctx, c, names.AMP, make(map[string]any)))
}

func (c *AWSClient) APIGatewayClient(ctx context.Context) *apigateway.Client {
	return errs.Must(client[*apigateway.Client](ctx, c, names.APIGateway, make(map[string]any)))
}

func (c *AWSClient) APIGatewayV2Client(ctx context.Context) *apigatewayv2.Client {
	return errs.Must(client[*apigatewayv2.Client](ctx, c, names.APIGatewayV2, make(map[string]any)))
}

func (c *AWSClient) AccessAnalyzerClient(ctx context.Context) *accessanalyzer.Client {
	return errs.Must(client[*accessanalyzer.Client](ctx, c, names.AccessAnalyzer, make(map[string]any)))
}

func (c *AWSClient) AccountClient(ctx context.Context) *account.Client {
	return errs.Must(client[*account.Client](ctx, c, names.Account, make(map[string]any)))
}

func (c *AWSClient) AmplifyClient(ctx context.Context) *amplify.Client {
	return errs.Must(client[*amplify.Client](ctx, c, names.Amplify, make(map[string]any)))
}

func (c *AWSClient) AppAutoScalingClient(ctx context.Context) *applicationautoscaling.Client {
	return errs.Must(client[*applicationautoscaling.Client](ctx, c, names.AppAutoScaling, make(map[string]any)))
}

func (c *AWSClient) AppConfigClient(ctx context.Context) *appconfig.Client {
	return errs.Must(client[*appconfig.Client](ctx, c, names.AppConfig, make(map[string]any)))
}

func (c *AWSClient) AppFabricClient(ctx context.Context) *appfabric.Client {
	return errs.Must(client[*appfabric.Client](ctx, c, names.AppFabric, make(map[string]any)))
}

func (c *AWSClient) AppFlowClient(ctx context.Context) *appflow.Client {
	return errs.Must(client[*appflow.Client](ctx, c, names.AppFlow, make(map[string]any)))
}

func (c *AWSClient) AppIntegrationsClient(ctx context.Context) *appintegrations.Client {
	return errs.Must(client[*appintegrations.Client](ctx, c, names.AppIntegrations, make(map[string]any)))
}

func (c *AWSClient) AppMeshClient(ctx context.Context) *appmesh.Client {
	return errs.Must(client[*appmesh.Client](ctx, c, names.AppMesh, make(map[string]any)))
}

func (c *AWSClient) AppRunnerClient(ctx context.Context) *apprunner.Client {
	return errs.Must(client[*apprunner.Client](ctx, c, names.AppRunner, make(map[string]any)))
}

func (c *AWSClient) AppStreamClient(ctx context.Context) *appstream.Client {
	return errs.Must(client[*appstream.Client](ctx, c, names.AppStream, make(map[string]any)))
}

func (c *AWSClient) AppSyncClient(ctx context.Context) *appsync.Client {
	return errs.Must(client[*appsync.Client](ctx, c, names.AppSync, make(map[string]any)))
}

func (c *AWSClient) ApplicationInsightsClient(ctx context.Context) *applicationinsights.Client {
	return errs.Must(client[*applicationinsights.Client](ctx, c, names.ApplicationInsights, make(map[string]any)))
}

func (c *AWSClient) ApplicationSignalsClient(ctx context.Context) *applicationsignals.Client {
	return errs.Must(client[*applicationsignals.Client](ctx, c, names.ApplicationSignals, make(map[string]any)))
}

func (c *AWSClient) AthenaClient(ctx context.Context) *athena.Client {
	return errs.Must(client[*athena.Client](ctx, c, names.Athena, make(map[string]any)))
}

func (c *AWSClient) AuditManagerClient(ctx context.Context) *auditmanager.Client {
	return errs.Must(client[*auditmanager.Client](ctx, c, names.AuditManager, make(map[string]any)))
}

func (c *AWSClient) AutoScalingClient(ctx context.Context) *autoscaling.Client {
	return errs.Must(client[*autoscaling.Client](ctx, c, names.AutoScaling, make(map[string]any)))
}

func (c *AWSClient) AutoScalingPlansClient(ctx context.Context) *autoscalingplans.Client {
	return errs.Must(client[*autoscalingplans.Client](ctx, c, names.AutoScalingPlans, make(map[string]any)))
}

func (c *AWSClient) BCMDataExportsClient(ctx context.Context) *bcmdataexports.Client {
	return errs.Must(client[*bcmdataexports.Client](ctx, c, names.BCMDataExports, make(map[string]any)))
}

func (c *AWSClient) BackupClient(ctx context.Context) *backup.Client {
	return errs.Must(client[*backup.Client](ctx, c, names.Backup, make(map[string]any)))
}

func (c *AWSClient) BatchClient(ctx context.Context) *batch.Client {
	return errs.Must(client[*batch.Client](ctx, c, names.Batch, make(map[string]any)))
}

func (c *AWSClient) BedrockClient(ctx context.Context) *bedrock.Client {
	return errs.Must(client[*bedrock.Client](ctx, c, names.Bedrock, make(map[string]any)))
}

func (c *AWSClient) BedrockAgentClient(ctx context.Context) *bedrockagent.Client {
	return errs.Must(client[*bedrockagent.Client](ctx, c, names.BedrockAgent, make(map[string]any)))
}

func (c *AWSClient) BillingClient(ctx context.Context) *billing.Client {
	return errs.Must(client[*billing.Client](ctx, c, names.Billing, make(map[string]any)))
}

func (c *AWSClient) BudgetsClient(ctx context.Context) *budgets.Client {
	return errs.Must(client[*budgets.Client](ctx, c, names.Budgets, make(map[string]any)))
}

func (c *AWSClient) CEClient(ctx context.Context) *costexplorer.Client {
	return errs.Must(client[*costexplorer.Client](ctx, c, names.CE, make(map[string]any)))
}

func (c *AWSClient) CURClient(ctx context.Context) *costandusagereportservice.Client {
	return errs.Must(client[*costandusagereportservice.Client](ctx, c, names.CUR, make(map[string]any)))
}

func (c *AWSClient) ChatbotClient(ctx context.Context) *chatbot.Client {
	return errs.Must(client[*chatbot.Client](ctx, c, names.Chatbot, make(map[string]any)))
}

func (c *AWSClient) ChimeClient(ctx context.Context) *chime.Client {
	return errs.Must(client[*chime.Client](ctx, c, names.Chime, make(map[string]any)))
}

func (c *AWSClient) ChimeSDKMediaPipelinesClient(ctx context.Context) *chimesdkmediapipelines.Client {
	return errs.Must(client[*chimesdkmediapipelines.Client](ctx, c, names.ChimeSDKMediaPipelines, make(map[string]any)))
}

func (c *AWSClient) ChimeSDKVoiceClient(ctx context.Context) *chimesdkvoice.Client {
	return errs.Must(client[*chimesdkvoice.Client](ctx, c, names.ChimeSDKVoice, make(map[string]any)))
}

func (c *AWSClient) CleanRoomsClient(ctx context.Context) *cleanrooms.Client {
	return errs.Must(client[*cleanrooms.Client](ctx, c, names.CleanRooms, make(map[string]any)))
}

func (c *AWSClient) Cloud9Client(ctx context.Context) *cloud9.Client {
	return errs.Must(client[*cloud9.Client](ctx, c, names.Cloud9, make(map[string]any)))
}

func (c *AWSClient) CloudControlClient(ctx context.Context) *cloudcontrol.Client {
	return errs.Must(client[*cloudcontrol.Client](ctx, c, names.CloudControl, make(map[string]any)))
}

func (c *AWSClient) CloudFormationClient(ctx context.Context) *cloudformation.Client {
	return errs.Must(client[*cloudformation.Client](ctx, c, names.CloudFormation, make(map[string]any)))
}

func (c *AWSClient) CloudFrontClient(ctx context.Context) *cloudfront.Client {
	return errs.Must(client[*cloudfront.Client](ctx, c, names.CloudFront, make(map[string]any)))
}

func (c *AWSClient) CloudFrontKeyValueStoreClient(ctx context.Context) *cloudfrontkeyvaluestore.Client {
	return errs.Must(client[*cloudfrontkeyvaluestore.Client](ctx, c, names.CloudFrontKeyValueStore, make(map[string]any)))
}

func (c *AWSClient) CloudHSMV2Client(ctx context.Context) *cloudhsmv2.Client {
	return errs.Must(client[*cloudhsmv2.Client](ctx, c, names.CloudHSMV2, make(map[string]any)))
}

func (c *AWSClient) CloudSearchClient(ctx context.Context) *cloudsearch.Client {
	return errs.Must(client[*cloudsearch.Client](ctx, c, names.CloudSearch, make(map[string]any)))
}

func (c *AWSClient) CloudTrailClient(ctx context.Context) *cloudtrail.Client {
	return errs.Must(client[*cloudtrail.Client](ctx, c, names.CloudTrail, make(map[string]any)))
}

func (c *AWSClient) CloudWatchClient(ctx context.Context) *cloudwatch.Client {
	return errs.Must(client[*cloudwatch.Client](ctx, c, names.CloudWatch, make(map[string]any)))
}

func (c *AWSClient) CodeArtifactClient(ctx context.Context) *codeartifact.Client {
	return errs.Must(client[*codeartifact.Client](ctx, c, names.CodeArtifact, make(map[string]any)))
}

func (c *AWSClient) CodeBuildClient(ctx context.Context) *codebuild.Client {
	return errs.Must(client[*codebuild.Client](ctx, c, names.CodeBuild, make(map[string]any)))
}

func (c *AWSClient) CodeCatalystClient(ctx context.Context) *codecatalyst.Client {
	return errs.Must(client[*codecatalyst.Client](ctx, c, names.CodeCatalyst, make(map[string]any)))
}

func (c *AWSClient) CodeCommitClient(ctx context.Context) *codecommit.Client {
	return errs.Must(client[*codecommit.Client](ctx, c, names.CodeCommit, make(map[string]any)))
}

func (c *AWSClient) CodeConnectionsClient(ctx context.Context) *codeconnections.Client {
	return errs.Must(client[*codeconnections.Client](ctx, c, names.CodeConnections, make(map[string]any)))
}

func (c *AWSClient) CodeGuruProfilerClient(ctx context.Context) *codeguruprofiler.Client {
	return errs.Must(client[*codeguruprofiler.Client](ctx, c, names.CodeGuruProfiler, make(map[string]any)))
}

func (c *AWSClient) CodeGuruReviewerClient(ctx context.Context) *codegurureviewer.Client {
	return errs.Must(client[*codegurureviewer.Client](ctx, c, names.CodeGuruReviewer, make(map[string]any)))
}

func (c *AWSClient) CodePipelineClient(ctx context.Context) *codepipeline.Client {
	return errs.Must(client[*codepipeline.Client](ctx, c, names.CodePipeline, make(map[string]any)))
}

func (c *AWSClient) CodeStarConnectionsClient(ctx context.Context) *codestarconnections.Client {
	return errs.Must(client[*codestarconnections.Client](ctx, c, names.CodeStarConnections, make(map[string]any)))
}

func (c *AWSClient) CodeStarNotificationsClient(ctx context.Context) *codestarnotifications.Client {
	return errs.Must(client[*codestarnotifications.Client](ctx, c, names.CodeStarNotifications, make(map[string]any)))
}

func (c *AWSClient) CognitoIDPClient(ctx context.Context) *cognitoidentityprovider.Client {
	return errs.Must(client[*cognitoidentityprovider.Client](ctx, c, names.CognitoIDP, make(map[string]any)))
}

func (c *AWSClient) CognitoIdentityClient(ctx context.Context) *cognitoidentity.Client {
	return errs.Must(client[*cognitoidentity.Client](ctx, c, names.CognitoIdentity, make(map[string]any)))
}

func (c *AWSClient) ComprehendClient(ctx context.Context) *comprehend.Client {
	return errs.Must(client[*comprehend.Client](ctx, c, names.Comprehend, make(map[string]any)))
}

func (c *AWSClient) ComputeOptimizerClient(ctx context.Context) *computeoptimizer.Client {
	return errs.Must(client[*computeoptimizer.Client](ctx, c, names.ComputeOptimizer, make(map[string]any)))
}

func (c *AWSClient) ConfigServiceClient(ctx context.Context) *configservice.Client {
	return errs.Must(client[*configservice.Client](ctx, c, names.ConfigService, make(map[string]any)))
}

func (c *AWSClient) ConnectClient(ctx context.Context) *connect.Client {
	return errs.Must(client[*connect.Client](ctx, c, names.Connect, make(map[string]any)))
}

func (c *AWSClient) ConnectCasesClient(ctx context.Context) *connectcases.Client {
	return errs.Must(client[*connectcases.Client](ctx, c, names.ConnectCases, make(map[string]any)))
}

func (c *AWSClient) ControlTowerClient(ctx context.Context) *controltower.Client {
	return errs.Must(client[*controltower.Client](ctx, c, names.ControlTower, make(map[string]any)))
}

func (c *AWSClient) CostOptimizationHubClient(ctx context.Context) *costoptimizationhub.Client {
	return errs.Must(client[*costoptimizationhub.Client](ctx, c, names.CostOptimizationHub, make(map[string]any)))
}

func (c *AWSClient) CustomerProfilesClient(ctx context.Context) *customerprofiles.Client {
	return errs.Must(client[*customerprofiles.Client](ctx, c, names.CustomerProfiles, make(map[string]any)))
}

func (c *AWSClient) DAXClient(ctx context.Context) *dax.Client {
	return errs.Must(client[*dax.Client](ctx, c, names.DAX, make(map[string]any)))
}

func (c *AWSClient) DLMClient(ctx context.Context) *dlm.Client {
	return errs.Must(client[*dlm.Client](ctx, c, names.DLM, make(map[string]any)))
}

func (c *AWSClient) DMSClient(ctx context.Context) *databasemigrationservice.Client {
	return errs.Must(client[*databasemigrationservice.Client](ctx, c, names.DMS, make(map[string]any)))
}

func (c *AWSClient) DRSClient(ctx context.Context) *drs.Client {
	return errs.Must(client[*drs.Client](ctx, c, names.DRS, make(map[string]any)))
}

func (c *AWSClient) DSClient(ctx context.Context) *directoryservice.Client {
	return errs.Must(client[*directoryservice.Client](ctx, c, names.DS, make(map[string]any)))
}

func (c *AWSClient) DataBrewClient(ctx context.Context) *databrew.Client {
	return errs.Must(client[*databrew.Client](ctx, c, names.DataBrew, make(map[string]any)))
}

func (c *AWSClient) DataExchangeClient(ctx context.Context) *dataexchange.Client {
	return errs.Must(client[*dataexchange.Client](ctx, c, names.DataExchange, make(map[string]any)))
}

func (c *AWSClient) DataPipelineClient(ctx context.Context) *datapipeline.Client {
	return errs.Must(client[*datapipeline.Client](ctx, c, names.DataPipeline, make(map[string]any)))
}

func (c *AWSClient) DataSyncClient(ctx context.Context) *datasync.Client {
	return errs.Must(client[*datasync.Client](ctx, c, names.DataSync, make(map[string]any)))
}

func (c *AWSClient) DataZoneClient(ctx context.Context) *datazone.Client {
	return errs.Must(client[*datazone.Client](ctx, c, names.DataZone, make(map[string]any)))
}

func (c *AWSClient) DeployClient(ctx context.Context) *codedeploy.Client {
	return errs.Must(client[*codedeploy.Client](ctx, c, names.Deploy, make(map[string]any)))
}

func (c *AWSClient) DetectiveClient(ctx context.Context) *detective.Client {
	return errs.Must(client[*detective.Client](ctx, c, names.Detective, make(map[string]any)))
}

func (c *AWSClient) DevOpsGuruClient(ctx context.Context) *devopsguru.Client {
	return errs.Must(client[*devopsguru.Client](ctx, c, names.DevOpsGuru, make(map[string]any)))
}

func (c *AWSClient) DeviceFarmClient(ctx context.Context) *devicefarm.Client {
	return errs.Must(client[*devicefarm.Client](ctx, c, names.DeviceFarm, make(map[string]any)))
}

func (c *AWSClient) DirectConnectClient(ctx context.Context) *directconnect.Client {
	return errs.Must(client[*directconnect.Client](ctx, c, names.DirectConnect, make(map[string]any)))
}

func (c *AWSClient) DocDBClient(ctx context.Context) *docdb.Client {
	return errs.Must(client[*docdb.Client](ctx, c, names.DocDB, make(map[string]any)))
}

func (c *AWSClient) DocDBElasticClient(ctx context.Context) *docdbelastic.Client {
	return errs.Must(client[*docdbelastic.Client](ctx, c, names.DocDBElastic, make(map[string]any)))
}

func (c *AWSClient) DynamoDBClient(ctx context.Context) *dynamodb.Client {
	return errs.Must(client[*dynamodb.Client](ctx, c, names.DynamoDB, make(map[string]any)))
}

func (c *AWSClient) EC2Client(ctx context.Context) *ec2.Client {
	return errs.Must(client[*ec2.Client](ctx, c, names.EC2, make(map[string]any)))
}

func (c *AWSClient) ECRClient(ctx context.Context) *ecr.Client {
	return errs.Must(client[*ecr.Client](ctx, c, names.ECR, make(map[string]any)))
}

func (c *AWSClient) ECRPublicClient(ctx context.Context) *ecrpublic.Client {
	return errs.Must(client[*ecrpublic.Client](ctx, c, names.ECRPublic, make(map[string]any)))
}

func (c *AWSClient) ECSClient(ctx context.Context) *ecs.Client {
	return errs.Must(client[*ecs.Client](ctx, c, names.ECS, make(map[string]any)))
}

func (c *AWSClient) EFSClient(ctx context.Context) *efs.Client {
	return errs.Must(client[*efs.Client](ctx, c, names.EFS, make(map[string]any)))
}

func (c *AWSClient) EKSClient(ctx context.Context) *eks.Client {
	return errs.Must(client[*eks.Client](ctx, c, names.EKS, make(map[string]any)))
}

func (c *AWSClient) ELBClient(ctx context.Context) *elasticloadbalancing.Client {
	return errs.Must(client[*elasticloadbalancing.Client](ctx, c, names.ELB, make(map[string]any)))
}

func (c *AWSClient) ELBV2Client(ctx context.Context) *elasticloadbalancingv2.Client {
	return errs.Must(client[*elasticloadbalancingv2.Client](ctx, c, names.ELBV2, make(map[string]any)))
}

func (c *AWSClient) EMRClient(ctx context.Context) *emr.Client {
	return errs.Must(client[*emr.Client](ctx, c, names.EMR, make(map[string]any)))
}

func (c *AWSClient) EMRContainersClient(ctx context.Context) *emrcontainers.Client {
	return errs.Must(client[*emrcontainers.Client](ctx, c, names.EMRContainers, make(map[string]any)))
}

func (c *AWSClient) EMRServerlessClient(ctx context.Context) *emrserverless.Client {
	return errs.Must(client[*emrserverless.Client](ctx, c, names.EMRServerless, make(map[string]any)))
}

func (c *AWSClient) ElastiCacheClient(ctx context.Context) *elasticache.Client {
	return errs.Must(client[*elasticache.Client](ctx, c, names.ElastiCache, make(map[string]any)))
}

func (c *AWSClient) ElasticBeanstalkClient(ctx context.Context) *elasticbeanstalk.Client {
	return errs.Must(client[*elasticbeanstalk.Client](ctx, c, names.ElasticBeanstalk, make(map[string]any)))
}

func (c *AWSClient) ElasticTranscoderClient(ctx context.Context) *elastictranscoder.Client {
	return errs.Must(client[*elastictranscoder.Client](ctx, c, names.ElasticTranscoder, make(map[string]any)))
}

func (c *AWSClient) ElasticsearchClient(ctx context.Context) *elasticsearchservice.Client {
	return errs.Must(client[*elasticsearchservice.Client](ctx, c, names.Elasticsearch, make(map[string]any)))
}

func (c *AWSClient) EventsClient(ctx context.Context) *eventbridge.Client {
	return errs.Must(client[*eventbridge.Client](ctx, c, names.Events, make(map[string]any)))
}

func (c *AWSClient) EvidentlyClient(ctx context.Context) *evidently.Client {
	return errs.Must(client[*evidently.Client](ctx, c, names.Evidently, make(map[string]any)))
}

func (c *AWSClient) FISClient(ctx context.Context) *fis.Client {
	return errs.Must(client[*fis.Client](ctx, c, names.FIS, make(map[string]any)))
}

func (c *AWSClient) FMSClient(ctx context.Context) *fms.Client {
	return errs.Must(client[*fms.Client](ctx, c, names.FMS, make(map[string]any)))
}

func (c *AWSClient) FSxClient(ctx context.Context) *fsx.Client {
	return errs.Must(client[*fsx.Client](ctx, c, names.FSx, make(map[string]any)))
}

func (c *AWSClient) FinSpaceClient(ctx context.Context) *finspace.Client {
	return errs.Must(client[*finspace.Client](ctx, c, names.FinSpace, make(map[string]any)))
}

func (c *AWSClient) FirehoseClient(ctx context.Context) *firehose.Client {
	return errs.Must(client[*firehose.Client](ctx, c, names.Firehose, make(map[string]any)))
}

func (c *AWSClient) GameLiftClient(ctx context.Context) *gamelift.Client {
	return errs.Must(client[*gamelift.Client](ctx, c, names.GameLift, make(map[string]any)))
}

func (c *AWSClient) GlacierClient(ctx context.Context) *glacier.Client {
	return errs.Must(client[*glacier.Client](ctx, c, names.Glacier, make(map[string]any)))
}

func (c *AWSClient) GlobalAcceleratorClient(ctx context.Context) *globalaccelerator.Client {
	return errs.Must(client[*globalaccelerator.Client](ctx, c, names.GlobalAccelerator, make(map[string]any)))
}

func (c *AWSClient) GlueClient(ctx context.Context) *glue.Client {
	return errs.Must(client[*glue.Client](ctx, c, names.Glue, make(map[string]any)))
}

func (c *AWSClient) GrafanaClient(ctx context.Context) *grafana.Client {
	return errs.Must(client[*grafana.Client](ctx, c, names.Grafana, make(map[string]any)))
}

func (c *AWSClient) GreengrassClient(ctx context.Context) *greengrass.Client {
	return errs.Must(client[*greengrass.Client](ctx, c, names.Greengrass, make(map[string]any)))
}

func (c *AWSClient) GroundStationClient(ctx context.Context) *groundstation.Client {
	return errs.Must(client[*groundstation.Client](ctx, c, names.GroundStation, make(map[string]any)))
}

func (c *AWSClient) GuardDutyClient(ctx context.Context) *guardduty.Client {
	return errs.Must(client[*guardduty.Client](ctx, c, names.GuardDuty, make(map[string]any)))
}

func (c *AWSClient) HealthLakeClient(ctx context.Context) *healthlake.Client {
	return errs.Must(client[*healthlake.Client](ctx, c, names.HealthLake, make(map[string]any)))
}

func (c *AWSClient) IAMClient(ctx context.Context) *iam.Client {
	return errs.Must(client[*iam.Client](ctx, c, names.IAM, make(map[string]any)))
}

func (c *AWSClient) IVSClient(ctx context.Context) *ivs.Client {
	return errs.Must(client[*ivs.Client](ctx, c, names.IVS, make(map[string]any)))
}

func (c *AWSClient) IVSChatClient(ctx context.Context) *ivschat.Client {
	return errs.Must(client[*ivschat.Client](ctx, c, names.IVSChat, make(map[string]any)))
}

func (c *AWSClient) IdentityStoreClient(ctx context.Context) *identitystore.Client {
	return errs.Must(client[*identitystore.Client](ctx, c, names.IdentityStore, make(map[string]any)))
}

func (c *AWSClient) ImageBuilderClient(ctx context.Context) *imagebuilder.Client {
	return errs.Must(client[*imagebuilder.Client](ctx, c, names.ImageBuilder, make(map[string]any)))
}

func (c *AWSClient) InspectorClient(ctx context.Context) *inspector.Client {
	return errs.Must(client[*inspector.Client](ctx, c, names.Inspector, make(map[string]any)))
}

func (c *AWSClient) Inspector2Client(ctx context.Context) *inspector2.Client {
	return errs.Must(client[*inspector2.Client](ctx, c, names.Inspector2, make(map[string]any)))
}

func (c *AWSClient) InternetMonitorClient(ctx context.Context) *internetmonitor.Client {
	return errs.Must(client[*internetmonitor.Client](ctx, c, names.InternetMonitor, make(map[string]any)))
}

func (c *AWSClient) InvoicingClient(ctx context.Context) *invoicing.Client {
	return errs.Must(client[*invoicing.Client](ctx, c, names.Invoicing, make(map[string]any)))
}

func (c *AWSClient) IoTClient(ctx context.Context) *iot.Client {
	return errs.Must(client[*iot.Client](ctx, c, names.IoT, make(map[string]any)))
}

func (c *AWSClient) IoTAnalyticsClient(ctx context.Context) *iotanalytics.Client {
	return errs.Must(client[*iotanalytics.Client](ctx, c, names.IoTAnalytics, make(map[string]any)))
}

func (c *AWSClient) IoTEventsClient(ctx context.Context) *iotevents.Client {
	return errs.Must(client[*iotevents.Client](ctx, c, names.IoTEvents, make(map[string]any)))
}

func (c *AWSClient) KMSClient(ctx context.Context) *kms.Client {
	return errs.Must(client[*kms.Client](ctx, c, names.KMS, make(map[string]any)))
}

func (c *AWSClient) KafkaClient(ctx context.Context) *kafka.Client {
	return errs.Must(client[*kafka.Client](ctx, c, names.Kafka, make(map[string]any)))
}

func (c *AWSClient) KafkaConnectClient(ctx context.Context) *kafkaconnect.Client {
	return errs.Must(client[*kafkaconnect.Client](ctx, c, names.KafkaConnect, make(map[string]any)))
}

func (c *AWSClient) KendraClient(ctx context.Context) *kendra.Client {
	return errs.Must(client[*kendra.Client](ctx, c, names.Kendra, make(map[string]any)))
}

func (c *AWSClient) KeyspacesClient(ctx context.Context) *keyspaces.Client {
	return errs.Must(client[*keyspaces.Client](ctx, c, names.Keyspaces, make(map[string]any)))
}

func (c *AWSClient) KinesisClient(ctx context.Context) *kinesis.Client {
	return errs.Must(client[*kinesis.Client](ctx, c, names.Kinesis, make(map[string]any)))
}

func (c *AWSClient) KinesisAnalyticsClient(ctx context.Context) *kinesisanalytics.Client {
	return errs.Must(client[*kinesisanalytics.Client](ctx, c, names.KinesisAnalytics, make(map[string]any)))
}

func (c *AWSClient) KinesisAnalyticsV2Client(ctx context.Context) *kinesisanalyticsv2.Client {
	return errs.Must(client[*kinesisanalyticsv2.Client](ctx, c, names.KinesisAnalyticsV2, make(map[string]any)))
}

func (c *AWSClient) KinesisVideoClient(ctx context.Context) *kinesisvideo.Client {
	return errs.Must(client[*kinesisvideo.Client](ctx, c, names.KinesisVideo, make(map[string]any)))
}

func (c *AWSClient) LakeFormationClient(ctx context.Context) *lakeformation.Client {
	return errs.Must(client[*lakeformation.Client](ctx, c, names.LakeFormation, make(map[string]any)))
}

func (c *AWSClient) LambdaClient(ctx context.Context) *lambda.Client {
	return errs.Must(client[*lambda.Client](ctx, c, names.Lambda, make(map[string]any)))
}

func (c *AWSClient) LaunchWizardClient(ctx context.Context) *launchwizard.Client {
	return errs.Must(client[*launchwizard.Client](ctx, c, names.LaunchWizard, make(map[string]any)))
}

func (c *AWSClient) LexModelsClient(ctx context.Context) *lexmodelbuildingservice.Client {
	return errs.Must(client[*lexmodelbuildingservice.Client](ctx, c, names.LexModels, make(map[string]any)))
}

func (c *AWSClient) LexV2ModelsClient(ctx context.Context) *lexmodelsv2.Client {
	return errs.Must(client[*lexmodelsv2.Client](ctx, c, names.LexV2Models, make(map[string]any)))
}

func (c *AWSClient) LicenseManagerClient(ctx context.Context) *licensemanager.Client {
	return errs.Must(client[*licensemanager.Client](ctx, c, names.LicenseManager, make(map[string]any)))
}

func (c *AWSClient) LightsailClient(ctx context.Context) *lightsail.Client {
	return errs.Must(client[*lightsail.Client](ctx, c, names.Lightsail, make(map[string]any)))
}

func (c *AWSClient) LocationClient(ctx context.Context) *location.Client {
	return errs.Must(client[*location.Client](ctx, c, names.Location, make(map[string]any)))
}

func (c *AWSClient) LogsClient(ctx context.Context) *cloudwatchlogs.Client {
	return errs.Must(client[*cloudwatchlogs.Client](ctx, c, names.Logs, make(map[string]any)))
}

func (c *AWSClient) LookoutMetricsClient(ctx context.Context) *lookoutmetrics.Client {
	return errs.Must(client[*lookoutmetrics.Client](ctx, c, names.LookoutMetrics, make(map[string]any)))
}

func (c *AWSClient) M2Client(ctx context.Context) *m2.Client {
	return errs.Must(client[*m2.Client](ctx, c, names.M2, make(map[string]any)))
}

func (c *AWSClient) MQClient(ctx context.Context) *mq.Client {
	return errs.Must(client[*mq.Client](ctx, c, names.MQ, make(map[string]any)))
}

func (c *AWSClient) MWAAClient(ctx context.Context) *mwaa.Client {
	return errs.Must(client[*mwaa.Client](ctx, c, names.MWAA, make(map[string]any)))
}

func (c *AWSClient) Macie2Client(ctx context.Context) *macie2.Client {
	return errs.Must(client[*macie2.Client](ctx, c, names.Macie2, make(map[string]any)))
}

func (c *AWSClient) MediaConnectClient(ctx context.Context) *mediaconnect.Client {
	return errs.Must(client[*mediaconnect.Client](ctx, c, names.MediaConnect, make(map[string]any)))
}

func (c *AWSClient) MediaConvertClient(ctx context.Context) *mediaconvert.Client {
	return errs.Must(client[*mediaconvert.Client](ctx, c, names.MediaConvert, make(map[string]any)))
}

func (c *AWSClient) MediaLiveClient(ctx context.Context) *medialive.Client {
	return errs.Must(client[*medialive.Client](ctx, c, names.MediaLive, make(map[string]any)))
}

func (c *AWSClient) MediaPackageClient(ctx context.Context) *mediapackage.Client {
	return errs.Must(client[*mediapackage.Client](ctx, c, names.MediaPackage, make(map[string]any)))
}

func (c *AWSClient) MediaPackageV2Client(ctx context.Context) *mediapackagev2.Client {
	return errs.Must(client[*mediapackagev2.Client](ctx, c, names.MediaPackageV2, make(map[string]any)))
}

func (c *AWSClient) MediaStoreClient(ctx context.Context) *mediastore.Client {
	return errs.Must(client[*mediastore.Client](ctx, c, names.MediaStore, make(map[string]any)))
}

func (c *AWSClient) MemoryDBClient(ctx context.Context) *memorydb.Client {
	return errs.Must(client[*memorydb.Client](ctx, c, names.MemoryDB, make(map[string]any)))
}

func (c *AWSClient) MgnClient(ctx context.Context) *mgn.Client {
	return errs.Must(client[*mgn.Client](ctx, c, names.Mgn, make(map[string]any)))
}

func (c *AWSClient) NeptuneClient(ctx context.Context) *neptune.Client {
	return errs.Must(client[*neptune.Client](ctx, c, names.Neptune, make(map[string]any)))
}

func (c *AWSClient) NeptuneGraphClient(ctx context.Context) *neptunegraph.Client {
	return errs.Must(client[*neptunegraph.Client](ctx, c, names.NeptuneGraph, make(map[string]any)))
}

func (c *AWSClient) NetworkFirewallClient(ctx context.Context) *networkfirewall.Client {
	return errs.Must(client[*networkfirewall.Client](ctx, c, names.NetworkFirewall, make(map[string]any)))
}

func (c *AWSClient) NetworkManagerClient(ctx context.Context) *networkmanager.Client {
	return errs.Must(client[*networkmanager.Client](ctx, c, names.NetworkManager, make(map[string]any)))
}

func (c *AWSClient) NetworkMonitorClient(ctx context.Context) *networkmonitor.Client {
	return errs.Must(client[*networkmonitor.Client](ctx, c, names.NetworkMonitor, make(map[string]any)))
}

func (c *AWSClient) ObservabilityAccessManagerClient(ctx context.Context) *oam.Client {
	return errs.Must(client[*oam.Client](ctx, c, names.ObservabilityAccessManager, make(map[string]any)))
}

func (c *AWSClient) OpenSearchClient(ctx context.Context) *opensearch.Client {
	return errs.Must(client[*opensearch.Client](ctx, c, names.OpenSearch, make(map[string]any)))
}

func (c *AWSClient) OpenSearchIngestionClient(ctx context.Context) *osis.Client {
	return errs.Must(client[*osis.Client](ctx, c, names.OpenSearchIngestion, make(map[string]any)))
}

func (c *AWSClient) OpenSearchServerlessClient(ctx context.Context) *opensearchserverless.Client {
	return errs.Must(client[*opensearchserverless.Client](ctx, c, names.OpenSearchServerless, make(map[string]any)))
}

func (c *AWSClient) OpsWorksClient(ctx context.Context) *opsworks.Client {
	return errs.Must(client[*opsworks.Client](ctx, c, names.OpsWorks, make(map[string]any)))
}

func (c *AWSClient) OrganizationsClient(ctx context.Context) *organizations.Client {
	return errs.Must(client[*organizations.Client](ctx, c, names.Organizations, make(map[string]any)))
}

func (c *AWSClient) OutpostsClient(ctx context.Context) *outposts.Client {
	return errs.Must(client[*outposts.Client](ctx, c, names.Outposts, make(map[string]any)))
}

func (c *AWSClient) PCAConnectorADClient(ctx context.Context) *pcaconnectorad.Client {
	return errs.Must(client[*pcaconnectorad.Client](ctx, c, names.PCAConnectorAD, make(map[string]any)))
}

func (c *AWSClient) PCSClient(ctx context.Context) *pcs.Client {
	return errs.Must(client[*pcs.Client](ctx, c, names.PCS, make(map[string]any)))
}

func (c *AWSClient) PaymentCryptographyClient(ctx context.Context) *paymentcryptography.Client {
	return errs.Must(client[*paymentcryptography.Client](ctx, c, names.PaymentCryptography, make(map[string]any)))
}

func (c *AWSClient) PinpointClient(ctx context.Context) *pinpoint.Client {
	return errs.Must(client[*pinpoint.Client](ctx, c, names.Pinpoint, make(map[string]any)))
}

func (c *AWSClient) PinpointSMSVoiceV2Client(ctx context.Context) *pinpointsmsvoicev2.Client {
	return errs.Must(client[*pinpointsmsvoicev2.Client](ctx, c, names.PinpointSMSVoiceV2, make(map[string]any)))
}

func (c *AWSClient) PipesClient(ctx context.Context) *pipes.Client {
	return errs.Must(client[*pipes.Client](ctx, c, names.Pipes, make(map[string]any)))
}

func (c *AWSClient) PollyClient(ctx context.Context) *polly.Client {
	return errs.Must(client[*polly.Client](ctx, c, names.Polly, make(map[string]any)))
}

func (c *AWSClient) PricingClient(ctx context.Context) *pricing.Client {
	return errs.Must(client[*pricing.Client](ctx, c, names.Pricing, make(map[string]any)))
}

func (c *AWSClient) QBusinessClient(ctx context.Context) *qbusiness.Client {
	return errs.Must(client[*qbusiness.Client](ctx, c, names.QBusiness, make(map[string]any)))
}

func (c *AWSClient) QLDBClient(ctx context.Context) *qldb.Client {
	return errs.Must(client[*qldb.Client](ctx, c, names.QLDB, make(map[string]any)))
}

func (c *AWSClient) QuickSightClient(ctx context.Context) *quicksight.Client {
	return errs.Must(client[*quicksight.Client](ctx, c, names.QuickSight, make(map[string]any)))
}

func (c *AWSClient) RAMClient(ctx context.Context) *ram.Client {
	return errs.Must(client[*ram.Client](ctx, c, names.RAM, make(map[string]any)))
}

func (c *AWSClient) RBinClient(ctx context.Context) *rbin.Client {
	return errs.Must(client[*rbin.Client](ctx, c, names.RBin, make(map[string]any)))
}

func (c *AWSClient) RDSClient(ctx context.Context) *rds.Client {
	return errs.Must(client[*rds.Client](ctx, c, names.RDS, make(map[string]any)))
}

func (c *AWSClient) RUMClient(ctx context.Context) *rum.Client {
	return errs.Must(client[*rum.Client](ctx, c, names.RUM, make(map[string]any)))
}

func (c *AWSClient) RedshiftClient(ctx context.Context) *redshift.Client {
	return errs.Must(client[*redshift.Client](ctx, c, names.Redshift, make(map[string]any)))
}

func (c *AWSClient) RedshiftDataClient(ctx context.Context) *redshiftdata.Client {
	return errs.Must(client[*redshiftdata.Client](ctx, c, names.RedshiftData, make(map[string]any)))
}

func (c *AWSClient) RedshiftServerlessClient(ctx context.Context) *redshiftserverless.Client {
	return errs.Must(client[*redshiftserverless.Client](ctx, c, names.RedshiftServerless, make(map[string]any)))
}

func (c *AWSClient) RekognitionClient(ctx context.Context) *rekognition.Client {
	return errs.Must(client[*rekognition.Client](ctx, c, names.Rekognition, make(map[string]any)))
}

func (c *AWSClient) ResilienceHubClient(ctx context.Context) *resiliencehub.Client {
	return errs.Must(client[*resiliencehub.Client](ctx, c, names.ResilienceHub, make(map[string]any)))
}

func (c *AWSClient) ResourceExplorer2Client(ctx context.Context) *resourceexplorer2.Client {
	return errs.Must(client[*resourceexplorer2.Client](ctx, c, names.ResourceExplorer2, make(map[string]any)))
}

func (c *AWSClient) ResourceGroupsClient(ctx context.Context) *resourcegroups.Client {
	return errs.Must(client[*resourcegroups.Client](ctx, c, names.ResourceGroups, make(map[string]any)))
}

func (c *AWSClient) ResourceGroupsTaggingAPIClient(ctx context.Context) *resourcegroupstaggingapi.Client {
	return errs.Must(client[*resourcegroupstaggingapi.Client](ctx, c, names.ResourceGroupsTaggingAPI, make(map[string]any)))
}

func (c *AWSClient) RolesAnywhereClient(ctx context.Context) *rolesanywhere.Client {
	return errs.Must(client[*rolesanywhere.Client](ctx, c, names.RolesAnywhere, make(map[string]any)))
}

func (c *AWSClient) Route53Client(ctx context.Context) *route53.Client {
	return errs.Must(client[*route53.Client](ctx, c, names.Route53, make(map[string]any)))
}

func (c *AWSClient) Route53DomainsClient(ctx context.Context) *route53domains.Client {
	return errs.Must(client[*route53domains.Client](ctx, c, names.Route53Domains, make(map[string]any)))
}

func (c *AWSClient) Route53ProfilesClient(ctx context.Context) *route53profiles.Client {
	return errs.Must(client[*route53profiles.Client](ctx, c, names.Route53Profiles, make(map[string]any)))
}

func (c *AWSClient) Route53RecoveryControlConfigClient(ctx context.Context) *route53recoverycontrolconfig.Client {
	return errs.Must(client[*route53recoverycontrolconfig.Client](ctx, c, names.Route53RecoveryControlConfig, make(map[string]any)))
}

func (c *AWSClient) Route53RecoveryReadinessClient(ctx context.Context) *route53recoveryreadiness.Client {
	return errs.Must(client[*route53recoveryreadiness.Client](ctx, c, names.Route53RecoveryReadiness, make(map[string]any)))
}

func (c *AWSClient) Route53ResolverClient(ctx context.Context) *route53resolver.Client {
	return errs.Must(client[*route53resolver.Client](ctx, c, names.Route53Resolver, make(map[string]any)))
}

func (c *AWSClient) S3Client(ctx context.Context) *s3.Client {
	return errs.Must(client[*s3.Client](ctx, c, names.S3, make(map[string]any)))
}

func (c *AWSClient) S3ControlClient(ctx context.Context) *s3control.Client {
	return errs.Must(client[*s3control.Client](ctx, c, names.S3Control, make(map[string]any)))
}

func (c *AWSClient) S3OutpostsClient(ctx context.Context) *s3outposts.Client {
	return errs.Must(client[*s3outposts.Client](ctx, c, names.S3Outposts, make(map[string]any)))
}

func (c *AWSClient) S3TablesClient(ctx context.Context) *s3tables.Client {
	return errs.Must(client[*s3tables.Client](ctx, c, names.S3Tables, make(map[string]any)))
}

func (c *AWSClient) SESClient(ctx context.Context) *ses.Client {
	return errs.Must(client[*ses.Client](ctx, c, names.SES, make(map[string]any)))
}

func (c *AWSClient) SESV2Client(ctx context.Context) *sesv2.Client {
	return errs.Must(client[*sesv2.Client](ctx, c, names.SESV2, make(map[string]any)))
}

func (c *AWSClient) SFNClient(ctx context.Context) *sfn.Client {
	return errs.Must(client[*sfn.Client](ctx, c, names.SFN, make(map[string]any)))
}

func (c *AWSClient) SNSClient(ctx context.Context) *sns.Client {
	return errs.Must(client[*sns.Client](ctx, c, names.SNS, make(map[string]any)))
}

func (c *AWSClient) SQSClient(ctx context.Context) *sqs.Client {
	return errs.Must(client[*sqs.Client](ctx, c, names.SQS, make(map[string]any)))
}

func (c *AWSClient) SSMClient(ctx context.Context) *ssm.Client {
	return errs.Must(client[*ssm.Client](ctx, c, names.SSM, make(map[string]any)))
}

func (c *AWSClient) SSMContactsClient(ctx context.Context) *ssmcontacts.Client {
	return errs.Must(client[*ssmcontacts.Client](ctx, c, names.SSMContacts, make(map[string]any)))
}

func (c *AWSClient) SSMIncidentsClient(ctx context.Context) *ssmincidents.Client {
	return errs.Must(client[*ssmincidents.Client](ctx, c, names.SSMIncidents, make(map[string]any)))
}

func (c *AWSClient) SSMQuickSetupClient(ctx context.Context) *ssmquicksetup.Client {
	return errs.Must(client[*ssmquicksetup.Client](ctx, c, names.SSMQuickSetup, make(map[string]any)))
}

func (c *AWSClient) SSMSAPClient(ctx context.Context) *ssmsap.Client {
	return errs.Must(client[*ssmsap.Client](ctx, c, names.SSMSAP, make(map[string]any)))
}

func (c *AWSClient) SSOClient(ctx context.Context) *sso.Client {
	return errs.Must(client[*sso.Client](ctx, c, names.SSO, make(map[string]any)))
}

func (c *AWSClient) SSOAdminClient(ctx context.Context) *ssoadmin.Client {
	return errs.Must(client[*ssoadmin.Client](ctx, c, names.SSOAdmin, make(map[string]any)))
}

func (c *AWSClient) STSClient(ctx context.Context) *sts.Client {
	return errs.Must(client[*sts.Client](ctx, c, names.STS, make(map[string]any)))
}

func (c *AWSClient) SWFClient(ctx context.Context) *swf.Client {
	return errs.Must(client[*swf.Client](ctx, c, names.SWF, make(map[string]any)))
}

func (c *AWSClient) SageMakerClient(ctx context.Context) *sagemaker.Client {
	return errs.Must(client[*sagemaker.Client](ctx, c, names.SageMaker, make(map[string]any)))
}

func (c *AWSClient) SchedulerClient(ctx context.Context) *scheduler.Client {
	return errs.Must(client[*scheduler.Client](ctx, c, names.Scheduler, make(map[string]any)))
}

func (c *AWSClient) SchemasClient(ctx context.Context) *schemas.Client {
	return errs.Must(client[*schemas.Client](ctx, c, names.Schemas, make(map[string]any)))
}

func (c *AWSClient) SecretsManagerClient(ctx context.Context) *secretsmanager.Client {
	return errs.Must(client[*secretsmanager.Client](ctx, c, names.SecretsManager, make(map[string]any)))
}

func (c *AWSClient) SecurityHubClient(ctx context.Context) *securityhub.Client {
	return errs.Must(client[*securityhub.Client](ctx, c, names.SecurityHub, make(map[string]any)))
}

func (c *AWSClient) SecurityLakeClient(ctx context.Context) *securitylake.Client {
	return errs.Must(client[*securitylake.Client](ctx, c, names.SecurityLake, make(map[string]any)))
}

func (c *AWSClient) ServerlessRepoClient(ctx context.Context) *serverlessapplicationrepository.Client {
	return errs.Must(client[*serverlessapplicationrepository.Client](ctx, c, names.ServerlessRepo, make(map[string]any)))
}

func (c *AWSClient) ServiceCatalogClient(ctx context.Context) *servicecatalog.Client {
	return errs.Must(client[*servicecatalog.Client](ctx, c, names.ServiceCatalog, make(map[string]any)))
}

func (c *AWSClient) ServiceCatalogAppRegistryClient(ctx context.Context) *servicecatalogappregistry.Client {
	return errs.Must(client[*servicecatalogappregistry.Client](ctx, c, names.ServiceCatalogAppRegistry, make(map[string]any)))
}

func (c *AWSClient) ServiceDiscoveryClient(ctx context.Context) *servicediscovery.Client {
	return errs.Must(client[*servicediscovery.Client](ctx, c, names.ServiceDiscovery, make(map[string]any)))
}

func (c *AWSClient) ServiceQuotasClient(ctx context.Context) *servicequotas.Client {
	return errs.Must(client[*servicequotas.Client](ctx, c, names.ServiceQuotas, make(map[string]any)))
}

func (c *AWSClient) ShieldClient(ctx context.Context) *shield.Client {
	return errs.Must(client[*shield.Client](ctx, c, names.Shield, make(map[string]any)))
}

func (c *AWSClient) SignerClient(ctx context.Context) *signer.Client {
	return errs.Must(client[*signer.Client](ctx, c, names.Signer, make(map[string]any)))
}

func (c *AWSClient) StorageGatewayClient(ctx context.Context) *storagegateway.Client {
	return errs.Must(client[*storagegateway.Client](ctx, c, names.StorageGateway, make(map[string]any)))
}

func (c *AWSClient) SyntheticsClient(ctx context.Context) *synthetics.Client {
	return errs.Must(client[*synthetics.Client](ctx, c, names.Synthetics, make(map[string]any)))
}

func (c *AWSClient) TaxSettingsClient(ctx context.Context) *taxsettings.Client {
	return errs.Must(client[*taxsettings.Client](ctx, c, names.TaxSettings, make(map[string]any)))
}

func (c *AWSClient) TimestreamInfluxDBClient(ctx context.Context) *timestreaminfluxdb.Client {
	return errs.Must(client[*timestreaminfluxdb.Client](ctx, c, names.TimestreamInfluxDB, make(map[string]any)))
}

func (c *AWSClient) TimestreamQueryClient(ctx context.Context) *timestreamquery.Client {
	return errs.Must(client[*timestreamquery.Client](ctx, c, names.TimestreamQuery, make(map[string]any)))
}

func (c *AWSClient) TimestreamWriteClient(ctx context.Context) *timestreamwrite.Client {
	return errs.Must(client[*timestreamwrite.Client](ctx, c, names.TimestreamWrite, make(map[string]any)))
}

func (c *AWSClient) TranscribeClient(ctx context.Context) *transcribe.Client {
	return errs.Must(client[*transcribe.Client](ctx, c, names.Transcribe, make(map[string]any)))
}

func (c *AWSClient) TransferClient(ctx context.Context) *transfer.Client {
	return errs.Must(client[*transfer.Client](ctx, c, names.Transfer, make(map[string]any)))
}

func (c *AWSClient) VPCLatticeClient(ctx context.Context) *vpclattice.Client {
	return errs.Must(client[*vpclattice.Client](ctx, c, names.VPCLattice, make(map[string]any)))
}

func (c *AWSClient) VerifiedPermissionsClient(ctx context.Context) *verifiedpermissions.Client {
	return errs.Must(client[*verifiedpermissions.Client](ctx, c, names.VerifiedPermissions, make(map[string]any)))
}

func (c *AWSClient) WAFClient(ctx context.Context) *waf.Client {
	return errs.Must(client[*waf.Client](ctx, c, names.WAF, make(map[string]any)))
}

func (c *AWSClient) WAFRegionalClient(ctx context.Context) *wafregional.Client {
	return errs.Must(client[*wafregional.Client](ctx, c, names.WAFRegional, make(map[string]any)))
}

func (c *AWSClient) WAFV2Client(ctx context.Context) *wafv2.Client {
	return errs.Must(client[*wafv2.Client](ctx, c, names.WAFV2, make(map[string]any)))
}

func (c *AWSClient) WellArchitectedClient(ctx context.Context) *wellarchitected.Client {
	return errs.Must(client[*wellarchitected.Client](ctx, c, names.WellArchitected, make(map[string]any)))
}

func (c *AWSClient) WorkLinkClient(ctx context.Context) *worklink.Client {
	return errs.Must(client[*worklink.Client](ctx, c, names.WorkLink, make(map[string]any)))
}

func (c *AWSClient) WorkSpacesClient(ctx context.Context) *workspaces.Client {
	return errs.Must(client[*workspaces.Client](ctx, c, names.WorkSpaces, make(map[string]any)))
}

func (c *AWSClient) WorkSpacesWebClient(ctx context.Context) *workspacesweb.Client {
	return errs.Must(client[*workspacesweb.Client](ctx, c, names.WorkSpacesWeb, make(map[string]any)))
}

func (c *AWSClient) XRayClient(ctx context.Context) *xray.Client {
	return errs.Must(client[*xray.Client](ctx, c, names.XRay, make(map[string]any)))
}
