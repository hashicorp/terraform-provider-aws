// Code generated by internal/generate/servicepackage/main.go; DO NOT EDIT.

package iam

import (
	"context"

	aws_sdkv2 "github.com/aws/aws-sdk-go-v2/aws"
	iam_sdkv2 "github.com/aws/aws-sdk-go-v2/service/iam"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*types.ServicePackageFrameworkDataSource {
	return []*types.ServicePackageFrameworkDataSource{}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*types.ServicePackageFrameworkResource {
	return []*types.ServicePackageFrameworkResource{}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*types.ServicePackageSDKDataSource {
	return []*types.ServicePackageSDKDataSource{
		{
			Factory:  dataSourceAccessKeys,
			TypeName: "aws_iam_access_keys",
			Name:     "Access Keys",
		},
		{
			Factory:  dataSourceAccountAlias,
			TypeName: "aws_iam_account_alias",
			Name:     "Account Alias",
		},
		{
			Factory:  dataSourceGroup,
			TypeName: "aws_iam_group",
			Name:     "Group",
		},
		{
			Factory:  dataSourceInstanceProfile,
			TypeName: "aws_iam_instance_profile",
			Name:     "Instance Profile",
		},
		{
			Factory:  dataSourceInstanceProfiles,
			TypeName: "aws_iam_instance_profiles",
			Name:     "Instance Profiles",
		},
		{
			Factory:  dataSourceOpenIDConnectProvider,
			TypeName: "aws_iam_openid_connect_provider",
			Name:     "OIDC Provider",
			Tags:     &types.ServicePackageResourceTags{},
		},
		{
			Factory:  dataSourcePolicy,
			TypeName: "aws_iam_policy",
			Name:     "Policy",
			Tags:     &types.ServicePackageResourceTags{},
		},
		{
			Factory:  dataSourcePolicyDocument,
			TypeName: "aws_iam_policy_document",
			Name:     "Policy Document",
		},
		{
			Factory:  dataSourcePrincipalPolicySimulation,
			TypeName: "aws_iam_principal_policy_simulation",
			Name:     "Principal Policy Simulation",
		},
		{
			Factory:  dataSourceRole,
			TypeName: "aws_iam_role",
			Name:     "Role",
			Tags:     &types.ServicePackageResourceTags{},
		},
		{
			Factory:  dataSourceRoles,
			TypeName: "aws_iam_roles",
			Name:     "Roles",
		},
		{
			Factory:  dataSourceSAMLProvider,
			TypeName: "aws_iam_saml_provider",
			Name:     "SAML Provider",
		},
		{
			Factory:  dataSourceServerCertificate,
			TypeName: "aws_iam_server_certificate",
			Name:     "Server Certificate",
		},
		{
			Factory:  dataSourceSessionContext,
			TypeName: "aws_iam_session_context",
			Name:     "Session Context",
		},
		{
			Factory:  dataSourceUser,
			TypeName: "aws_iam_user",
			Name:     "User",
			Tags:     &types.ServicePackageResourceTags{},
		},
		{
			Factory:  dataSourceUserSSHKey,
			TypeName: "aws_iam_user_ssh_key",
			Name:     "User SSH Key",
		},
		{
			Factory:  dataSourceUsers,
			TypeName: "aws_iam_users",
			Name:     "Users",
		},
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*types.ServicePackageSDKResource {
	return []*types.ServicePackageSDKResource{
		{
			Factory:  resourceAccessKey,
			TypeName: "aws_iam_access_key",
			Name:     "Access Key",
		},
		{
			Factory:  resourceAccountAlias,
			TypeName: "aws_iam_account_alias",
			Name:     "Account Alias",
		},
		{
			Factory:  resourceAccountPasswordPolicy,
			TypeName: "aws_iam_account_password_policy",
			Name:     "Account Password Policy",
		},
		{
			Factory:  resourceGroup,
			TypeName: "aws_iam_group",
			Name:     "Group",
		},
		{
			Factory:  resourceGroupMembership,
			TypeName: "aws_iam_group_membership",
			Name:     "Group Membership",
		},
		{
			Factory:  resourceGroupPolicy,
			TypeName: "aws_iam_group_policy",
			Name:     "Group Policy",
		},
		{
			Factory:  resourceGroupPolicyAttachment,
			TypeName: "aws_iam_group_policy_attachment",
			Name:     "Group Policy Attachment",
		},
		{
			Factory:  resourceInstanceProfile,
			TypeName: "aws_iam_instance_profile",
			Name:     "Instance Profile",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
				ResourceType:        "InstanceProfile",
			},
		},
		{
			Factory:  resourceOpenIDConnectProvider,
			TypeName: "aws_iam_openid_connect_provider",
			Name:     "OIDC Provider",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
				ResourceType:        "OIDCProvider",
			},
		},
		{
			Factory:  resourcePolicy,
			TypeName: "aws_iam_policy",
			Name:     "Policy",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
				ResourceType:        "Policy",
			},
		},
		{
			Factory:  resourcePolicyAttachment,
			TypeName: "aws_iam_policy_attachment",
			Name:     "Policy Attachment",
		},
		{
			Factory:  resourceRole,
			TypeName: "aws_iam_role",
			Name:     "Role",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
				ResourceType:        "Role",
			},
		},
		{
			Factory:  resourceRolePolicy,
			TypeName: "aws_iam_role_policy",
			Name:     "Role Policy",
		},
		{
			Factory:  resourceRolePolicyAttachment,
			TypeName: "aws_iam_role_policy_attachment",
			Name:     "Role Policy Attachment",
		},
		{
			Factory:  resourceSAMLProvider,
			TypeName: "aws_iam_saml_provider",
			Name:     "SAML Provider",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
				ResourceType:        "SAMLProvider",
			},
		},
		{
			Factory:  resourceSecurityTokenServicePreferences,
			TypeName: "aws_iam_security_token_service_preferences",
			Name:     "Security Token Service Preferences",
		},
		{
			Factory:  resourceServerCertificate,
			TypeName: "aws_iam_server_certificate",
			Name:     "Server Certificate",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrName,
				ResourceType:        "ServerCertificate",
			},
		},
		{
			Factory:  resourceServiceLinkedRole,
			TypeName: "aws_iam_service_linked_role",
			Name:     "Service Linked Role",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
				ResourceType:        "ServiceLinkedRole",
			},
		},
		{
			Factory:  resourceServiceSpecificCredential,
			TypeName: "aws_iam_service_specific_credential",
			Name:     "Service Specific Credential",
		},
		{
			Factory:  resourceSigningCertificate,
			TypeName: "aws_iam_signing_certificate",
			Name:     "Signing Certificate",
		},
		{
			Factory:  resourceUser,
			TypeName: "aws_iam_user",
			Name:     "User",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
				ResourceType:        "User",
			},
		},
		{
			Factory:  resourceUserGroupMembership,
			TypeName: "aws_iam_user_group_membership",
			Name:     "User Group Membership",
		},
		{
			Factory:  resourceUserLoginProfile,
			TypeName: "aws_iam_user_login_profile",
			Name:     "User Login Profile",
		},
		{
			Factory:  resourceUserPolicy,
			TypeName: "aws_iam_user_policy",
			Name:     "User Policy",
		},
		{
			Factory:  resourceUserPolicyAttachment,
			TypeName: "aws_iam_user_policy_attachment",
			Name:     "User Policy Attachment",
		},
		{
			Factory:  resourceUserSSHKey,
			TypeName: "aws_iam_user_ssh_key",
			Name:     "User SSH Key",
		},
		{
			Factory:  resourceVirtualMFADevice,
			TypeName: "aws_iam_virtual_mfa_device",
			Name:     "Virtual MFA Device",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
				ResourceType:        "VirtualMFADevice",
			},
		},
	}
}

func (p *servicePackage) ServicePackageName() string {
	return names.IAM
}

// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*iam_sdkv2.Client, error) {
	cfg := *(config["aws_sdkv2_config"].(*aws_sdkv2.Config))

	return iam_sdkv2.NewFromConfig(cfg,
		iam_sdkv2.WithEndpointResolverV2(newEndpointResolverSDKv2()),
		withBaseEndpoint(config[names.AttrEndpoint].(string)),
	), nil
}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
