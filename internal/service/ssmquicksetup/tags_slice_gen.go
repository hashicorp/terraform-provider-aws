// Code generated by internal/generate/tags/main.go; DO NOT EDIT.
package ssmquicksetup

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/ssmquicksetup"
	awstypes "github.com/aws/aws-sdk-go-v2/service/ssmquicksetup/types"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/types/option"
)

// listTags lists ssmquicksetup service tags.
// The identifier is typically the Amazon Resource Name (ARN), although
// it may also be a different identifier depending on the service.
func listTags(ctx context.Context, conn *ssmquicksetup.Client, identifier string, optFns ...func(*ssmquicksetup.Options)) (tftags.KeyValueTags, error) {
	input := &ssmquicksetup.ListTagsForResourceInput{
		ResourceArn: aws.String(identifier),
	}

	output, err := conn.ListTagsForResource(ctx, input, optFns...)

	if err != nil {
		return tftags.New(ctx, nil), err
	}

	return KeyValueTagsSlice(ctx, output.Tags), nil
}

// ListTags lists ssmquicksetup service tags and set them in Context.
// It is called from outside this package.
func (p *servicePackage) ListTags(ctx context.Context, meta any, identifier string) error {
	tags, err := listTags(ctx, meta.(*conns.AWSClient).SSMQuickSetupClient(ctx), identifier)

	if err != nil {
		return err
	}

	if inContext, ok := tftags.FromContext(ctx); ok {
		inContext.TagsOut = option.Some(tags)
	}

	return nil
}

// []*SERVICE.Tag handling

// TagsSlice returns ssmquicksetup service tags.
func TagsSlice(tags tftags.KeyValueTags) []awstypes.TagEntry {
	result := make([]awstypes.TagEntry, 0, len(tags))

	for k, v := range tags.Map() {
		tag := awstypes.TagEntry{
			Key:   aws.String(k),
			Value: aws.String(v),
		}

		result = append(result, tag)
	}

	return result
}

// KeyValueTagsSlice creates tftags.KeyValueTags from ssmquicksetup service tags.
func KeyValueTagsSlice(ctx context.Context, tags []awstypes.TagEntry) tftags.KeyValueTags {
	m := make(map[string]*string, len(tags))

	for _, tag := range tags {
		m[aws.ToString(tag.Key)] = tag.Value
	}

	return tftags.New(ctx, m)
}

// getTagsInSlice returns ssmquicksetup service tags from Context.
// nil is returned if there are no input tags.
func getTagsInSlice(ctx context.Context) []awstypes.TagEntry {
	if inContext, ok := tftags.FromContext(ctx); ok {
		if tags := TagsSlice(inContext.TagsIn.UnwrapOrDefault()); len(tags) > 0 {
			return tags
		}
	}

	return nil
}

// setTagsOutSlice sets ssmquicksetup service tags in Context.
func setTagsOutSlice(ctx context.Context, tags []awstypes.TagEntry) {
	if inContext, ok := tftags.FromContext(ctx); ok {
		inContext.TagsOut = option.Some(KeyValueTagsSlice(ctx, tags))
	}
}
