// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

package guardduty_test

import (
	"context"
	"errors"
	"fmt"
	"strings"
	"testing"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/guardduty"
	awstypes "github.com/aws/aws-sdk-go-v2/service/guardduty/types"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/knownvalue"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
	"github.com/hashicorp/terraform-plugin-testing/tfjsonpath"
	"github.com/hashicorp/terraform-provider-aws/internal/acctest"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/create"
	tfguardduty "github.com/hashicorp/terraform-provider-aws/internal/service/guardduty"
	"github.com/hashicorp/terraform-provider-aws/internal/tfresource"
	"github.com/hashicorp/terraform-provider-aws/names"
)

func TestAccGuardDutyMalwareScanSettings_basic(t *testing.T) {
	ctx := acctest.Context(t)

	detectorName := "aws_guardduty_detector.test"
	resourceName := "aws_guardduty_malware_scan_settings.test"

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheck(ctx, t)
		},
		ErrorCheck:               acctest.ErrorCheck(t, names.GuardDutyServiceID),
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
		CheckDestroy:             testAccCheckMalwareScanSettingsDestroy(ctx),
		Steps: []resource.TestStep{
			{
				Config: testAccMalwareScanSettingsConfig_basic(awstypes.EbsSnapshotPreservationNoRetention),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckMalwareScanSettingsExists(ctx, resourceName),
					resource.TestCheckResourceAttrPair(resourceName, "detector_id", detectorName, names.AttrID),
					resource.TestCheckResourceAttr(resourceName, "ebs_snapshot_preservation", "NO_RETENTION"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.#", "0"),
				),
			},
			{
				ResourceName:            resourceName,
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{},
			},
			{
				// update retention setting
				Config: testAccMalwareScanSettingsConfig_basic(awstypes.EbsSnapshotPreservationRetentionWithFinding),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckMalwareScanSettingsExists(ctx, resourceName),
					resource.TestCheckResourceAttrPair(resourceName, "detector_id", detectorName, names.AttrID),
					resource.TestCheckResourceAttr(resourceName, "ebs_snapshot_preservation", "RETENTION_WITH_FINDING"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.#", "0"),
				),
			},
		},
	})
}

func TestAccGuardDutyMalwareScanSettings_scanResourceCriteria(t *testing.T) {
	ctx := acctest.Context(t)

	resourceName := "aws_guardduty_malware_scan_settings.test"

	cond1 := awstypes.ScanConditionPair{
		Key:   aws.String("abc"),
		Value: aws.String("def"),
	}
	cond2 := awstypes.ScanConditionPair{
		Key:   aws.String("qwe"),
		Value: aws.String("rty"),
	}
	cond3 := awstypes.ScanConditionPair{
		Key: aws.String("keyonly"),
	}

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheck(ctx, t)
		},
		ErrorCheck:               acctest.ErrorCheck(t, names.GuardDutyServiceID),
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
		CheckDestroy:             testAccCheckMalwareScanSettingsDestroy(ctx),
		Steps: []resource.TestStep{
			{
				// only use include ec2_instance_tag conditions
				Config: testAccMalwareScanSettingsConfig_scanResourceCriteria([]awstypes.ScanConditionPair{cond1}, nil),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.#", "1"),

					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.include.#", "1"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.include.0.ec2_instance_tag.#", "1"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.include.0.ec2_instance_tag.0.map_equals.#", "1"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.include.0.ec2_instance_tag.0.map_equals.0.key", "abc"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.include.0.ec2_instance_tag.0.map_equals.0.value", "def"),

					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.exclude.#", "0"),
				),
			},
			{
				// update of include ec2_instance_tag conditions
				Config: testAccMalwareScanSettingsConfig_scanResourceCriteria([]awstypes.ScanConditionPair{cond1, cond2}, nil),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.#", "1"),

					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.include.#", "1"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.include.0.ec2_instance_tag.#", "1"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.include.0.ec2_instance_tag.0.map_equals.#", "2"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.include.0.ec2_instance_tag.0.map_equals.0.key", "abc"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.include.0.ec2_instance_tag.0.map_equals.0.value", "def"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.include.0.ec2_instance_tag.0.map_equals.1.key", "qwe"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.include.0.ec2_instance_tag.0.map_equals.1.value", "rty"),

					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.exclude.#", "0"),
				),
			},
			{
				// only use exclude ec2_instance_tag conditions
				Config: testAccMalwareScanSettingsConfig_scanResourceCriteria(nil, []awstypes.ScanConditionPair{cond1}),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.#", "1"),

					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.include.#", "0"),

					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.exclude.#", "1"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.exclude.0.ec2_instance_tag.#", "1"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.exclude.0.ec2_instance_tag.0.map_equals.#", "1"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.exclude.0.ec2_instance_tag.0.map_equals.0.key", "abc"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.exclude.0.ec2_instance_tag.0.map_equals.0.value", "def"),
				),
			},
			{
				// update of exclude ec2_instance_tag conditions
				Config: testAccMalwareScanSettingsConfig_scanResourceCriteria(nil, []awstypes.ScanConditionPair{cond1, cond2}),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.#", "1"),

					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.include.#", "0"),

					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.exclude.#", "1"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.exclude.0.ec2_instance_tag.#", "1"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.exclude.0.ec2_instance_tag.0.map_equals.#", "2"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.exclude.0.ec2_instance_tag.0.map_equals.0.key", "abc"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.exclude.0.ec2_instance_tag.0.map_equals.0.value", "def"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.exclude.0.ec2_instance_tag.0.map_equals.1.key", "qwe"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.exclude.0.ec2_instance_tag.0.map_equals.1.value", "rty"),
				),
			},
			{
				// key-only condition
				Config: testAccMalwareScanSettingsConfig_scanResourceCriteria(nil, []awstypes.ScanConditionPair{cond3}),
				Check: resource.ComposeTestCheckFunc(
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.#", "1"),

					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.include.#", "0"),

					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.exclude.#", "1"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.exclude.0.ec2_instance_tag.#", "1"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.exclude.0.ec2_instance_tag.0.map_equals.#", "1"),
					resource.TestCheckResourceAttr(resourceName, "scan_resource_criteria.0.exclude.0.ec2_instance_tag.0.map_equals.0.key", "keyonly"),
					resource.TestCheckNoResourceAttr(resourceName, "scan_resource_criteria.0.exclude.0.ec2_instance_tag.0.map_equals.0.value"),
				),
			},
		},
	})
}

func TestAccGuardDutyMalwareScanSettings_disappears(t *testing.T) {
	ctx := acctest.Context(t)

	resourceName := "aws_guardduty_malware_scan_settings.test"

	resource.Test(t, resource.TestCase{
		PreCheck: func() {
			acctest.PreCheck(ctx, t)
		},
		ErrorCheck:               acctest.ErrorCheck(t, names.GuardDutyServiceID),
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderFactories,
		CheckDestroy:             testAccCheckMalwareScanSettingsDestroy(ctx),
		Steps: []resource.TestStep{
			{
				Config: testAccMalwareScanSettingsConfig_forDisappears(),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckMalwareScanSettingsExists(ctx, resourceName),
					acctest.CheckFrameworkResourceDisappears(ctx, acctest.Provider, tfguardduty.ResourceMalwareScanSettings, resourceName),
				),
				ExpectNonEmptyPlan: true,
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PostApplyPostRefresh: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionUpdate),
						plancheck.ExpectKnownValue(resourceName, tfjsonpath.New("ebs_snapshot_preservation"), knownvalue.StringExact(string(awstypes.EbsSnapshotPreservationRetentionWithFinding))),
						plancheck.ExpectKnownValue(resourceName, tfjsonpath.New("scan_resource_criteria"), knownvalue.ListSizeExact(1)),
					},
				},
			},
		},
	})
}

func testAccCheckMalwareScanSettingsDestroy(ctx context.Context) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		conn := acctest.Provider.Meta().(*conns.AWSClient).GuardDutyClient(ctx)

		for _, rs := range s.RootModule().Resources {
			if rs.Type != "aws_guardduty_malware_scan_settings" {
				continue
			}

			_, err := tfguardduty.GetMalwareScanSettingsForDetector(ctx, conn, rs.Primary.ID)
			if tfresource.NotFound(err) {
				continue
			}

			if err != nil {
				return create.Error(names.GuardDuty, create.ErrActionCheckingDestroyed, tfguardduty.ResNameMalwareScanSettings, rs.Primary.ID, err)
			}

			return fmt.Errorf("expected GuardDuty Scan Settings (%s) to be removed", rs.Primary.ID)
		}

		return nil
	}
}

func testAccCheckMalwareScanSettingsExists(ctx context.Context, name string) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		rs, ok := s.RootModule().Resources[name]
		if !ok {
			return create.Error(names.GuardDuty, create.ErrActionCheckingExistence, tfguardduty.ResNameMalwareScanSettings, name, errors.New("not found"))
		}

		if rs.Primary.ID == "" {
			return create.Error(names.GuardDuty, create.ErrActionCheckingExistence, tfguardduty.ResNameMalwareScanSettings, name, errors.New("not set"))
		}

		conn := acctest.Provider.Meta().(*conns.AWSClient).GuardDutyClient(ctx)
		_, err := conn.GetMalwareScanSettings(ctx, &guardduty.GetMalwareScanSettingsInput{
			DetectorId: aws.String(rs.Primary.ID),
		})
		if err != nil {
			return create.Error(names.GuardDuty, create.ErrActionCheckingExistence, tfguardduty.ResNameMalwareScanSettings, rs.Primary.ID, err)
		}

		return nil
	}
}

func testAccMalwareScanSettingsConfigBase() string {
	return `
data "aws_region" "current" {}
data "aws_caller_identity" "current" {}
data "aws_partition" "current" {}

resource "aws_guardduty_detector" "test" {
  enable = true
}
`
}

func testAccMalwareScanSettingsConfig_basic(snapshotPreservation awstypes.EbsSnapshotPreservation) string {
	return acctest.ConfigCompose(
		testAccMalwareScanSettingsConfigBase(), fmt.Sprintf(`
resource "aws_guardduty_malware_scan_settings" "test" {
  detector_id               = aws_guardduty_detector.test.id
  ebs_snapshot_preservation = %[1]q
}
`, snapshotPreservation),
	)
}

func testAccMalwareScanSettingsConfig_forDisappears() string {
	return acctest.ConfigCompose(
		testAccMalwareScanSettingsConfigBase(), `
resource "aws_guardduty_malware_scan_settings" "test" {
  detector_id               = aws_guardduty_detector.test.id
  ebs_snapshot_preservation = "RETENTION_WITH_FINDING"

  scan_resource_criteria {
    include {
      ec2_instance_tag {
        map_equals {
          key   = "abc"
          value = "def"
        }
      }
    }
  }
}
`)
}

func testAccMalwareScanSettingsConfig_scanResourceCriteria(includeEC2InstanceTags, excludeEC2InstanceTags []awstypes.ScanConditionPair) string {
	includeStatement := makeScanConditionsStatement("include", includeEC2InstanceTags)
	excludeStatement := makeScanConditionsStatement("exclude", excludeEC2InstanceTags)

	return acctest.ConfigCompose(
		testAccMalwareScanSettingsConfigBase(), fmt.Sprintf(`
resource "aws_guardduty_malware_scan_settings" "test" {
  detector_id               = aws_guardduty_detector.test.id
  ebs_snapshot_preservation = "NO_RETENTION"

  scan_resource_criteria {
%[1]s
%[2]s
  }
}
`, includeStatement, excludeStatement))
}

func makeScanConditionsStatement(blockName string, c []awstypes.ScanConditionPair) string {
	if len(c) == 0 {
		return ""
	}

	conditions := []string{}
	for _, cond := range c {
		conditions = append(conditions, makeScanConditionStatement(cond))
	}

	return fmt.Sprintf(`
    %s {
      ec2_instance_tag {
      %s
      }
    }
`, blockName, strings.Join(conditions, "\n"))
}

func makeScanConditionStatement(cond awstypes.ScanConditionPair) string {
	stmt := fmt.Sprintf(`
        map_equals {
          key   = %[1]q
        }`, *cond.Key)
	if cond.Value == nil {
		return stmt
	}
	return fmt.Sprintf(`
        map_equals {
          key   = %[1]q
          value = %[2]q
        }`, *cond.Key, *cond.Value,
	)
}
