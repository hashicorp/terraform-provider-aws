# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

resource "aws_guardduty_malware_protection_plan" "test" {
  role = aws_iam_role.test.arn

  protected_resource {
    s3_bucket {
      bucket_name = aws_s3_bucket.test.id
    }
  }

  tags = var.resource_tags
}

# testAccMalwareProtectionPlanConfigBase

data "aws_region" "current" {}
data "aws_caller_identity" "current" {}
data "aws_partition" "current" {}

data "aws_iam_policy_document" "assume_role" {
  statement {
    actions = ["sts:AssumeRole"]
    effect  = "Allow"

    principals {
      type        = "Service"
      identifiers = ["malware-protection-plan.guardduty.amazonaws.com"]
    }
  }
}

data "aws_iam_policy_document" "test" {
  statement {
    sid = "AllowManagedRuleToSendS3EventsToGuardDuty"
    actions = [
      "events:PutRule",
      "events:DeleteRule",
      "events:PutTargets",
      "events:RemoveTargets"
    ]
    effect = "Allow"
    resources = [
      "arn:${data.aws_partition.current.partition}:events:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*"
    ]

    condition {
      test     = "StringLike"
      variable = "events:ManagedBy"

      values = [
        "malware-protection-plan.guardduty.amazonaws.com"
      ]
    }
  }

  statement {
    sid = "AllowGuardDutyToMonitorEventBridgeManagedRule"
    actions = [
      "events:DescribeRule",
      "events:ListTargetsByRule"
    ]
    effect = "Allow"
    resources = [
      "arn:${data.aws_partition.current.partition}:events:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:rule/DO-NOT-DELETE-AmazonGuardDutyMalwareProtectionS3*"
    ]
  }

  statement {
    sid = "AllowPostScanTag"
    actions = [
      # Customer bucket is versioned
      "s3:PutObjectTagging",
      "s3:GetObjectTagging",
      # Customer bucket is not versioned
      "s3:PutObjectVersionTagging",
      "s3:GetObjectVersionTagging"
    ]
    effect = "Allow"
    resources = [
      "${aws_s3_bucket.test.arn}/*"
    ]
  }

  statement {
    sid = "AllowEnableS3EventBridgeEvents"
    actions = [
      "s3:PutBucketNotification",
      "s3:GetBucketNotification"
    ]
    effect = "Allow"
    resources = [
      aws_s3_bucket.test.arn
    ]
  }

  statement {
    sid = "AllowPutValidationObject"
    actions = [
      "s3:PutObject"
    ]
    effect = "Allow"
    resources = [
      "${aws_s3_bucket.test.arn}/malware-protection-resource-validation-object"
    ]
  }

  statement {
    sid = "AllowCheckBucketOwnership"
    actions = [
      "s3:ListBucket"
    ]
    effect = "Allow"
    resources = [
      aws_s3_bucket.test.arn
    ]
  }

  statement {
    sid = "AllowMalwareScan"
    actions = [
      # Customer bucket is versioned
      "s3:GetObject",
      # Customer bucket is not versioned
      "s3:GetObjectVersion"
    ]
    effect = "Allow"
    resources = [
      "${aws_s3_bucket.test.arn}/*"
    ]
  }
}

resource "aws_s3_bucket" "test" {
  bucket        = var.rName
  force_destroy = true
}

resource "aws_iam_role" "test" {
  name               = var.rName
  assume_role_policy = data.aws_iam_policy_document.assume_role.json

  inline_policy {
    name   = var.rName
    policy = data.aws_iam_policy_document.test.json
  }
}

variable "rName" {
  description = "Name for resource"
  type        = string
  nullable    = false
}

variable "resource_tags" {
  description = "Tags to set on resource. To specify no tags, set to `null`"
  # Not setting a default, so that this must explicitly be set to `null` to specify no tags
  type     = map(string)
  nullable = true
}
