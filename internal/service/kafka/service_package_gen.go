// Code generated by internal/generate/servicepackage/main.go; DO NOT EDIT.

package kafka

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/kafka"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*types.ServicePackageFrameworkDataSource {
	return []*types.ServicePackageFrameworkDataSource{}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*types.ServicePackageFrameworkResource {
	return []*types.ServicePackageFrameworkResource{
		{
			Factory:  newSingleSCRAMSecretAssociationResource,
			TypeName: "aws_msk_single_scram_secret_association",
			Name:     "Single SCRAM Secret Association",
		},
	}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*types.ServicePackageSDKDataSource {
	return []*types.ServicePackageSDKDataSource{
		{
			Factory:  dataSourceBootstrapBrokers,
			TypeName: "aws_msk_bootstrap_brokers",
			Name:     "Bootstrap Brokers",
		},
		{
			Factory:  dataSourceBrokerNodes,
			TypeName: "aws_msk_broker_nodes",
			Name:     "Broker Nodes",
		},
		{
			Factory:  dataSourceCluster,
			TypeName: "aws_msk_cluster",
			Name:     "Cluster",
		},
		{
			Factory:  dataSourceConfiguration,
			TypeName: "aws_msk_configuration",
			Name:     "Configuration",
		},
		{
			Factory:  dataSourceKafkaVersion,
			TypeName: "aws_msk_kafka_version",
			Name:     "Kafka Version",
		},
		{
			Factory:  dataSourceVPCConnection,
			TypeName: "aws_msk_vpc_connection",
			Name:     "VPC Connection",
			Tags:     &types.ServicePackageResourceTags{},
		},
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*types.ServicePackageSDKResource {
	return []*types.ServicePackageSDKResource{
		{
			Factory:  resourceCluster,
			TypeName: "aws_msk_cluster",
			Name:     "Cluster",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
			},
		},
		{
			Factory:  resourceClusterPolicy,
			TypeName: "aws_msk_cluster_policy",
			Name:     "Cluster Policy",
		},
		{
			Factory:  resourceConfiguration,
			TypeName: "aws_msk_configuration",
			Name:     "Configuration",
		},
		{
			Factory:  resourceReplicator,
			TypeName: "aws_msk_replicator",
			Name:     "Replicator",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
			},
		},
		{
			Factory:  resourceSCRAMSecretAssociation,
			TypeName: "aws_msk_scram_secret_association",
			Name:     "SCRAM Secret Association",
		},
		{
			Factory:  resourceServerlessCluster,
			TypeName: "aws_msk_serverless_cluster",
			Name:     "Serverless Cluster",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
			},
		},
		{
			Factory:  resourceVPCConnection,
			TypeName: "aws_msk_vpc_connection",
			Name:     "VPC Connection",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
			},
		},
	}
}

func (p *servicePackage) ServicePackageName() string {
	return names.Kafka
}

// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*kafka.Client, error) {
	cfg := *(config["aws_sdkv2_config"].(*aws.Config))
	optFns := []func(*kafka.Options){
		kafka.WithEndpointResolverV2(newEndpointResolverV2()),
		withBaseEndpoint(config[names.AttrEndpoint].(string)),
		withExtraOptions(ctx, p, config),
	}

	return kafka.NewFromConfig(cfg, optFns...), nil
}

// withExtraOptions returns a functional option that allows this service package to specify extra API client options.
// This option is always called after any generated options.
func withExtraOptions(ctx context.Context, sp conns.ServicePackage, config map[string]any) func(*kafka.Options) {
	if v, ok := sp.(interface {
		withExtraOptions(context.Context, map[string]any) []func(*kafka.Options)
	}); ok {
		optFns := v.withExtraOptions(ctx, config)

		return func(o *kafka.Options) {
			for _, optFn := range optFns {
				optFn(o)
			}
		}
	}

	return func(*kafka.Options) {}
}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
