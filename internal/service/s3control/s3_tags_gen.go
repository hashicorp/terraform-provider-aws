// Code generated by internal/generate/tags/main.go; DO NOT EDIT.
package s3control

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	awstypes "github.com/aws/aws-sdk-go-v2/service/s3control/types"
	tftags "github.com/hashicorp/terraform-provider-aws/internal/tags"
	"github.com/hashicorp/terraform-provider-aws/internal/types/option"
)

// []*SERVICE.Tag handling

// svcS3Tags returns s3control service tags.
func svcS3Tags(tags tftags.KeyValueTags) []awstypes.S3Tag {
	result := make([]awstypes.S3Tag, 0, len(tags))

	for k, v := range tags.Map() {
		tag := awstypes.S3Tag{
			Key:   aws.String(k),
			Value: aws.String(v),
		}

		result = append(result, tag)
	}

	return result
}

// keyValueTagsFromS3Tags creates tftags.KeyValueTags from s3control service tags.
func keyValueTagsFromS3Tags(ctx context.Context, tags []awstypes.S3Tag) tftags.KeyValueTags {
	m := make(map[string]*string, len(tags))

	for _, tag := range tags {
		m[aws.ToString(tag.Key)] = tag.Value
	}

	return tftags.New(ctx, m)
}

// getS3TagsIn returns s3control service tags from Context.
// nil is returned if there are no input tags.
func getS3TagsIn(ctx context.Context) []awstypes.S3Tag {
	if inContext, ok := tftags.FromContext(ctx); ok {
		if tags := svcS3Tags(inContext.TagsIn.UnwrapOrDefault()); len(tags) > 0 {
			return tags
		}
	}

	return nil
}

// setS3TagsOut sets s3control service tags in Context.
func setS3TagsOut(ctx context.Context, tags []awstypes.S3Tag) {
	if inContext, ok := tftags.FromContext(ctx); ok {
		inContext.TagsOut = option.Some(keyValueTagsFromS3Tags(ctx, tags))
	}
}
