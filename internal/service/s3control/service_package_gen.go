// Code generated by internal/generate/servicepackage/main.go; DO NOT EDIT.

package s3control

import (
	"context"
	"unique"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/service/s3control"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/vcr"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*inttypes.ServicePackageFrameworkDataSource {
	return []*inttypes.ServicePackageFrameworkDataSource{}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*inttypes.ServicePackageFrameworkResource {
	return []*inttypes.ServicePackageFrameworkResource{
		{
			Factory:  newAccessGrantResource,
			TypeName: "aws_s3control_access_grant",
			Name:     "Access Grant",
			Tags:     unique.Make(inttypes.ServicePackageResourceTags{}),
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newAccessGrantsInstanceResource,
			TypeName: "aws_s3control_access_grants_instance",
			Name:     "Access Grants Instance",
			Tags:     unique.Make(inttypes.ServicePackageResourceTags{}),
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newAccessGrantsInstanceResourcePolicyResource,
			TypeName: "aws_s3control_access_grants_instance_resource_policy",
			Name:     "Access Grants Instance Resource Policy",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newAccessGrantsLocationResource,
			TypeName: "aws_s3control_access_grants_location",
			Name:     "Access Grants Location",
			Tags:     unique.Make(inttypes.ServicePackageResourceTags{}),
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newDirectoryBucketAccessPointScopeResource,
			TypeName: "aws_s3control_directory_bucket_access_point_scope",
			Name:     "Directory Bucket Access Point Scope",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*inttypes.ServicePackageSDKDataSource {
	return []*inttypes.ServicePackageSDKDataSource{
		{
			Factory:  dataSourceAccountPublicAccessBlock,
			TypeName: "aws_s3_account_public_access_block",
			Name:     "Account Public Access Block",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  dataSourceMultiRegionAccessPoint,
			TypeName: "aws_s3control_multi_region_access_point",
			Name:     "Multi-Region Access Point",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*inttypes.ServicePackageSDKResource {
	return []*inttypes.ServicePackageSDKResource{
		{
			Factory:  resourceAccessPoint,
			TypeName: "aws_s3_access_point",
			Name:     "Access Point",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceAccountPublicAccessBlock,
			TypeName: "aws_s3_account_public_access_block",
			Name:     "Account Public Access Block",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
			Identity: inttypes.GlobalSingletonIdentity(
				inttypes.WithV6_0SDKv2Fix(),
			),
			Import: inttypes.SDKv2Import{
				WrappedImport: true,
			},
		},
		{
			Factory:  resourceAccessPointPolicy,
			TypeName: "aws_s3control_access_point_policy",
			Name:     "Access Point Policy",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucket,
			TypeName: "aws_s3control_bucket",
			Name:     "Bucket",
			Tags:     unique.Make(inttypes.ServicePackageResourceTags{}),
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketLifecycleConfiguration,
			TypeName: "aws_s3control_bucket_lifecycle_configuration",
			Name:     "Bucket Lifecycle Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketPolicy,
			TypeName: "aws_s3control_bucket_policy",
			Name:     "Bucket Policy",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceMultiRegionAccessPoint,
			TypeName: "aws_s3control_multi_region_access_point",
			Name:     "Multi-Region Access Point",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceMultiRegionAccessPointPolicy,
			TypeName: "aws_s3control_multi_region_access_point_policy",
			Name:     "Multi-Region Access Point Policy",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceObjectLambdaAccessPoint,
			TypeName: "aws_s3control_object_lambda_access_point",
			Name:     "Object Lambda Access Point",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceObjectLambdaAccessPointPolicy,
			TypeName: "aws_s3control_object_lambda_access_point_policy",
			Name:     "Object Lambda Access Point Policy",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceStorageLensConfiguration,
			TypeName: "aws_s3control_storage_lens_configuration",
			Name:     "Storage Lens Configuration",
			Tags:     unique.Make(inttypes.ServicePackageResourceTags{}),
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}

func (p *servicePackage) ServicePackageName() string {
	return names.S3Control
}

// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*s3control.Client, error) {
	cfg := *(config["aws_sdkv2_config"].(*aws.Config))
	optFns := []func(*s3control.Options){
		s3control.WithEndpointResolverV2(newEndpointResolverV2()),
		withBaseEndpoint(config[names.AttrEndpoint].(string)),
		func(o *s3control.Options) {
			if region := config[names.AttrRegion].(string); o.Region != region {
				tflog.Info(ctx, "overriding provider-configured AWS API region", map[string]any{
					"service":         p.ServicePackageName(),
					"original_region": o.Region,
					"override_region": region,
				})
				o.Region = region
			}
		},
		func(o *s3control.Options) {
			if inContext, ok := conns.FromContext(ctx); ok && inContext.VCREnabled() {
				tflog.Info(ctx, "overriding retry behavior to immediately return VCR errors")
				o.Retryer = conns.AddIsErrorRetryables(cfg.Retryer().(aws.RetryerV2), retry.IsErrorRetryableFunc(vcr.InteractionNotFoundRetryableFunc))
			}
		},
		withExtraOptions(ctx, p, config),
	}

	return s3control.NewFromConfig(cfg, optFns...), nil
}

// withExtraOptions returns a functional option that allows this service package to specify extra API client options.
// This option is always called after any generated options.
func withExtraOptions(ctx context.Context, sp conns.ServicePackage, config map[string]any) func(*s3control.Options) {
	if v, ok := sp.(interface {
		withExtraOptions(context.Context, map[string]any) []func(*s3control.Options)
	}); ok {
		optFns := v.withExtraOptions(ctx, config)

		return func(o *s3control.Options) {
			for _, optFn := range optFns {
				optFn(o)
			}
		}
	}

	return func(*s3control.Options) {}
}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
