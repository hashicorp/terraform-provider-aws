// Code generated by internal/generate/servicepackage/main.go; DO NOT EDIT.

package opensearchserverless

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/opensearchserverless"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*types.ServicePackageFrameworkDataSource {
	return []*types.ServicePackageFrameworkDataSource{
		{
			Factory:  newDataSourceAccessPolicy,
			TypeName: "aws_opensearchserverless_access_policy",
			Name:     "Access Policy",
		},
		{
			Factory:  newDataSourceCollection,
			TypeName: "aws_opensearchserverless_collection",
			Name:     "Collection",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
		},
		{
			Factory:  newDataSourceLifecyclePolicy,
			TypeName: "aws_opensearchserverless_lifecycle_policy",
			Name:     "Lifecycle Policy",
		},
		{
			Factory:  newDataSourceSecurityConfig,
			TypeName: "aws_opensearchserverless_security_config",
			Name:     "Security Config",
		},
	}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*types.ServicePackageFrameworkResource {
	return []*types.ServicePackageFrameworkResource{
		{
			Factory:  newResourceAccessPolicy,
			TypeName: "aws_opensearchserverless_access_policy",
			Name:     "Access Policy",
		},
		{
			Factory:  newResourceCollection,
			TypeName: "aws_opensearchserverless_collection",
			Name:     "Collection",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
		},
		{
			Factory:  newResourceLifecyclePolicy,
			TypeName: "aws_opensearchserverless_lifecycle_policy",
			Name:     "Lifecycle Policy",
		},
		{
			Factory:  newResourceSecurityConfig,
			TypeName: "aws_opensearchserverless_security_config",
			Name:     "Security Config",
		},
		{
			Factory:  newResourceSecurityPolicy,
			TypeName: "aws_opensearchserverless_security_policy",
			Name:     "Security Policy",
		},
		{
			Factory:  newVPCEndpointResource,
			TypeName: "aws_opensearchserverless_vpc_endpoint",
			Name:     "VPC Endpoint",
		},
	}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*types.ServicePackageSDKDataSource {
	return []*types.ServicePackageSDKDataSource{
		{
			Factory:  DataSourceSecurityPolicy,
			TypeName: "aws_opensearchserverless_security_policy",
			Name:     "Security Policy",
		},
		{
			Factory:  dataSourceVPCEndpoint,
			TypeName: "aws_opensearchserverless_vpc_endpoint",
			Name:     "VPC Endpoint",
		},
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*types.ServicePackageSDKResource {
	return []*types.ServicePackageSDKResource{}
}

func (p *servicePackage) ServicePackageName() string {
	return names.OpenSearchServerless
}

// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*opensearchserverless.Client, error) {
	cfg := *(config["aws_sdkv2_config"].(*aws.Config))
	optFns := []func(*opensearchserverless.Options){
		opensearchserverless.WithEndpointResolverV2(newEndpointResolverV2()),
		withBaseEndpoint(config[names.AttrEndpoint].(string)),
		withExtraOptions(ctx, p, config),
	}

	return opensearchserverless.NewFromConfig(cfg, optFns...), nil
}

// withExtraOptions returns a functional option that allows this service package to specify extra API client options.
// This option is always called after any generated options.
func withExtraOptions(ctx context.Context, sp conns.ServicePackage, config map[string]any) func(*opensearchserverless.Options) {
	if v, ok := sp.(interface {
		withExtraOptions(context.Context, map[string]any) []func(*opensearchserverless.Options)
	}); ok {
		optFns := v.withExtraOptions(ctx, config)

		return func(o *opensearchserverless.Options) {
			for _, optFn := range optFns {
				optFn(o)
			}
		}
	}

	return func(*opensearchserverless.Options) {}
}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
