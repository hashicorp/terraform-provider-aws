// Code generated by internal/generate/identitytests/main.go; DO NOT EDIT.

package organizations_test

import (
	"testing"

	awstypes "github.com/aws/aws-sdk-go-v2/service/organizations/types"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-testing/config"
	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/knownvalue"
	"github.com/hashicorp/terraform-plugin-testing/plancheck"
	"github.com/hashicorp/terraform-plugin-testing/statecheck"
	"github.com/hashicorp/terraform-plugin-testing/tfjsonpath"
	"github.com/hashicorp/terraform-plugin-testing/tfversion"
	"github.com/hashicorp/terraform-provider-aws/internal/acctest"
	tfknownvalue "github.com/hashicorp/terraform-provider-aws/internal/acctest/knownvalue"
	tfstatecheck "github.com/hashicorp/terraform-provider-aws/internal/acctest/statecheck"
	"github.com/hashicorp/terraform-provider-aws/names"
)

func testAccOrganizationsResourcePolicy_IdentitySerial(t *testing.T) {
	t.Helper()

	testCases := map[string]func(t *testing.T){
		acctest.CtBasic:    testAccOrganizationsResourcePolicy_Identity_Basic,
		"ExistingResource": testAccOrganizationsResourcePolicy_Identity_ExistingResource,
	}

	acctest.RunSerialTests1Level(t, testCases, 0)
}

func testAccOrganizationsResourcePolicy_Identity_Basic(t *testing.T) {
	ctx := acctest.Context(t)

	var v awstypes.ResourcePolicy
	resourceName := "aws_organizations_resource_policy.test"
	providers := make(map[string]*schema.Provider)

	resource.Test(t, resource.TestCase{
		TerraformVersionChecks: []tfversion.TerraformVersionCheck{
			tfversion.SkipBelow(tfversion.Version1_12_0),
		},
		PreCheck: func() {
			acctest.PreCheck(ctx, t)
			acctest.PreCheckAlternateAccount(t)
			acctest.PreCheckOrganizationManagementAccount(ctx, t)
		},
		ErrorCheck:   acctest.ErrorCheck(t, names.OrganizationsServiceID),
		CheckDestroy: testAccCheckResourcePolicyDestroy(ctx),
		Steps: []resource.TestStep{
			// Step 1: Setup
			{
				ProtoV5ProviderFactories: acctest.ProtoV5FactoriesNamedAlternate(ctx, t, providers),
				ConfigDirectory:          config.StaticDirectory("testdata/ResourcePolicy/basic/"),
				ConfigVariables:          config.Variables{},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckResourcePolicyExists(ctx, resourceName, &v),
				),
				ConfigStateChecks: []statecheck.StateCheck{
					statecheck.ExpectIdentity(resourceName, map[string]knownvalue.Check{
						names.AttrAccountID: tfknownvalue.AccountID(),
						names.AttrID:        knownvalue.NotNull(),
					}),
					statecheck.ExpectIdentityValueMatchesState(resourceName, tfjsonpath.New(names.AttrID)),
				},
			},

			// Step 2: Import command
			{
				ProtoV5ProviderFactories: acctest.ProtoV5FactoriesNamedAlternate(ctx, t, providers),
				ConfigDirectory:          config.StaticDirectory("testdata/ResourcePolicy/basic/"),
				ConfigVariables:          config.Variables{},
				ImportStateKind:          resource.ImportCommandWithID,
				ResourceName:             resourceName,
				ImportState:              true,
				ImportStateVerify:        true,
			},

			// Step 3: Import block with Import ID
			{
				ProtoV5ProviderFactories: acctest.ProtoV5FactoriesNamedAlternate(ctx, t, providers),
				ConfigDirectory:          config.StaticDirectory("testdata/ResourcePolicy/basic/"),
				ConfigVariables:          config.Variables{},
				ResourceName:             resourceName,
				ImportState:              true,
				ImportStateKind:          resource.ImportBlockWithID,
				ImportPlanChecks: resource.ImportPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrID), knownvalue.NotNull()),
					},
				},
			},

			// Step 4: Import block with Resource Identity
			{
				ProtoV5ProviderFactories: acctest.ProtoV5FactoriesNamedAlternate(ctx, t, providers),
				ConfigDirectory:          config.StaticDirectory("testdata/ResourcePolicy/basic/"),
				ConfigVariables:          config.Variables{},
				ResourceName:             resourceName,
				ImportState:              true,
				ImportStateKind:          resource.ImportBlockWithResourceIdentity,
				ImportPlanChecks: resource.ImportPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectKnownValue(resourceName, tfjsonpath.New(names.AttrID), knownvalue.NotNull()),
					},
				},
			},
		},
	})
}

// Resource Identity was added after v6.4.0
func testAccOrganizationsResourcePolicy_Identity_ExistingResource(t *testing.T) {
	ctx := acctest.Context(t)

	var v awstypes.ResourcePolicy
	resourceName := "aws_organizations_resource_policy.test"
	providers := make(map[string]*schema.Provider)

	resource.Test(t, resource.TestCase{
		TerraformVersionChecks: []tfversion.TerraformVersionCheck{
			tfversion.SkipBelow(tfversion.Version1_12_0),
		},
		PreCheck: func() {
			acctest.PreCheck(ctx, t)
			acctest.PreCheckAlternateAccount(t)
			acctest.PreCheckOrganizationManagementAccount(ctx, t)
		},
		ErrorCheck:   acctest.ErrorCheck(t, names.OrganizationsServiceID),
		CheckDestroy: testAccCheckResourcePolicyDestroy(ctx),
		Steps: []resource.TestStep{
			// Step 1: Create pre-Identity
			{
				ProtoV5ProviderFactories: acctest.ProtoV5FactoriesNamed(ctx, t, providers, acctest.ProviderNameAlternate),
				ConfigDirectory:          config.StaticDirectory("testdata/ResourcePolicy/basic_v6.4.0/"),
				ConfigVariables:          config.Variables{},
				Check: resource.ComposeAggregateTestCheckFunc(
					testAccCheckResourcePolicyExists(ctx, resourceName, &v),
				),
				ConfigStateChecks: []statecheck.StateCheck{
					tfstatecheck.ExpectNoIdentity(resourceName),
				},
			},

			// Step 2: Current version
			{
				ProtoV5ProviderFactories: acctest.ProtoV5FactoriesNamedAlternate(ctx, t, providers),
				ConfigDirectory:          config.StaticDirectory("testdata/ResourcePolicy/basic/"),
				ConfigVariables:          config.Variables{},
				ConfigPlanChecks: resource.ConfigPlanChecks{
					PreApply: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionNoop),
					},
					PostApplyPostRefresh: []plancheck.PlanCheck{
						plancheck.ExpectResourceAction(resourceName, plancheck.ResourceActionNoop),
					},
				},
				ConfigStateChecks: []statecheck.StateCheck{
					statecheck.ExpectIdentity(resourceName, map[string]knownvalue.Check{
						names.AttrAccountID: tfknownvalue.AccountID(),
						names.AttrID:        knownvalue.NotNull(),
					}),
					statecheck.ExpectIdentityValueMatchesState(resourceName, tfjsonpath.New(names.AttrID)),
				},
			},
		},
	})
}
