// Code generated by internal/generate/servicepackage/main.go; DO NOT EDIT.

package s3

import (
	"context"
	"unique"

	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/internal/vcr"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*inttypes.ServicePackageFrameworkDataSource {
	return []*inttypes.ServicePackageFrameworkDataSource{
		{
			Factory:  newDirectoryBucketsDataSource,
			TypeName: "aws_s3_directory_buckets",
			Name:     "Directory Buckets",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*inttypes.ServicePackageFrameworkResource {
	return []*inttypes.ServicePackageFrameworkResource{
		{
			Factory:  newBucketLifecycleConfigurationResource,
			TypeName: "aws_s3_bucket_lifecycle_configuration",
			Name:     "Bucket Lifecycle Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  newDirectoryBucketResource,
			TypeName: "aws_s3_directory_bucket",
			Name:     "Directory Bucket",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
				ResourceType:        "DirectoryBucket",
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*inttypes.ServicePackageSDKDataSource {
	return []*inttypes.ServicePackageSDKDataSource{
		{
			Factory:  dataSourceCanonicalUserID,
			TypeName: "aws_canonical_user_id",
			Name:     "Canonical User ID",
			Region:   unique.Make(inttypes.ResourceRegionDisabled()),
		},
		{
			Factory:  dataSourceBucket,
			TypeName: "aws_s3_bucket",
			Name:     "Bucket",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  dataSourceBucketObject,
			TypeName: "aws_s3_bucket_object",
			Name:     "Bucket Object",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
				ResourceType:        "BucketObject",
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  dataSourceBucketObjects,
			TypeName: "aws_s3_bucket_objects",
			Name:     "Bucket Objects",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  dataSourceBucketPolicy,
			TypeName: "aws_s3_bucket_policy",
			Name:     "Bucket Policy",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  dataSourceObject,
			TypeName: "aws_s3_object",
			Name:     "Object",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
				ResourceType:        "Object",
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  dataSourceObjects,
			TypeName: "aws_s3_objects",
			Name:     "Objects",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*inttypes.ServicePackageSDKResource {
	return []*inttypes.ServicePackageSDKResource{
		{
			Factory:  resourceBucket,
			TypeName: "aws_s3_bucket",
			Name:     "Bucket",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrBucket,
				ResourceType:        "Bucket",
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
			Identity: inttypes.RegionalSingleParameterIdentity(names.AttrBucket,
				inttypes.WithV6_0SDKv2Fix(),
			),
		},
		{
			Factory:  resourceBucketAccelerateConfiguration,
			TypeName: "aws_s3_bucket_accelerate_configuration",
			Name:     "Bucket Accelerate Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketACL,
			TypeName: "aws_s3_bucket_acl",
			Name:     "Bucket ACL",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketAnalyticsConfiguration,
			TypeName: "aws_s3_bucket_analytics_configuration",
			Name:     "Bucket Analytics Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketCorsConfiguration,
			TypeName: "aws_s3_bucket_cors_configuration",
			Name:     "Bucket CORS Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketIntelligentTieringConfiguration,
			TypeName: "aws_s3_bucket_intelligent_tiering_configuration",
			Name:     "Bucket Intelligent-Tiering Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketInventory,
			TypeName: "aws_s3_bucket_inventory",
			Name:     "Bucket Inventory",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketLogging,
			TypeName: "aws_s3_bucket_logging",
			Name:     "Bucket Logging",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketMetric,
			TypeName: "aws_s3_bucket_metric",
			Name:     "Bucket Metric",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketNotification,
			TypeName: "aws_s3_bucket_notification",
			Name:     "Bucket Notification",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketObject,
			TypeName: "aws_s3_bucket_object",
			Name:     "Bucket Object",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
				ResourceType:        "BucketObject",
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
			Identity: inttypes.RegionalParameterizedIdentity([]inttypes.IdentityAttribute{
				inttypes.StringIdentityAttribute(names.AttrBucket, true),
				inttypes.StringIdentityAttribute(names.AttrKey, true),
			}),
			Import: inttypes.SDKv2Import{
				WrappedImport: true,
				ImportID:      bucketObjectImportID{},
			},
		},
		{
			Factory:  resourceBucketObjectLockConfiguration,
			TypeName: "aws_s3_bucket_object_lock_configuration",
			Name:     "Bucket Object Lock Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketOwnershipControls,
			TypeName: "aws_s3_bucket_ownership_controls",
			Name:     "Bucket Ownership Controls",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketPolicy,
			TypeName: "aws_s3_bucket_policy",
			Name:     "Bucket Policy",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketPublicAccessBlock,
			TypeName: "aws_s3_bucket_public_access_block",
			Name:     "Bucket Public Access Block",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketReplicationConfiguration,
			TypeName: "aws_s3_bucket_replication_configuration",
			Name:     "Bucket Replication Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketRequestPaymentConfiguration,
			TypeName: "aws_s3_bucket_request_payment_configuration",
			Name:     "Bucket Request Payment Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketServerSideEncryptionConfiguration,
			TypeName: "aws_s3_bucket_server_side_encryption_configuration",
			Name:     "Bucket Server-side Encryption Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketVersioning,
			TypeName: "aws_s3_bucket_versioning",
			Name:     "Bucket Versioning",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceBucketWebsiteConfiguration,
			TypeName: "aws_s3_bucket_website_configuration",
			Name:     "Bucket Website Configuration",
			Region:   unique.Make(inttypes.ResourceRegionDefault()),
		},
		{
			Factory:  resourceObject,
			TypeName: "aws_s3_object",
			Name:     "Object",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
				ResourceType:        "Object",
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
			Identity: inttypes.RegionalParameterizedIdentity([]inttypes.IdentityAttribute{
				inttypes.StringIdentityAttribute(names.AttrBucket, true),
				inttypes.StringIdentityAttribute(names.AttrKey, true),
			}),
			Import: inttypes.SDKv2Import{
				WrappedImport: true,
				ImportID:      objectImportID{},
			},
		},
		{
			Factory:  resourceObjectCopy,
			TypeName: "aws_s3_object_copy",
			Name:     "Object Copy",
			Tags: unique.Make(inttypes.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
				ResourceType:        "ObjectCopy",
			}),
			Region: unique.Make(inttypes.ResourceRegionDefault()),
		},
	}
}

func (p *servicePackage) ServicePackageName() string {
	return names.S3
}

// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*s3.Client, error) {
	cfg := *(config["aws_sdkv2_config"].(*aws.Config))
	optFns := []func(*s3.Options){
		s3.WithEndpointResolverV2(newEndpointResolverV2()),
		withBaseEndpoint(config[names.AttrEndpoint].(string)),
		func(o *s3.Options) {
			if region := config[names.AttrRegion].(string); o.Region != region {
				tflog.Info(ctx, "overriding provider-configured AWS API region", map[string]any{
					"service":         p.ServicePackageName(),
					"original_region": o.Region,
					"override_region": region,
				})
				o.Region = region
			}
		},
		func(o *s3.Options) {
			if inContext, ok := conns.FromContext(ctx); ok && inContext.VCREnabled() {
				tflog.Info(ctx, "overriding retry behavior to immediately return VCR errors")
				o.Retryer = conns.AddIsErrorRetryables(cfg.Retryer().(aws.RetryerV2), retry.IsErrorRetryableFunc(vcr.InteractionNotFoundRetryableFunc))
			}
		},
		withExtraOptions(ctx, p, config),
	}

	return s3.NewFromConfig(cfg, optFns...), nil
}

// withExtraOptions returns a functional option that allows this service package to specify extra API client options.
// This option is always called after any generated options.
func withExtraOptions(ctx context.Context, sp conns.ServicePackage, config map[string]any) func(*s3.Options) {
	if v, ok := sp.(interface {
		withExtraOptions(context.Context, map[string]any) []func(*s3.Options)
	}); ok {
		optFns := v.withExtraOptions(ctx, config)

		return func(o *s3.Options) {
			for _, optFn := range optFns {
				optFn(o)
			}
		}
	}

	return func(*s3.Options) {}
}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
