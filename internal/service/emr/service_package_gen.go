// Code generated by internal/generate/servicepackage/main.go; DO NOT EDIT.

package emr

import (
	"context"

	aws_sdkv2 "github.com/aws/aws-sdk-go-v2/aws"
	emr_sdkv2 "github.com/aws/aws-sdk-go-v2/service/emr"
	aws_sdkv1 "github.com/aws/aws-sdk-go/aws"
	session_sdkv1 "github.com/aws/aws-sdk-go/aws/session"
	emr_sdkv1 "github.com/aws/aws-sdk-go/service/emr"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*types.ServicePackageFrameworkDataSource {
	return []*types.ServicePackageFrameworkDataSource{
		{
			Factory: newDataSourceSupportedInstanceTypes,
			Name:    "Supported Instance Types",
		},
	}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*types.ServicePackageFrameworkResource {
	return []*types.ServicePackageFrameworkResource{}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*types.ServicePackageSDKDataSource {
	return []*types.ServicePackageSDKDataSource{
		{
			Factory:  dataSourceReleaseLabels,
			TypeName: "aws_emr_release_labels",
			Name:     "Release Labels",
		},
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*types.ServicePackageSDKResource {
	return []*types.ServicePackageSDKResource{
		{
			Factory:  resourceBlockPublicAccessConfiguration,
			TypeName: "aws_emr_block_public_access_configuration",
			Name:     "Block Public Access Configuration",
		},
		{
			Factory:  resourceCluster,
			TypeName: "aws_emr_cluster",
			Name:     "Cluster",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
			},
		},
		{
			Factory:  resourceInstanceFleet,
			TypeName: "aws_emr_instance_fleet",
			Name:     "Instance Fleet",
		},
		{
			Factory:  resourceInstanceGroup,
			TypeName: "aws_emr_instance_group",
			Name:     "Instance Group",
		},
		{
			Factory:  resourceManagedScalingPolicy,
			TypeName: "aws_emr_managed_scaling_policy",
			Name:     "Managed Scaling Policy",
		},
		{
			Factory:  resourceSecurityConfiguration,
			TypeName: "aws_emr_security_configuration",
			Name:     "Security Configuration",
		},
		{
			Factory:  resourceStudio,
			TypeName: "aws_emr_studio",
			Name:     "Studio",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
			},
		},
		{
			Factory:  resourceStudioSessionMapping,
			TypeName: "aws_emr_studio_session_mapping",
			Name:     "Studio Session Mapping",
		},
	}
}

func (p *servicePackage) ServicePackageName() string {
	return names.EMR
}

// NewConn returns a new AWS SDK for Go v1 client for this service package's AWS API.
func (p *servicePackage) NewConn(ctx context.Context, config map[string]any) (*emr_sdkv1.EMR, error) {
	sess := config[names.AttrSession].(*session_sdkv1.Session)

	cfg := aws_sdkv1.Config{}

	if endpoint := config[names.AttrEndpoint].(string); endpoint != "" {
		tflog.Debug(ctx, "setting endpoint", map[string]any{
			"tf_aws.endpoint": endpoint,
		})
		cfg.Endpoint = aws_sdkv1.String(endpoint)
	} else {
		cfg.EndpointResolver = newEndpointResolverSDKv1(ctx)
	}

	return emr_sdkv1.New(sess.Copy(&cfg)), nil
}

// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*emr_sdkv2.Client, error) {
	cfg := *(config["aws_sdkv2_config"].(*aws_sdkv2.Config))

	return emr_sdkv2.NewFromConfig(cfg,
		emr_sdkv2.WithEndpointResolverV2(newEndpointResolverSDKv2()),
		withBaseEndpoint(config[names.AttrEndpoint].(string)),
	), nil
}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
