// Code generated by internal/generate/servicepackage/main.go; DO NOT EDIT.

package opsworks

import (
	"context"

	aws_sdkv2 "github.com/aws/aws-sdk-go-v2/aws"
	opsworks_sdkv2 "github.com/aws/aws-sdk-go-v2/service/opsworks"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*types.ServicePackageFrameworkDataSource {
	return []*types.ServicePackageFrameworkDataSource{}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*types.ServicePackageFrameworkResource {
	return []*types.ServicePackageFrameworkResource{}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*types.ServicePackageSDKDataSource {
	return []*types.ServicePackageSDKDataSource{}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*types.ServicePackageSDKResource {
	return []*types.ServicePackageSDKResource{
		{
			Factory:  resourceApplication,
			TypeName: "aws_opsworks_application",
			Name:     "Application",
		},
		{
			Factory:  resourceCustomLayer,
			TypeName: "aws_opsworks_custom_layer",
			Name:     "Custom Layer",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
		},
		{
			Factory:  resourceECSClusterLayer,
			TypeName: "aws_opsworks_ecs_cluster_layer",
			Name:     "ECS Cluster Layer",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
		},
		{
			Factory:  resourceGangliaLayer,
			TypeName: "aws_opsworks_ganglia_layer",
			Name:     "Ganglia Layer",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
		},
		{
			Factory:  resourceHAProxyLayer,
			TypeName: "aws_opsworks_haproxy_layer",
			Name:     "HAProxy Layer",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
		},
		{
			Factory:  resourceInstance,
			TypeName: "aws_opsworks_instance",
			Name:     "Instance",
		},
		{
			Factory:  resourceJavaAppLayer,
			TypeName: "aws_opsworks_java_app_layer",
			Name:     "Java App Layer",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
		},
		{
			Factory:  resourceMemcachedLayer,
			TypeName: "aws_opsworks_memcached_layer",
			Name:     "Memcached Layer",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
		},
		{
			Factory:  resourceMySQLLayer,
			TypeName: "aws_opsworks_mysql_layer",
			Name:     "MySQL Layer",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
		},
		{
			Factory:  resourceNodejsAppLayer,
			TypeName: "aws_opsworks_nodejs_app_layer",
			Name:     "NodeJS App Layer",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
		},
		{
			Factory:  resourcePermission,
			TypeName: "aws_opsworks_permission",
			Name:     "Permission",
		},
		{
			Factory:  resourcePHPAppLayer,
			TypeName: "aws_opsworks_php_app_layer",
			Name:     "PHP App Layer",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
		},
		{
			Factory:  resourceRailsAppLayer,
			TypeName: "aws_opsworks_rails_app_layer",
			Name:     "Rails App Layer",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
		},
		{
			Factory:  resourceRDSDBInstance,
			TypeName: "aws_opsworks_rds_db_instance",
			Name:     "RDS DB Instance",
		},
		{
			Factory:  resourceStack,
			TypeName: "aws_opsworks_stack",
			Name:     "Stack",
			Tags:     &types.ServicePackageResourceTags{},
		},
		{
			Factory:  resourceStaticWebLayer,
			TypeName: "aws_opsworks_static_web_layer",
			Name:     "Static Web Layer",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrARN,
			},
		},
		{
			Factory:  resourceUserProfile,
			TypeName: "aws_opsworks_user_profile",
			Name:     "Profile",
		},
	}
}

func (p *servicePackage) ServicePackageName() string {
	return names.OpsWorks
}

// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*opsworks_sdkv2.Client, error) {
	cfg := *(config["aws_sdkv2_config"].(*aws_sdkv2.Config))

	return opsworks_sdkv2.NewFromConfig(cfg,
		opsworks_sdkv2.WithEndpointResolverV2(newEndpointResolverSDKv2()),
		withBaseEndpoint(config[names.AttrEndpoint].(string)),
	), nil
}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
