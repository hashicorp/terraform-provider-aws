// Code generated by internal/generate/servicepackage/main.go; DO NOT EDIT.

package opensearch

import (
	"context"

	aws_sdkv2 "github.com/aws/aws-sdk-go-v2/aws"
	opensearch_sdkv2 "github.com/aws/aws-sdk-go-v2/service/opensearch"
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*types.ServicePackageFrameworkDataSource {
	return []*types.ServicePackageFrameworkDataSource{}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*types.ServicePackageFrameworkResource {
	return []*types.ServicePackageFrameworkResource{}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*types.ServicePackageSDKDataSource {
	return []*types.ServicePackageSDKDataSource{
		{
			Factory:  dataSourceDomain,
			TypeName: "aws_opensearch_domain",
			Name:     "Domain",
		},
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*types.ServicePackageSDKResource {
	return []*types.ServicePackageSDKResource{
		{
			Factory:  resourceDomain,
			TypeName: "aws_opensearch_domain",
			Name:     "Domain",
			Tags: &types.ServicePackageResourceTags{
				IdentifierAttribute: names.AttrID,
			},
		},
		{
			Factory:  resourceDomainPolicy,
			TypeName: "aws_opensearch_domain_policy",
			Name:     "Domain Policy",
		},
		{
			Factory:  resourceDomainSAMLOptions,
			TypeName: "aws_opensearch_domain_saml_options",
			Name:     "Domain SAML Options",
		},
		{
			Factory:  resourceInboundConnectionAccepter,
			TypeName: "aws_opensearch_inbound_connection_accepter",
			Name:     "Inbound Connection Accepter",
		},
		{
			Factory:  resourceOutboundConnection,
			TypeName: "aws_opensearch_outbound_connection",
			Name:     "Outbound Connection",
		},
		{
			Factory:  resourcePackage,
			TypeName: "aws_opensearch_package",
			Name:     "Package",
		},
		{
			Factory:  resourcePackageAssociation,
			TypeName: "aws_opensearch_package_association",
			Name:     "Package Association",
		},
		{
			Factory:  resourceVPCEndpoint,
			TypeName: "aws_opensearch_vpc_endpoint",
			Name:     "VPC Endpoint",
		},
	}
}

func (p *servicePackage) ServicePackageName() string {
	return names.OpenSearch
}

// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*opensearch_sdkv2.Client, error) {
	cfg := *(config["aws_sdkv2_config"].(*aws_sdkv2.Config))

	return opensearch_sdkv2.NewFromConfig(cfg,
		opensearch_sdkv2.WithEndpointResolverV2(newEndpointResolverSDKv2()),
		withBaseEndpoint(config[names.AttrEndpoint].(string)),
	), nil
}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
