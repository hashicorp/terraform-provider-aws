// Code generated by internal/generate/servicepackage/main.go; DO NOT EDIT.

package ssoadmin

import (
	"context"

	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/types"
	"github.com/hashicorp/terraform-provider-aws/names"
)

type servicePackage struct{}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*types.ServicePackageFrameworkDataSource {
	return []*types.ServicePackageFrameworkDataSource{
		{
			Factory:  newDataSourceApplication,
			TypeName: "aws_ssoadmin_application",
			Name:     "Application",
		},
		{
			Factory:  newDataSourceApplicationAssignments,
			TypeName: "aws_ssoadmin_application_assignments",
			Name:     "Application Assignments",
		},
		{
			Factory:  newDataSourceApplicationProviders,
			TypeName: "aws_ssoadmin_application_providers",
			Name:     "Application Providers",
		},
		{
			Factory:  newPermissionSetsDataSource,
			TypeName: "aws_ssoadmin_permission_sets",
			Name:     "Permission Sets",
		},
		{
			Factory:  newDataSourcePrincipalApplicationAssignments,
			TypeName: "aws_ssoadmin_principal_application_assignments",
			Name:     "Principal Application Assignments",
		},
	}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*types.ServicePackageFrameworkResource {
	return []*types.ServicePackageFrameworkResource{
		{
			Factory:  newResourceApplication,
			TypeName: "aws_ssoadmin_application",
			Name:     "Application",
			Tags:     &types.ServicePackageResourceTags{},
		},
		{
			Factory:  newResourceApplicationAccessScope,
			TypeName: "aws_ssoadmin_application_access_scope",
			Name:     "Application Access Scope",
		},
		{
			Factory:  newResourceApplicationAssignment,
			TypeName: "aws_ssoadmin_application_assignment",
			Name:     "Application Assignment",
		},
		{
			Factory:  newResourceApplicationAssignmentConfiguration,
			TypeName: "aws_ssoadmin_application_assignment_configuration",
			Name:     "Application Assignment Configuration",
		},
		{
			Factory:  newResourceTrustedTokenIssuer,
			TypeName: "aws_ssoadmin_trusted_token_issuer",
			Name:     "Trusted Token Issuer",
			Tags:     &types.ServicePackageResourceTags{},
		},
	}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*types.ServicePackageSDKDataSource {
	return []*types.ServicePackageSDKDataSource{
		{
			Factory:  DataSourceInstances,
			TypeName: "aws_ssoadmin_instances",
			Name:     "Instances",
		},
		{
			Factory:  DataSourcePermissionSet,
			TypeName: "aws_ssoadmin_permission_set",
			Name:     "Permission Set",
		},
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*types.ServicePackageSDKResource {
	return []*types.ServicePackageSDKResource{
		{
			Factory:  ResourceAccountAssignment,
			TypeName: "aws_ssoadmin_account_assignment",
			Name:     "Account Assignment",
		},
		{
			Factory:  ResourceCustomerManagedPolicyAttachment,
			TypeName: "aws_ssoadmin_customer_managed_policy_attachment",
			Name:     "Customer Managed Policy Attachment",
		},
		{
			Factory:  ResourceAccessControlAttributes,
			TypeName: "aws_ssoadmin_instance_access_control_attributes",
			Name:     "Instance Access Control Attributes",
		},
		{
			Factory:  ResourceManagedPolicyAttachment,
			TypeName: "aws_ssoadmin_managed_policy_attachment",
			Name:     "Managed Policy Attachment",
		},
		{
			Factory:  ResourcePermissionSet,
			TypeName: "aws_ssoadmin_permission_set",
			Name:     "Permission Set",
			Tags:     &types.ServicePackageResourceTags{},
		},
		{
			Factory:  ResourcePermissionSetInlinePolicy,
			TypeName: "aws_ssoadmin_permission_set_inline_policy",
			Name:     "Permission Set Inline Policy",
		},
		{
			Factory:  ResourcePermissionsBoundaryAttachment,
			TypeName: "aws_ssoadmin_permissions_boundary_attachment",
			Name:     "Permissions Boundary Attachment",
		},
	}
}

func (p *servicePackage) ServicePackageName() string {
	return names.SSOAdmin
}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
