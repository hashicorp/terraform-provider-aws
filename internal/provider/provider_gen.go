// Code generated by internal/generate/customendsschema/main.go; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"os"

	"github.com/hashicorp/go-cty/cty"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-provider-aws/internal/errs"
)

func endpointsSchema() *schema.Schema {
	return &schema.Schema{
		Type:     schema.TypeSet,
		Optional: true,
		Elem: &schema.Resource{
			Schema: map[string]*schema.Schema{
				// accessanalyzer

				"accessanalyzer": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// account

				"account": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// acm

				"acm": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// acmpca

				"acmpca": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// amp

				"amp": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"prometheus": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"prometheusservice": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// amplify

				"amplify": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// apigateway

				"apigateway": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// apigatewayv2

				"apigatewayv2": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// appautoscaling

				"appautoscaling": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"applicationautoscaling": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// appconfig

				"appconfig": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// appfabric

				"appfabric": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// appflow

				"appflow": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// appintegrations

				"appintegrations": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"appintegrationsservice": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// applicationinsights

				"applicationinsights": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// applicationsignals

				"applicationsignals": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// appmesh

				"appmesh": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// apprunner

				"apprunner": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// appstream

				"appstream": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// appsync

				"appsync": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// athena

				"athena": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// auditmanager

				"auditmanager": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// autoscaling

				"autoscaling": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// autoscalingplans

				"autoscalingplans": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// backup

				"backup": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// batch

				"batch": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// bcmdataexports

				"bcmdataexports": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// bedrock

				"bedrock": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// bedrockagent

				"bedrockagent": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// billing

				"billing": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// budgets

				"budgets": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// ce

				"ce": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"costexplorer": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// chatbot

				"chatbot": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// chime

				"chime": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// chimesdkmediapipelines

				"chimesdkmediapipelines": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// chimesdkvoice

				"chimesdkvoice": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// cleanrooms

				"cleanrooms": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// cloud9

				"cloud9": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// cloudcontrol

				"cloudcontrol": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"cloudcontrolapi": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// cloudformation

				"cloudformation": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// cloudfront

				"cloudfront": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// cloudfrontkeyvaluestore

				"cloudfrontkeyvaluestore": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// cloudhsmv2

				"cloudhsmv2": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"cloudhsm": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// cloudsearch

				"cloudsearch": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// cloudtrail

				"cloudtrail": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// cloudwatch

				"cloudwatch": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// codeartifact

				"codeartifact": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// codebuild

				"codebuild": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// codecatalyst

				"codecatalyst": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// codecommit

				"codecommit": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// codeconnections

				"codeconnections": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// codeguruprofiler

				"codeguruprofiler": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// codegurureviewer

				"codegurureviewer": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// codepipeline

				"codepipeline": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// codestarconnections

				"codestarconnections": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// codestarnotifications

				"codestarnotifications": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// cognitoidentity

				"cognitoidentity": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// cognitoidp

				"cognitoidp": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"cognitoidentityprovider": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// comprehend

				"comprehend": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// computeoptimizer

				"computeoptimizer": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// configservice

				"configservice": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"config": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// connect

				"connect": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// connectcases

				"connectcases": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// controltower

				"controltower": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// costoptimizationhub

				"costoptimizationhub": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// cur

				"cur": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"costandusagereportservice": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// customerprofiles

				"customerprofiles": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// databrew

				"databrew": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"gluedatabrew": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// dataexchange

				"dataexchange": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// datapipeline

				"datapipeline": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// datasync

				"datasync": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// datazone

				"datazone": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// dax

				"dax": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// deploy

				"deploy": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"codedeploy": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// detective

				"detective": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// devicefarm

				"devicefarm": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// devopsguru

				"devopsguru": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// directconnect

				"directconnect": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// dlm

				"dlm": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// dms

				"dms": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"databasemigration": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"databasemigrationservice": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// docdb

				"docdb": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// docdbelastic

				"docdbelastic": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// drs

				"drs": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// ds

				"ds": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"directoryservice": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// dynamodb

				"dynamodb": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// ec2

				"ec2": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// ecr

				"ecr": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// ecrpublic

				"ecrpublic": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// ecs

				"ecs": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// efs

				"efs": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// eks

				"eks": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// elasticache

				"elasticache": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// elasticbeanstalk

				"elasticbeanstalk": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"beanstalk": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// elasticsearch

				"elasticsearch": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"es": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"elasticsearchservice": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// elastictranscoder

				"elastictranscoder": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// elb

				"elb": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"elasticloadbalancing": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// elbv2

				"elbv2": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"elasticloadbalancingv2": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// emr

				"emr": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// emrcontainers

				"emrcontainers": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// emrserverless

				"emrserverless": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// events

				"events": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"eventbridge": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"cloudwatchevents": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// evidently

				"evidently": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"cloudwatchevidently": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// finspace

				"finspace": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// firehose

				"firehose": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// fis

				"fis": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// fms

				"fms": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// fsx

				"fsx": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// gamelift

				"gamelift": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// glacier

				"glacier": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// globalaccelerator

				"globalaccelerator": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// glue

				"glue": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// grafana

				"grafana": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"managedgrafana": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"amg": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// greengrass

				"greengrass": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// groundstation

				"groundstation": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// guardduty

				"guardduty": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// healthlake

				"healthlake": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// iam

				"iam": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// identitystore

				"identitystore": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// imagebuilder

				"imagebuilder": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// inspector

				"inspector": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// inspector2

				"inspector2": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"inspectorv2": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// internetmonitor

				"internetmonitor": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// invoicing

				"invoicing": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// iot

				"iot": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// iotanalytics

				"iotanalytics": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// iotevents

				"iotevents": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// ivs

				"ivs": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// ivschat

				"ivschat": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// kafka

				"kafka": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"msk": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// kafkaconnect

				"kafkaconnect": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// kendra

				"kendra": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// keyspaces

				"keyspaces": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// kinesis

				"kinesis": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// kinesisanalytics

				"kinesisanalytics": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// kinesisanalyticsv2

				"kinesisanalyticsv2": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// kinesisvideo

				"kinesisvideo": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// kms

				"kms": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// lakeformation

				"lakeformation": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// lambda

				"lambda": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// launchwizard

				"launchwizard": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// lexmodels

				"lexmodels": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"lexmodelbuilding": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"lexmodelbuildingservice": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"lex": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// lexv2models

				"lexv2models": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"lexmodelsv2": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// licensemanager

				"licensemanager": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// lightsail

				"lightsail": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// location

				"location": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"locationservice": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// logs

				"logs": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"cloudwatchlog": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"cloudwatchlogs": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// lookoutmetrics

				"lookoutmetrics": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// m2

				"m2": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// macie2

				"macie2": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// mediaconnect

				"mediaconnect": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// mediaconvert

				"mediaconvert": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// medialive

				"medialive": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// mediapackage

				"mediapackage": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// mediapackagev2

				"mediapackagev2": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// mediastore

				"mediastore": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// memorydb

				"memorydb": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// mgn

				"mgn": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// mq

				"mq": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// mwaa

				"mwaa": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// neptune

				"neptune": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// neptunegraph

				"neptunegraph": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// networkfirewall

				"networkfirewall": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// networkmanager

				"networkmanager": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// networkmonitor

				"networkmonitor": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// oam

				"oam": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"cloudwatchobservabilityaccessmanager": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// opensearch

				"opensearch": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"opensearchservice": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// opensearchserverless

				"opensearchserverless": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// opsworks

				"opsworks": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// organizations

				"organizations": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// osis

				"osis": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"opensearchingestion": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// outposts

				"outposts": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// paymentcryptography

				"paymentcryptography": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// pcaconnectorad

				"pcaconnectorad": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// pcs

				"pcs": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// pinpoint

				"pinpoint": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// pinpointsmsvoicev2

				"pinpointsmsvoicev2": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// pipes

				"pipes": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// polly

				"polly": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// pricing

				"pricing": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// qbusiness

				"qbusiness": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// qldb

				"qldb": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// quicksight

				"quicksight": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// ram

				"ram": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// rbin

				"rbin": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"recyclebin": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// rds

				"rds": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// redshift

				"redshift": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// redshiftdata

				"redshiftdata": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"redshiftdataapiservice": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// redshiftserverless

				"redshiftserverless": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// rekognition

				"rekognition": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// resiliencehub

				"resiliencehub": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// resourceexplorer2

				"resourceexplorer2": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// resourcegroups

				"resourcegroups": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// resourcegroupstaggingapi

				"resourcegroupstaggingapi": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"resourcegroupstagging": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// rolesanywhere

				"rolesanywhere": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// route53

				"route53": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// route53domains

				"route53domains": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// route53profiles

				"route53profiles": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// route53recoverycontrolconfig

				"route53recoverycontrolconfig": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// route53recoveryreadiness

				"route53recoveryreadiness": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// route53resolver

				"route53resolver": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// rum

				"rum": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"cloudwatchrum": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// s3

				"s3": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"s3api": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// s3control

				"s3control": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// s3outposts

				"s3outposts": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// s3tables

				"s3tables": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// sagemaker

				"sagemaker": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// scheduler

				"scheduler": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// schemas

				"schemas": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// secretsmanager

				"secretsmanager": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// securityhub

				"securityhub": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// securitylake

				"securitylake": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// serverlessrepo

				"serverlessrepo": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"serverlessapprepo": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"serverlessapplicationrepository": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// servicecatalog

				"servicecatalog": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// servicecatalogappregistry

				"servicecatalogappregistry": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"appregistry": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// servicediscovery

				"servicediscovery": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// servicequotas

				"servicequotas": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// ses

				"ses": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// sesv2

				"sesv2": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// sfn

				"sfn": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"stepfunctions": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// shield

				"shield": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// signer

				"signer": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// simpledb

				"simpledb": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"sdb": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// sns

				"sns": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// sqs

				"sqs": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// ssm

				"ssm": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// ssmcontacts

				"ssmcontacts": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// ssmincidents

				"ssmincidents": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// ssmquicksetup

				"ssmquicksetup": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// ssmsap

				"ssmsap": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// sso

				"sso": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// ssoadmin

				"ssoadmin": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// storagegateway

				"storagegateway": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// sts

				"sts": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// swf

				"swf": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// synthetics

				"synthetics": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// taxsettings

				"taxsettings": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// timestreaminfluxdb

				"timestreaminfluxdb": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// timestreamquery

				"timestreamquery": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// timestreamwrite

				"timestreamwrite": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// transcribe

				"transcribe": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				"transcribeservice": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// transfer

				"transfer": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// verifiedpermissions

				"verifiedpermissions": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// vpclattice

				"vpclattice": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// waf

				"waf": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// wafregional

				"wafregional": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// wafv2

				"wafv2": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// wellarchitected

				"wellarchitected": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// worklink

				"worklink": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// workspaces

				"workspaces": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// workspacesweb

				"workspacesweb": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},

				// xray

				"xray": {
					Type:        schema.TypeString,
					Optional:    true,
					Description: "Use this to override the default service endpoint URL",
				},
			},
		},
	}
}

func expandEndpoints(_ context.Context, tfList []any) (map[string]string, diag.Diagnostics) {
	var diags diag.Diagnostics

	endpointsPath := cty.GetAttrPath("endpoints")

	if l := len(tfList); l > 1 {
		diags = append(diags, errs.NewAttributeWarningDiagnostic(
			endpointsPath,
			"Invalid Attribute Value",
			fmt.Sprintf("Attribute %q should have at most 1 element, got %d."+
				"\n\nThis will be an error in a future release.",
				errs.PathString(endpointsPath), l),
		))
	}

	endpoints := make(map[string]string)
	seen := make(map[string]bool)

	for i, tfMapRaw := range tfList {
		tfMap, ok := tfMapRaw.(map[string]any)

		if !ok {
			continue
		}

		elementPath := endpointsPath.IndexInt(i)

		for k, v := range tfMap {
			if seen[k] {
				continue
			}
			if v == "" {
				continue
			}
			switch k {
			case "amp", "prometheus", "prometheusservice":
				const pkg = "amp"
				attrs := []string{"amp", "prometheus", "prometheusservice"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "appautoscaling", "applicationautoscaling":
				const pkg = "appautoscaling"
				attrs := []string{"appautoscaling", "applicationautoscaling"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "appintegrations", "appintegrationsservice":
				const pkg = "appintegrations"
				attrs := []string{"appintegrations", "appintegrationsservice"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "ce", "costexplorer":
				const pkg = "ce"
				attrs := []string{"ce", "costexplorer"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "cloudcontrol", "cloudcontrolapi":
				const pkg = "cloudcontrol"
				attrs := []string{"cloudcontrol", "cloudcontrolapi"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "cloudhsmv2", "cloudhsm":
				const pkg = "cloudhsmv2"
				attrs := []string{"cloudhsmv2", "cloudhsm"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "cognitoidp", "cognitoidentityprovider":
				const pkg = "cognitoidp"
				attrs := []string{"cognitoidp", "cognitoidentityprovider"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "configservice", "config":
				const pkg = "configservice"
				attrs := []string{"configservice", "config"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "cur", "costandusagereportservice":
				const pkg = "cur"
				attrs := []string{"cur", "costandusagereportservice"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "databrew", "gluedatabrew":
				const pkg = "databrew"
				attrs := []string{"databrew", "gluedatabrew"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "deploy", "codedeploy":
				const pkg = "deploy"
				attrs := []string{"deploy", "codedeploy"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "dms", "databasemigration", "databasemigrationservice":
				const pkg = "dms"
				attrs := []string{"dms", "databasemigration", "databasemigrationservice"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "ds", "directoryservice":
				const pkg = "ds"
				attrs := []string{"ds", "directoryservice"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "elasticbeanstalk", "beanstalk":
				const pkg = "elasticbeanstalk"
				attrs := []string{"elasticbeanstalk", "beanstalk"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "elasticsearch", "es", "elasticsearchservice":
				const pkg = "elasticsearch"
				attrs := []string{"elasticsearch", "es", "elasticsearchservice"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "elb", "elasticloadbalancing":
				const pkg = "elb"
				attrs := []string{"elb", "elasticloadbalancing"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "elbv2", "elasticloadbalancingv2":
				const pkg = "elbv2"
				attrs := []string{"elbv2", "elasticloadbalancingv2"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "events", "eventbridge", "cloudwatchevents":
				const pkg = "events"
				attrs := []string{"events", "eventbridge", "cloudwatchevents"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "evidently", "cloudwatchevidently":
				const pkg = "evidently"
				attrs := []string{"evidently", "cloudwatchevidently"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "grafana", "managedgrafana", "amg":
				const pkg = "grafana"
				attrs := []string{"grafana", "managedgrafana", "amg"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "inspector2", "inspectorv2":
				const pkg = "inspector2"
				attrs := []string{"inspector2", "inspectorv2"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "kafka", "msk":
				const pkg = "kafka"
				attrs := []string{"kafka", "msk"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "lexmodels", "lexmodelbuilding", "lexmodelbuildingservice", "lex":
				const pkg = "lexmodels"
				attrs := []string{"lexmodels", "lexmodelbuilding", "lexmodelbuildingservice", "lex"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "lexv2models", "lexmodelsv2":
				const pkg = "lexv2models"
				attrs := []string{"lexv2models", "lexmodelsv2"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "location", "locationservice":
				const pkg = "location"
				attrs := []string{"location", "locationservice"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "logs", "cloudwatchlog", "cloudwatchlogs":
				const pkg = "logs"
				attrs := []string{"logs", "cloudwatchlog", "cloudwatchlogs"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "oam", "cloudwatchobservabilityaccessmanager":
				const pkg = "oam"
				attrs := []string{"oam", "cloudwatchobservabilityaccessmanager"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "opensearch", "opensearchservice":
				const pkg = "opensearch"
				attrs := []string{"opensearch", "opensearchservice"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "osis", "opensearchingestion":
				const pkg = "osis"
				attrs := []string{"osis", "opensearchingestion"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "rbin", "recyclebin":
				const pkg = "rbin"
				attrs := []string{"rbin", "recyclebin"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "redshiftdata", "redshiftdataapiservice":
				const pkg = "redshiftdata"
				attrs := []string{"redshiftdata", "redshiftdataapiservice"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "resourcegroupstaggingapi", "resourcegroupstagging":
				const pkg = "resourcegroupstaggingapi"
				attrs := []string{"resourcegroupstaggingapi", "resourcegroupstagging"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "rum", "cloudwatchrum":
				const pkg = "rum"
				attrs := []string{"rum", "cloudwatchrum"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "s3", "s3api":
				const pkg = "s3"
				attrs := []string{"s3", "s3api"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "serverlessrepo", "serverlessapprepo", "serverlessapplicationrepository":
				const pkg = "serverlessrepo"
				attrs := []string{"serverlessrepo", "serverlessapprepo", "serverlessapplicationrepository"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "servicecatalogappregistry", "appregistry":
				const pkg = "servicecatalogappregistry"
				attrs := []string{"servicecatalogappregistry", "appregistry"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "sfn", "stepfunctions":
				const pkg = "sfn"
				attrs := []string{"sfn", "stepfunctions"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "simpledb", "sdb":
				const pkg = "simpledb"
				attrs := []string{"simpledb", "sdb"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			case "transcribe", "transcribeservice":
				const pkg = "transcribe"
				attrs := []string{"transcribe", "transcribeservice"}
				for _, v := range attrs {
					seen[v] = true
				}
				count := 0
				for _, attr := range attrs {
					if v := tfMap[attr].(string); v != "" {
						count++
					}
				}
				if count > 1 {
					diags = append(diags, ConflictingEndpointsWarningDiag(elementPath, attrs...))
				}
				if endpoints[pkg] == "" {
					for _, attr := range attrs {
						if v := tfMap[attr].(string); v != "" {
							endpoints[pkg] = v
							break
						}
					}
				}

			default:
				seen[k] = true
				if endpoints[k] == "" {
					endpoints[k] = v.(string)
				}
			}
		}
	}
	if diags.HasError() {
		return nil, diags
	}

	expandEndpointsCustomEnvVars(endpoints, &diags)

	return endpoints, diags
}

func expandEndpointsCustomEnvVars(endpoints map[string]string, diags *diag.Diagnostics) {
	expandEndpointCustomEnvVars("dynamodb", "AWS_ENDPOINT_URL_DYNAMODB", "TF_AWS_DYNAMODB_ENDPOINT", "AWS_DYNAMODB_ENDPOINT", endpoints, diags)

	expandEndpointCustomEnvVars("iam", "AWS_ENDPOINT_URL_IAM", "TF_AWS_IAM_ENDPOINT", "AWS_IAM_ENDPOINT", endpoints, diags)

	expandEndpointCustomEnvVars("s3", "AWS_ENDPOINT_URL_S3", "TF_AWS_S3_ENDPOINT", "AWS_S3_ENDPOINT", endpoints, diags)

	expandEndpointCustomEnvVars("sts", "AWS_ENDPOINT_URL_STS", "TF_AWS_STS_ENDPOINT", "AWS_STS_ENDPOINT", endpoints, diags)
}

func expandEndpointCustomEnvVars(pkg, awsEnvVar, tfAwsEnvVar, deprecatedEnvVar string, endpoints map[string]string, diags *diag.Diagnostics) {
	if endpoints[pkg] == "" {
		if v := os.Getenv(awsEnvVar); v != "" {
			endpoints[pkg] = v
			return
		}

		if v := os.Getenv(tfAwsEnvVar); v != "" {
			*diags = append(*diags, DeprecatedEnvVarDiag(tfAwsEnvVar, awsEnvVar))
			endpoints[pkg] = v
			return
		}

		if v := os.Getenv(deprecatedEnvVar); v != "" {
			*diags = append(*diags, DeprecatedEnvVarDiag(deprecatedEnvVar, awsEnvVar))
			endpoints[pkg] = v
			return
		}

	}
}
