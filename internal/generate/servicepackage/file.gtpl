// Code generated by internal/generate/servicepackage/main.go; DO NOT EDIT.

package {{ .ProviderPackage }}

import (
	"context"

{{ if .GenerateClient }}
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/service/{{ .GoV2Package }}"
{{- end }}
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	"github.com/hashicorp/terraform-provider-aws/internal/types"
{{- if ne .ProviderPackage "meta" }}
	"github.com/hashicorp/terraform-provider-aws/names"
{{- end }}
)

type servicePackage struct {}

{{- if .EphemeralResources }}
func (p *servicePackage) EphemeralResources(ctx context.Context) []*types.ServicePackageEphemeralResource {
	return []*types.ServicePackageEphemeralResource {
{{- range $key, $value := .EphemeralResources }}
		{
			Factory:  {{ $value.FactoryName }},
			TypeName: "{{ $key }}",
			Name:     "{{ $value.Name }}",
		},
{{- end }}
	}
}
{{- end }}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*types.ServicePackageFrameworkDataSource {
	return []*types.ServicePackageFrameworkDataSource {
{{- range $key, $value := .FrameworkDataSources }}
		{
			Factory: {{ $value.FactoryName }},
			TypeName: "{{ $key }}",
			Name:    "{{ $value.Name }}",
			{{- if .TransparentTagging }}
			Tags: &types.ServicePackageResourceTags {
				{{- if ne .TagsIdentifierAttribute "" }}
				IdentifierAttribute: {{ .TagsIdentifierAttribute }},
				{{- end }}
				{{- if ne .TagsResourceType "" }}
				ResourceType: "{{ .TagsResourceType }}",
				{{- end }}
			},
			{{- end }}
		},
{{- end }}
	}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*types.ServicePackageFrameworkResource {
	return []*types.ServicePackageFrameworkResource {
{{- range $key, $value := .FrameworkResources }}
		{
			Factory:  {{ $value.FactoryName }},
			TypeName: "{{ $key }}",
			Name:     "{{ $value.Name }}",
			{{- if .TransparentTagging }}
			Tags: &types.ServicePackageResourceTags {
				{{- if ne .TagsIdentifierAttribute "" }}
				IdentifierAttribute: {{ .TagsIdentifierAttribute }},
				{{- end }}
				{{- if ne .TagsResourceType "" }}
				ResourceType: "{{ .TagsResourceType }}",
				{{- end }}
			},
			{{- end }}
		},
{{- end }}
	}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*types.ServicePackageSDKDataSource {
	return []*types.ServicePackageSDKDataSource {
{{- range $key, $value := .SDKDataSources }}
		{
			Factory:  {{ $value.FactoryName }},
			TypeName: "{{ $key }}",
			Name:     "{{ $value.Name }}",
			{{- if $value.TransparentTagging }}
			Tags: &types.ServicePackageResourceTags {
				{{- if ne $value.TagsIdentifierAttribute "" }}
				IdentifierAttribute: {{ $value.TagsIdentifierAttribute }},
				{{- end }}
				{{- if ne .TagsResourceType "" }}
				ResourceType: "{{ .TagsResourceType }}",
				{{- end }}
			},
			{{- end }}
		},
{{- end }}
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*types.ServicePackageSDKResource {
	return []*types.ServicePackageSDKResource {
{{- range $key, $value := .SDKResources }}
		{
			Factory:  {{ $value.FactoryName }},
			TypeName: "{{ $key }}",
			Name:     "{{ $value.Name }}",
			{{- if $value.TransparentTagging }}
			Tags: &types.ServicePackageResourceTags {
				{{- if ne $value.TagsIdentifierAttribute "" }}
				IdentifierAttribute: {{ $value.TagsIdentifierAttribute }},
				{{- end }}
				{{- if ne .TagsResourceType "" }}
				ResourceType: "{{ .TagsResourceType }}",
				{{- end }}
			},
			{{- end }}
		},
{{- end }}
	}
}

func (p *servicePackage) ServicePackageName() string {
{{- if eq .ProviderPackage "meta" }}
	return "{{ .ProviderPackage }}"
{{- else }}
	return names.{{ .ProviderNameUpper }}
{{- end }}
}

{{- if .GenerateClient }}
// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*{{ .GoV2Package }}.Client, error) {
	cfg := *(config["aws_sdkv2_config"].(*aws.Config))

	return {{ .GoV2Package }}.NewFromConfig(cfg,
		{{ .GoV2Package }}.WithEndpointResolverV2(newEndpointResolverV2()),
		withBaseEndpoint(config[names.AttrEndpoint].(string)),
	), nil
}
{{- end }}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
