// Code generated by internal/generate/servicepackage/main.go; DO NOT EDIT.

{{ define "IdentifierAttribute" -}}
inttypes.StringIdentityAttribute(
	{{- .Name }},
	{{- if .Optional }}false{{ else }}true{{ end -}}
),
{{- end }}

package {{ .ProviderPackage }}

import (
	"context"
	"unique"

{{ if .GenerateClient }}
	"github.com/aws/aws-sdk-go-v2/aws"
	"github.com/aws/aws-sdk-go-v2/aws/retry"
	"github.com/aws/aws-sdk-go-v2/service/{{ .GoV2Package }}"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/hashicorp/terraform-provider-aws/internal/vcr"
{{- end }}
{{- if gt (len .EndpointRegionOverrides) 0 }}
	"github.com/hashicorp/aws-sdk-go-base/v2/endpoints"
{{- end }}
	"github.com/hashicorp/terraform-provider-aws/internal/conns"
	inttypes "github.com/hashicorp/terraform-provider-aws/internal/types"
{{- if ne .ProviderPackage "meta" }}
	"github.com/hashicorp/terraform-provider-aws/names"
{{- end }}
	{{ range .GoImports -}}
	{{ if .Alias }}{{ .Alias }} {{ end }}"{{ .Path }}"
	{{ end }}
)

type servicePackage struct {}

{{- if .EphemeralResources }}
func (p *servicePackage) EphemeralResources(ctx context.Context) []*inttypes.ServicePackageEphemeralResource {
	return []*inttypes.ServicePackageEphemeralResource {
{{- range $key, $value := .EphemeralResources }}
	{{- $regionOverrideEnabled := and (not $.IsGlobal) $value.RegionOverrideEnabled }}
		{
			Factory:  {{ $value.FactoryName }},
			TypeName: "{{ $key }}",
			Name:     "{{ $value.Name }}",
	{{- if and $regionOverrideEnabled $value.ValidateRegionOverrideInPartition }}
			Region: unique.Make(inttypes.ResourceRegionDefault()),
	{{- else if not $regionOverrideEnabled }}
			Region: unique.Make(inttypes.ResourceRegionDisabled()),
	{{- else }}
			Region: unique.Make(inttypes.ServicePackageResourceRegion {
				IsOverrideEnabled:             {{ $regionOverrideEnabled }},
				IsValidateOverrideInPartition: {{ $value.ValidateRegionOverrideInPartition }},
			}),
	{{- end }}
		},
{{- end }}
	}
}
{{- end }}

func (p *servicePackage) FrameworkDataSources(ctx context.Context) []*inttypes.ServicePackageFrameworkDataSource {
	return []*inttypes.ServicePackageFrameworkDataSource {
{{- range $key, $value := .FrameworkDataSources }}
	{{- $regionOverrideEnabled := and (not $.IsGlobal) $value.RegionOverrideEnabled }}
		{
			Factory:  {{ $value.FactoryName }},
			TypeName: "{{ $key }}",
			Name:     "{{ $value.Name }}",
			{{- if .TransparentTagging }}
			Tags: unique.Make(inttypes.ServicePackageResourceTags {
				{{- if ne .TagsIdentifierAttribute "" }}
				IdentifierAttribute: {{ .TagsIdentifierAttribute }},
				{{- end }}
				{{- if ne .TagsResourceType "" }}
				ResourceType: "{{ .TagsResourceType }}",
				{{- end }}
			}),
			{{- end }}
	{{- if and $regionOverrideEnabled $value.ValidateRegionOverrideInPartition }}
			Region: unique.Make(inttypes.ResourceRegionDefault()),
	{{- else if not $regionOverrideEnabled }}
			Region: unique.Make(inttypes.ResourceRegionDisabled()),
	{{- else }}
			Region: unique.Make(inttypes.ServicePackageResourceRegion {
				IsOverrideEnabled:             {{ $regionOverrideEnabled }},
				IsValidateOverrideInPartition: {{ $value.ValidateRegionOverrideInPartition }},
			}),
	{{- end }}
		},
{{- end }}
	}
}

func (p *servicePackage) FrameworkResources(ctx context.Context) []*inttypes.ServicePackageFrameworkResource {
	return []*inttypes.ServicePackageFrameworkResource {
{{- range $key, $value := .FrameworkResources }}
	{{- $regionOverrideEnabled := and (not $.IsGlobal) $value.RegionOverrideEnabled }}
		{
			Factory:  {{ $value.FactoryName }},
			TypeName: "{{ $key }}",
			Name:     "{{ $value.Name }}",
			{{- if .TransparentTagging }}
			Tags: unique.Make(inttypes.ServicePackageResourceTags {
				{{- if ne .TagsIdentifierAttribute "" }}
				IdentifierAttribute: {{ .TagsIdentifierAttribute }},
				{{- end }}
				{{- if ne .TagsResourceType "" }}
				ResourceType: "{{ .TagsResourceType }}",
				{{- end }}
			}),
			{{- end }}
	{{- if and $regionOverrideEnabled $value.ValidateRegionOverrideInPartition }}
			Region: unique.Make(inttypes.ResourceRegionDefault()),
	{{- else if not $regionOverrideEnabled }}
			Region: unique.Make(inttypes.ResourceRegionDisabled()),
	{{- else }}
			Region: unique.Make(inttypes.ServicePackageResourceRegion {
				IsOverrideEnabled:             {{ $regionOverrideEnabled }},
				IsValidateOverrideInPartition: {{ $value.ValidateRegionOverrideInPartition }},
			}),
	{{- end }}
			{{- if not $value.MutableIdentity }}
				{{- if gt (len $value.IdentityAttributes) 1 }}
					{{- if or $.IsGlobal $value.IsGlobal }}
						Identity: inttypes.GlobalParameterizedIdentity([]inttypes.IdentityAttribute{
							{{- range $value.IdentityAttributes }}
								{{ template "IdentifierAttribute" . }}
							{{- end }}
						}),
					{{- else }}
						Identity: inttypes.RegionalParameterizedIdentity([]inttypes.IdentityAttribute{
							{{- range $value.IdentityAttributes }}
								{{ template "IdentifierAttribute" . }}
							{{- end }}
						}),
					{{- end }}
				{{- else if gt (len $value.IdentityAttributes) 0 }}
					{{- if or $.IsGlobal $value.IsGlobal }}
						Identity: inttypes.GlobalSingleParameterIdentity(
							{{- range $value.IdentityAttributes -}}
								{{ .Name }}
							{{- end -}}
						),
					{{- else }}
						Identity: inttypes.RegionalSingleParameterIdentity(
							{{- range $value.IdentityAttributes -}}
								{{ .Name }}
							{{- end -}}
						),
					{{- end }}
				{{- else if $value.ARNIdentity }}
					{{- if $.IsGlobal }}
						{{- if $value.HasARNAttribute }}
							Identity: inttypes.GlobalARNIdentityNamed({{ $value.ARNAttribute }},
						{{- else }}
							Identity: inttypes.GlobalARNIdentity(
						{{- end }}
					{{- else }}
						{{- if $value.IsARNFormatGlobal }}
							{{- if $value.HasARNAttribute }}
								Identity: inttypes.RegionalResourceWithGlobalARNFormatNamed({{ $value.ARNAttribute }},
							{{- else }}
								Identity: inttypes.RegionalResourceWithGlobalARNFormat(
							{{- end }}
						{{- else }}
							{{- if $value.HasARNAttribute }}
								Identity: inttypes.RegionalARNIdentityNamed({{ $value.ARNAttribute }},
							{{- else }}
								Identity: inttypes.RegionalARNIdentity(
							{{- end }}
						{{- end }}
					{{- end }}
						{{- if .HasIdentityDuplicateAttrs -}}
							inttypes.WithIdentityDuplicateAttrs({{ range .IdentityDuplicateAttrs }}{{ . }}, {{ end }})
						{{- end -}}
						),
				{{- else if $value.SingletonIdentity }}
					{{- if or $.IsGlobal $value.IsGlobal }}
						Identity: inttypes.GlobalSingletonIdentity(
							{{- if .HasIdentityDuplicateAttrs -}}
								inttypes.WithIdentityDuplicateAttrs({{ range .IdentityDuplicateAttrs }}{{ . }}, {{ end }})
							{{- end -}}
						),
					{{ else }}
						Identity: inttypes.RegionalSingletonIdentity(
							{{- if .HasIdentityDuplicateAttrs -}}
								inttypes.WithIdentityDuplicateAttrs({{ range .IdentityDuplicateAttrs }}{{ . }}, {{ end }})
							{{- end -}}
						),
					{{- end }}
				{{- end }}
				{{- if $value.WrappedImport }}
					Import: inttypes.FrameworkImport{
						WrappedImport: true,
						{{- if ne $value.ImportIDHandler "" }}
							ImportID: {{ $value.ImportIDHandler }}{},
						{{- end }}
						{{- if $value.SetIDAttribute }}
							SetIDAttr: true,
						{{- end }}
					},
				{{- end }}
			{{- end }}
		},
{{- end }}
	}
}

func (p *servicePackage) SDKDataSources(ctx context.Context) []*inttypes.ServicePackageSDKDataSource {
	return []*inttypes.ServicePackageSDKDataSource {
{{- range $key, $value := .SDKDataSources }}
	{{- $regionOverrideEnabled := and (not $.IsGlobal) $value.RegionOverrideEnabled }}
		{
			Factory:  {{ $value.FactoryName }},
			TypeName: "{{ $key }}",
			Name:     "{{ $value.Name }}",
			{{- if $value.TransparentTagging }}
			Tags: unique.Make(inttypes.ServicePackageResourceTags {
				{{- if ne $value.TagsIdentifierAttribute "" }}
				IdentifierAttribute: {{ $value.TagsIdentifierAttribute }},
				{{- end }}
				{{- if ne .TagsResourceType "" }}
				ResourceType: "{{ .TagsResourceType }}",
				{{- end }}
			}),
			{{- end }}
	{{- if and $regionOverrideEnabled $value.ValidateRegionOverrideInPartition }}
			Region: unique.Make(inttypes.ResourceRegionDefault()),
	{{- else if not $regionOverrideEnabled }}
			Region: unique.Make(inttypes.ResourceRegionDisabled()),
	{{- else }}
			Region: unique.Make(inttypes.ServicePackageResourceRegion {
				IsOverrideEnabled:             {{ $regionOverrideEnabled }},
				IsValidateOverrideInPartition: {{ $value.ValidateRegionOverrideInPartition }},
			}),
	{{- end }}
		},
{{- end }}
	}
}

func (p *servicePackage) SDKResources(ctx context.Context) []*inttypes.ServicePackageSDKResource {
	return []*inttypes.ServicePackageSDKResource {
{{- range $key, $value := .SDKResources }}
	{{- $regionOverrideEnabled := and (not $.IsGlobal) $value.RegionOverrideEnabled }}
		{
			Factory:  {{ $value.FactoryName }},
			TypeName: "{{ $key }}",
			Name:     "{{ $value.Name }}",
			{{- if $value.TransparentTagging }}
			Tags: unique.Make(inttypes.ServicePackageResourceTags {
				{{- if ne $value.TagsIdentifierAttribute "" }}
				IdentifierAttribute: {{ $value.TagsIdentifierAttribute }},
				{{- end }}
				{{- if ne .TagsResourceType "" }}
				ResourceType: "{{ .TagsResourceType }}",
				{{- end }}
			}),
			{{- end }}
	{{- if and $regionOverrideEnabled $value.ValidateRegionOverrideInPartition }}
			Region: unique.Make(inttypes.ResourceRegionDefault()),
	{{- else if not $regionOverrideEnabled }}
			Region: unique.Make(inttypes.ResourceRegionDisabled()),
	{{- else }}
			Region: unique.Make(inttypes.ServicePackageResourceRegion {
				IsOverrideEnabled:             {{ $regionOverrideEnabled }},
				IsValidateOverrideInPartition: {{ $value.ValidateRegionOverrideInPartition }},
			}),
	{{- end }}
			{{- if not $value.MutableIdentity }}
				{{- if gt (len $value.IdentityAttributes) 1 }}
					{{- if or $.IsGlobal $value.IsGlobal }}
						Identity: inttypes.GlobalParameterizedIdentity([]inttypes.IdentityAttribute{
							{{- range $value.IdentityAttributes }}
								{{ template "IdentifierAttribute" . }}
							{{- end }}
						},
						{{- if $value.HasV6_0SDKv2Fix }}
							inttypes.WithV6_0SDKv2Fix(),
						{{ end -}}
						),
					{{- else }}
						Identity: inttypes.RegionalParameterizedIdentity([]inttypes.IdentityAttribute{
							{{- range $value.IdentityAttributes }}
								{{ template "IdentifierAttribute" . }}
							{{- end }}
						},
						{{- if $value.HasV6_0SDKv2Fix }}
							inttypes.WithV6_0SDKv2Fix(),
						{{ end -}}
						),
					{{- end }}
				{{- else if gt (len $value.IdentityAttributes) 0 }}
					{{- if or $.IsGlobal $value.IsGlobal }}
						Identity: inttypes.GlobalSingleParameterIdentity(
							{{- range $value.IdentityAttributes -}}
								{{ .Name }},
							{{- end -}}
							{{- if $value.HasV6_0SDKv2Fix }}
								inttypes.WithV6_0SDKv2Fix(),
							{{ end -}}
						),
					{{- else }}
						Identity: inttypes.RegionalSingleParameterIdentity(
							{{- range $value.IdentityAttributes -}}
								{{ .Name }},
							{{- end }}
							{{- if $value.HasV6_0SDKv2Fix }}
								inttypes.WithV6_0SDKv2Fix(),
							{{ end -}}
						),
					{{- end }}
				{{- else if $value.ARNIdentity }}
					{{- if $.IsGlobal }}
						{{- if $value.HasARNAttribute }}
							Identity: inttypes.GlobalARNIdentityNamed({{ $value.ARNAttribute }},
								inttypes.WithIdentityDuplicateAttrs(names.AttrID),
							{{- if $value.HasV6_0SDKv2Fix }}
								inttypes.WithV6_0SDKv2Fix(),
							{{ end -}}
							),
						{{- else }}
							Identity: inttypes.GlobalARNIdentity(
								inttypes.WithIdentityDuplicateAttrs(names.AttrID),
							{{- if $value.HasV6_0SDKv2Fix }}
								inttypes.WithV6_0SDKv2Fix(),
							{{ end -}}
							),
						{{- end }}
					{{- else }}
						{{- if $value.HasARNAttribute }}
							Identity: inttypes.RegionalARNIdentityNamed({{ $value.ARNAttribute }},
								inttypes.WithIdentityDuplicateAttrs(names.AttrID),
							{{- if $value.HasV6_0SDKv2Fix }}
								inttypes.WithV6_0SDKv2Fix(),
							{{ end -}}
							),
						{{- else }}
							Identity: inttypes.RegionalARNIdentity(
								inttypes.WithIdentityDuplicateAttrs(names.AttrID),
							{{- if $value.HasV6_0SDKv2Fix }}
								inttypes.WithV6_0SDKv2Fix(),
							{{ end -}}
							),
						{{- end }}
					{{- end }}
				{{- else if $value.SingletonIdentity }}
					{{- if or $.IsGlobal $value.IsGlobal }}
						Identity: inttypes.GlobalSingletonIdentity(
							{{- if $value.HasV6_0SDKv2Fix }}
								inttypes.WithV6_0SDKv2Fix(),
							{{ end -}}
						),
					{{- else }}
						Identity: inttypes.RegionalSingletonIdentity(
							{{- if $value.HasV6_0SDKv2Fix }}
								inttypes.WithV6_0SDKv2Fix(),
							{{ end -}}
						),
					{{- end }}
				{{- end }}
				{{- if $value.WrappedImport }}
					Import: inttypes.SDKv2Import{
						WrappedImport: true,
						{{- if ne $value.ImportIDHandler "" }}
							ImportID: {{ $value.ImportIDHandler }}{},
						{{- end }}
					},
				{{- end }}
			{{- end }}
		},
{{- end }}
	}
}

func (p *servicePackage) ServicePackageName() string {
{{- if eq .ProviderPackage "meta" }}
	return "{{ .ProviderPackage }}"
{{- else }}
	return names.{{ .ProviderNameUpper }}
{{- end }}
}

{{- if .GenerateClient }}
// NewClient returns a new AWS SDK for Go v2 client for this service package's AWS API.
func (p *servicePackage) NewClient(ctx context.Context, config map[string]any) (*{{ .GoV2Package }}.Client, error) {
	cfg := *(config["aws_sdkv2_config"].(*aws.Config))
	optFns := []func(*{{ .GoV2Package }}.Options){
		{{ .GoV2Package }}.WithEndpointResolverV2(newEndpointResolverV2()),
		withBaseEndpoint(config[names.AttrEndpoint].(string)),
		func(o *{{ .GoV2Package }}.Options) {
			if region := config[names.AttrRegion].(string); o.Region != region {
				tflog.Info(ctx, "overriding provider-configured AWS API region", map[string]any{
					"service":         p.ServicePackageName(),
					"original_region": o.Region,
					"override_region": region,
				})
				o.Region = region
			}
		},
		func(o *{{ .GoV2Package }}.Options) {
			if inContext, ok := conns.FromContext(ctx); ok && inContext.VCREnabled() {
				tflog.Info(ctx, "overriding retry behavior to immediately return VCR errors")
				o.Retryer = conns.AddIsErrorRetryables(cfg.Retryer().(aws.RetryerV2), retry.IsErrorRetryableFunc(vcr.InteractionNotFoundRetryableFunc))
			}
		},
{{- if gt (len .EndpointRegionOverrides) 0 }}
		func(o *{{ .GoV2Package }}.Options) {
			switch partition := config["partition"].(string); partition {
	{{- range $k, $v := .EndpointRegionOverrides }}
			case endpoints.{{ $k | Camel }}PartitionID:
				if region := endpoints.{{ $v | Camel }}RegionID; o.Region != region {
					tflog.Info(ctx, "overriding effective AWS API region", map[string]any{
					    "service":         p.ServicePackageName(),
						"original_region": o.Region,
						"override_region": region,
					})
					o.Region = region
				}
	{{- end }}
			}
		},
{{- end }}
		withExtraOptions(ctx, p, config),
	}

	return {{ .GoV2Package }}.NewFromConfig(cfg, optFns...), nil
}

// withExtraOptions returns a functional option that allows this service package to specify extra API client options.
// This option is always called after any generated options.
func withExtraOptions(ctx context.Context, sp conns.ServicePackage, config map[string]any) func(*{{ .GoV2Package }}.Options) {
	if v, ok := sp.(interface {
		withExtraOptions(context.Context, map[string]any) []func(*{{ .GoV2Package }}.Options)
	}); ok {
		optFns := v.withExtraOptions(ctx, config)

		return func(o *{{ .GoV2Package }}.Options) {
			for _, optFn := range optFns {
				optFn(o)
			}
		}
	}

	return func (*{{ .GoV2Package }}.Options) {}
}
{{- end }}

func ServicePackage(ctx context.Context) conns.ServicePackage {
	return &servicePackage{}
}
