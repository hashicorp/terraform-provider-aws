---
subcategory: ""
layout: "aws"
page_title: "Terraform AWS Provider Custom Service Endpoint Configuration"
description: |-
  Configuring the Terraform AWS Provider to connect to custom AWS service endpoints and AWS compatible solutions.
---

<!-- Generated by internal/generate/customends/main.go; DO NOT EDIT. -->

# Custom Service Endpoint Configuration

The Terraform AWS Provider configuration can be customized to connect to non-default AWS service endpoints and AWS compatible solutions. This may be useful for environments with specific compliance requirements, such as using [AWS FIPS 140-2 endpoints](https://aws.amazon.com/compliance/fips/), connecting to AWS Snowball, SC2S, or C2S environments, or local testing.

This guide outlines how to get started with customizing endpoints, the available endpoint configurations, and offers example configurations for working with certain local development and testing solutions.

~> **NOTE:** Support for connecting the Terraform AWS Provider with custom endpoints and AWS compatible solutions is offered as best effort. Individual Terraform resources may require compatibility updates to work in certain environments. Integration testing by HashiCorp during provider changes is exclusively done against default AWS endpoints at this time.

<!-- TOC depthFrom:2 -->

- [Getting Started with Custom Endpoints](#getting-started-with-custom-endpoints)
- [mTLS (Mutual TLS) Authentication](#mtls-mutual-tls-authentication)
- [Available Endpoint Customizations](#available-endpoint-customizations)
- [Connecting to Local AWS Compatible Solutions](#connecting-to-local-aws-compatible-solutions)
    - [DynamoDB Local](#dynamodb-local)
    - [LocalStack](#localstack)

<!-- /TOC -->

## Getting Started with Custom Endpoints

Custom endpoints can be configured for the Terraform AWS Provider by configuring them directly on the provider, using environment variables, or by using an [AWS shared configuration file](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html).

To configure endpoints on the provider, set the values in the `endpoints` block in the  `provider` declarations, e.g.,

```terraform
provider "aws" {
  # ... potentially other provider configuration ...

  endpoints {
    dynamodb = "http://localhost:4569"
    s3       = "http://localhost:4572"
  }
}
```

Environment variables can be used to set all endpoints to one value, using `AWS_ENDPOINT_URL`.
Individual services can be configured using an environment variable of the form `AWS_ENDPOINT_URL_<SERVICE>`, where `<SERVICE>` is the `serviceID` of the service defined in the AWS SDK for Go v2, with spaces replaced by underscores (`_`) and all uppercase. For example, the environment variable for DynamoDB is `AWS_ENDPOINT_URL_DYNAMODB`.

Shared configuration files can be used to set all endpoints to one value, using the parameter `endpoint_url` in a named profile.
Individual services can be configured using the shared configuration file by creating a [`services` section](https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-files.html#cli-configure-files-format-services) and setting the corresponding service identifier.
Service identifiers are the `serviceID` of the service defined in the AWS SDK for Go v2, with spaces replaced by underscores (`_`) and all lowercase. For example, the identifier for DynamoDB is `dynamodb`.

The environment variable `AWS_IGNORE_CONFIGURED_ENDPOINT_URLS` or the shared configuration file parameter `ignore_configure_endpoint_urls` will cause endpoints configured using environment variables or the shared configuration file to be ignored.

Endpoints are evaluated in the following order:

1. Endpoints defined on the provider.
1. Setting the environment variable `AWS_IGNORE_CONFIGURED_ENDPOINT_URLS` or the shared configuration file parameter `ignore_configure_endpoint_urls` ignores custom endpoints.
1. Service-specific endpoints defined using environment variables of the form `AWS_ENDPOINT_URL_<SERVICE>`.
1. Base endpoint defined using the environment variable `AWS_ENDPOINT_URL`.
1. Service-specific endpoints defined in the shared configuration file.
1. Base endpoint defined in the shared configuration file.
1. Default service endpoint.

If multiple, different Terraform AWS Provider configurations are required, see the [Terraform documentation on multiple provider instances](https://www.terraform.io/docs/configuration/providers.html#alias-multiple-provider-instances) for additional information about the `alias` provider configuration and its usage.

## mTLS (Mutual TLS) Authentication

The Terraform AWS Provider supports mutual TLS (mTLS) authentication for secure communication with AWS services or AWS-compatible endpoints that require client certificate authentication.
This is particularly useful in high-security environments, government clouds, or when connecting to on-premises AWS-compatible services.

### Configuring mTLS

mTLS can be configured using provider arguments or environment variables:

```terraform
provider "aws" {
  region                          = "us-east-1"
  client_certificate              = "/path/to/client-cert.pem"
  client_private_key              = "/path/to/client-key.pem"
  client_private_key_passphrase   = "optional-passphrase"
  custom_ca_bundle                = "/path/to/ca-bundle.pem"
  
  # Custom endpoints that require mTLS
  endpoints {
    s3       = "https://s3.example.com"
    dynamodb = "https://dynamodb.example.com"
  }
}
```

Alternatively, use environment variables:

```bash
export AWS_CLIENT_CERTIFICATE="/path/to/client-cert.pem"
export AWS_CLIENT_PRIVATE_KEY="/path/to/client-key.pem"
export AWS_CLIENT_PRIVATE_KEY_PASSPHRASE="optional-passphrase"
export AWS_CA_BUNDLE="/path/to/ca-bundle.pem"
```

### mTLS Configuration Options

* `client_certificate` - Path to the client certificate file in PEM format. Can also be set using the `AWS_CLIENT_CERTIFICATE` environment variable.
* `client_private_key` - Path to the client private key file in PEM format. Can also be set using the `AWS_CLIENT_PRIVATE_KEY` environment variable.
* `client_private_key_passphrase` - (Optional) Passphrase for encrypted private key files. Can also be set using the `AWS_CLIENT_PRIVATE_KEY_PASSPHRASE` environment variable.
* `custom_ca_bundle` - (Optional) Path to custom CA certificate bundle for verifying server certificates. Can also be set using the `AWS_CA_BUNDLE` environment variable.

### Certificate Requirements

* **Client Certificate**: Must be in PEM format and contain the full certificate chain if intermediate certificates are required.
* **Private Key**: Must be in PEM format. Both encrypted (with passphrase) and unencrypted keys are supported.
* **CA Bundle**: Should contain the root and intermediate certificates needed to verify the server's certificate chain.

### Example Use Cases

* **Government Clouds**: Connecting to AWS GovCloud or other government cloud environments that require mTLS.
* **On-Premises AWS Services**: Connecting to AWS Outposts, AWS Snowball, or other on-premises AWS services.
* **Custom AWS-Compatible Services**: Connecting to MinIO, LocalStack, or other services that implement AWS APIs with mTLS requirements.

**NOTE:** mTLS configuration applies to all AWS service connections made by the provider. Ensure the certificates are valid for all endpoints the client plans to use.

## Available Endpoint Customizations

The Terraform AWS Provider allows the following endpoints to be customized.

**Note:** The Provider allows some service endpoints to be customized despite not supporting those services.

**Note:** For backward compatibility, some endpoints can be assigned using multiple service "keys" (_e.g._, `dms`, `databasemigration`, or `databasemigrationservice`). If you use more than one equivalent service key in your configuration, the provider will use the _first_ endpoint value set. For example, in the configuration below we have set the DMS service endpoints using both `dms` and `databasemigration`. The provider will set the endpoint to whichever appears first. Subsequent values are ignored.

```terraform
provider "aws" {
  endpoints {
    dms               = "http://this.value.will.be.used.com"
    databasemigration = "http://this.value.will.be.ignored.com"
  }
}
```
